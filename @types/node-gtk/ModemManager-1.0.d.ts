/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * ModemManager-1.0
 */

import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';

export namespace ModemManager {

enum BearerAccessTypePreference {
    NONE,
    TODO_3GPP_ONLY,
    TODO_3GPP_PREFERRED,
    NON_3GPP_ONLY,
}
enum BearerIpMethod {
    UNKNOWN,
    PPP,
    STATIC,
    DHCP,
}
enum BearerMultiplexSupport {
    UNKNOWN,
    NONE,
    REQUESTED,
    REQUIRED,
}
enum BearerProfileSource {
    UNKNOWN,
    ADMIN,
    USER,
    OPERATOR,
    MODEM,
    DEVICE,
}
enum BearerType {
    UNKNOWN,
    DEFAULT,
    DEFAULT_ATTACH,
    DEDICATED,
}
enum CallDirection {
    UNKNOWN,
    INCOMING,
    OUTGOING,
}
enum CallState {
    UNKNOWN,
    DIALING,
    RINGING_OUT,
    RINGING_IN,
    ACTIVE,
    HELD,
    WAITING,
    TERMINATED,
}
enum CallStateReason {
    UNKNOWN,
    OUTGOING_STARTED,
    INCOMING_NEW,
    ACCEPTED,
    TERMINATED,
    REFUSED_OR_BUSY,
    ERROR,
    AUDIO_SETUP_FAILED,
    TRANSFERRED,
    DEFLECTED,
}
enum CdmaActivationError {
    NONE,
    UNKNOWN,
    ROAMING,
    WRONGRADIOINTERFACE,
    COULDNOTCONNECT,
    SECURITYAUTHENTICATIONFAILED,
    PROVISIONINGFAILED,
    NOSIGNAL,
    TIMEDOUT,
    STARTFAILED,
}
enum CellType {
    UNKNOWN,
    CDMA,
    GSM,
    UMTS,
    TDSCDMA,
    LTE,
    TODO_5GNR,
}
enum ConnectionError {
    UNKNOWN,
    NOCARRIER,
    NODIALTONE,
    BUSY,
    NOANSWER,
}
enum CoreError {
    FAILED,
    CANCELLED,
    ABORTED,
    UNSUPPORTED,
    NOPLUGINS,
    UNAUTHORIZED,
    INVALIDARGS,
    INPROGRESS,
    WRONGSTATE,
    CONNECTED,
    TOOMANY,
    NOTFOUND,
    RETRY,
    EXISTS,
}
enum FirmwareImageType {
    UNKNOWN,
    GENERIC,
    GOBI,
}
enum MessageError {
    MEFAILURE,
    SMSSERVICERESERVED,
    NOTALLOWED,
    NOTSUPPORTED,
    INVALIDPDUPARAMETER,
    INVALIDTEXTPARAMETER,
    SIMNOTINSERTED,
    SIMPIN,
    PHSIMPIN,
    SIMFAILURE,
    SIMBUSY,
    SIMWRONG,
    SIMPUK,
    SIMPIN2,
    SIMPUK2,
    MEMORYFAILURE,
    INVALIDINDEX,
    MEMORYFULL,
    SMSCADDRESSUNKNOWN,
    NONETWORK,
    NETWORKTIMEOUT,
    NOCNMAACKEXPECTED,
    UNKNOWN,
}
enum MobileEquipmentError {
    PHONEFAILURE,
    NOCONNECTION,
    LINKRESERVED,
    NOTALLOWED,
    NOTSUPPORTED,
    PHSIMPIN,
    PHFSIMPIN,
    PHFSIMPUK,
    SIMNOTINSERTED,
    SIMPIN,
    SIMPUK,
    SIMFAILURE,
    SIMBUSY,
    SIMWRONG,
    INCORRECTPASSWORD,
    SIMPIN2,
    SIMPUK2,
    MEMORYFULL,
    INVALIDINDEX,
    NOTFOUND,
    MEMORYFAILURE,
    TEXTTOOLONG,
    INVALIDCHARS,
    DIALSTRINGTOOLONG,
    DIALSTRINGINVALID,
    NONETWORK,
    NETWORKTIMEOUT,
    NETWORKNOTALLOWED,
    NETWORKPIN,
    NETWORKPUK,
    NETWORKSUBSETPIN,
    NETWORKSUBSETPUK,
    SERVICEPIN,
    SERVICEPUK,
    CORPPIN,
    CORPPUK,
    HIDDENKEYREQUIRED,
    EAPMETHODNOTSUPPORTED,
    INCORRECTPARAMETERS,
    COMMANDDISABLED,
    COMMANDABORTED,
    NOTATTACHEDRESTRICTED,
    NOTALLOWEDEMERGENCYONLY,
    NOTALLOWEDRESTRICTED,
    FIXEDDIALNUMBERONLY,
    TEMPORARILYOUTOFSERVICE,
    LANGUAGEORALPHABETNOTSUPPORTED,
    UNEXPECTEDDATAVALUE,
    SYSTEMFAILURE,
    DATAMISSING,
    CALLBARRED,
    MESSAGEWAITINGINDICATIONSUBSCRIPTIONFAILURE,
    UNKNOWN,
    IMSIUNKNOWNINHSS,
    ILLEGALUE,
    IMSIUNKNOWNINVLR,
    IMEINOTACCEPTED,
    ILLEGALME,
    PSSERVICESNOTALLOWED,
    PSANDNONPSSERVICESNOTALLOWED,
    UEIDENTITYNOTDERIVEDFROMNETWORK,
    IMPLICITLYDETACHED,
    PLMNNOTALLOWED,
    AREANOTALLOWED,
    ROAMINGNOTALLOWEDINAREA,
    PSSERVICESNOTALLOWEDINPLMN,
    NOCELLSINAREA,
    MSCTEMPORARILYNOTREACHABLE,
    NETWORKFAILUREATTACH,
    CSDOMAINUNAVAILABLE,
    ESMFAILURE,
    CONGESTION,
    MBMSBEARERCAPABILITIESINSUFFICIENTFORSERVICE,
    NOTAUTHORIZEDFORCSG,
    INSUFFICIENTRESOURCES,
    MISSINGORUNKNOWNAPN,
    UNKNOWNPDPADDRESSORTYPE,
    USERAUTHENTICATIONFAILED,
    ACTIVATIONREJECTEDBYGGSNORGW,
    ACTIVATIONREJECTEDUNSPECIFIED,
    SERVICEOPTIONNOTSUPPORTED,
    SERVICEOPTIONNOTSUBSCRIBED,
    SERVICEOPTIONOUTOFORDER,
    NSAPIORPTIALREADYINUSE,
    REGULARDEACTIVATION,
    QOSNOTACCEPTED,
    CALLCANNOTBEIDENTIFIED,
    CSSERVICETEMPORARILYUNAVAILABLE,
    FEATURENOTSUPPORTED,
    SEMANTICERRORINTFTOPERATION,
    SYNTACTICALERRORINTFTOPERATION,
    UNKNOWNPDPCONTEXT,
    SEMANTICERRORSINPACKETFILTER,
    SYNTACTICALERRORSINPACKETFILTER,
    PDPCONTEXTWITHOUTTFTALREADYACTIVATED,
    MULTICASTGROUPMEMBERSHIPTIMEOUT,
    GPRSUNKNOWN,
    PDPAUTHFAILURE,
    INVALIDMOBILECLASS,
    LASTPDNDISCONNECTIONNOTALLOWEDLEGACY,
    LASTPDNDISCONNECTIONNOTALLOWED,
    SEMANTICALLYINCORRECTMESSAGE,
    INVALIDMANDATORYINFORMATION,
    MESSAGETYPENOTIMPLEMENTED,
    CONDITIONALIEERROR,
    UNSPECIFIEDPROTOCOLERROR,
    OPERATORDETERMINEDBARRING,
    MAXIMUMNUMBEROFBEARERSREACHED,
    REQUESTEDAPNNOTSUPPORTED,
    REQUESTREJECTEDBCMVIOLATION,
    UNSUPPORTEDQCIOR5QIVALUE,
    USERDATAVIACONTROLPLANECONGESTED,
    SMSPROVIDEDVIAGPRSINROUTINGAREA,
    INVALIDPTIVALUE,
    NOBEARERACTIVATED,
    MESSAGENOTCOMPATIBLEWITHPROTOCOLSTATE,
    RECOVERYONTIMEREXPIRY,
    INVALIDTRANSACTIONIDVALUE,
    SERVICEOPTIONNOTAUTHORIZEDINPLMN,
    NETWORKFAILUREACTIVATION,
    REACTIVATIONREQUESTED,
    IPV4ONLYALLOWED,
    IPV6ONLYALLOWED,
    SINGLEADDRESSBEARERSONLYALLOWED,
    COLLISIONWITHNETWORKINITIATEDREQUEST,
    IPV4V6ONLYALLOWED,
    NONIPONLYALLOWED,
    BEARERHANDLINGUNSUPPORTED,
    APNRESTRICTIONINCOMPATIBLE,
    MULTIPLEACCESSTOPDNCONNECTIONNOTALLOWED,
    ESMINFORMATIONNOTRECEIVED,
    PDNCONNECTIONNONEXISTENT,
    MULTIPLEPDNCONNECTIONSAMEAPNNOTALLOWED,
    SEVERENETWORKFAILURE,
    INSUFFICIENTRESOURCESFORSLICEANDDNN,
    UNSUPPORTEDSSCMODE,
    INSUFFICIENTRESOURCESFORSLICE,
    MESSAGETYPENOTCOMPATIBLEWITHPROTOCOLSTATE,
    IENOTIMPLEMENTED,
    N1MODENOTALLOWED,
    RESTRICTEDSERVICEAREA,
    LADNUNAVAILABLE,
    MISSINGORUNKNOWNDNNINSLICE,
    NKGSIALREADYINUSE,
    PAYLOADNOTFORWARDED,
    NON3GPPACCESSTO5GCNNOTALLOWED,
    SERVINGNETWORKNOTAUTHORIZED,
    DNNNOTSUPPORTEDINSLICE,
    INSUFFICIENTUSERPLANERESOURCESFORPDUSESSION,
    OUTOFLADNSERVICEAREA,
    PTIMISMATCH,
    MAXDATARATEFORUSERPLANEINTEGRITYTOOLOW,
    SEMANTICERRORINQOSOPERATION,
    SYNTACTICALERRORINQOSOPERATION,
    INVALIDMAPPEDEPSBEARERIDENTITY,
    REDIRECTIONTO5GCNREQUIRED,
    REDIRECTIONTOEPCREQUIRED,
    TEMPORARILYUNAUTHORIZEDFORSNPN,
    PERMANENTLYUNAUTHORIZEDFORSNPN,
    ETHERNETONLYALLOWED,
    UNAUTHORIZEDFORCAG,
    NONETWORKSLICESAVAILABLE,
    WIRELINEACCESSAREANOTALLOWED,
}
enum Modem3gppDrxCycle {
    UNKNOWN,
    UNSUPPORTED,
    TODO_32,
    TODO_64,
    TODO_128,
    TODO_256,
}
enum Modem3gppEpsUeModeOperation {
    UNKNOWN,
    PS_1,
    PS_2,
    CSPS_1,
    CSPS_2,
}
enum Modem3gppMicoMode {
    UNKNOWN,
    UNSUPPORTED,
    DISABLED,
    ENABLED,
}
enum Modem3gppNetworkAvailability {
    UNKNOWN,
    AVAILABLE,
    CURRENT,
    FORBIDDEN,
}
enum Modem3gppPacketServiceState {
    UNKNOWN,
    DETACHED,
    ATTACHED,
}
enum Modem3gppRegistrationState {
    IDLE,
    HOME,
    SEARCHING,
    DENIED,
    UNKNOWN,
    ROAMING,
    HOME_SMS_ONLY,
    ROAMING_SMS_ONLY,
    EMERGENCY_ONLY,
    HOME_CSFB_NOT_PREFERRED,
    ROAMING_CSFB_NOT_PREFERRED,
    ATTACHED_RLOS,
}
enum Modem3gppSubscriptionState {
    UNKNOWN,
    UNPROVISIONED,
    PROVISIONED,
    OUT_OF_DATA,
}
enum Modem3gppUssdSessionState {
    UNKNOWN,
    IDLE,
    ACTIVE,
    USER_RESPONSE,
}
enum ModemBand {
    UNKNOWN,
    EGSM,
    DCS,
    PCS,
    G850,
    UTRAN_1,
    UTRAN_3,
    UTRAN_4,
    UTRAN_6,
    UTRAN_5,
    UTRAN_8,
    UTRAN_9,
    UTRAN_2,
    UTRAN_7,
    G450,
    G480,
    G750,
    G380,
    G410,
    G710,
    G810,
    EUTRAN_1,
    EUTRAN_2,
    EUTRAN_3,
    EUTRAN_4,
    EUTRAN_5,
    EUTRAN_6,
    EUTRAN_7,
    EUTRAN_8,
    EUTRAN_9,
    EUTRAN_10,
    EUTRAN_11,
    EUTRAN_12,
    EUTRAN_13,
    EUTRAN_14,
    EUTRAN_17,
    EUTRAN_18,
    EUTRAN_19,
    EUTRAN_20,
    EUTRAN_21,
    EUTRAN_22,
    EUTRAN_23,
    EUTRAN_24,
    EUTRAN_25,
    EUTRAN_26,
    EUTRAN_27,
    EUTRAN_28,
    EUTRAN_29,
    EUTRAN_30,
    EUTRAN_31,
    EUTRAN_32,
    EUTRAN_33,
    EUTRAN_34,
    EUTRAN_35,
    EUTRAN_36,
    EUTRAN_37,
    EUTRAN_38,
    EUTRAN_39,
    EUTRAN_40,
    EUTRAN_41,
    EUTRAN_42,
    EUTRAN_43,
    EUTRAN_44,
    EUTRAN_45,
    EUTRAN_46,
    EUTRAN_47,
    EUTRAN_48,
    EUTRAN_49,
    EUTRAN_50,
    EUTRAN_51,
    EUTRAN_52,
    EUTRAN_53,
    EUTRAN_54,
    EUTRAN_55,
    EUTRAN_56,
    EUTRAN_57,
    EUTRAN_58,
    EUTRAN_59,
    EUTRAN_60,
    EUTRAN_61,
    EUTRAN_62,
    EUTRAN_63,
    EUTRAN_64,
    EUTRAN_65,
    EUTRAN_66,
    EUTRAN_67,
    EUTRAN_68,
    EUTRAN_69,
    EUTRAN_70,
    EUTRAN_71,
    CDMA_BC0,
    CDMA_BC1,
    CDMA_BC2,
    CDMA_BC3,
    CDMA_BC4,
    CDMA_BC5,
    CDMA_BC6,
    CDMA_BC7,
    CDMA_BC8,
    CDMA_BC9,
    CDMA_BC10,
    CDMA_BC11,
    CDMA_BC12,
    CDMA_BC13,
    CDMA_BC14,
    CDMA_BC15,
    CDMA_BC16,
    CDMA_BC17,
    CDMA_BC18,
    CDMA_BC19,
    UTRAN_10,
    UTRAN_11,
    UTRAN_12,
    UTRAN_13,
    UTRAN_14,
    UTRAN_19,
    UTRAN_20,
    UTRAN_21,
    UTRAN_22,
    UTRAN_25,
    UTRAN_26,
    UTRAN_32,
    ANY,
    NGRAN_1,
    NGRAN_2,
    NGRAN_3,
    NGRAN_5,
    NGRAN_7,
    NGRAN_8,
    NGRAN_12,
    NGRAN_14,
    NGRAN_18,
    NGRAN_20,
    NGRAN_25,
    NGRAN_28,
    NGRAN_29,
    NGRAN_30,
    NGRAN_34,
    NGRAN_38,
    NGRAN_39,
    NGRAN_40,
    NGRAN_41,
    NGRAN_48,
    NGRAN_50,
    NGRAN_51,
    NGRAN_65,
    NGRAN_66,
    NGRAN_70,
    NGRAN_71,
    NGRAN_74,
    NGRAN_75,
    NGRAN_76,
    NGRAN_77,
    NGRAN_78,
    NGRAN_79,
    NGRAN_80,
    NGRAN_81,
    NGRAN_82,
    NGRAN_83,
    NGRAN_84,
    NGRAN_86,
    NGRAN_89,
    NGRAN_90,
    NGRAN_91,
    NGRAN_92,
    NGRAN_93,
    NGRAN_94,
    NGRAN_95,
    NGRAN_257,
    NGRAN_258,
    NGRAN_260,
    NGRAN_261,
}
enum ModemCdmaActivationState {
    UNKNOWN,
    NOT_ACTIVATED,
    ACTIVATING,
    PARTIALLY_ACTIVATED,
    ACTIVATED,
}
enum ModemCdmaRegistrationState {
    UNKNOWN,
    REGISTERED,
    HOME,
    ROAMING,
}
enum ModemCdmaRmProtocol {
    UNKNOWN,
    ASYNC,
    PACKET_RELAY,
    PACKET_NETWORK_PPP,
    PACKET_NETWORK_SLIP,
    STU_III,
}
enum ModemContactsStorage {
    UNKNOWN,
    ME,
    SM,
    MT,
}
enum ModemLock {
    UNKNOWN,
    NONE,
    SIM_PIN,
    SIM_PIN2,
    SIM_PUK,
    SIM_PUK2,
    PH_SP_PIN,
    PH_SP_PUK,
    PH_NET_PIN,
    PH_NET_PUK,
    PH_SIM_PIN,
    PH_CORP_PIN,
    PH_CORP_PUK,
    PH_FSIM_PIN,
    PH_FSIM_PUK,
    PH_NETSUB_PIN,
    PH_NETSUB_PUK,
}
enum ModemPortType {
    UNKNOWN,
    NET,
    AT,
    QCDM,
    GPS,
    QMI,
    MBIM,
    AUDIO,
    IGNORED,
}
enum ModemPowerState {
    UNKNOWN,
    OFF,
    LOW,
    ON,
}
enum ModemState {
    FAILED,
    UNKNOWN,
    INITIALIZING,
    LOCKED,
    DISABLED,
    DISABLING,
    ENABLING,
    ENABLED,
    SEARCHING,
    REGISTERED,
    DISCONNECTING,
    CONNECTING,
    CONNECTED,
}
enum ModemStateChangeReason {
    UNKNOWN,
    USER_REQUESTED,
    SUSPEND,
    FAILURE,
}
enum ModemStateFailedReason {
    NONE,
    UNKNOWN,
    SIM_MISSING,
    SIM_ERROR,
}
enum OmaSessionState {
    FAILED,
    UNKNOWN,
    STARTED,
    RETRYING,
    CONNECTING,
    CONNECTED,
    AUTHENTICATED,
    MDN_DOWNLOADED,
    MSID_DOWNLOADED,
    PRL_DOWNLOADED,
    MIP_PROFILE_DOWNLOADED,
    COMPLETED,
}
enum OmaSessionStateFailedReason {
    UNKNOWN,
    NETWORK_UNAVAILABLE,
    SERVER_UNAVAILABLE,
    AUTHENTICATION_FAILED,
    MAX_RETRY_EXCEEDED,
    SESSION_CANCELLED,
}
enum OmaSessionType {
    UNKNOWN,
    CLIENT_INITIATED_DEVICE_CONFIGURE,
    CLIENT_INITIATED_PRL_UPDATE,
    CLIENT_INITIATED_HANDS_FREE_ACTIVATION,
    NETWORK_INITIATED_DEVICE_CONFIGURE,
    NETWORK_INITIATED_PRL_UPDATE,
    DEVICE_INITIATED_PRL_UPDATE,
    DEVICE_INITIATED_HANDS_FREE_ACTIVATION,
}
enum SerialError {
    UNKNOWN,
    OPENFAILED,
    SENDFAILED,
    RESPONSETIMEOUT,
    OPENFAILEDNODEVICE,
    FLASHFAILED,
    NOTOPEN,
    PARSEFAILED,
    FRAMENOTFOUND,
}
enum SimEsimStatus {
    UNKNOWN,
    NO_PROFILES,
    WITH_PROFILES,
}
enum SimRemovability {
    UNKNOWN,
    REMOVABLE,
    NOT_REMOVABLE,
}
enum SimType {
    UNKNOWN,
    PHYSICAL,
    ESIM,
}
enum SmsCdmaServiceCategory {
    UNKNOWN,
    EMERGENCY_BROADCAST,
    ADMINISTRATIVE,
    MAINTENANCE,
    GENERAL_NEWS_LOCAL,
    GENERAL_NEWS_REGIONAL,
    GENERAL_NEWS_NATIONAL,
    GENERAL_NEWS_INTERNATIONAL,
    BUSINESS_NEWS_LOCAL,
    BUSINESS_NEWS_REGIONAL,
    BUSINESS_NEWS_NATIONAL,
    BUSINESS_NEWS_INTERNATIONAL,
    SPORTS_NEWS_LOCAL,
    SPORTS_NEWS_REGIONAL,
    SPORTS_NEWS_NATIONAL,
    SPORTS_NEWS_INTERNATIONAL,
    ENTERTAINMENT_NEWS_LOCAL,
    ENTERTAINMENT_NEWS_REGIONAL,
    ENTERTAINMENT_NEWS_NATIONAL,
    ENTERTAINMENT_NEWS_INTERNATIONAL,
    LOCAL_WEATHER,
    TRAFFIC_REPORT,
    FLIGHT_SCHEDULES,
    RESTAURANTS,
    LODGINGS,
    RETAIL_DIRECTORY,
    ADVERTISEMENTS,
    STOCK_QUOTES,
    EMPLOYMENT,
    HOSPITALS,
    TECHNOLOGY_NEWS,
    MULTICATEGORY,
    CMAS_PRESIDENTIAL_ALERT,
    CMAS_EXTREME_THREAT,
    CMAS_SEVERE_THREAT,
    CMAS_CHILD_ABDUCTION_EMERGENCY,
    CMAS_TEST,
}
enum SmsCdmaTeleserviceId {
    UNKNOWN,
    CMT91,
    WPT,
    WMT,
    VMN,
    WAP,
    WEMT,
    SCPT,
    CATPT,
}
enum SmsDeliveryState {
    COMPLETED_RECEIVED,
    COMPLETED_FORWARDED_UNCONFIRMED,
    COMPLETED_REPLACED_BY_SC,
    TEMPORARY_ERROR_CONGESTION,
    TEMPORARY_ERROR_SME_BUSY,
    TEMPORARY_ERROR_NO_RESPONSE_FROM_SME,
    TEMPORARY_ERROR_SERVICE_REJECTED,
    TEMPORARY_ERROR_QOS_NOT_AVAILABLE,
    TEMPORARY_ERROR_IN_SME,
    ERROR_REMOTE_PROCEDURE,
    ERROR_INCOMPATIBLE_DESTINATION,
    ERROR_CONNECTION_REJECTED,
    ERROR_NOT_OBTAINABLE,
    ERROR_QOS_NOT_AVAILABLE,
    ERROR_NO_INTERWORKING_AVAILABLE,
    ERROR_VALIDITY_PERIOD_EXPIRED,
    ERROR_DELETED_BY_ORIGINATING_SME,
    ERROR_DELETED_BY_SC_ADMINISTRATION,
    ERROR_MESSAGE_DOES_NOT_EXIST,
    TEMPORARY_FATAL_ERROR_CONGESTION,
    TEMPORARY_FATAL_ERROR_SME_BUSY,
    TEMPORARY_FATAL_ERROR_NO_RESPONSE_FROM_SME,
    TEMPORARY_FATAL_ERROR_SERVICE_REJECTED,
    TEMPORARY_FATAL_ERROR_QOS_NOT_AVAILABLE,
    TEMPORARY_FATAL_ERROR_IN_SME,
    UNKNOWN,
    NETWORK_PROBLEM_ADDRESS_VACANT,
    NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE,
    NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE,
    NETWORK_PROBLEM_NETWORK_FAILURE,
    NETWORK_PROBLEM_INVALID_TELESERVICE_ID,
    NETWORK_PROBLEM_OTHER,
    TERMINAL_PROBLEM_NO_PAGE_RESPONSE,
    TERMINAL_PROBLEM_DESTINATION_BUSY,
    TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT,
    TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE,
    TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED,
    TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE,
    TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS,
    TERMINAL_PROBLEM_OTHER,
    RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE,
    RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY,
    RADIO_INTERFACE_PROBLEM_OTHER,
    GENERAL_PROBLEM_ENCODING,
    GENERAL_PROBLEM_SMS_ORIGINATION_DENIED,
    GENERAL_PROBLEM_SMS_TERMINATION_DENIED,
    GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
    GENERAL_PROBLEM_SMS_NOT_SUPPORTED,
    GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER,
    GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER,
    GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE,
    GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE,
    GENERAL_PROBLEM_USER_DATA_SIZE_ERROR,
    GENERAL_PROBLEM_OTHER,
    TEMPORARY_NETWORK_PROBLEM_ADDRESS_VACANT,
    TEMPORARY_NETWORK_PROBLEM_ADDRESS_TRANSLATION_FAILURE,
    TEMPORARY_NETWORK_PROBLEM_NETWORK_RESOURCE_OUTAGE,
    TEMPORARY_NETWORK_PROBLEM_NETWORK_FAILURE,
    TEMPORARY_NETWORK_PROBLEM_INVALID_TELESERVICE_ID,
    TEMPORARY_NETWORK_PROBLEM_OTHER,
    TEMPORARY_TERMINAL_PROBLEM_NO_PAGE_RESPONSE,
    TEMPORARY_TERMINAL_PROBLEM_DESTINATION_BUSY,
    TEMPORARY_TERMINAL_PROBLEM_NO_ACKNOWLEDGMENT,
    TEMPORARY_TERMINAL_PROBLEM_DESTINATION_RESOURCE_SHORTAGE,
    TEMPORARY_TERMINAL_PROBLEM_SMS_DELIVERY_POSTPONED,
    TEMPORARY_TERMINAL_PROBLEM_DESTINATION_OUT_OF_SERVICE,
    TEMPORARY_TERMINAL_PROBLEM_DESTINATION_NO_LONGER_AT_THIS_ADDRESS,
    TEMPORARY_TERMINAL_PROBLEM_OTHER,
    TEMPORARY_RADIO_INTERFACE_PROBLEM_RESOURCE_SHORTAGE,
    TEMPORARY_RADIO_INTERFACE_PROBLEM_INCOMPATIBILITY,
    TEMPORARY_RADIO_INTERFACE_PROBLEM_OTHER,
    TEMPORARY_GENERAL_PROBLEM_ENCODING,
    TEMPORARY_GENERAL_PROBLEM_SMS_ORIGINATION_DENIED,
    TEMPORARY_GENERAL_PROBLEM_SMS_TERMINATION_DENIED,
    TEMPORARY_GENERAL_PROBLEM_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
    TEMPORARY_GENERAL_PROBLEM_SMS_NOT_SUPPORTED,
    TEMPORARY_GENERAL_PROBLEM_MISSING_EXPECTED_PARAMETER,
    TEMPORARY_GENERAL_PROBLEM_MISSING_MANDATORY_PARAMETER,
    TEMPORARY_GENERAL_PROBLEM_UNRECOGNIZED_PARAMETER_VALUE,
    TEMPORARY_GENERAL_PROBLEM_UNEXPECTED_PARAMETER_VALUE,
    TEMPORARY_GENERAL_PROBLEM_USER_DATA_SIZE_ERROR,
    TEMPORARY_GENERAL_PROBLEM_OTHER,
}
enum SmsPduType {
    UNKNOWN,
    DELIVER,
    SUBMIT,
    STATUS_REPORT,
    CDMA_DELIVER,
    CDMA_SUBMIT,
    CDMA_CANCELLATION,
    CDMA_DELIVERY_ACKNOWLEDGEMENT,
    CDMA_USER_ACKNOWLEDGEMENT,
    CDMA_READ_ACKNOWLEDGEMENT,
}
enum SmsState {
    UNKNOWN,
    STORED,
    RECEIVING,
    RECEIVED,
    SENDING,
    SENT,
}
enum SmsStorage {
    UNKNOWN,
    SM,
    ME,
    MT,
    SR,
    BM,
    TA,
}
enum SmsValidityType {
    UNKNOWN,
    RELATIVE,
    ABSOLUTE,
    ENHANCED,
}
enum TODO_3gppProfileCmpFlags {
    NONE,
    NO_PROFILE_ID,
    NO_PROFILE_NAME,
    NO_AUTH,
    NO_APN_TYPE,
    NO_IP_TYPE,
    NO_ACCESS_TYPE_PREFERENCE,
    NO_ENABLED,
    NO_ROAMING_ALLOWANCE,
    NO_PROFILE_SOURCE,
}
enum BearerAllowedAuth {
    UNKNOWN,
    NONE,
    PAP,
    CHAP,
    MSCHAP,
    MSCHAPV2,
    EAP,
}
enum BearerApnType {
    NONE,
    INITIAL,
    DEFAULT,
    IMS,
    MMS,
    MANAGEMENT,
    VOICE,
    EMERGENCY,
    PRIVATE,
    PURCHASE,
    VIDEO_SHARE,
    LOCAL,
    APP,
    XCAP,
    TETHERING,
}
enum BearerIpFamily {
    NONE,
    IPV4,
    IPV6,
    IPV4V6,
    ANY,
}
enum BearerPropertiesCmpFlags {
    NONE,
    LOOSE,
    NO_PASSWORD,
    NO_ALLOW_ROAMING,
    NO_RM_PROTOCOL,
    NO_APN_TYPE,
    NO_PROFILE_ID,
    NO_PROFILE_NAME,
    NO_ACCESS_TYPE_PREFERENCE,
    NO_ROAMING_ALLOWANCE,
}
enum BearerRoamingAllowance {
    NONE,
    HOME,
    PARTNER,
    NON_PARTNER,
}
enum Modem3gppFacility {
    NONE,
    SIM,
    FIXED_DIALING,
    PH_SIM,
    PH_FSIM,
    NET_PERS,
    NET_SUB_PERS,
    PROVIDER_PERS,
    CORP_PERS,
}
enum ModemAccessTechnology {
    UNKNOWN,
    POTS,
    GSM,
    GSM_COMPACT,
    GPRS,
    EDGE,
    UMTS,
    HSDPA,
    HSUPA,
    HSPA,
    HSPA_PLUS,
    TODO_1XRTT,
    EVDO0,
    EVDOA,
    EVDOB,
    LTE,
    TODO_5GNR,
    ANY,
}
enum ModemCapability {
    NONE,
    POTS,
    CDMA_EVDO,
    GSM_UMTS,
    LTE,
    IRIDIUM,
    TODO_5GNR,
    TDS,
    ANY,
}
enum ModemFirmwareUpdateMethod {
    NONE,
    FASTBOOT,
    QMI_PDC,
    MBIM_QDU,
    FIREHOSE,
}
enum ModemLocationAssistanceDataType {
    NONE,
    XTRA,
}
enum ModemLocationSource {
    NONE,
    TODO_3GPP_LAC_CI,
    GPS_RAW,
    GPS_NMEA,
    CDMA_BS,
    GPS_UNMANAGED,
    AGPS_MSA,
    AGPS_MSB,
}
enum ModemMode {
    NONE,
    CS,
    TODO_2G,
    TODO_3G,
    TODO_4G,
    TODO_5G,
    ANY,
}
enum OmaFeature {
    NONE,
    DEVICE_PROVISIONING,
    PRL_UPDATE,
    HANDS_FREE_ACTIVATION,
}
const TODO_3GPP_PROFILE_ID_UNKNOWN: number
const BEARER_METHOD_CONNECT: string
const BEARER_METHOD_DISCONNECT: string
const BEARER_PROPERTY_BEARERTYPE: string
const BEARER_PROPERTY_CONNECTED: string
const BEARER_PROPERTY_CONNECTIONERROR: string
const BEARER_PROPERTY_INTERFACE: string
const BEARER_PROPERTY_IP4CONFIG: string
const BEARER_PROPERTY_IP6CONFIG: string
const BEARER_PROPERTY_IPTIMEOUT: string
const BEARER_PROPERTY_MULTIPLEXED: string
const BEARER_PROPERTY_PROFILEID: string
const BEARER_PROPERTY_PROPERTIES: string
const BEARER_PROPERTY_RELOADSTATSSUPPORTED: string
const BEARER_PROPERTY_STATS: string
const BEARER_PROPERTY_SUSPENDED: string
const CALL_METHOD_ACCEPT: string
const CALL_METHOD_DEFLECT: string
const CALL_METHOD_HANGUP: string
const CALL_METHOD_JOINMULTIPARTY: string
const CALL_METHOD_LEAVEMULTIPARTY: string
const CALL_METHOD_SENDDTMF: string
const CALL_METHOD_START: string
const CALL_PROPERTY_AUDIOFORMAT: string
const CALL_PROPERTY_AUDIOPORT: string
const CALL_PROPERTY_DIRECTION: string
const CALL_PROPERTY_MULTIPARTY: string
const CALL_PROPERTY_NUMBER: string
const CALL_PROPERTY_STATE: string
const CALL_PROPERTY_STATEREASON: string
const CALL_SIGNAL_DTMFRECEIVED: string
const CALL_SIGNAL_STATECHANGED: string
const DBUS_ERROR_PREFIX: string
const DBUS_INTERFACE: string
const DBUS_INTERFACE_BEARER: string
const DBUS_INTERFACE_CALL: string
const DBUS_INTERFACE_MODEM: string
const DBUS_INTERFACE_MODEM_FIRMWARE: string
const DBUS_INTERFACE_MODEM_LOCATION: string
const DBUS_INTERFACE_MODEM_MESSAGING: string
const DBUS_INTERFACE_MODEM_MODEM3GPP: string
const DBUS_INTERFACE_MODEM_MODEM3GPP_PROFILEMANAGER: string
const DBUS_INTERFACE_MODEM_MODEM3GPP_USSD: string
const DBUS_INTERFACE_MODEM_MODEMCDMA: string
const DBUS_INTERFACE_MODEM_OMA: string
const DBUS_INTERFACE_MODEM_SAR: string
const DBUS_INTERFACE_MODEM_SIGNAL: string
const DBUS_INTERFACE_MODEM_TIME: string
const DBUS_INTERFACE_MODEM_VOICE: string
const DBUS_INTERFACE_SIM: string
const DBUS_INTERFACE_SMS: string
const DBUS_PATH: string
const DBUS_SERVICE: string
const MAJOR_VERSION: number
const MANAGER_METHOD_INHIBITDEVICE: string
const MANAGER_METHOD_REPORTKERNELEVENT: string
const MANAGER_METHOD_SCANDEVICES: string
const MANAGER_METHOD_SETLOGGING: string
const MANAGER_PROPERTY_VERSION: string
const MICRO_VERSION: number
const MINOR_VERSION: number
const MODEM_CDMA_NID_UNKNOWN: number
const MODEM_CDMA_SID_UNKNOWN: number
const MODEM_FIRMWARE_METHOD_LIST: string
const MODEM_FIRMWARE_METHOD_SELECT: string
const MODEM_FIRMWARE_PROPERTY_UPDATESETTINGS: string
const MODEM_LOCATION_METHOD_GETLOCATION: string
const MODEM_LOCATION_METHOD_INJECTASSISTANCEDATA: string
const MODEM_LOCATION_METHOD_SETGPSREFRESHRATE: string
const MODEM_LOCATION_METHOD_SETSUPLSERVER: string
const MODEM_LOCATION_METHOD_SETUP: string
const MODEM_LOCATION_PROPERTY_ASSISTANCEDATASERVERS: string
const MODEM_LOCATION_PROPERTY_CAPABILITIES: string
const MODEM_LOCATION_PROPERTY_ENABLED: string
const MODEM_LOCATION_PROPERTY_GPSREFRESHRATE: string
const MODEM_LOCATION_PROPERTY_LOCATION: string
const MODEM_LOCATION_PROPERTY_SIGNALSLOCATION: string
const MODEM_LOCATION_PROPERTY_SUPLSERVER: string
const MODEM_LOCATION_PROPERTY_SUPPORTEDASSISTANCEDATA: string
const MODEM_MESSAGING_METHOD_CREATE: string
const MODEM_MESSAGING_METHOD_DELETE: string
const MODEM_MESSAGING_METHOD_LIST: string
const MODEM_MESSAGING_PROPERTY_DEFAULTSTORAGE: string
const MODEM_MESSAGING_PROPERTY_MESSAGES: string
const MODEM_MESSAGING_PROPERTY_SUPPORTEDSTORAGES: string
const MODEM_MESSAGING_SIGNAL_ADDED: string
const MODEM_MESSAGING_SIGNAL_DELETED: string
const MODEM_METHOD_COMMAND: string
const MODEM_METHOD_CREATEBEARER: string
const MODEM_METHOD_DELETEBEARER: string
const MODEM_METHOD_ENABLE: string
const MODEM_METHOD_FACTORYRESET: string
const MODEM_METHOD_GETCELLINFO: string
const MODEM_METHOD_LISTBEARERS: string
const MODEM_METHOD_RESET: string
const MODEM_METHOD_SETCURRENTBANDS: string
const MODEM_METHOD_SETCURRENTCAPABILITIES: string
const MODEM_METHOD_SETCURRENTMODES: string
const MODEM_METHOD_SETPOWERSTATE: string
const MODEM_METHOD_SETPRIMARYSIMSLOT: string
const MODEM_MODEM3GPP_METHOD_DISABLEFACILITYLOCK: string
const MODEM_MODEM3GPP_METHOD_REGISTER: string
const MODEM_MODEM3GPP_METHOD_SCAN: string
const MODEM_MODEM3GPP_METHOD_SETEPSUEMODEOPERATION: string
const MODEM_MODEM3GPP_METHOD_SETINITIALEPSBEARERSETTINGS: string
const MODEM_MODEM3GPP_METHOD_SETNR5GREGISTRATIONSETTINGS: string
const MODEM_MODEM3GPP_METHOD_SETPACKETSERVICESTATE: string
const MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_DELETE: string
const MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_LIST: string
const MODEM_MODEM3GPP_PROFILEMANAGER_METHOD_SET: string
const MODEM_MODEM3GPP_PROFILEMANAGER_PROPERTY_INDEXFIELD: string
const MODEM_MODEM3GPP_PROFILEMANAGER_SIGNAL_UPDATED: string
const MODEM_MODEM3GPP_PROPERTY_ENABLEDFACILITYLOCKS: string
const MODEM_MODEM3GPP_PROPERTY_EPSUEMODEOPERATION: string
const MODEM_MODEM3GPP_PROPERTY_IMEI: string
const MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARER: string
const MODEM_MODEM3GPP_PROPERTY_INITIALEPSBEARERSETTINGS: string
const MODEM_MODEM3GPP_PROPERTY_NR5GREGISTRATIONSETTINGS: string
const MODEM_MODEM3GPP_PROPERTY_OPERATORCODE: string
const MODEM_MODEM3GPP_PROPERTY_OPERATORNAME: string
const MODEM_MODEM3GPP_PROPERTY_PACKETSERVICESTATE: string
const MODEM_MODEM3GPP_PROPERTY_PCO: string
const MODEM_MODEM3GPP_PROPERTY_REGISTRATIONSTATE: string
const MODEM_MODEM3GPP_PROPERTY_SUBSCRIPTIONSTATE: string
const MODEM_MODEM3GPP_USSD_METHOD_CANCEL: string
const MODEM_MODEM3GPP_USSD_METHOD_INITIATE: string
const MODEM_MODEM3GPP_USSD_METHOD_RESPOND: string
const MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKNOTIFICATION: string
const MODEM_MODEM3GPP_USSD_PROPERTY_NETWORKREQUEST: string
const MODEM_MODEM3GPP_USSD_PROPERTY_STATE: string
const MODEM_MODEMCDMA_METHOD_ACTIVATE: string
const MODEM_MODEMCDMA_METHOD_ACTIVATEMANUAL: string
const MODEM_MODEMCDMA_PROPERTY_ACTIVATIONSTATE: string
const MODEM_MODEMCDMA_PROPERTY_CDMA1XREGISTRATIONSTATE: string
const MODEM_MODEMCDMA_PROPERTY_ESN: string
const MODEM_MODEMCDMA_PROPERTY_EVDOREGISTRATIONSTATE: string
const MODEM_MODEMCDMA_PROPERTY_MEID: string
const MODEM_MODEMCDMA_PROPERTY_NID: string
const MODEM_MODEMCDMA_PROPERTY_SID: string
const MODEM_MODEMCDMA_SIGNAL_ACTIVATIONSTATECHANGED: string
const MODEM_OMA_METHOD_ACCEPTNETWORKINITIATEDSESSION: string
const MODEM_OMA_METHOD_CANCELSESSION: string
const MODEM_OMA_METHOD_SETUP: string
const MODEM_OMA_METHOD_STARTCLIENTINITIATEDSESSION: string
const MODEM_OMA_PROPERTY_FEATURES: string
const MODEM_OMA_PROPERTY_PENDINGNETWORKINITIATEDSESSIONS: string
const MODEM_OMA_PROPERTY_SESSIONSTATE: string
const MODEM_OMA_PROPERTY_SESSIONTYPE: string
const MODEM_OMA_SIGNAL_SESSIONSTATECHANGED: string
const MODEM_PROPERTY_ACCESSTECHNOLOGIES: string
const MODEM_PROPERTY_BEARERS: string
const MODEM_PROPERTY_CARRIERCONFIGURATION: string
const MODEM_PROPERTY_CARRIERCONFIGURATIONREVISION: string
const MODEM_PROPERTY_CURRENTBANDS: string
const MODEM_PROPERTY_CURRENTCAPABILITIES: string
const MODEM_PROPERTY_CURRENTMODES: string
const MODEM_PROPERTY_DEVICE: string
const MODEM_PROPERTY_DEVICEIDENTIFIER: string
const MODEM_PROPERTY_DRIVERS: string
const MODEM_PROPERTY_EQUIPMENTIDENTIFIER: string
const MODEM_PROPERTY_HARDWAREREVISION: string
const MODEM_PROPERTY_MANUFACTURER: string
const MODEM_PROPERTY_MAXACTIVEBEARERS: string
const MODEM_PROPERTY_MAXACTIVEMULTIPLEXEDBEARERS: string
const MODEM_PROPERTY_MAXBEARERS: string
const MODEM_PROPERTY_MODEL: string
const MODEM_PROPERTY_OWNNUMBERS: string
const MODEM_PROPERTY_PLUGIN: string
const MODEM_PROPERTY_PORTS: string
const MODEM_PROPERTY_POWERSTATE: string
const MODEM_PROPERTY_PRIMARYPORT: string
const MODEM_PROPERTY_PRIMARYSIMSLOT: string
const MODEM_PROPERTY_REVISION: string
const MODEM_PROPERTY_SIGNALQUALITY: string
const MODEM_PROPERTY_SIM: string
const MODEM_PROPERTY_SIMSLOTS: string
const MODEM_PROPERTY_STATE: string
const MODEM_PROPERTY_STATEFAILEDREASON: string
const MODEM_PROPERTY_SUPPORTEDBANDS: string
const MODEM_PROPERTY_SUPPORTEDCAPABILITIES: string
const MODEM_PROPERTY_SUPPORTEDIPFAMILIES: string
const MODEM_PROPERTY_SUPPORTEDMODES: string
const MODEM_PROPERTY_UNLOCKREQUIRED: string
const MODEM_PROPERTY_UNLOCKRETRIES: string
const MODEM_SAR_METHOD_ENABLE: string
const MODEM_SAR_METHOD_SETPOWERLEVEL: string
const MODEM_SAR_PROPERTY_POWERLEVEL: string
const MODEM_SAR_PROPERTY_STATE: string
const MODEM_SIGNAL_METHOD_SETUP: string
const MODEM_SIGNAL_METHOD_SETUPTHRESHOLDS: string
const MODEM_SIGNAL_PROPERTY_CDMA: string
const MODEM_SIGNAL_PROPERTY_ERRORRATETHRESHOLD: string
const MODEM_SIGNAL_PROPERTY_EVDO: string
const MODEM_SIGNAL_PROPERTY_GSM: string
const MODEM_SIGNAL_PROPERTY_LTE: string
const MODEM_SIGNAL_PROPERTY_NR5G: string
const MODEM_SIGNAL_PROPERTY_RATE: string
const MODEM_SIGNAL_PROPERTY_RSSITHRESHOLD: string
const MODEM_SIGNAL_PROPERTY_UMTS: string
const MODEM_SIGNAL_STATECHANGED: string
const MODEM_TIME_METHOD_GETNETWORKTIME: string
const MODEM_TIME_PROPERTY_NETWORKTIMEZONE: string
const MODEM_TIME_SIGNAL_NETWORKTIMECHANGED: string
const MODEM_VOICE_METHOD_CALLWAITINGQUERY: string
const MODEM_VOICE_METHOD_CALLWAITINGSETUP: string
const MODEM_VOICE_METHOD_CREATECALL: string
const MODEM_VOICE_METHOD_DELETECALL: string
const MODEM_VOICE_METHOD_HANGUPALL: string
const MODEM_VOICE_METHOD_HANGUPANDACCEPT: string
const MODEM_VOICE_METHOD_HOLDANDACCEPT: string
const MODEM_VOICE_METHOD_LISTCALLS: string
const MODEM_VOICE_METHOD_TRANSFER: string
const MODEM_VOICE_PROPERTY_CALLS: string
const MODEM_VOICE_PROPERTY_EMERGENCYONLY: string
const MODEM_VOICE_SIGNAL_CALLADDED: string
const MODEM_VOICE_SIGNAL_CALLDELETED: string
const SIMPLE_PROPERTY_3GPP_OPERATOR_CODE: string
const SIMPLE_PROPERTY_3GPP_OPERATOR_NAME: string
const SIMPLE_PROPERTY_3GPP_REGISTRATION_STATE: string
const SIMPLE_PROPERTY_3GPP_SUBSCRIPTION_STATE: string
const SIMPLE_PROPERTY_ACCESS_TECHNOLOGIES: string
const SIMPLE_PROPERTY_CDMA_CDMA1X_REGISTRATION_STATE: string
const SIMPLE_PROPERTY_CDMA_EVDO_REGISTRATION_STATE: string
const SIMPLE_PROPERTY_CDMA_NID: string
const SIMPLE_PROPERTY_CDMA_SID: string
const SIMPLE_PROPERTY_CURRENT_BANDS: string
const SIMPLE_PROPERTY_SIGNAL_QUALITY: string
const SIMPLE_PROPERTY_STATE: string
const SIM_METHOD_CHANGEPIN: string
const SIM_METHOD_ENABLEPIN: string
const SIM_METHOD_SENDPIN: string
const SIM_METHOD_SENDPUK: string
const SIM_METHOD_SETPREFERREDNETWORKS: string
const SIM_PROPERTY_ACTIVE: string
const SIM_PROPERTY_EID: string
const SIM_PROPERTY_EMERGENCYNUMBERS: string
const SIM_PROPERTY_ESIMSTATUS: string
const SIM_PROPERTY_IMSI: string
const SIM_PROPERTY_OPERATORIDENTIFIER: string
const SIM_PROPERTY_OPERATORNAME: string
const SIM_PROPERTY_PREFERREDNETWORKS: string
const SIM_PROPERTY_REMOVABILITY: string
const SIM_PROPERTY_SIMIDENTIFIER: string
const SIM_PROPERTY_SIMTYPE: string
const SMS_METHOD_SEND: string
const SMS_METHOD_STORE: string
const SMS_PROPERTY_CLASS: string
const SMS_PROPERTY_DATA: string
const SMS_PROPERTY_DELIVERYREPORTREQUEST: string
const SMS_PROPERTY_DELIVERYSTATE: string
const SMS_PROPERTY_DISCHARGETIMESTAMP: string
const SMS_PROPERTY_MESSAGEREFERENCE: string
const SMS_PROPERTY_NUMBER: string
const SMS_PROPERTY_PDUTYPE: string
const SMS_PROPERTY_SERVICECATEGORY: string
const SMS_PROPERTY_SMSC: string
const SMS_PROPERTY_STATE: string
const SMS_PROPERTY_STORAGE: string
const SMS_PROPERTY_TELESERVICEID: string
const SMS_PROPERTY_TEXT: string
const SMS_PROPERTY_TIMESTAMP: string
const SMS_PROPERTY_VALIDITY: string
const UNLOCK_RETRIES_UNKNOWN: number
function bearerAccessTypePreferenceGetString(val: BearerAccessTypePreference): string
function bearerAllowedAuthBuildStringFromMask(mask: BearerAllowedAuth): string
function bearerApnTypeBuildStringFromMask(mask: BearerApnType): string
function bearerIpFamilyBuildStringFromMask(mask: BearerIpFamily): string
function bearerIpMethodGetString(val: BearerIpMethod): string
function bearerMultiplexSupportGetString(val: BearerMultiplexSupport): string
function bearerProfileSourceGetString(val: BearerProfileSource): string
function bearerRoamingAllowanceBuildStringFromMask(mask: BearerRoamingAllowance): string
function bearerTypeGetString(val: BearerType): string
function callDirectionGetString(val: CallDirection): string
function callStateGetString(val: CallState): string
function callStateReasonGetString(val: CallStateReason): string
function cdmaActivationErrorQuark(): GLib.Quark
function cellTypeGetString(val: CellType): string
function connectionErrorQuark(): GLib.Quark
function coreErrorQuark(): GLib.Quark
function firmwareImageTypeGetString(val: FirmwareImageType): string
function gdbusBearerInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusBearerOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusCallInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusCallOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModem3gppInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModem3gppOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModem3gppProfileManagerInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModem3gppProfileManagerOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModem3gppUssdInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModem3gppUssdOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemCdmaInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemCdmaOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemFirmwareInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemFirmwareOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemLocationInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemLocationOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemMessagingInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemMessagingOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemOmaInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemOmaOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemSarInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemSarOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemSignalInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemSignalOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemSimpleInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemSimpleOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemTimeInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemTimeOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusModemVoiceInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusModemVoiceOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusOrgFreedesktopModemManager1InterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusOrgFreedesktopModemManager1OverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusSimInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusSimOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function gdbusSmsInterfaceInfo(): Gio.DBusInterfaceInfo
function gdbusSmsOverrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
function messageErrorQuark(): GLib.Quark
function mobileEquipmentErrorQuark(): GLib.Quark
function modem3gppDrxCycleGetString(val: Modem3gppDrxCycle): string
function modem3gppEpsUeModeOperationGetString(val: Modem3gppEpsUeModeOperation): string
function modem3gppFacilityBuildStringFromMask(mask: Modem3gppFacility): string
function modem3gppMicoModeGetString(val: Modem3gppMicoMode): string
function modem3gppNetworkAvailabilityGetString(val: Modem3gppNetworkAvailability): string
function modem3gppPacketServiceStateGetString(val: Modem3gppPacketServiceState): string
function modem3gppRegistrationStateGetString(val: Modem3gppRegistrationState): string
function modem3gppSubscriptionStateGetString(val: Modem3gppSubscriptionState): string
function modem3gppUssdSessionStateGetString(val: Modem3gppUssdSessionState): string
function modemAccessTechnologyBuildStringFromMask(mask: ModemAccessTechnology): string
function modemBandGetString(val: ModemBand): string
function modemCapabilityBuildStringFromMask(mask: ModemCapability): string
function modemCdmaActivationStateGetString(val: ModemCdmaActivationState): string
function modemCdmaRegistrationStateGetString(val: ModemCdmaRegistrationState): string
function modemCdmaRmProtocolGetString(val: ModemCdmaRmProtocol): string
function modemContactsStorageGetString(val: ModemContactsStorage): string
function modemFirmwareUpdateMethodBuildStringFromMask(mask: ModemFirmwareUpdateMethod): string
function modemLocationAssistanceDataTypeBuildStringFromMask(mask: ModemLocationAssistanceDataType): string
function modemLocationSourceBuildStringFromMask(mask: ModemLocationSource): string
function modemLockGetString(val: ModemLock): string
function modemModeBuildStringFromMask(mask: ModemMode): string
function modemPortTypeGetString(val: ModemPortType): string
function modemPowerStateGetString(val: ModemPowerState): string
function modemStateChangeReasonGetString(val: ModemStateChangeReason): string
function modemStateFailedReasonGetString(val: ModemStateFailedReason): string
function modemStateGetString(val: ModemState): string
function omaFeatureBuildStringFromMask(mask: OmaFeature): string
function omaSessionStateFailedReasonGetString(val: OmaSessionStateFailedReason): string
function omaSessionStateGetString(val: OmaSessionState): string
function omaSessionTypeGetString(val: OmaSessionType): string
function serialErrorQuark(): GLib.Quark
function simEsimStatusGetString(val: SimEsimStatus): string
function simRemovabilityGetString(val: SimRemovability): string
function simTypeGetString(val: SimType): string
function smsCdmaServiceCategoryGetString(val: SmsCdmaServiceCategory): string
function smsCdmaTeleserviceIdGetString(val: SmsCdmaTeleserviceId): string
function smsDeliveryStateGetString(val: SmsDeliveryState): string
function smsPduTypeGetString(val: SmsPduType): string
function smsStateGetString(val: SmsState): string
function smsStorageGetString(val: SmsStorage): string
function smsValidityTypeGetString(val: SmsValidityType): string
interface UnlockRetriesForeachCb {
    (lock: ModemLock, count: number): void
}
class GdbusBearer {
    /* Properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType: number
    connected: boolean
    connectionError: GLib.Variant
    interface: string
    ipTimeout: number
    ip4Config: GLib.Variant
    ip6Config: GLib.Variant
    multiplexed: boolean
    profileId: number
    properties: GLib.Variant
    reloadStatsSupported: boolean
    stats: GLib.Variant
    suspended: boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusBearer */
    callConnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): boolean
    callConnectSync(cancellable?: Gio.Cancellable | null): boolean
    callDisconnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(cancellable?: Gio.Cancellable | null): boolean
    completeConnect(invocation: Gio.DBusMethodInvocation): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusBearer */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusCall {
    /* Properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat: GLib.Variant
    audioPort: string
    direction: number
    multiparty: boolean
    number: string
    state: number
    stateReason: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusCall */
    callAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptFinish(res: Gio.AsyncResult): boolean
    callAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callDeflect(argNumber: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeflectFinish(res: Gio.AsyncResult): boolean
    callDeflectSync(argNumber: string, cancellable?: Gio.Cancellable | null): boolean
    callHangup(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupFinish(res: Gio.AsyncResult): boolean
    callHangupSync(cancellable?: Gio.Cancellable | null): boolean
    callJoinMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callJoinMultipartyFinish(res: Gio.AsyncResult): boolean
    callJoinMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callLeaveMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLeaveMultipartyFinish(res: Gio.AsyncResult): boolean
    callLeaveMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callSendDtmf(argDtmf: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendDtmfFinish(res: Gio.AsyncResult): boolean
    callSendDtmfSync(argDtmf: string, cancellable?: Gio.Cancellable | null): boolean
    callStart(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(cancellable?: Gio.Cancellable | null): boolean
    completeAccept(invocation: Gio.DBusMethodInvocation): void
    completeDeflect(invocation: Gio.DBusMethodInvocation): void
    completeHangup(invocation: Gio.DBusMethodInvocation): void
    completeJoinMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeLeaveMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeSendDtmf(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    emitDtmfReceived(argDtmf: string): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusCall */
    connect(sigName: "dtmf-received", callback: ((argDtmf: string) => void)): number
    on(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "dtmf-received", callback: (argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "dtmf-received", argDtmf: string): void
    connect(sigName: "handle-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-deflect", callback: ((invocation: Gio.DBusMethodInvocation, argNumber: string) => boolean)): number
    on(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-deflect", invocation: Gio.DBusMethodInvocation, argNumber: string): void
    connect(sigName: "handle-hangup", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-join-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-join-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-leave-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-leave-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-send-dtmf", callback: ((invocation: Gio.DBusMethodInvocation, argDtmf: string) => boolean)): number
    on(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-dtmf", invocation: Gio.DBusMethodInvocation, argDtmf: string): void
    connect(sigName: "handle-start", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModem {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies: number
    bearers: string[]
    carrierConfiguration: string
    carrierConfigurationRevision: string
    currentBands: GLib.Variant
    currentCapabilities: number
    currentModes: GLib.Variant
    device: string
    deviceIdentifier: string
    drivers: string[]
    equipmentIdentifier: string
    hardwareRevision: string
    manufacturer: string
    maxActiveBearers: number
    maxActiveMultiplexedBearers: number
    maxBearers: number
    model: string
    ownNumbers: string[]
    plugin: string
    ports: GLib.Variant
    powerState: number
    primaryPort: string
    primarySimSlot: number
    revision: string
    signalQuality: GLib.Variant
    sim: string
    simSlots: string[]
    state: number
    stateFailedReason: number
    supportedBands: GLib.Variant
    supportedCapabilities: GLib.Variant
    supportedIpFamilies: number
    supportedModes: GLib.Variant
    unlockRequired: number
    unlockRetries: GLib.Variant
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem */
    callCommand(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCommandFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCommandSync(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCreateBearer(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateBearerFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateBearerSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteBearer(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteBearerFinish(res: Gio.AsyncResult): boolean
    callDeleteBearerSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callFactoryReset(argCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFactoryResetFinish(res: Gio.AsyncResult): boolean
    callFactoryResetSync(argCode: string, cancellable?: Gio.Cancellable | null): boolean
    callGetCellInfo(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetCellInfoFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callGetCellInfoSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callListBearers(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListBearersFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callListBearersSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callReset(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResetFinish(res: Gio.AsyncResult): boolean
    callResetSync(cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentBands(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentBandsFinish(res: Gio.AsyncResult): boolean
    callSetCurrentBandsSync(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentCapabilities(argCapabilities: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentCapabilitiesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentCapabilitiesSync(argCapabilities: number, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentModes(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentModesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentModesSync(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerStateFinish(res: Gio.AsyncResult): boolean
    callSetPowerStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    callSetPrimarySimSlot(argSimSlot: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPrimarySimSlotFinish(res: Gio.AsyncResult): boolean
    callSetPrimarySimSlotSync(argSimSlot: number, cancellable?: Gio.Cancellable | null): boolean
    completeCommand(invocation: Gio.DBusMethodInvocation, response: string): void
    completeCreateBearer(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteBearer(invocation: Gio.DBusMethodInvocation): void
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeFactoryReset(invocation: Gio.DBusMethodInvocation): void
    completeGetCellInfo(invocation: Gio.DBusMethodInvocation, cellInfo: GLib.Variant): void
    completeListBearers(invocation: Gio.DBusMethodInvocation, bearers: string): void
    completeReset(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentBands(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentCapabilities(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentModes(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerState(invocation: Gio.DBusMethodInvocation): void
    completeSetPrimarySimSlot(invocation: Gio.DBusMethodInvocation): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem */
    connect(sigName: "handle-command", callback: ((invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => boolean)): number
    on(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-command", invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number): void
    connect(sigName: "handle-create-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-bearer", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-bearer", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-factory-reset", callback: ((invocation: Gio.DBusMethodInvocation, argCode: string) => boolean)): number
    on(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-factory-reset", invocation: Gio.DBusMethodInvocation, argCode: string): void
    connect(sigName: "handle-get-cell-info", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-cell-info", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-bearers", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-bearers", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-reset", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-reset", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-current-bands", callback: ((invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-bands", invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant): void
    connect(sigName: "handle-set-current-capabilities", callback: ((invocation: Gio.DBusMethodInvocation, argCapabilities: number) => boolean)): number
    on(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-capabilities", invocation: Gio.DBusMethodInvocation, argCapabilities: number): void
    connect(sigName: "handle-set-current-modes", callback: ((invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-modes", invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant): void
    connect(sigName: "handle-set-power-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "handle-set-primary-sim-slot", callback: ((invocation: Gio.DBusMethodInvocation, argSimSlot: number) => boolean)): number
    on(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-primary-sim-slot", invocation: Gio.DBusMethodInvocation, argSimSlot: number): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModem3gpp {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks: number
    epsUeModeOperation: number
    imei: string
    initialEpsBearer: string
    initialEpsBearerSettings: GLib.Variant
    nr5gRegistrationSettings: GLib.Variant
    operatorCode: string
    operatorName: string
    packetServiceState: number
    pco: GLib.Variant
    registrationState: number
    subscriptionState: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    callDisableFacilityLock(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisableFacilityLockFinish(res: Gio.AsyncResult): boolean
    callDisableFacilityLockSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRegister(argOperatorId: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRegisterFinish(res: Gio.AsyncResult): boolean
    callRegisterSync(argOperatorId: string, cancellable?: Gio.Cancellable | null): boolean
    callScan(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callScanSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callSetEpsUeModeOperation(argMode: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetEpsUeModeOperationFinish(res: Gio.AsyncResult): boolean
    callSetEpsUeModeOperationSync(argMode: number, cancellable?: Gio.Cancellable | null): boolean
    callSetInitialEpsBearerSettings(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetInitialEpsBearerSettingsFinish(res: Gio.AsyncResult): boolean
    callSetInitialEpsBearerSettingsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetNr5gRegistrationSettings(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNr5gRegistrationSettingsFinish(res: Gio.AsyncResult): boolean
    callSetNr5gRegistrationSettingsSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPacketServiceState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPacketServiceStateFinish(res: Gio.AsyncResult): boolean
    callSetPacketServiceStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    completeDisableFacilityLock(invocation: Gio.DBusMethodInvocation): void
    completeRegister(invocation: Gio.DBusMethodInvocation): void
    completeScan(invocation: Gio.DBusMethodInvocation, results: GLib.Variant): void
    completeSetEpsUeModeOperation(invocation: Gio.DBusMethodInvocation): void
    completeSetInitialEpsBearerSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetNr5gRegistrationSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetPacketServiceState(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    connect(sigName: "handle-disable-facility-lock", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disable-facility-lock", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-register", callback: ((invocation: Gio.DBusMethodInvocation, argOperatorId: string) => boolean)): number
    on(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-register", invocation: Gio.DBusMethodInvocation, argOperatorId: string): void
    connect(sigName: "handle-scan", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-eps-ue-mode-operation", callback: ((invocation: Gio.DBusMethodInvocation, argMode: number) => boolean)): number
    on(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-eps-ue-mode-operation", invocation: Gio.DBusMethodInvocation, argMode: number): void
    connect(sigName: "handle-set-initial-eps-bearer-settings", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-initial-eps-bearer-settings", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "handle-set-nr5g-registration-settings", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-nr5g-registration-settings", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-set-packet-service-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-packet-service-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModem3gppProfileManager {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField: string
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    callDelete(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callSet(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    callSetSync(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, profiles: GLib.Variant): void
    completeSet(invocation: Gio.DBusMethodInvocation, storedProperties: GLib.Variant): void
    emitUpdated(): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set", callback: ((invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set", invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant): void
    connect(sigName: "updated", callback: (() => void)): number
    on(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "updated", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "updated"): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModem3gppUssd {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification: string
    networkRequest: string
    state: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    callCancel(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(cancellable?: Gio.Cancellable | null): boolean
    callInitiate(argCommand: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInitiateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callInitiateSync(argCommand: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespond(argResponse: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRespondFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespondSync(argResponse: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    completeInitiate(invocation: Gio.DBusMethodInvocation, reply: string): void
    completeRespond(invocation: Gio.DBusMethodInvocation, reply: string): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    connect(sigName: "handle-cancel", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-initiate", callback: ((invocation: Gio.DBusMethodInvocation, argCommand: string) => boolean)): number
    on(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-initiate", invocation: Gio.DBusMethodInvocation, argCommand: string): void
    connect(sigName: "handle-respond", callback: ((invocation: Gio.DBusMethodInvocation, argResponse: string) => boolean)): number
    on(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-respond", invocation: Gio.DBusMethodInvocation, argResponse: string): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemCdma {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState: number
    cdma1xRegistrationState: number
    esn: string
    evdoRegistrationState: number
    meid: string
    nid: number
    sid: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemCdma */
    callActivate(argCarrierCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateManual(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateManualFinish(res: Gio.AsyncResult): boolean
    callActivateManualSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argCarrierCode: string, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateManual(invocation: Gio.DBusMethodInvocation): void
    emitActivationStateChanged(argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemCdma */
    connect(sigName: "activation-state-changed", callback: ((argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void)): number
    on(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "activation-state-changed", argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    connect(sigName: "handle-activate", callback: ((invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => boolean)): number
    on(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argCarrierCode: string): void
    connect(sigName: "handle-activate-manual", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate-manual", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemFirmware {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings: GLib.Variant
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callSelect(argUniqueid: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSelectFinish(res: Gio.AsyncResult): boolean
    callSelectSync(argUniqueid: string, cancellable?: Gio.Cancellable | null): boolean
    completeList(invocation: Gio.DBusMethodInvocation, selected: string, installed: GLib.Variant): void
    completeSelect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-select", callback: ((invocation: Gio.DBusMethodInvocation, argUniqueid: string) => boolean)): number
    on(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-select", invocation: Gio.DBusMethodInvocation, argUniqueid: string): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemLocation {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers: string[]
    capabilities: number
    enabled: number
    gpsRefreshRate: number
    location: GLib.Variant
    signalsLocation: boolean
    suplServer: string
    supportedAssistanceData: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemLocation */
    callGetLocation(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetLocationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callGetLocationSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callInjectAssistanceData(argData: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInjectAssistanceDataFinish(res: Gio.AsyncResult): boolean
    callInjectAssistanceDataSync(argData: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetGpsRefreshRate(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetGpsRefreshRateFinish(res: Gio.AsyncResult): boolean
    callSetGpsRefreshRateSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetSuplServer(argSupl: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetSuplServerFinish(res: Gio.AsyncResult): boolean
    callSetSuplServerSync(argSupl: string, cancellable?: Gio.Cancellable | null): boolean
    callSetup(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null): boolean
    completeGetLocation(invocation: Gio.DBusMethodInvocation, location: GLib.Variant): void
    completeInjectAssistanceData(invocation: Gio.DBusMethodInvocation): void
    completeSetGpsRefreshRate(invocation: Gio.DBusMethodInvocation): void
    completeSetSuplServer(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemLocation */
    connect(sigName: "handle-get-location", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-location", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-inject-assistance-data", callback: ((invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => boolean)): number
    on(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inject-assistance-data", invocation: Gio.DBusMethodInvocation, argData: GLib.Variant): void
    connect(sigName: "handle-set-gps-refresh-rate", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-gps-refresh-rate", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-set-supl-server", callback: ((invocation: Gio.DBusMethodInvocation, argSupl: string) => boolean)): number
    on(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-supl-server", invocation: Gio.DBusMethodInvocation, argSupl: string): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemMessaging {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage: number
    messages: string[]
    supportedStorages: GLib.Variant
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    callCreate(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDelete(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    completeCreate(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, result: string): void
    emitAdded(argPath: string, argReceived: boolean): void
    emitDeleted(argPath: string): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    connect(sigName: "added", callback: ((argPath: string, argReceived: boolean) => void)): number
    on(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "added", callback: (argPath: string, argReceived: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "added", argPath: string, argReceived: boolean): void
    connect(sigName: "deleted", callback: ((argPath: string) => void)): number
    on(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "deleted", argPath: string): void
    connect(sigName: "handle-create", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemOma {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features: number
    pendingNetworkInitiatedSessions: GLib.Variant
    sessionState: number
    sessionType: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemOma */
    callAcceptNetworkInitiatedSession(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptNetworkInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callAcceptNetworkInitiatedSessionSync(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCancelSession(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelSessionFinish(res: Gio.AsyncResult): boolean
    callCancelSessionSync(cancellable?: Gio.Cancellable | null): boolean
    callSetup(argFeatures: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argFeatures: number, cancellable?: Gio.Cancellable | null): boolean
    callStartClientInitiatedSession(argSessionType: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartClientInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callStartClientInitiatedSessionSync(argSessionType: number, cancellable?: Gio.Cancellable | null): boolean
    completeAcceptNetworkInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    completeCancelSession(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeStartClientInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    emitSessionStateChanged(argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemOma */
    connect(sigName: "handle-accept-network-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => boolean)): number
    on(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept-network-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean): void
    connect(sigName: "handle-cancel-session", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel-session", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argFeatures: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argFeatures: number): void
    connect(sigName: "handle-start-client-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionType: number) => boolean)): number
    on(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start-client-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionType: number): void
    connect(sigName: "session-state-changed", callback: ((argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void)): number
    on(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "session-state-changed", argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemSar {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel: number
    state: boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSar */
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerLevel(argLevel: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerLevelFinish(res: Gio.AsyncResult): boolean
    callSetPowerLevelSync(argLevel: number, cancellable?: Gio.Cancellable | null): boolean
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerLevel(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSar */
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-set-power-level", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: number) => boolean)): number
    on(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-level", invocation: Gio.DBusMethodInvocation, argLevel: number): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemSignal {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma: GLib.Variant
    errorRateThreshold: boolean
    evdo: GLib.Variant
    gsm: GLib.Variant
    lte: GLib.Variant
    nr5g: GLib.Variant
    rate: number
    rssiThreshold: number
    umts: GLib.Variant
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSignal */
    callSetup(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetupThresholds(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupThresholdsFinish(res: Gio.AsyncResult): boolean
    callSetupThresholdsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeSetupThresholds(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSignal */
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-setup-thresholds", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup-thresholds", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemSimple {
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSimple */
    callConnect(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callConnectSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callDisconnect(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callGetStatus(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatusFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    callGetStatusSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    completeConnect(invocation: Gio.DBusMethodInvocation, bearer: string): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    completeGetStatus(invocation: Gio.DBusMethodInvocation, properties: GLib.Variant): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSimple */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-get-status", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-status", invocation: Gio.DBusMethodInvocation): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemTime {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone: GLib.Variant
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemTime */
    callGetNetworkTime(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetNetworkTimeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outTime */ string | null ]
    callGetNetworkTimeSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outTime */ string | null ]
    completeGetNetworkTime(invocation: Gio.DBusMethodInvocation, time: string): void
    emitNetworkTimeChanged(argTime: string): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemTime */
    connect(sigName: "handle-get-network-time", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-network-time", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "network-time-changed", callback: ((argTime: string) => void)): number
    on(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-time-changed", callback: (argTime: string) => void): NodeJS.EventEmitter
    emit(sigName: "network-time-changed", argTime: string): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusModemVoice {
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls: string[]
    emergencyOnly: boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemVoice */
    callCallWaitingQuery(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingQueryFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingQuerySync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingSetup(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingSetupFinish(res: Gio.AsyncResult): boolean
    callCallWaitingSetupSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCreateCall(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateCallFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateCallSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteCall(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteCallFinish(res: Gio.AsyncResult): boolean
    callDeleteCallSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callHangupAll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAllFinish(res: Gio.AsyncResult): boolean
    callHangupAllSync(cancellable?: Gio.Cancellable | null): boolean
    callHangupAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHangupAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callHoldAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHoldAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHoldAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callListCalls(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListCallsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListCallsSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callTransfer(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTransferFinish(res: Gio.AsyncResult): boolean
    callTransferSync(cancellable?: Gio.Cancellable | null): boolean
    completeCallWaitingQuery(invocation: Gio.DBusMethodInvocation, status: boolean): void
    completeCallWaitingSetup(invocation: Gio.DBusMethodInvocation): void
    completeCreateCall(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteCall(invocation: Gio.DBusMethodInvocation): void
    completeHangupAll(invocation: Gio.DBusMethodInvocation): void
    completeHangupAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeHoldAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeListCalls(invocation: Gio.DBusMethodInvocation, result: string): void
    completeTransfer(invocation: Gio.DBusMethodInvocation): void
    emitCallAdded(argPath: string): void
    emitCallDeleted(argPath: string): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemVoice */
    connect(sigName: "call-added", callback: ((argPath: string) => void)): number
    on(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-added", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-added", argPath: string): void
    connect(sigName: "call-deleted", callback: ((argPath: string) => void)): number
    on(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-deleted", argPath: string): void
    connect(sigName: "handle-call-waiting-query", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-query", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-call-waiting-setup", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-setup", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-create-call", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-call", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-call", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-call", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-hangup-all", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-all", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hangup-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hold-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hold-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-calls", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-calls", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-transfer", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-transfer", invocation: Gio.DBusMethodInvocation): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusObject {
    /* Properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem: GdbusModem
    modemCdma: GdbusModemCdma
    modemFirmware: GdbusModemFirmware
    modemLocation: GdbusModemLocation
    modemMessaging: GdbusModemMessaging
    modemOma: GdbusModemOma
    modemSar: GdbusModemSar
    modemSignal: GdbusModemSignal
    modemSimple: GdbusModemSimple
    modemTime: GdbusModemTime
    modemVoice: GdbusModemVoice
    modem3gpp: GdbusModem3gpp
    modem3gppProfileManager: GdbusModem3gppProfileManager
    modem3gppUssd: GdbusModem3gppUssd
    /* Methods of ModemManager-1.0.ModemManager.GdbusObject */
    getModem(): GdbusModem | null
    getModem3gpp(): GdbusModem3gpp | null
    getModem3gppProfileManager(): GdbusModem3gppProfileManager | null
    getModem3gppUssd(): GdbusModem3gppUssd | null
    getModemCdma(): GdbusModemCdma | null
    getModemFirmware(): GdbusModemFirmware | null
    getModemLocation(): GdbusModemLocation | null
    getModemMessaging(): GdbusModemMessaging | null
    getModemOma(): GdbusModemOma | null
    getModemSar(): GdbusModemSar | null
    getModemSignal(): GdbusModemSignal | null
    getModemSimple(): GdbusModemSimple | null
    getModemTime(): GdbusModemTime | null
    getModemVoice(): GdbusModemVoice | null
    /* Methods of Gio-2.0.Gio.DBusObject */
    getInterface(interfaceName: string): Gio.DBusInterface | null
    getInterfaces(): Gio.DBusInterface[]
    getObjectPath(): string
    /* Signals of Gio-2.0.Gio.DBusObject */
    connect(sigName: "interface-added", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-added", interface: Gio.DBusInterface): void
    connect(sigName: "interface-removed", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-removed", interface: Gio.DBusInterface): void
    static name: string
}
class GdbusOrgFreedesktopModemManager1 {
    /* Properties of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    version: string
    /* Methods of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    callInhibitDevice(argUid: string, argInhibit: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInhibitDeviceFinish(res: Gio.AsyncResult): boolean
    callInhibitDeviceSync(argUid: string, argInhibit: boolean, cancellable?: Gio.Cancellable | null): boolean
    callReportKernelEvent(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callReportKernelEventFinish(res: Gio.AsyncResult): boolean
    callReportKernelEventSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callScanDevices(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanDevicesFinish(res: Gio.AsyncResult): boolean
    callScanDevicesSync(cancellable?: Gio.Cancellable | null): boolean
    callSetLogging(argLevel: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLoggingFinish(res: Gio.AsyncResult): boolean
    callSetLoggingSync(argLevel: string, cancellable?: Gio.Cancellable | null): boolean
    completeInhibitDevice(invocation: Gio.DBusMethodInvocation): void
    completeReportKernelEvent(invocation: Gio.DBusMethodInvocation): void
    completeScanDevices(invocation: Gio.DBusMethodInvocation): void
    completeSetLogging(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    connect(sigName: "handle-inhibit-device", callback: ((invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => boolean)): number
    on(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inhibit-device", invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean): void
    connect(sigName: "handle-report-kernel-event", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-report-kernel-event", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-scan-devices", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan-devices", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-logging", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: string) => boolean)): number
    on(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-logging", invocation: Gio.DBusMethodInvocation, argLevel: string): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusSim {
    /* Properties of ModemManager-1.0.ModemManager.GdbusSim */
    active: boolean
    eid: string
    emergencyNumbers: string[]
    esimStatus: number
    imsi: string
    operatorIdentifier: string
    operatorName: string
    preferredNetworks: GLib.Variant
    removability: number
    simIdentifier: string
    simType: number
    /* Methods of ModemManager-1.0.ModemManager.GdbusSim */
    callChangePin(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePinFinish(res: Gio.AsyncResult): boolean
    callChangePinSync(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null): boolean
    callEnablePin(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnablePinFinish(res: Gio.AsyncResult): boolean
    callEnablePinSync(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSendPin(argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPinFinish(res: Gio.AsyncResult): boolean
    callSendPinSync(argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSendPuk(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPukFinish(res: Gio.AsyncResult): boolean
    callSendPukSync(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSetPreferredNetworks(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPreferredNetworksFinish(res: Gio.AsyncResult): boolean
    callSetPreferredNetworksSync(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeChangePin(invocation: Gio.DBusMethodInvocation): void
    completeEnablePin(invocation: Gio.DBusMethodInvocation): void
    completeSendPin(invocation: Gio.DBusMethodInvocation): void
    completeSendPuk(invocation: Gio.DBusMethodInvocation): void
    completeSetPreferredNetworks(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSim */
    connect(sigName: "handle-change-pin", callback: ((invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => boolean)): number
    on(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-change-pin", invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string): void
    connect(sigName: "handle-enable-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => boolean)): number
    on(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable-pin", invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean): void
    connect(sigName: "handle-send-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string) => boolean)): number
    on(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-pin", invocation: Gio.DBusMethodInvocation, argPin: string): void
    connect(sigName: "handle-send-puk", callback: ((invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => boolean)): number
    on(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-puk", invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string): void
    connect(sigName: "handle-set-preferred-networks", callback: ((invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-preferred-networks", invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
class GdbusSms {
    /* Properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class": number
    data: GLib.Variant
    deliveryReportRequest: boolean
    deliveryState: number
    dischargeTimestamp: string
    messageReference: number
    number: string
    pduType: number
    serviceCategory: number
    smsc: string
    state: number
    storage: number
    teleserviceId: number
    text: string
    timestamp: string
    validity: GLib.Variant
    /* Methods of ModemManager-1.0.ModemManager.GdbusSms */
    callSend(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendFinish(res: Gio.AsyncResult): boolean
    callSendSync(cancellable?: Gio.Cancellable | null): boolean
    callStore(argStorage: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStoreFinish(res: Gio.AsyncResult): boolean
    callStoreSync(argStorage: number, cancellable?: Gio.Cancellable | null): boolean
    completeSend(invocation: Gio.DBusMethodInvocation): void
    completeStore(invocation: Gio.DBusMethodInvocation): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSms */
    connect(sigName: "handle-send", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-store", callback: ((invocation: Gio.DBusMethodInvocation, argStorage: number) => boolean)): number
    on(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-store", invocation: Gio.DBusMethodInvocation, argStorage: number): void
    static name: string
    /* Static methods and pseudo-constructors */
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
}
interface TODO_3gppProfile_ConstructProps extends GObject.Object_ConstructProps {
}
class TODO_3gppProfile {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.3gppProfile */
    consumeString(key: string, value: string): boolean
    consumeVariant(key: string, value: GLib.Variant): boolean
    getAccessTypePreference(): BearerAccessTypePreference
    getAllowedAuth(): BearerAllowedAuth
    getApn(): string
    getApnType(): BearerApnType
    getEnabled(): boolean
    getIpType(): BearerIpFamily
    getPassword(): string
    getProfileId(): number
    getProfileName(): string
    getProfileSource(): BearerProfileSource
    getRoamingAllowance(): BearerRoamingAllowance
    getUser(): string
    setAccessTypePreference(accessTypePreference: BearerAccessTypePreference): void
    setAllowedAuth(allowedAuth: BearerAllowedAuth): void
    setApn(apn: string): void
    setApnType(apnType: BearerApnType): void
    setEnabled(enabled: boolean): void
    setIpType(ipType: BearerIpFamily): void
    setPassword(password: string): void
    setProfileId(profileId: number): void
    setProfileName(profileName: string): void
    setProfileSource(profileSource: BearerProfileSource): void
    setRoamingAllowance(roamingAllowance: BearerRoamingAllowance): void
    setUser(user: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TODO_3gppProfile_ConstructProps)
    _init (config?: TODO_3gppProfile_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TODO_3gppProfile
    static $gtype: GObject.Type
}
interface Bearer_ConstructProps extends GdbusBearerProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType?: number
    connected?: boolean
    connectionError?: GLib.Variant
    interface?: string
    ipTimeout?: number
    ip4Config?: GLib.Variant
    ip6Config?: GLib.Variant
    multiplexed?: boolean
    profileId?: number
    properties?: GLib.Variant
    reloadStatsSupported?: boolean
    stats?: GLib.Variant
    suspended?: boolean
}
class Bearer {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType: number
    connected: boolean
    connectionError: GLib.Variant
    interface: string
    ipTimeout: number
    ip4Config: GLib.Variant
    ip6Config: GLib.Variant
    multiplexed: boolean
    profileId: number
    properties: GLib.Variant
    reloadStatsSupported: boolean
    stats: GLib.Variant
    suspended: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Bearer */
    connect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    connectFinish(res: Gio.AsyncResult): boolean
    connectSync(cancellable?: Gio.Cancellable | null): boolean
    disconnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(res: Gio.AsyncResult): boolean
    disconnectSync(cancellable?: Gio.Cancellable | null): boolean
    dupInterface(): string
    dupPath(): string
    getBearerType(): BearerType
    getConnected(): boolean
    getConnectionError(): GLib.Error
    getInterface(): string
    getIpTimeout(): number
    getIpv4Config(): BearerIpConfig
    getIpv6Config(): BearerIpConfig
    getMultiplexed(): boolean
    getPath(): string
    getProfileId(): number
    getProperties(): BearerProperties
    getReloadStatsSupported(): boolean
    getStats(): BearerStats
    getSuspended(): boolean
    peekConnectionError(): GLib.Error
    peekIpv4Config(): BearerIpConfig
    peekIpv6Config(): BearerIpConfig
    peekProperties(): BearerProperties
    peekStats(): BearerStats
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusBearer */
    callConnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): boolean
    callConnectSync(cancellable?: Gio.Cancellable | null): boolean
    callDisconnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(cancellable?: Gio.Cancellable | null): boolean
    completeConnect(invocation: Gio.DBusMethodInvocation): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusBearer */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bearer-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bearer-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connected", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connected", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiplexed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiplexed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::profile-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::profile-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reload-stats-supported", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reload-stats-supported", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stats", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stats", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suspended", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suspended", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Bearer_ConstructProps)
    _init (config?: Bearer_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Bearer
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Bearer
    static newForBusFinish(res: Gio.AsyncResult): Bearer
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Bearer
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Bearer
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Bearer
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Bearer
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Bearer
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface BearerIpConfig_ConstructProps extends GObject.Object_ConstructProps {
}
class BearerIpConfig {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.BearerIpConfig */
    getAddress(): string
    getDns(): string[]
    getGateway(): string
    getMethod(): BearerIpMethod
    getMtu(): number
    getPrefix(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BearerIpConfig_ConstructProps)
    _init (config?: BearerIpConfig_ConstructProps): void
    static $gtype: GObject.Type
}
interface BearerProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class BearerProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.BearerProperties */
    getAccessTypePreference(): BearerAccessTypePreference
    getAllowRoaming(): boolean
    getAllowedAuth(): BearerAllowedAuth
    getApn(): string
    getApnType(): BearerApnType
    getIpType(): BearerIpFamily
    getMultiplex(): BearerMultiplexSupport
    getNumber(): string
    getPassword(): string
    getProfileId(): number
    getProfileName(): string
    getRmProtocol(): ModemCdmaRmProtocol
    getRoamingAllowance(): BearerRoamingAllowance
    getUser(): string
    setAccessTypePreference(accessTypePreference: BearerAccessTypePreference): void
    setAllowRoaming(allowRoaming: boolean): void
    setAllowedAuth(allowedAuth: BearerAllowedAuth): void
    setApn(apn: string): void
    setApnType(apnType: BearerApnType): void
    setIpType(ipType: BearerIpFamily): void
    setMultiplex(multiplex: BearerMultiplexSupport): void
    setNumber(number: string): void
    setPassword(password: string): void
    setProfileId(profileId: number): void
    setProfileName(profileName: string): void
    setRmProtocol(protocol: ModemCdmaRmProtocol): void
    setRoamingAllowance(roamingAllowance: BearerRoamingAllowance): void
    setUser(user: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BearerProperties_ConstructProps)
    _init (config?: BearerProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): BearerProperties
    static $gtype: GObject.Type
}
interface BearerStats_ConstructProps extends GObject.Object_ConstructProps {
}
class BearerStats {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.BearerStats */
    getAttempts(): number
    getDownlinkSpeed(): number
    getDuration(): number
    getFailedAttempts(): number
    getRxBytes(): number
    getStartDate(): number
    getTotalDuration(): number
    getTotalRxBytes(): number
    getTotalTxBytes(): number
    getTxBytes(): number
    getUplinkSpeed(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BearerStats_ConstructProps)
    _init (config?: BearerStats_ConstructProps): void
    static $gtype: GObject.Type
}
interface Call_ConstructProps extends GdbusCallProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat?: GLib.Variant
    audioPort?: string
    direction?: number
    multiparty?: boolean
    number?: string
    state?: number
    stateReason?: number
}
class Call {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat: GLib.Variant
    audioPort: string
    direction: number
    multiparty: boolean
    number: string
    state: number
    stateReason: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Call */
    accept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    acceptFinish(res: Gio.AsyncResult): boolean
    acceptSync(cancellable?: Gio.Cancellable | null): boolean
    deflect(number: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deflectFinish(res: Gio.AsyncResult): boolean
    deflectSync(number: string, cancellable?: Gio.Cancellable | null): boolean
    dupAudioPort(): string
    dupNumber(): string
    dupPath(): string
    getAudioFormat(): CallAudioFormat
    getAudioPort(): string
    getDirection(): CallDirection
    getMultiparty(): boolean
    getNumber(): string
    getPath(): string
    getState(): CallState
    getStateReason(): CallStateReason
    hangup(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    hangupFinish(res: Gio.AsyncResult): boolean
    hangupSync(cancellable?: Gio.Cancellable | null): boolean
    joinMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    joinMultipartyFinish(res: Gio.AsyncResult): boolean
    joinMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    leaveMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    leaveMultipartyFinish(res: Gio.AsyncResult): boolean
    leaveMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    peekAudioFormat(): CallAudioFormat
    sendDtmf(dtmf: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    sendDtmfFinish(res: Gio.AsyncResult): boolean
    sendDtmfSync(dtmf: string, cancellable?: Gio.Cancellable | null): boolean
    start(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    startFinish(res: Gio.AsyncResult): boolean
    startSync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusCall */
    callAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptFinish(res: Gio.AsyncResult): boolean
    callAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callDeflect(argNumber: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeflectFinish(res: Gio.AsyncResult): boolean
    callDeflectSync(argNumber: string, cancellable?: Gio.Cancellable | null): boolean
    callHangup(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupFinish(res: Gio.AsyncResult): boolean
    callHangupSync(cancellable?: Gio.Cancellable | null): boolean
    callJoinMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callJoinMultipartyFinish(res: Gio.AsyncResult): boolean
    callJoinMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callLeaveMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLeaveMultipartyFinish(res: Gio.AsyncResult): boolean
    callLeaveMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callSendDtmf(argDtmf: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendDtmfFinish(res: Gio.AsyncResult): boolean
    callSendDtmfSync(argDtmf: string, cancellable?: Gio.Cancellable | null): boolean
    callStart(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(cancellable?: Gio.Cancellable | null): boolean
    completeAccept(invocation: Gio.DBusMethodInvocation): void
    completeDeflect(invocation: Gio.DBusMethodInvocation): void
    completeHangup(invocation: Gio.DBusMethodInvocation): void
    completeJoinMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeLeaveMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeSendDtmf(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    emitDtmfReceived(argDtmf: string): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusCall */
    connect(sigName: "dtmf-received", callback: ((argDtmf: string) => void)): number
    on(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "dtmf-received", callback: (argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "dtmf-received", argDtmf: string): void
    connect(sigName: "handle-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-deflect", callback: ((invocation: Gio.DBusMethodInvocation, argNumber: string) => boolean)): number
    on(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-deflect", invocation: Gio.DBusMethodInvocation, argNumber: string): void
    connect(sigName: "handle-hangup", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-join-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-join-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-leave-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-leave-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-send-dtmf", callback: ((invocation: Gio.DBusMethodInvocation, argDtmf: string) => boolean)): number
    on(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-dtmf", invocation: Gio.DBusMethodInvocation, argDtmf: string): void
    connect(sigName: "handle-start", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-format", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-format", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiparty", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiparty", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Call_ConstructProps)
    _init (config?: Call_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Call
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Call
    static newForBusFinish(res: Gio.AsyncResult): Call
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Call
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Call
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Call
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Call
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Call
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface CallAudioFormat_ConstructProps extends GObject.Object_ConstructProps {
}
class CallAudioFormat {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CallAudioFormat */
    getEncoding(): string
    getRate(): number
    getResolution(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CallAudioFormat_ConstructProps)
    _init (config?: CallAudioFormat_ConstructProps): void
    static $gtype: GObject.Type
}
interface CallProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class CallProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CallProperties */
    getDictionary(): GLib.Variant
    getDirection(): CallDirection
    getNumber(): string
    getState(): CallState
    getStateReason(): CallStateReason
    setDirection(direction: CallDirection): void
    setNumber(text: string): void
    setState(state: CallState): void
    setStateReason(stateReason: CallStateReason): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CallProperties_ConstructProps)
    _init (config?: CallProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CallProperties
    static newFromDictionary(dictionary: GLib.Variant): CallProperties
    static newFromString(str: string): CallProperties
    static $gtype: GObject.Type
}
interface CdmaManualActivationProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class CdmaManualActivationProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CdmaManualActivationProperties */
    getMdn(): string
    getMin(): string
    getMnAaaKey(): string
    getMnHaKey(): string
    getPrl(): [ /* returnType */ number, /* prlLen */ number ]
    getPrlBytearray(): Uint8Array
    getSid(): number
    getSpc(): string
    peekPrlBytearray(): Uint8Array
    setMdn(mdn: string): boolean
    setMin(min: string): boolean
    setMnAaaKey(mnAaaKey: string): boolean
    setMnHaKey(mnHaKey: string): boolean
    setPrl(prl: number, prlLength: number): boolean
    setPrlBytearray(prl: Uint8Array): boolean
    setSid(sid: number): void
    setSpc(spc: string): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CdmaManualActivationProperties_ConstructProps)
    _init (config?: CdmaManualActivationProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CdmaManualActivationProperties
    static $gtype: GObject.Type
}
interface CellInfo_ConstructProps extends GObject.Object_ConstructProps {
}
class CellInfo {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfo_ConstructProps)
    _init (config?: CellInfo_ConstructProps): void
    static $gtype: GObject.Type
}
interface CellInfoCdma_ConstructProps extends CellInfo_ConstructProps {
}
class CellInfoCdma {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfoCdma */
    getBaseStationId(): string
    getNid(): string
    getPilotStrength(): number
    getRefPn(): string
    getSid(): string
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfoCdma_ConstructProps)
    _init (config?: CellInfoCdma_ConstructProps): void
    static $gtype: GObject.Type
}
interface CellInfoGsm_ConstructProps extends CellInfo_ConstructProps {
}
class CellInfoGsm {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfoGsm */
    getArfcn(): number
    getBaseStationId(): string
    getCi(): string
    getLac(): string
    getOperatorId(): string
    getRxLevel(): number
    getTimingAdvance(): number
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfoGsm_ConstructProps)
    _init (config?: CellInfoGsm_ConstructProps): void
    static $gtype: GObject.Type
}
interface CellInfoLte_ConstructProps extends CellInfo_ConstructProps {
}
class CellInfoLte {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfoLte */
    getCi(): string
    getEarfcn(): number
    getOperatorId(): string
    getPhysicalCi(): string
    getRsrp(): number
    getRsrq(): number
    getTac(): string
    getTimingAdvance(): number
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfoLte_ConstructProps)
    _init (config?: CellInfoLte_ConstructProps): void
    static $gtype: GObject.Type
}
interface CellInfoNr5g_ConstructProps extends CellInfo_ConstructProps {
}
class CellInfoNr5g {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfoNr5g */
    getCi(): string
    getNrarfcn(): number
    getOperatorId(): string
    getPhysicalCi(): string
    getRsrp(): number
    getRsrq(): number
    getSinr(): number
    getTac(): string
    getTimingAdvance(): number
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfoNr5g_ConstructProps)
    _init (config?: CellInfoNr5g_ConstructProps): void
    static $gtype: GObject.Type
}
interface CellInfoTdscdma_ConstructProps extends CellInfo_ConstructProps {
}
class CellInfoTdscdma {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfoTdscdma */
    getCellParameterId(): number
    getCi(): string
    getLac(): string
    getOperatorId(): string
    getPathLoss(): number
    getRscp(): number
    getTimingAdvance(): number
    getUarfcn(): number
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfoTdscdma_ConstructProps)
    _init (config?: CellInfoTdscdma_ConstructProps): void
    static $gtype: GObject.Type
}
interface CellInfoUmts_ConstructProps extends CellInfo_ConstructProps {
}
class CellInfoUmts {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.CellInfoUmts */
    getCi(): string
    getEcio(): number
    getFrequencyFddDl(): number
    getFrequencyFddUl(): number
    getFrequencyTdd(): number
    getLac(): string
    getOperatorId(): string
    getPathLoss(): number
    getPsc(): number
    getRscp(): number
    getUarfcn(): number
    /* Methods of ModemManager-1.0.ModemManager.CellInfo */
    getCellType(): CellType
    getServing(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CellInfoUmts_ConstructProps)
    _init (config?: CellInfoUmts_ConstructProps): void
    static $gtype: GObject.Type
}
interface FirmwareProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class FirmwareProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.FirmwareProperties */
    getDictionary(): GLib.Variant
    getGobiBootVersion(): string
    getGobiModemUniqueId(): string
    getGobiPriInfo(): string
    getGobiPriUniqueId(): string
    getGobiPriVersion(): string
    getImageType(): FirmwareImageType
    getUniqueId(): string
    setGobiBootVersion(version: string): void
    setGobiModemUniqueId(id: string): void
    setGobiPriInfo(info: string): void
    setGobiPriUniqueId(id: string): void
    setGobiPriVersion(version: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FirmwareProperties_ConstructProps)
    _init (config?: FirmwareProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(imageType: FirmwareImageType, uniqueId: string): FirmwareProperties
    static newFromDictionary(dictionary: GLib.Variant): FirmwareProperties
    static $gtype: GObject.Type
}
interface FirmwareUpdateSettings_ConstructProps extends GObject.Object_ConstructProps {
}
class FirmwareUpdateSettings {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.FirmwareUpdateSettings */
    getDeviceIds(): string[]
    getFastbootAt(): string
    getMethod(): ModemFirmwareUpdateMethod
    getVersion(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FirmwareUpdateSettings_ConstructProps)
    _init (config?: FirmwareUpdateSettings_ConstructProps): void
    static $gtype: GObject.Type
}
interface GdbusBearerProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType?: number
    connected?: boolean
    connectionError?: GLib.Variant
    interface?: string
    ipTimeout?: number
    ip4Config?: GLib.Variant
    ip6Config?: GLib.Variant
    multiplexed?: boolean
    profileId?: number
    properties?: GLib.Variant
    reloadStatsSupported?: boolean
    stats?: GLib.Variant
    suspended?: boolean
}
class GdbusBearerProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType: number
    connected: boolean
    connectionError: GLib.Variant
    interface: string
    ipTimeout: number
    ip4Config: GLib.Variant
    ip6Config: GLib.Variant
    multiplexed: boolean
    profileId: number
    properties: GLib.Variant
    reloadStatsSupported: boolean
    stats: GLib.Variant
    suspended: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusBearer */
    callConnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): boolean
    callConnectSync(cancellable?: Gio.Cancellable | null): boolean
    callDisconnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(cancellable?: Gio.Cancellable | null): boolean
    completeConnect(invocation: Gio.DBusMethodInvocation): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusBearer */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bearer-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bearer-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connected", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connected", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiplexed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiplexed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::profile-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::profile-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reload-stats-supported", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reload-stats-supported", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stats", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stats", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suspended", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suspended", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusBearerProxy_ConstructProps)
    _init (config?: GdbusBearerProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusBearerProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusBearerProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusBearerProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusBearerProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusBearerProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusBearerProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusBearerProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusBearerProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusBearerSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType?: number
    connected?: boolean
    connectionError?: GLib.Variant
    interface?: string
    ipTimeout?: number
    ip4Config?: GLib.Variant
    ip6Config?: GLib.Variant
    multiplexed?: boolean
    profileId?: number
    properties?: GLib.Variant
    reloadStatsSupported?: boolean
    stats?: GLib.Variant
    suspended?: boolean
}
class GdbusBearerSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusBearer */
    bearerType: number
    connected: boolean
    connectionError: GLib.Variant
    interface: string
    ipTimeout: number
    ip4Config: GLib.Variant
    ip6Config: GLib.Variant
    multiplexed: boolean
    profileId: number
    properties: GLib.Variant
    reloadStatsSupported: boolean
    stats: GLib.Variant
    suspended: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusBearer */
    callConnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): boolean
    callConnectSync(cancellable?: Gio.Cancellable | null): boolean
    callDisconnect(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(cancellable?: Gio.Cancellable | null): boolean
    completeConnect(invocation: Gio.DBusMethodInvocation): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusBearer */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bearer-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bearer-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bearer-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connected", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connected", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::connection-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::connection-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::interface", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::interface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip4-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip4-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip4-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ip6-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ip6-config", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ip6-config", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiplexed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiplexed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiplexed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::profile-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::profile-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::profile-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reload-stats-supported", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reload-stats-supported", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reload-stats-supported", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stats", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stats", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stats", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suspended", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suspended", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suspended", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusBearerSkeleton_ConstructProps)
    _init (config?: GdbusBearerSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusBearerSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusCallProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat?: GLib.Variant
    audioPort?: string
    direction?: number
    multiparty?: boolean
    number?: string
    state?: number
    stateReason?: number
}
class GdbusCallProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat: GLib.Variant
    audioPort: string
    direction: number
    multiparty: boolean
    number: string
    state: number
    stateReason: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusCall */
    callAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptFinish(res: Gio.AsyncResult): boolean
    callAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callDeflect(argNumber: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeflectFinish(res: Gio.AsyncResult): boolean
    callDeflectSync(argNumber: string, cancellable?: Gio.Cancellable | null): boolean
    callHangup(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupFinish(res: Gio.AsyncResult): boolean
    callHangupSync(cancellable?: Gio.Cancellable | null): boolean
    callJoinMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callJoinMultipartyFinish(res: Gio.AsyncResult): boolean
    callJoinMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callLeaveMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLeaveMultipartyFinish(res: Gio.AsyncResult): boolean
    callLeaveMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callSendDtmf(argDtmf: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendDtmfFinish(res: Gio.AsyncResult): boolean
    callSendDtmfSync(argDtmf: string, cancellable?: Gio.Cancellable | null): boolean
    callStart(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(cancellable?: Gio.Cancellable | null): boolean
    completeAccept(invocation: Gio.DBusMethodInvocation): void
    completeDeflect(invocation: Gio.DBusMethodInvocation): void
    completeHangup(invocation: Gio.DBusMethodInvocation): void
    completeJoinMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeLeaveMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeSendDtmf(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    emitDtmfReceived(argDtmf: string): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusCall */
    connect(sigName: "dtmf-received", callback: ((argDtmf: string) => void)): number
    on(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "dtmf-received", callback: (argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "dtmf-received", argDtmf: string): void
    connect(sigName: "handle-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-deflect", callback: ((invocation: Gio.DBusMethodInvocation, argNumber: string) => boolean)): number
    on(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-deflect", invocation: Gio.DBusMethodInvocation, argNumber: string): void
    connect(sigName: "handle-hangup", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-join-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-join-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-leave-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-leave-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-send-dtmf", callback: ((invocation: Gio.DBusMethodInvocation, argDtmf: string) => boolean)): number
    on(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-dtmf", invocation: Gio.DBusMethodInvocation, argDtmf: string): void
    connect(sigName: "handle-start", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-format", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-format", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiparty", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiparty", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusCallProxy_ConstructProps)
    _init (config?: GdbusCallProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusCallProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusCallProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusCallProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusCallProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusCallProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusCallProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusCallProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusCallProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusCallSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat?: GLib.Variant
    audioPort?: string
    direction?: number
    multiparty?: boolean
    number?: string
    state?: number
    stateReason?: number
}
class GdbusCallSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusCall */
    audioFormat: GLib.Variant
    audioPort: string
    direction: number
    multiparty: boolean
    number: string
    state: number
    stateReason: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusCall */
    callAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptFinish(res: Gio.AsyncResult): boolean
    callAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callDeflect(argNumber: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeflectFinish(res: Gio.AsyncResult): boolean
    callDeflectSync(argNumber: string, cancellable?: Gio.Cancellable | null): boolean
    callHangup(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupFinish(res: Gio.AsyncResult): boolean
    callHangupSync(cancellable?: Gio.Cancellable | null): boolean
    callJoinMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callJoinMultipartyFinish(res: Gio.AsyncResult): boolean
    callJoinMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callLeaveMultiparty(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callLeaveMultipartyFinish(res: Gio.AsyncResult): boolean
    callLeaveMultipartySync(cancellable?: Gio.Cancellable | null): boolean
    callSendDtmf(argDtmf: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendDtmfFinish(res: Gio.AsyncResult): boolean
    callSendDtmfSync(argDtmf: string, cancellable?: Gio.Cancellable | null): boolean
    callStart(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartFinish(res: Gio.AsyncResult): boolean
    callStartSync(cancellable?: Gio.Cancellable | null): boolean
    completeAccept(invocation: Gio.DBusMethodInvocation): void
    completeDeflect(invocation: Gio.DBusMethodInvocation): void
    completeHangup(invocation: Gio.DBusMethodInvocation): void
    completeJoinMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeLeaveMultiparty(invocation: Gio.DBusMethodInvocation): void
    completeSendDtmf(invocation: Gio.DBusMethodInvocation): void
    completeStart(invocation: Gio.DBusMethodInvocation): void
    emitDtmfReceived(argDtmf: string): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusCall */
    connect(sigName: "dtmf-received", callback: ((argDtmf: string) => void)): number
    on(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "dtmf-received", callback: (argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "dtmf-received", callback: (argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "dtmf-received", argDtmf: string): void
    connect(sigName: "handle-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-deflect", callback: ((invocation: Gio.DBusMethodInvocation, argNumber: string) => boolean)): number
    on(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-deflect", callback: (invocation: Gio.DBusMethodInvocation, argNumber: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-deflect", invocation: Gio.DBusMethodInvocation, argNumber: string): void
    connect(sigName: "handle-hangup", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-join-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-join-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-join-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-leave-multiparty", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-leave-multiparty", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-leave-multiparty", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-send-dtmf", callback: ((invocation: Gio.DBusMethodInvocation, argDtmf: string) => boolean)): number
    on(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-dtmf", callback: (invocation: Gio.DBusMethodInvocation, argDtmf: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-dtmf", invocation: Gio.DBusMethodInvocation, argDtmf: string): void
    connect(sigName: "handle-start", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-format", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-format", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::audio-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::audio-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::audio-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiparty", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiparty", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiparty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusCallSkeleton_ConstructProps)
    _init (config?: GdbusCallSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusCallSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModem3gppProfileManagerProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField?: string
}
class GdbusModem3gppProfileManagerProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    callDelete(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callSet(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    callSetSync(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, profiles: GLib.Variant): void
    completeSet(invocation: Gio.DBusMethodInvocation, storedProperties: GLib.Variant): void
    emitUpdated(): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set", callback: ((invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set", invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant): void
    connect(sigName: "updated", callback: (() => void)): number
    on(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "updated", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "updated"): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index-field", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index-field", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModem3gppProfileManagerProxy_ConstructProps)
    _init (config?: GdbusModem3gppProfileManagerProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModem3gppProfileManagerProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModem3gppProfileManagerProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModem3gppProfileManagerProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModem3gppProfileManagerProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProfileManagerProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProfileManagerProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProfileManagerProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProfileManagerProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModem3gppProfileManagerSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField?: string
}
class GdbusModem3gppProfileManagerSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    callDelete(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callSet(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    callSetSync(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, profiles: GLib.Variant): void
    completeSet(invocation: Gio.DBusMethodInvocation, storedProperties: GLib.Variant): void
    emitUpdated(): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set", callback: ((invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set", invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant): void
    connect(sigName: "updated", callback: (() => void)): number
    on(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "updated", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "updated"): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index-field", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index-field", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModem3gppProfileManagerSkeleton_ConstructProps)
    _init (config?: GdbusModem3gppProfileManagerSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModem3gppProfileManagerSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModem3gppProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks?: number
    epsUeModeOperation?: number
    imei?: string
    initialEpsBearer?: string
    initialEpsBearerSettings?: GLib.Variant
    nr5gRegistrationSettings?: GLib.Variant
    operatorCode?: string
    operatorName?: string
    packetServiceState?: number
    pco?: GLib.Variant
    registrationState?: number
    subscriptionState?: number
}
class GdbusModem3gppProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks: number
    epsUeModeOperation: number
    imei: string
    initialEpsBearer: string
    initialEpsBearerSettings: GLib.Variant
    nr5gRegistrationSettings: GLib.Variant
    operatorCode: string
    operatorName: string
    packetServiceState: number
    pco: GLib.Variant
    registrationState: number
    subscriptionState: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    callDisableFacilityLock(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisableFacilityLockFinish(res: Gio.AsyncResult): boolean
    callDisableFacilityLockSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRegister(argOperatorId: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRegisterFinish(res: Gio.AsyncResult): boolean
    callRegisterSync(argOperatorId: string, cancellable?: Gio.Cancellable | null): boolean
    callScan(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callScanSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callSetEpsUeModeOperation(argMode: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetEpsUeModeOperationFinish(res: Gio.AsyncResult): boolean
    callSetEpsUeModeOperationSync(argMode: number, cancellable?: Gio.Cancellable | null): boolean
    callSetInitialEpsBearerSettings(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetInitialEpsBearerSettingsFinish(res: Gio.AsyncResult): boolean
    callSetInitialEpsBearerSettingsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetNr5gRegistrationSettings(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNr5gRegistrationSettingsFinish(res: Gio.AsyncResult): boolean
    callSetNr5gRegistrationSettingsSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPacketServiceState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPacketServiceStateFinish(res: Gio.AsyncResult): boolean
    callSetPacketServiceStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    completeDisableFacilityLock(invocation: Gio.DBusMethodInvocation): void
    completeRegister(invocation: Gio.DBusMethodInvocation): void
    completeScan(invocation: Gio.DBusMethodInvocation, results: GLib.Variant): void
    completeSetEpsUeModeOperation(invocation: Gio.DBusMethodInvocation): void
    completeSetInitialEpsBearerSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetNr5gRegistrationSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetPacketServiceState(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    connect(sigName: "handle-disable-facility-lock", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disable-facility-lock", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-register", callback: ((invocation: Gio.DBusMethodInvocation, argOperatorId: string) => boolean)): number
    on(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-register", invocation: Gio.DBusMethodInvocation, argOperatorId: string): void
    connect(sigName: "handle-scan", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-eps-ue-mode-operation", callback: ((invocation: Gio.DBusMethodInvocation, argMode: number) => boolean)): number
    on(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-eps-ue-mode-operation", invocation: Gio.DBusMethodInvocation, argMode: number): void
    connect(sigName: "handle-set-initial-eps-bearer-settings", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-initial-eps-bearer-settings", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "handle-set-nr5g-registration-settings", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-nr5g-registration-settings", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-set-packet-service-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-packet-service-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled-facility-locks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled-facility-locks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eps-ue-mode-operation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eps-ue-mode-operation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::imei", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::imei", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-eps-bearer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-eps-bearer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-eps-bearer-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-eps-bearer-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nr5g-registration-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nr5g-registration-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::packet-service-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::packet-service-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pco", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pco", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModem3gppProxy_ConstructProps)
    _init (config?: GdbusModem3gppProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModem3gppProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModem3gppProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModem3gppProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModem3gppProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModem3gppSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks?: number
    epsUeModeOperation?: number
    imei?: string
    initialEpsBearer?: string
    initialEpsBearerSettings?: GLib.Variant
    nr5gRegistrationSettings?: GLib.Variant
    operatorCode?: string
    operatorName?: string
    packetServiceState?: number
    pco?: GLib.Variant
    registrationState?: number
    subscriptionState?: number
}
class GdbusModem3gppSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks: number
    epsUeModeOperation: number
    imei: string
    initialEpsBearer: string
    initialEpsBearerSettings: GLib.Variant
    nr5gRegistrationSettings: GLib.Variant
    operatorCode: string
    operatorName: string
    packetServiceState: number
    pco: GLib.Variant
    registrationState: number
    subscriptionState: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    callDisableFacilityLock(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisableFacilityLockFinish(res: Gio.AsyncResult): boolean
    callDisableFacilityLockSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRegister(argOperatorId: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRegisterFinish(res: Gio.AsyncResult): boolean
    callRegisterSync(argOperatorId: string, cancellable?: Gio.Cancellable | null): boolean
    callScan(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callScanSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callSetEpsUeModeOperation(argMode: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetEpsUeModeOperationFinish(res: Gio.AsyncResult): boolean
    callSetEpsUeModeOperationSync(argMode: number, cancellable?: Gio.Cancellable | null): boolean
    callSetInitialEpsBearerSettings(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetInitialEpsBearerSettingsFinish(res: Gio.AsyncResult): boolean
    callSetInitialEpsBearerSettingsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetNr5gRegistrationSettings(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNr5gRegistrationSettingsFinish(res: Gio.AsyncResult): boolean
    callSetNr5gRegistrationSettingsSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPacketServiceState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPacketServiceStateFinish(res: Gio.AsyncResult): boolean
    callSetPacketServiceStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    completeDisableFacilityLock(invocation: Gio.DBusMethodInvocation): void
    completeRegister(invocation: Gio.DBusMethodInvocation): void
    completeScan(invocation: Gio.DBusMethodInvocation, results: GLib.Variant): void
    completeSetEpsUeModeOperation(invocation: Gio.DBusMethodInvocation): void
    completeSetInitialEpsBearerSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetNr5gRegistrationSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetPacketServiceState(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    connect(sigName: "handle-disable-facility-lock", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disable-facility-lock", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-register", callback: ((invocation: Gio.DBusMethodInvocation, argOperatorId: string) => boolean)): number
    on(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-register", invocation: Gio.DBusMethodInvocation, argOperatorId: string): void
    connect(sigName: "handle-scan", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-eps-ue-mode-operation", callback: ((invocation: Gio.DBusMethodInvocation, argMode: number) => boolean)): number
    on(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-eps-ue-mode-operation", invocation: Gio.DBusMethodInvocation, argMode: number): void
    connect(sigName: "handle-set-initial-eps-bearer-settings", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-initial-eps-bearer-settings", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "handle-set-nr5g-registration-settings", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-nr5g-registration-settings", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-set-packet-service-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-packet-service-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled-facility-locks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled-facility-locks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eps-ue-mode-operation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eps-ue-mode-operation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::imei", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::imei", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-eps-bearer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-eps-bearer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-eps-bearer-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-eps-bearer-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nr5g-registration-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nr5g-registration-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::packet-service-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::packet-service-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pco", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pco", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModem3gppSkeleton_ConstructProps)
    _init (config?: GdbusModem3gppSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModem3gppSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModem3gppUssdProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification?: string
    networkRequest?: string
    state?: number
}
class GdbusModem3gppUssdProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification: string
    networkRequest: string
    state: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    callCancel(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(cancellable?: Gio.Cancellable | null): boolean
    callInitiate(argCommand: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInitiateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callInitiateSync(argCommand: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespond(argResponse: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRespondFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespondSync(argResponse: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    completeInitiate(invocation: Gio.DBusMethodInvocation, reply: string): void
    completeRespond(invocation: Gio.DBusMethodInvocation, reply: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    connect(sigName: "handle-cancel", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-initiate", callback: ((invocation: Gio.DBusMethodInvocation, argCommand: string) => boolean)): number
    on(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-initiate", invocation: Gio.DBusMethodInvocation, argCommand: string): void
    connect(sigName: "handle-respond", callback: ((invocation: Gio.DBusMethodInvocation, argResponse: string) => boolean)): number
    on(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-respond", invocation: Gio.DBusMethodInvocation, argResponse: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-notification", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-notification", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModem3gppUssdProxy_ConstructProps)
    _init (config?: GdbusModem3gppUssdProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModem3gppUssdProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModem3gppUssdProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModem3gppUssdProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModem3gppUssdProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppUssdProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppUssdProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppUssdProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModem3gppUssdProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModem3gppUssdSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification?: string
    networkRequest?: string
    state?: number
}
class GdbusModem3gppUssdSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification: string
    networkRequest: string
    state: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    callCancel(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(cancellable?: Gio.Cancellable | null): boolean
    callInitiate(argCommand: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInitiateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callInitiateSync(argCommand: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespond(argResponse: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRespondFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespondSync(argResponse: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    completeInitiate(invocation: Gio.DBusMethodInvocation, reply: string): void
    completeRespond(invocation: Gio.DBusMethodInvocation, reply: string): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    connect(sigName: "handle-cancel", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-initiate", callback: ((invocation: Gio.DBusMethodInvocation, argCommand: string) => boolean)): number
    on(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-initiate", invocation: Gio.DBusMethodInvocation, argCommand: string): void
    connect(sigName: "handle-respond", callback: ((invocation: Gio.DBusMethodInvocation, argResponse: string) => boolean)): number
    on(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-respond", invocation: Gio.DBusMethodInvocation, argResponse: string): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-notification", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-notification", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModem3gppUssdSkeleton_ConstructProps)
    _init (config?: GdbusModem3gppUssdSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModem3gppUssdSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemCdmaProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState?: number
    cdma1xRegistrationState?: number
    esn?: string
    evdoRegistrationState?: number
    meid?: string
    nid?: number
    sid?: number
}
class GdbusModemCdmaProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState: number
    cdma1xRegistrationState: number
    esn: string
    evdoRegistrationState: number
    meid: string
    nid: number
    sid: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemCdma */
    callActivate(argCarrierCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateManual(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateManualFinish(res: Gio.AsyncResult): boolean
    callActivateManualSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argCarrierCode: string, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateManual(invocation: Gio.DBusMethodInvocation): void
    emitActivationStateChanged(argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemCdma */
    connect(sigName: "activation-state-changed", callback: ((argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void)): number
    on(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "activation-state-changed", argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    connect(sigName: "handle-activate", callback: ((invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => boolean)): number
    on(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argCarrierCode: string): void
    connect(sigName: "handle-activate-manual", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate-manual", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::activation-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activation-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::esn", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::esn", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemCdmaProxy_ConstructProps)
    _init (config?: GdbusModemCdmaProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemCdmaProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemCdmaProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemCdmaProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemCdmaProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemCdmaProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemCdmaProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemCdmaProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemCdmaProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemCdmaSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState?: number
    cdma1xRegistrationState?: number
    esn?: string
    evdoRegistrationState?: number
    meid?: string
    nid?: number
    sid?: number
}
class GdbusModemCdmaSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState: number
    cdma1xRegistrationState: number
    esn: string
    evdoRegistrationState: number
    meid: string
    nid: number
    sid: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemCdma */
    callActivate(argCarrierCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateManual(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateManualFinish(res: Gio.AsyncResult): boolean
    callActivateManualSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argCarrierCode: string, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateManual(invocation: Gio.DBusMethodInvocation): void
    emitActivationStateChanged(argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemCdma */
    connect(sigName: "activation-state-changed", callback: ((argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void)): number
    on(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "activation-state-changed", argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    connect(sigName: "handle-activate", callback: ((invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => boolean)): number
    on(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argCarrierCode: string): void
    connect(sigName: "handle-activate-manual", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate-manual", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::activation-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activation-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::esn", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::esn", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemCdmaSkeleton_ConstructProps)
    _init (config?: GdbusModemCdmaSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemCdmaSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemFirmwareProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings?: GLib.Variant
}
class GdbusModemFirmwareProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callSelect(argUniqueid: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSelectFinish(res: Gio.AsyncResult): boolean
    callSelectSync(argUniqueid: string, cancellable?: Gio.Cancellable | null): boolean
    completeList(invocation: Gio.DBusMethodInvocation, selected: string, installed: GLib.Variant): void
    completeSelect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-select", callback: ((invocation: Gio.DBusMethodInvocation, argUniqueid: string) => boolean)): number
    on(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-select", invocation: Gio.DBusMethodInvocation, argUniqueid: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::update-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::update-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemFirmwareProxy_ConstructProps)
    _init (config?: GdbusModemFirmwareProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemFirmwareProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemFirmwareProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemFirmwareProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemFirmwareProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemFirmwareProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemFirmwareProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemFirmwareProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemFirmwareProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemFirmwareSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings?: GLib.Variant
}
class GdbusModemFirmwareSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callSelect(argUniqueid: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSelectFinish(res: Gio.AsyncResult): boolean
    callSelectSync(argUniqueid: string, cancellable?: Gio.Cancellable | null): boolean
    completeList(invocation: Gio.DBusMethodInvocation, selected: string, installed: GLib.Variant): void
    completeSelect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-select", callback: ((invocation: Gio.DBusMethodInvocation, argUniqueid: string) => boolean)): number
    on(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-select", invocation: Gio.DBusMethodInvocation, argUniqueid: string): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::update-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::update-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemFirmwareSkeleton_ConstructProps)
    _init (config?: GdbusModemFirmwareSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemFirmwareSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemLocationProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers?: string[]
    capabilities?: number
    enabled?: number
    gpsRefreshRate?: number
    location?: GLib.Variant
    signalsLocation?: boolean
    suplServer?: string
    supportedAssistanceData?: number
}
class GdbusModemLocationProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers: string[]
    capabilities: number
    enabled: number
    gpsRefreshRate: number
    location: GLib.Variant
    signalsLocation: boolean
    suplServer: string
    supportedAssistanceData: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemLocation */
    callGetLocation(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetLocationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callGetLocationSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callInjectAssistanceData(argData: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInjectAssistanceDataFinish(res: Gio.AsyncResult): boolean
    callInjectAssistanceDataSync(argData: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetGpsRefreshRate(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetGpsRefreshRateFinish(res: Gio.AsyncResult): boolean
    callSetGpsRefreshRateSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetSuplServer(argSupl: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetSuplServerFinish(res: Gio.AsyncResult): boolean
    callSetSuplServerSync(argSupl: string, cancellable?: Gio.Cancellable | null): boolean
    callSetup(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null): boolean
    completeGetLocation(invocation: Gio.DBusMethodInvocation, location: GLib.Variant): void
    completeInjectAssistanceData(invocation: Gio.DBusMethodInvocation): void
    completeSetGpsRefreshRate(invocation: Gio.DBusMethodInvocation): void
    completeSetSuplServer(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemLocation */
    connect(sigName: "handle-get-location", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-location", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-inject-assistance-data", callback: ((invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => boolean)): number
    on(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inject-assistance-data", invocation: Gio.DBusMethodInvocation, argData: GLib.Variant): void
    connect(sigName: "handle-set-gps-refresh-rate", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-gps-refresh-rate", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-set-supl-server", callback: ((invocation: Gio.DBusMethodInvocation, argSupl: string) => boolean)): number
    on(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-supl-server", invocation: Gio.DBusMethodInvocation, argSupl: string): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::assistance-data-servers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::assistance-data-servers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gps-refresh-rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gps-refresh-rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signals-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signals-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signals-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signals-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signals-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supl-server", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supl-server", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-assistance-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-assistance-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemLocationProxy_ConstructProps)
    _init (config?: GdbusModemLocationProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemLocationProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemLocationProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemLocationProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemLocationProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemLocationProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemLocationProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemLocationProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemLocationProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemLocationSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers?: string[]
    capabilities?: number
    enabled?: number
    gpsRefreshRate?: number
    location?: GLib.Variant
    signalsLocation?: boolean
    suplServer?: string
    supportedAssistanceData?: number
}
class GdbusModemLocationSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers: string[]
    capabilities: number
    enabled: number
    gpsRefreshRate: number
    location: GLib.Variant
    signalsLocation: boolean
    suplServer: string
    supportedAssistanceData: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemLocation */
    callGetLocation(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetLocationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callGetLocationSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callInjectAssistanceData(argData: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInjectAssistanceDataFinish(res: Gio.AsyncResult): boolean
    callInjectAssistanceDataSync(argData: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetGpsRefreshRate(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetGpsRefreshRateFinish(res: Gio.AsyncResult): boolean
    callSetGpsRefreshRateSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetSuplServer(argSupl: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetSuplServerFinish(res: Gio.AsyncResult): boolean
    callSetSuplServerSync(argSupl: string, cancellable?: Gio.Cancellable | null): boolean
    callSetup(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null): boolean
    completeGetLocation(invocation: Gio.DBusMethodInvocation, location: GLib.Variant): void
    completeInjectAssistanceData(invocation: Gio.DBusMethodInvocation): void
    completeSetGpsRefreshRate(invocation: Gio.DBusMethodInvocation): void
    completeSetSuplServer(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemLocation */
    connect(sigName: "handle-get-location", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-location", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-inject-assistance-data", callback: ((invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => boolean)): number
    on(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inject-assistance-data", invocation: Gio.DBusMethodInvocation, argData: GLib.Variant): void
    connect(sigName: "handle-set-gps-refresh-rate", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-gps-refresh-rate", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-set-supl-server", callback: ((invocation: Gio.DBusMethodInvocation, argSupl: string) => boolean)): number
    on(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-supl-server", invocation: Gio.DBusMethodInvocation, argSupl: string): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::assistance-data-servers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::assistance-data-servers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gps-refresh-rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gps-refresh-rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signals-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signals-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signals-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signals-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signals-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supl-server", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supl-server", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-assistance-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-assistance-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemLocationSkeleton_ConstructProps)
    _init (config?: GdbusModemLocationSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemLocationSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemMessagingProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage?: number
    messages?: string[]
    supportedStorages?: GLib.Variant
}
class GdbusModemMessagingProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage: number
    messages: string[]
    supportedStorages: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    callCreate(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDelete(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    completeCreate(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, result: string): void
    emitAdded(argPath: string, argReceived: boolean): void
    emitDeleted(argPath: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    connect(sigName: "added", callback: ((argPath: string, argReceived: boolean) => void)): number
    on(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "added", callback: (argPath: string, argReceived: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "added", argPath: string, argReceived: boolean): void
    connect(sigName: "deleted", callback: ((argPath: string) => void)): number
    on(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "deleted", argPath: string): void
    connect(sigName: "handle-create", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::messages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::messages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-storages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-storages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemMessagingProxy_ConstructProps)
    _init (config?: GdbusModemMessagingProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemMessagingProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemMessagingProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemMessagingProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemMessagingProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemMessagingProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemMessagingProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemMessagingProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemMessagingProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemMessagingSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage?: number
    messages?: string[]
    supportedStorages?: GLib.Variant
}
class GdbusModemMessagingSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage: number
    messages: string[]
    supportedStorages: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    callCreate(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDelete(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    completeCreate(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, result: string): void
    emitAdded(argPath: string, argReceived: boolean): void
    emitDeleted(argPath: string): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    connect(sigName: "added", callback: ((argPath: string, argReceived: boolean) => void)): number
    on(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "added", callback: (argPath: string, argReceived: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "added", argPath: string, argReceived: boolean): void
    connect(sigName: "deleted", callback: ((argPath: string) => void)): number
    on(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "deleted", argPath: string): void
    connect(sigName: "handle-create", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::messages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::messages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-storages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-storages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemMessagingSkeleton_ConstructProps)
    _init (config?: GdbusModemMessagingSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemMessagingSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemOmaProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features?: number
    pendingNetworkInitiatedSessions?: GLib.Variant
    sessionState?: number
    sessionType?: number
}
class GdbusModemOmaProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features: number
    pendingNetworkInitiatedSessions: GLib.Variant
    sessionState: number
    sessionType: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemOma */
    callAcceptNetworkInitiatedSession(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptNetworkInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callAcceptNetworkInitiatedSessionSync(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCancelSession(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelSessionFinish(res: Gio.AsyncResult): boolean
    callCancelSessionSync(cancellable?: Gio.Cancellable | null): boolean
    callSetup(argFeatures: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argFeatures: number, cancellable?: Gio.Cancellable | null): boolean
    callStartClientInitiatedSession(argSessionType: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartClientInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callStartClientInitiatedSessionSync(argSessionType: number, cancellable?: Gio.Cancellable | null): boolean
    completeAcceptNetworkInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    completeCancelSession(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeStartClientInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    emitSessionStateChanged(argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemOma */
    connect(sigName: "handle-accept-network-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => boolean)): number
    on(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept-network-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean): void
    connect(sigName: "handle-cancel-session", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel-session", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argFeatures: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argFeatures: number): void
    connect(sigName: "handle-start-client-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionType: number) => boolean)): number
    on(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start-client-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionType: number): void
    connect(sigName: "session-state-changed", callback: ((argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void)): number
    on(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "session-state-changed", argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::features", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::features", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pending-network-initiated-sessions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pending-network-initiated-sessions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemOmaProxy_ConstructProps)
    _init (config?: GdbusModemOmaProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemOmaProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemOmaProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemOmaProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemOmaProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemOmaProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemOmaProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemOmaProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemOmaProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemOmaSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features?: number
    pendingNetworkInitiatedSessions?: GLib.Variant
    sessionState?: number
    sessionType?: number
}
class GdbusModemOmaSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features: number
    pendingNetworkInitiatedSessions: GLib.Variant
    sessionState: number
    sessionType: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemOma */
    callAcceptNetworkInitiatedSession(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptNetworkInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callAcceptNetworkInitiatedSessionSync(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCancelSession(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelSessionFinish(res: Gio.AsyncResult): boolean
    callCancelSessionSync(cancellable?: Gio.Cancellable | null): boolean
    callSetup(argFeatures: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argFeatures: number, cancellable?: Gio.Cancellable | null): boolean
    callStartClientInitiatedSession(argSessionType: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartClientInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callStartClientInitiatedSessionSync(argSessionType: number, cancellable?: Gio.Cancellable | null): boolean
    completeAcceptNetworkInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    completeCancelSession(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeStartClientInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    emitSessionStateChanged(argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemOma */
    connect(sigName: "handle-accept-network-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => boolean)): number
    on(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept-network-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean): void
    connect(sigName: "handle-cancel-session", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel-session", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argFeatures: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argFeatures: number): void
    connect(sigName: "handle-start-client-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionType: number) => boolean)): number
    on(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start-client-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionType: number): void
    connect(sigName: "session-state-changed", callback: ((argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void)): number
    on(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "session-state-changed", argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::features", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::features", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pending-network-initiated-sessions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pending-network-initiated-sessions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemOmaSkeleton_ConstructProps)
    _init (config?: GdbusModemOmaSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemOmaSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies?: number
    bearers?: string[]
    carrierConfiguration?: string
    carrierConfigurationRevision?: string
    currentBands?: GLib.Variant
    currentCapabilities?: number
    currentModes?: GLib.Variant
    device?: string
    deviceIdentifier?: string
    drivers?: string[]
    equipmentIdentifier?: string
    hardwareRevision?: string
    manufacturer?: string
    maxActiveBearers?: number
    maxActiveMultiplexedBearers?: number
    maxBearers?: number
    model?: string
    ownNumbers?: string[]
    plugin?: string
    ports?: GLib.Variant
    powerState?: number
    primaryPort?: string
    primarySimSlot?: number
    revision?: string
    signalQuality?: GLib.Variant
    sim?: string
    simSlots?: string[]
    state?: number
    stateFailedReason?: number
    supportedBands?: GLib.Variant
    supportedCapabilities?: GLib.Variant
    supportedIpFamilies?: number
    supportedModes?: GLib.Variant
    unlockRequired?: number
    unlockRetries?: GLib.Variant
}
class GdbusModemProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies: number
    bearers: string[]
    carrierConfiguration: string
    carrierConfigurationRevision: string
    currentBands: GLib.Variant
    currentCapabilities: number
    currentModes: GLib.Variant
    device: string
    deviceIdentifier: string
    drivers: string[]
    equipmentIdentifier: string
    hardwareRevision: string
    manufacturer: string
    maxActiveBearers: number
    maxActiveMultiplexedBearers: number
    maxBearers: number
    model: string
    ownNumbers: string[]
    plugin: string
    ports: GLib.Variant
    powerState: number
    primaryPort: string
    primarySimSlot: number
    revision: string
    signalQuality: GLib.Variant
    sim: string
    simSlots: string[]
    state: number
    stateFailedReason: number
    supportedBands: GLib.Variant
    supportedCapabilities: GLib.Variant
    supportedIpFamilies: number
    supportedModes: GLib.Variant
    unlockRequired: number
    unlockRetries: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem */
    callCommand(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCommandFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCommandSync(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCreateBearer(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateBearerFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateBearerSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteBearer(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteBearerFinish(res: Gio.AsyncResult): boolean
    callDeleteBearerSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callFactoryReset(argCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFactoryResetFinish(res: Gio.AsyncResult): boolean
    callFactoryResetSync(argCode: string, cancellable?: Gio.Cancellable | null): boolean
    callGetCellInfo(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetCellInfoFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callGetCellInfoSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callListBearers(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListBearersFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callListBearersSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callReset(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResetFinish(res: Gio.AsyncResult): boolean
    callResetSync(cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentBands(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentBandsFinish(res: Gio.AsyncResult): boolean
    callSetCurrentBandsSync(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentCapabilities(argCapabilities: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentCapabilitiesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentCapabilitiesSync(argCapabilities: number, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentModes(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentModesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentModesSync(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerStateFinish(res: Gio.AsyncResult): boolean
    callSetPowerStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    callSetPrimarySimSlot(argSimSlot: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPrimarySimSlotFinish(res: Gio.AsyncResult): boolean
    callSetPrimarySimSlotSync(argSimSlot: number, cancellable?: Gio.Cancellable | null): boolean
    completeCommand(invocation: Gio.DBusMethodInvocation, response: string): void
    completeCreateBearer(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteBearer(invocation: Gio.DBusMethodInvocation): void
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeFactoryReset(invocation: Gio.DBusMethodInvocation): void
    completeGetCellInfo(invocation: Gio.DBusMethodInvocation, cellInfo: GLib.Variant): void
    completeListBearers(invocation: Gio.DBusMethodInvocation, bearers: string): void
    completeReset(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentBands(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentCapabilities(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentModes(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerState(invocation: Gio.DBusMethodInvocation): void
    completeSetPrimarySimSlot(invocation: Gio.DBusMethodInvocation): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem */
    connect(sigName: "handle-command", callback: ((invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => boolean)): number
    on(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-command", invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number): void
    connect(sigName: "handle-create-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-bearer", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-bearer", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-factory-reset", callback: ((invocation: Gio.DBusMethodInvocation, argCode: string) => boolean)): number
    on(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-factory-reset", invocation: Gio.DBusMethodInvocation, argCode: string): void
    connect(sigName: "handle-get-cell-info", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-cell-info", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-bearers", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-bearers", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-reset", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-reset", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-current-bands", callback: ((invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-bands", invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant): void
    connect(sigName: "handle-set-current-capabilities", callback: ((invocation: Gio.DBusMethodInvocation, argCapabilities: number) => boolean)): number
    on(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-capabilities", invocation: Gio.DBusMethodInvocation, argCapabilities: number): void
    connect(sigName: "handle-set-current-modes", callback: ((invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-modes", invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant): void
    connect(sigName: "handle-set-power-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "handle-set-primary-sim-slot", callback: ((invocation: Gio.DBusMethodInvocation, argSimSlot: number) => boolean)): number
    on(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-primary-sim-slot", invocation: Gio.DBusMethodInvocation, argSimSlot: number): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier-configuration", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier-configuration", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier-configuration-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier-configuration-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drivers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drivers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::equipment-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equipment-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hardware-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hardware-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manufacturer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manufacturer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-active-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-active-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-active-multiplexed-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-active-multiplexed-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::own-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::own-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ports", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ports", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::power-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::power-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-sim-slot", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-sim-slot", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-slots", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-slots", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-failed-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-failed-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-ip-families", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-ip-families", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unlock-required", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unlock-required", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unlock-retries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unlock-retries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemProxy_ConstructProps)
    _init (config?: GdbusModemProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSarProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel?: number
    state?: boolean
}
class GdbusModemSarProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel: number
    state: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSar */
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerLevel(argLevel: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerLevelFinish(res: Gio.AsyncResult): boolean
    callSetPowerLevelSync(argLevel: number, cancellable?: Gio.Cancellable | null): boolean
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerLevel(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSar */
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-set-power-level", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: number) => boolean)): number
    on(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-level", invocation: Gio.DBusMethodInvocation, argLevel: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::power-level", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::power-level", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSarProxy_ConstructProps)
    _init (config?: GdbusModemSarProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemSarProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemSarProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemSarProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemSarProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemSarProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemSarProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemSarProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemSarProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSarSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel?: number
    state?: boolean
}
class GdbusModemSarSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel: number
    state: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSar */
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerLevel(argLevel: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerLevelFinish(res: Gio.AsyncResult): boolean
    callSetPowerLevelSync(argLevel: number, cancellable?: Gio.Cancellable | null): boolean
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerLevel(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSar */
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-set-power-level", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: number) => boolean)): number
    on(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-level", invocation: Gio.DBusMethodInvocation, argLevel: number): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::power-level", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::power-level", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSarSkeleton_ConstructProps)
    _init (config?: GdbusModemSarSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemSarSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSignalProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma?: GLib.Variant
    errorRateThreshold?: boolean
    evdo?: GLib.Variant
    gsm?: GLib.Variant
    lte?: GLib.Variant
    nr5g?: GLib.Variant
    rate?: number
    rssiThreshold?: number
    umts?: GLib.Variant
}
class GdbusModemSignalProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma: GLib.Variant
    errorRateThreshold: boolean
    evdo: GLib.Variant
    gsm: GLib.Variant
    lte: GLib.Variant
    nr5g: GLib.Variant
    rate: number
    rssiThreshold: number
    umts: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSignal */
    callSetup(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetupThresholds(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupThresholdsFinish(res: Gio.AsyncResult): boolean
    callSetupThresholdsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeSetupThresholds(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSignal */
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-setup-thresholds", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup-thresholds", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::error-rate-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::error-rate-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::evdo", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::evdo", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gsm", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gsm", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lte", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lte", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nr5g", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nr5g", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rssi-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rssi-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::umts", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::umts", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSignalProxy_ConstructProps)
    _init (config?: GdbusModemSignalProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemSignalProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemSignalProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemSignalProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemSignalProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemSignalProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemSignalProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemSignalProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemSignalProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSignalSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma?: GLib.Variant
    errorRateThreshold?: boolean
    evdo?: GLib.Variant
    gsm?: GLib.Variant
    lte?: GLib.Variant
    nr5g?: GLib.Variant
    rate?: number
    rssiThreshold?: number
    umts?: GLib.Variant
}
class GdbusModemSignalSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma: GLib.Variant
    errorRateThreshold: boolean
    evdo: GLib.Variant
    gsm: GLib.Variant
    lte: GLib.Variant
    nr5g: GLib.Variant
    rate: number
    rssiThreshold: number
    umts: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSignal */
    callSetup(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetupThresholds(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupThresholdsFinish(res: Gio.AsyncResult): boolean
    callSetupThresholdsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeSetupThresholds(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSignal */
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-setup-thresholds", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup-thresholds", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::error-rate-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::error-rate-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::evdo", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::evdo", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gsm", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gsm", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lte", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lte", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nr5g", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nr5g", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rssi-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rssi-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::umts", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::umts", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSignalSkeleton_ConstructProps)
    _init (config?: GdbusModemSignalSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemSignalSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSimpleProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
}
class GdbusModemSimpleProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSimple */
    callConnect(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callConnectSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callDisconnect(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callGetStatus(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatusFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    callGetStatusSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    completeConnect(invocation: Gio.DBusMethodInvocation, bearer: string): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    completeGetStatus(invocation: Gio.DBusMethodInvocation, properties: GLib.Variant): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSimple */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-get-status", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-status", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSimpleProxy_ConstructProps)
    _init (config?: GdbusModemSimpleProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemSimpleProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemSimpleProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemSimpleProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemSimpleProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemSimpleProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemSimpleProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemSimpleProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemSimpleProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSimpleSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
}
class GdbusModemSimpleSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSimple */
    callConnect(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callConnectSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callDisconnect(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callGetStatus(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatusFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    callGetStatusSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    completeConnect(invocation: Gio.DBusMethodInvocation, bearer: string): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    completeGetStatus(invocation: Gio.DBusMethodInvocation, properties: GLib.Variant): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSimple */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-get-status", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-status", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSimpleSkeleton_ConstructProps)
    _init (config?: GdbusModemSimpleSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemSimpleSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies?: number
    bearers?: string[]
    carrierConfiguration?: string
    carrierConfigurationRevision?: string
    currentBands?: GLib.Variant
    currentCapabilities?: number
    currentModes?: GLib.Variant
    device?: string
    deviceIdentifier?: string
    drivers?: string[]
    equipmentIdentifier?: string
    hardwareRevision?: string
    manufacturer?: string
    maxActiveBearers?: number
    maxActiveMultiplexedBearers?: number
    maxBearers?: number
    model?: string
    ownNumbers?: string[]
    plugin?: string
    ports?: GLib.Variant
    powerState?: number
    primaryPort?: string
    primarySimSlot?: number
    revision?: string
    signalQuality?: GLib.Variant
    sim?: string
    simSlots?: string[]
    state?: number
    stateFailedReason?: number
    supportedBands?: GLib.Variant
    supportedCapabilities?: GLib.Variant
    supportedIpFamilies?: number
    supportedModes?: GLib.Variant
    unlockRequired?: number
    unlockRetries?: GLib.Variant
}
class GdbusModemSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies: number
    bearers: string[]
    carrierConfiguration: string
    carrierConfigurationRevision: string
    currentBands: GLib.Variant
    currentCapabilities: number
    currentModes: GLib.Variant
    device: string
    deviceIdentifier: string
    drivers: string[]
    equipmentIdentifier: string
    hardwareRevision: string
    manufacturer: string
    maxActiveBearers: number
    maxActiveMultiplexedBearers: number
    maxBearers: number
    model: string
    ownNumbers: string[]
    plugin: string
    ports: GLib.Variant
    powerState: number
    primaryPort: string
    primarySimSlot: number
    revision: string
    signalQuality: GLib.Variant
    sim: string
    simSlots: string[]
    state: number
    stateFailedReason: number
    supportedBands: GLib.Variant
    supportedCapabilities: GLib.Variant
    supportedIpFamilies: number
    supportedModes: GLib.Variant
    unlockRequired: number
    unlockRetries: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem */
    callCommand(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCommandFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCommandSync(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCreateBearer(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateBearerFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateBearerSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteBearer(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteBearerFinish(res: Gio.AsyncResult): boolean
    callDeleteBearerSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callFactoryReset(argCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFactoryResetFinish(res: Gio.AsyncResult): boolean
    callFactoryResetSync(argCode: string, cancellable?: Gio.Cancellable | null): boolean
    callGetCellInfo(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetCellInfoFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callGetCellInfoSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callListBearers(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListBearersFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callListBearersSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callReset(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResetFinish(res: Gio.AsyncResult): boolean
    callResetSync(cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentBands(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentBandsFinish(res: Gio.AsyncResult): boolean
    callSetCurrentBandsSync(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentCapabilities(argCapabilities: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentCapabilitiesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentCapabilitiesSync(argCapabilities: number, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentModes(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentModesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentModesSync(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerStateFinish(res: Gio.AsyncResult): boolean
    callSetPowerStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    callSetPrimarySimSlot(argSimSlot: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPrimarySimSlotFinish(res: Gio.AsyncResult): boolean
    callSetPrimarySimSlotSync(argSimSlot: number, cancellable?: Gio.Cancellable | null): boolean
    completeCommand(invocation: Gio.DBusMethodInvocation, response: string): void
    completeCreateBearer(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteBearer(invocation: Gio.DBusMethodInvocation): void
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeFactoryReset(invocation: Gio.DBusMethodInvocation): void
    completeGetCellInfo(invocation: Gio.DBusMethodInvocation, cellInfo: GLib.Variant): void
    completeListBearers(invocation: Gio.DBusMethodInvocation, bearers: string): void
    completeReset(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentBands(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentCapabilities(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentModes(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerState(invocation: Gio.DBusMethodInvocation): void
    completeSetPrimarySimSlot(invocation: Gio.DBusMethodInvocation): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem */
    connect(sigName: "handle-command", callback: ((invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => boolean)): number
    on(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-command", invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number): void
    connect(sigName: "handle-create-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-bearer", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-bearer", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-factory-reset", callback: ((invocation: Gio.DBusMethodInvocation, argCode: string) => boolean)): number
    on(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-factory-reset", invocation: Gio.DBusMethodInvocation, argCode: string): void
    connect(sigName: "handle-get-cell-info", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-cell-info", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-bearers", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-bearers", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-reset", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-reset", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-current-bands", callback: ((invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-bands", invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant): void
    connect(sigName: "handle-set-current-capabilities", callback: ((invocation: Gio.DBusMethodInvocation, argCapabilities: number) => boolean)): number
    on(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-capabilities", invocation: Gio.DBusMethodInvocation, argCapabilities: number): void
    connect(sigName: "handle-set-current-modes", callback: ((invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-modes", invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant): void
    connect(sigName: "handle-set-power-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "handle-set-primary-sim-slot", callback: ((invocation: Gio.DBusMethodInvocation, argSimSlot: number) => boolean)): number
    on(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-primary-sim-slot", invocation: Gio.DBusMethodInvocation, argSimSlot: number): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier-configuration", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier-configuration", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier-configuration-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier-configuration-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drivers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drivers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::equipment-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equipment-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hardware-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hardware-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manufacturer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manufacturer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-active-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-active-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-active-multiplexed-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-active-multiplexed-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::own-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::own-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ports", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ports", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::power-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::power-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-sim-slot", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-sim-slot", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-slots", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-slots", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-failed-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-failed-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-ip-families", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-ip-families", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unlock-required", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unlock-required", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unlock-retries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unlock-retries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemSkeleton_ConstructProps)
    _init (config?: GdbusModemSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemTimeProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone?: GLib.Variant
}
class GdbusModemTimeProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemTime */
    callGetNetworkTime(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetNetworkTimeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outTime */ string | null ]
    callGetNetworkTimeSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outTime */ string | null ]
    completeGetNetworkTime(invocation: Gio.DBusMethodInvocation, time: string): void
    emitNetworkTimeChanged(argTime: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemTime */
    connect(sigName: "handle-get-network-time", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-network-time", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "network-time-changed", callback: ((argTime: string) => void)): number
    on(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-time-changed", callback: (argTime: string) => void): NodeJS.EventEmitter
    emit(sigName: "network-time-changed", argTime: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-timezone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-timezone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemTimeProxy_ConstructProps)
    _init (config?: GdbusModemTimeProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemTimeProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemTimeProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemTimeProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemTimeProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemTimeProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemTimeProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemTimeProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemTimeProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemTimeSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone?: GLib.Variant
}
class GdbusModemTimeSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemTime */
    callGetNetworkTime(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetNetworkTimeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outTime */ string | null ]
    callGetNetworkTimeSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outTime */ string | null ]
    completeGetNetworkTime(invocation: Gio.DBusMethodInvocation, time: string): void
    emitNetworkTimeChanged(argTime: string): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemTime */
    connect(sigName: "handle-get-network-time", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-network-time", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "network-time-changed", callback: ((argTime: string) => void)): number
    on(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-time-changed", callback: (argTime: string) => void): NodeJS.EventEmitter
    emit(sigName: "network-time-changed", argTime: string): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-timezone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-timezone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemTimeSkeleton_ConstructProps)
    _init (config?: GdbusModemTimeSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemTimeSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemVoiceProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls?: string[]
    emergencyOnly?: boolean
}
class GdbusModemVoiceProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls: string[]
    emergencyOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemVoice */
    callCallWaitingQuery(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingQueryFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingQuerySync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingSetup(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingSetupFinish(res: Gio.AsyncResult): boolean
    callCallWaitingSetupSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCreateCall(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateCallFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateCallSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteCall(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteCallFinish(res: Gio.AsyncResult): boolean
    callDeleteCallSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callHangupAll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAllFinish(res: Gio.AsyncResult): boolean
    callHangupAllSync(cancellable?: Gio.Cancellable | null): boolean
    callHangupAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHangupAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callHoldAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHoldAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHoldAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callListCalls(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListCallsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListCallsSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callTransfer(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTransferFinish(res: Gio.AsyncResult): boolean
    callTransferSync(cancellable?: Gio.Cancellable | null): boolean
    completeCallWaitingQuery(invocation: Gio.DBusMethodInvocation, status: boolean): void
    completeCallWaitingSetup(invocation: Gio.DBusMethodInvocation): void
    completeCreateCall(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteCall(invocation: Gio.DBusMethodInvocation): void
    completeHangupAll(invocation: Gio.DBusMethodInvocation): void
    completeHangupAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeHoldAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeListCalls(invocation: Gio.DBusMethodInvocation, result: string): void
    completeTransfer(invocation: Gio.DBusMethodInvocation): void
    emitCallAdded(argPath: string): void
    emitCallDeleted(argPath: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemVoice */
    connect(sigName: "call-added", callback: ((argPath: string) => void)): number
    on(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-added", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-added", argPath: string): void
    connect(sigName: "call-deleted", callback: ((argPath: string) => void)): number
    on(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-deleted", argPath: string): void
    connect(sigName: "handle-call-waiting-query", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-query", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-call-waiting-setup", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-setup", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-create-call", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-call", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-call", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-call", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-hangup-all", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-all", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hangup-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hold-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hold-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-calls", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-calls", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-transfer", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-transfer", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::calls", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::calls", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::emergency-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::emergency-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemVoiceProxy_ConstructProps)
    _init (config?: GdbusModemVoiceProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusModemVoiceProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusModemVoiceProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemVoiceProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusModemVoiceProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemVoiceProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemVoiceProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusModemVoiceProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusModemVoiceProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusModemVoiceSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls?: string[]
    emergencyOnly?: boolean
}
class GdbusModemVoiceSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls: string[]
    emergencyOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemVoice */
    callCallWaitingQuery(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingQueryFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingQuerySync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingSetup(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingSetupFinish(res: Gio.AsyncResult): boolean
    callCallWaitingSetupSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCreateCall(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateCallFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateCallSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteCall(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteCallFinish(res: Gio.AsyncResult): boolean
    callDeleteCallSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callHangupAll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAllFinish(res: Gio.AsyncResult): boolean
    callHangupAllSync(cancellable?: Gio.Cancellable | null): boolean
    callHangupAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHangupAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callHoldAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHoldAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHoldAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callListCalls(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListCallsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListCallsSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callTransfer(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTransferFinish(res: Gio.AsyncResult): boolean
    callTransferSync(cancellable?: Gio.Cancellable | null): boolean
    completeCallWaitingQuery(invocation: Gio.DBusMethodInvocation, status: boolean): void
    completeCallWaitingSetup(invocation: Gio.DBusMethodInvocation): void
    completeCreateCall(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteCall(invocation: Gio.DBusMethodInvocation): void
    completeHangupAll(invocation: Gio.DBusMethodInvocation): void
    completeHangupAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeHoldAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeListCalls(invocation: Gio.DBusMethodInvocation, result: string): void
    completeTransfer(invocation: Gio.DBusMethodInvocation): void
    emitCallAdded(argPath: string): void
    emitCallDeleted(argPath: string): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemVoice */
    connect(sigName: "call-added", callback: ((argPath: string) => void)): number
    on(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-added", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-added", argPath: string): void
    connect(sigName: "call-deleted", callback: ((argPath: string) => void)): number
    on(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-deleted", argPath: string): void
    connect(sigName: "handle-call-waiting-query", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-query", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-call-waiting-setup", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-setup", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-create-call", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-call", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-call", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-call", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-hangup-all", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-all", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hangup-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hold-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hold-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-calls", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-calls", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-transfer", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-transfer", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::calls", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::calls", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::emergency-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::emergency-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusModemVoiceSkeleton_ConstructProps)
    _init (config?: GdbusModemVoiceSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusModemVoiceSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusObjectManagerClient_ConstructProps extends Gio.DBusObjectManagerClient_ConstructProps {
}
class GdbusObjectManagerClient {
    /* Properties of Gio-2.0.Gio.DBusObjectManagerClient */
    readonly nameOwner: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusObjectManagerClient */
    getConnection(): Gio.DBusConnection
    getFlags(): Gio.DBusObjectManagerClientFlags
    getName(): string
    getNameOwner(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusObjectManager */
    getInterface(objectPath: string, interfaceName: string): Gio.DBusInterface | null
    getObject(objectPath: string): Gio.DBusObject | null
    getObjectPath(): string
    getObjects(): Gio.DBusObject[]
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Signals of Gio-2.0.Gio.DBusObjectManagerClient */
    connect(sigName: "interface-proxy-properties-changed", callback: ((objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "interface-proxy-properties-changed", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-proxy-properties-changed", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-proxy-properties-changed", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "interface-proxy-properties-changed", objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "interface-proxy-signal", callback: ((objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "interface-proxy-signal", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-proxy-signal", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-proxy-signal", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "interface-proxy-signal", objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Gio-2.0.Gio.DBusObjectManager */
    connect(sigName: "interface-added", callback: ((object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-added", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-added", object: Gio.DBusObject, interface: Gio.DBusInterface): void
    connect(sigName: "interface-removed", callback: ((object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-removed", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-removed", object: Gio.DBusObject, interface: Gio.DBusInterface): void
    connect(sigName: "object-added", callback: ((object: Gio.DBusObject) => void)): number
    on(sigName: "object-added", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "object-added", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "object-added", callback: (object: Gio.DBusObject) => void): NodeJS.EventEmitter
    emit(sigName: "object-added", object: Gio.DBusObject): void
    connect(sigName: "object-removed", callback: ((object: Gio.DBusObject) => void)): number
    on(sigName: "object-removed", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "object-removed", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "object-removed", callback: (object: Gio.DBusObject) => void): NodeJS.EventEmitter
    emit(sigName: "object-removed", object: Gio.DBusObject): void
    connect(sigName: "notify::name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusObjectManagerClient_ConstructProps)
    _init (config?: GdbusObjectManagerClient_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusObjectManagerClient
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusObjectManagerClient
    static newForBusFinish(res: Gio.AsyncResult): GdbusObjectManagerClient
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusObjectManagerClient
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusObjectManagerClient
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, getProxyTypeFunc?: Gio.DBusProxyTypeFunc | null, cancellable?: Gio.Cancellable | null): GdbusObjectManagerClient
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusObjectManagerClient
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, name: string | null, objectPath: string, getProxyTypeFunc?: Gio.DBusProxyTypeFunc | null, cancellable?: Gio.Cancellable | null): GdbusObjectManagerClient
    static getProxyType(manager: Gio.DBusObjectManagerClient, objectPath: string, interfaceName?: string | null, userData?: object | null): GObject.Type
    static newForBus(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, getProxyTypeFunc?: Gio.DBusProxyTypeFunc | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
interface GdbusObjectProxy_ConstructProps extends Gio.DBusObjectProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem?: GdbusModem
    modemCdma?: GdbusModemCdma
    modemFirmware?: GdbusModemFirmware
    modemLocation?: GdbusModemLocation
    modemMessaging?: GdbusModemMessaging
    modemOma?: GdbusModemOma
    modemSar?: GdbusModemSar
    modemSignal?: GdbusModemSignal
    modemSimple?: GdbusModemSimple
    modemTime?: GdbusModemTime
    modemVoice?: GdbusModemVoice
    modem3gpp?: GdbusModem3gpp
    modem3gppProfileManager?: GdbusModem3gppProfileManager
    modem3gppUssd?: GdbusModem3gppUssd
}
class GdbusObjectProxy {
    /* Properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem: GdbusModem
    modemCdma: GdbusModemCdma
    modemFirmware: GdbusModemFirmware
    modemLocation: GdbusModemLocation
    modemMessaging: GdbusModemMessaging
    modemOma: GdbusModemOma
    modemSar: GdbusModemSar
    modemSignal: GdbusModemSignal
    modemSimple: GdbusModemSimple
    modemTime: GdbusModemTime
    modemVoice: GdbusModemVoice
    modem3gpp: GdbusModem3gpp
    modem3gppProfileManager: GdbusModem3gppProfileManager
    modem3gppUssd: GdbusModem3gppUssd
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusObjectProxy */
    getConnection(): Gio.DBusConnection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusObject */
    getInterface(interfaceName: string): Gio.DBusInterface | null
    getInterfaces(): Gio.DBusInterface[]
    getObjectPath(): string
    /* Methods of ModemManager-1.0.ModemManager.GdbusObject */
    getModem(): GdbusModem | null
    getModem3gpp(): GdbusModem3gpp | null
    getModem3gppProfileManager(): GdbusModem3gppProfileManager | null
    getModem3gppUssd(): GdbusModem3gppUssd | null
    getModemCdma(): GdbusModemCdma | null
    getModemFirmware(): GdbusModemFirmware | null
    getModemLocation(): GdbusModemLocation | null
    getModemMessaging(): GdbusModemMessaging | null
    getModemOma(): GdbusModemOma | null
    getModemSar(): GdbusModemSar | null
    getModemSignal(): GdbusModemSignal | null
    getModemSimple(): GdbusModemSimple | null
    getModemTime(): GdbusModemTime | null
    getModemVoice(): GdbusModemVoice | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Gio-2.0.Gio.DBusObject */
    connect(sigName: "interface-added", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-added", interface: Gio.DBusInterface): void
    connect(sigName: "interface-removed", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-removed", interface: Gio.DBusInterface): void
    connect(sigName: "notify::modem", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-firmware", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-firmware", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-messaging", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-messaging", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-oma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-oma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-sar", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-sar", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-signal", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-signal", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-simple", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-simple", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-voice", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-voice", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp-profile-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp-profile-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp-ussd", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp-ussd", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusObjectProxy_ConstructProps)
    _init (config?: GdbusObjectProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(connection: Gio.DBusConnection, objectPath: string): GdbusObjectProxy
    /* Function overloads */
    static new(connection: Gio.DBusConnection, objectPath: string): GdbusObjectProxy
    static $gtype: GObject.Type
}
interface GdbusObjectSkeleton_ConstructProps extends Gio.DBusObjectSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem?: GdbusModem
    modemCdma?: GdbusModemCdma
    modemFirmware?: GdbusModemFirmware
    modemLocation?: GdbusModemLocation
    modemMessaging?: GdbusModemMessaging
    modemOma?: GdbusModemOma
    modemSar?: GdbusModemSar
    modemSignal?: GdbusModemSignal
    modemSimple?: GdbusModemSimple
    modemTime?: GdbusModemTime
    modemVoice?: GdbusModemVoice
    modem3gpp?: GdbusModem3gpp
    modem3gppProfileManager?: GdbusModem3gppProfileManager
    modem3gppUssd?: GdbusModem3gppUssd
}
class GdbusObjectSkeleton {
    /* Properties of Gio-2.0.Gio.DBusObjectSkeleton */
    gObjectPath: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem: GdbusModem
    modemCdma: GdbusModemCdma
    modemFirmware: GdbusModemFirmware
    modemLocation: GdbusModemLocation
    modemMessaging: GdbusModemMessaging
    modemOma: GdbusModemOma
    modemSar: GdbusModemSar
    modemSignal: GdbusModemSignal
    modemSimple: GdbusModemSimple
    modemTime: GdbusModemTime
    modemVoice: GdbusModemVoice
    modem3gpp: GdbusModem3gpp
    modem3gppProfileManager: GdbusModem3gppProfileManager
    modem3gppUssd: GdbusModem3gppUssd
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.GdbusObjectSkeleton */
    setModem(interface?: GdbusModem | null): void
    setModem3gpp(interface?: GdbusModem3gpp | null): void
    setModem3gppProfileManager(interface?: GdbusModem3gppProfileManager | null): void
    setModem3gppUssd(interface?: GdbusModem3gppUssd | null): void
    setModemCdma(interface?: GdbusModemCdma | null): void
    setModemFirmware(interface?: GdbusModemFirmware | null): void
    setModemLocation(interface?: GdbusModemLocation | null): void
    setModemMessaging(interface?: GdbusModemMessaging | null): void
    setModemOma(interface?: GdbusModemOma | null): void
    setModemSar(interface?: GdbusModemSar | null): void
    setModemSignal(interface?: GdbusModemSignal | null): void
    setModemSimple(interface?: GdbusModemSimple | null): void
    setModemTime(interface?: GdbusModemTime | null): void
    setModemVoice(interface?: GdbusModemVoice | null): void
    /* Methods of Gio-2.0.Gio.DBusObjectSkeleton */
    addInterface(interface: Gio.DBusInterfaceSkeleton): void
    flush(): void
    removeInterface(interface: Gio.DBusInterfaceSkeleton): void
    removeInterfaceByName(interfaceName: string): void
    setObjectPath(objectPath: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusObject */
    getInterface(interfaceName: string): Gio.DBusInterface | null
    getInterfaces(): Gio.DBusInterface[]
    getObjectPath(): string
    /* Methods of ModemManager-1.0.ModemManager.GdbusObject */
    getModem(): GdbusModem | null
    getModem3gpp(): GdbusModem3gpp | null
    getModem3gppProfileManager(): GdbusModem3gppProfileManager | null
    getModem3gppUssd(): GdbusModem3gppUssd | null
    getModemCdma(): GdbusModemCdma | null
    getModemFirmware(): GdbusModemFirmware | null
    getModemLocation(): GdbusModemLocation | null
    getModemMessaging(): GdbusModemMessaging | null
    getModemOma(): GdbusModemOma | null
    getModemSar(): GdbusModemSar | null
    getModemSignal(): GdbusModemSignal | null
    getModemSimple(): GdbusModemSimple | null
    getModemTime(): GdbusModemTime | null
    getModemVoice(): GdbusModemVoice | null
    /* Signals of Gio-2.0.Gio.DBusObjectSkeleton */
    connect(sigName: "authorize-method", callback: ((interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "authorize-method", callback: (interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "authorize-method", callback: (interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "authorize-method", callback: (interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "authorize-method", interface: Gio.DBusInterfaceSkeleton, invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Gio-2.0.Gio.DBusObject */
    connect(sigName: "interface-added", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-added", interface: Gio.DBusInterface): void
    connect(sigName: "interface-removed", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-removed", interface: Gio.DBusInterface): void
    connect(sigName: "notify::g-object-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-object-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-object-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-firmware", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-firmware", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-messaging", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-messaging", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-oma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-oma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-sar", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-sar", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-signal", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-signal", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-simple", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-simple", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-voice", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-voice", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp-profile-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp-profile-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp-ussd", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp-ussd", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusObjectSkeleton_ConstructProps)
    _init (config?: GdbusObjectSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(objectPath: string): GdbusObjectSkeleton
    /* Function overloads */
    static new(objectPath: string): GdbusObjectSkeleton
    static $gtype: GObject.Type
}
interface GdbusOrgFreedesktopModemManager1Proxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    version?: string
}
class GdbusOrgFreedesktopModemManager1Proxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    version: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    callInhibitDevice(argUid: string, argInhibit: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInhibitDeviceFinish(res: Gio.AsyncResult): boolean
    callInhibitDeviceSync(argUid: string, argInhibit: boolean, cancellable?: Gio.Cancellable | null): boolean
    callReportKernelEvent(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callReportKernelEventFinish(res: Gio.AsyncResult): boolean
    callReportKernelEventSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callScanDevices(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanDevicesFinish(res: Gio.AsyncResult): boolean
    callScanDevicesSync(cancellable?: Gio.Cancellable | null): boolean
    callSetLogging(argLevel: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLoggingFinish(res: Gio.AsyncResult): boolean
    callSetLoggingSync(argLevel: string, cancellable?: Gio.Cancellable | null): boolean
    completeInhibitDevice(invocation: Gio.DBusMethodInvocation): void
    completeReportKernelEvent(invocation: Gio.DBusMethodInvocation): void
    completeScanDevices(invocation: Gio.DBusMethodInvocation): void
    completeSetLogging(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    connect(sigName: "handle-inhibit-device", callback: ((invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => boolean)): number
    on(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inhibit-device", invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean): void
    connect(sigName: "handle-report-kernel-event", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-report-kernel-event", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-scan-devices", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan-devices", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-logging", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: string) => boolean)): number
    on(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-logging", invocation: Gio.DBusMethodInvocation, argLevel: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusOrgFreedesktopModemManager1Proxy_ConstructProps)
    _init (config?: GdbusOrgFreedesktopModemManager1Proxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusOrgFreedesktopModemManager1Proxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusOrgFreedesktopModemManager1Proxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusOrgFreedesktopModemManager1Proxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusOrgFreedesktopModemManager1Proxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusOrgFreedesktopModemManager1Proxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusOrgFreedesktopModemManager1Proxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusOrgFreedesktopModemManager1Proxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusOrgFreedesktopModemManager1Proxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusOrgFreedesktopModemManager1Skeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    version?: string
}
class GdbusOrgFreedesktopModemManager1Skeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    version: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    callInhibitDevice(argUid: string, argInhibit: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInhibitDeviceFinish(res: Gio.AsyncResult): boolean
    callInhibitDeviceSync(argUid: string, argInhibit: boolean, cancellable?: Gio.Cancellable | null): boolean
    callReportKernelEvent(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callReportKernelEventFinish(res: Gio.AsyncResult): boolean
    callReportKernelEventSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callScanDevices(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanDevicesFinish(res: Gio.AsyncResult): boolean
    callScanDevicesSync(cancellable?: Gio.Cancellable | null): boolean
    callSetLogging(argLevel: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetLoggingFinish(res: Gio.AsyncResult): boolean
    callSetLoggingSync(argLevel: string, cancellable?: Gio.Cancellable | null): boolean
    completeInhibitDevice(invocation: Gio.DBusMethodInvocation): void
    completeReportKernelEvent(invocation: Gio.DBusMethodInvocation): void
    completeScanDevices(invocation: Gio.DBusMethodInvocation): void
    completeSetLogging(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1 */
    connect(sigName: "handle-inhibit-device", callback: ((invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => boolean)): number
    on(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inhibit-device", callback: (invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inhibit-device", invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean): void
    connect(sigName: "handle-report-kernel-event", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-report-kernel-event", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-report-kernel-event", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-scan-devices", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan-devices", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan-devices", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-logging", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: string) => boolean)): number
    on(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-logging", callback: (invocation: Gio.DBusMethodInvocation, argLevel: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-logging", invocation: Gio.DBusMethodInvocation, argLevel: string): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::version", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusOrgFreedesktopModemManager1Skeleton_ConstructProps)
    _init (config?: GdbusOrgFreedesktopModemManager1Skeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusOrgFreedesktopModemManager1Skeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusSimProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusSim */
    active?: boolean
    eid?: string
    emergencyNumbers?: string[]
    esimStatus?: number
    imsi?: string
    operatorIdentifier?: string
    operatorName?: string
    preferredNetworks?: GLib.Variant
    removability?: number
    simIdentifier?: string
    simType?: number
}
class GdbusSimProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusSim */
    active: boolean
    eid: string
    emergencyNumbers: string[]
    esimStatus: number
    imsi: string
    operatorIdentifier: string
    operatorName: string
    preferredNetworks: GLib.Variant
    removability: number
    simIdentifier: string
    simType: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusSim */
    callChangePin(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePinFinish(res: Gio.AsyncResult): boolean
    callChangePinSync(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null): boolean
    callEnablePin(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnablePinFinish(res: Gio.AsyncResult): boolean
    callEnablePinSync(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSendPin(argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPinFinish(res: Gio.AsyncResult): boolean
    callSendPinSync(argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSendPuk(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPukFinish(res: Gio.AsyncResult): boolean
    callSendPukSync(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSetPreferredNetworks(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPreferredNetworksFinish(res: Gio.AsyncResult): boolean
    callSetPreferredNetworksSync(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeChangePin(invocation: Gio.DBusMethodInvocation): void
    completeEnablePin(invocation: Gio.DBusMethodInvocation): void
    completeSendPin(invocation: Gio.DBusMethodInvocation): void
    completeSendPuk(invocation: Gio.DBusMethodInvocation): void
    completeSetPreferredNetworks(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSim */
    connect(sigName: "handle-change-pin", callback: ((invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => boolean)): number
    on(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-change-pin", invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string): void
    connect(sigName: "handle-enable-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => boolean)): number
    on(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable-pin", invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean): void
    connect(sigName: "handle-send-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string) => boolean)): number
    on(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-pin", invocation: Gio.DBusMethodInvocation, argPin: string): void
    connect(sigName: "handle-send-puk", callback: ((invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => boolean)): number
    on(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-puk", invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string): void
    connect(sigName: "handle-set-preferred-networks", callback: ((invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-preferred-networks", invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::emergency-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::emergency-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::esim-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::esim-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::imsi", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::imsi", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-networks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-networks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removability", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removability", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusSimProxy_ConstructProps)
    _init (config?: GdbusSimProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusSimProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusSimProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusSimProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusSimProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusSimProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusSimProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusSimProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusSimProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusSimSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusSim */
    active?: boolean
    eid?: string
    emergencyNumbers?: string[]
    esimStatus?: number
    imsi?: string
    operatorIdentifier?: string
    operatorName?: string
    preferredNetworks?: GLib.Variant
    removability?: number
    simIdentifier?: string
    simType?: number
}
class GdbusSimSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusSim */
    active: boolean
    eid: string
    emergencyNumbers: string[]
    esimStatus: number
    imsi: string
    operatorIdentifier: string
    operatorName: string
    preferredNetworks: GLib.Variant
    removability: number
    simIdentifier: string
    simType: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusSim */
    callChangePin(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePinFinish(res: Gio.AsyncResult): boolean
    callChangePinSync(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null): boolean
    callEnablePin(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnablePinFinish(res: Gio.AsyncResult): boolean
    callEnablePinSync(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSendPin(argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPinFinish(res: Gio.AsyncResult): boolean
    callSendPinSync(argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSendPuk(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPukFinish(res: Gio.AsyncResult): boolean
    callSendPukSync(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSetPreferredNetworks(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPreferredNetworksFinish(res: Gio.AsyncResult): boolean
    callSetPreferredNetworksSync(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeChangePin(invocation: Gio.DBusMethodInvocation): void
    completeEnablePin(invocation: Gio.DBusMethodInvocation): void
    completeSendPin(invocation: Gio.DBusMethodInvocation): void
    completeSendPuk(invocation: Gio.DBusMethodInvocation): void
    completeSetPreferredNetworks(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSim */
    connect(sigName: "handle-change-pin", callback: ((invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => boolean)): number
    on(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-change-pin", invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string): void
    connect(sigName: "handle-enable-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => boolean)): number
    on(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable-pin", invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean): void
    connect(sigName: "handle-send-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string) => boolean)): number
    on(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-pin", invocation: Gio.DBusMethodInvocation, argPin: string): void
    connect(sigName: "handle-send-puk", callback: ((invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => boolean)): number
    on(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-puk", invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string): void
    connect(sigName: "handle-set-preferred-networks", callback: ((invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-preferred-networks", invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::emergency-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::emergency-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::esim-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::esim-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::imsi", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::imsi", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-networks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-networks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removability", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removability", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusSimSkeleton_ConstructProps)
    _init (config?: GdbusSimSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusSimSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusSmsProxy_ConstructProps extends Gio.DBusProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class"?: number
    data?: GLib.Variant
    deliveryReportRequest?: boolean
    deliveryState?: number
    dischargeTimestamp?: string
    messageReference?: number
    number?: string
    pduType?: number
    serviceCategory?: number
    smsc?: string
    state?: number
    storage?: number
    teleserviceId?: number
    text?: string
    timestamp?: string
    validity?: GLib.Variant
}
class GdbusSmsProxy {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class": number
    data: GLib.Variant
    deliveryReportRequest: boolean
    deliveryState: number
    dischargeTimestamp: string
    messageReference: number
    number: string
    pduType: number
    serviceCategory: number
    smsc: string
    state: number
    storage: number
    teleserviceId: number
    text: string
    timestamp: string
    validity: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusSms */
    callSend(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendFinish(res: Gio.AsyncResult): boolean
    callSendSync(cancellable?: Gio.Cancellable | null): boolean
    callStore(argStorage: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStoreFinish(res: Gio.AsyncResult): boolean
    callStoreSync(argStorage: number, cancellable?: Gio.Cancellable | null): boolean
    completeSend(invocation: Gio.DBusMethodInvocation): void
    completeStore(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSms */
    connect(sigName: "handle-send", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-store", callback: ((invocation: Gio.DBusMethodInvocation, argStorage: number) => boolean)): number
    on(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-store", invocation: Gio.DBusMethodInvocation, argStorage: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delivery-report-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-report-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delivery-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::discharge-timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::discharge-timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::message-reference", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-reference", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pdu-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pdu-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::service-category", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-category", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smsc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smsc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::teleservice-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::teleservice-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusSmsProxy_ConstructProps)
    _init (config?: GdbusSmsProxy_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): GdbusSmsProxy
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): GdbusSmsProxy
    static newForBusFinish(res: Gio.AsyncResult): GdbusSmsProxy
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): GdbusSmsProxy
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusSmsProxy
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusSmsProxy
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): GdbusSmsProxy
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): GdbusSmsProxy
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface GdbusSmsSkeleton_ConstructProps extends Gio.DBusInterfaceSkeleton_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class"?: number
    data?: GLib.Variant
    deliveryReportRequest?: boolean
    deliveryState?: number
    dischargeTimestamp?: string
    messageReference?: number
    number?: string
    pduType?: number
    serviceCategory?: number
    smsc?: string
    state?: number
    storage?: number
    teleserviceId?: number
    text?: string
    timestamp?: string
    validity?: GLib.Variant
}
class GdbusSmsSkeleton {
    /* Properties of Gio-2.0.Gio.DBusInterfaceSkeleton */
    gFlags: Gio.DBusInterfaceSkeletonFlags
    /* Properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class": number
    data: GLib.Variant
    deliveryReportRequest: boolean
    deliveryState: number
    dischargeTimestamp: string
    messageReference: number
    number: string
    pduType: number
    serviceCategory: number
    smsc: string
    state: number
    storage: number
    teleserviceId: number
    text: string
    timestamp: string
    validity: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.DBusInterfaceSkeleton */
    export(connection: Gio.DBusConnection, objectPath: string): boolean
    flush(): void
    getConnection(): Gio.DBusConnection | null
    getConnections(): Gio.DBusConnection[]
    getFlags(): Gio.DBusInterfaceSkeletonFlags
    getInfo(): Gio.DBusInterfaceInfo
    getObjectPath(): string | null
    getProperties(): GLib.Variant
    hasConnection(connection: Gio.DBusConnection): boolean
    setFlags(flags: Gio.DBusInterfaceSkeletonFlags): void
    unexport(): void
    unexportFromConnection(connection: Gio.DBusConnection): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of ModemManager-1.0.ModemManager.GdbusSms */
    callSend(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendFinish(res: Gio.AsyncResult): boolean
    callSendSync(cancellable?: Gio.Cancellable | null): boolean
    callStore(argStorage: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStoreFinish(res: Gio.AsyncResult): boolean
    callStoreSync(argStorage: number, cancellable?: Gio.Cancellable | null): boolean
    completeSend(invocation: Gio.DBusMethodInvocation): void
    completeStore(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusInterfaceSkeleton */
    connect(sigName: "g-authorize-method", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-authorize-method", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "g-authorize-method", invocation: Gio.DBusMethodInvocation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSms */
    connect(sigName: "handle-send", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-store", callback: ((invocation: Gio.DBusMethodInvocation, argStorage: number) => boolean)): number
    on(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-store", invocation: Gio.DBusMethodInvocation, argStorage: number): void
    connect(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delivery-report-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-report-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delivery-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::discharge-timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::discharge-timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::message-reference", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-reference", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pdu-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pdu-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::service-category", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-category", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smsc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smsc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::teleservice-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::teleservice-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GdbusSmsSkeleton_ConstructProps)
    _init (config?: GdbusSmsSkeleton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GdbusSmsSkeleton
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static $gtype: GObject.Type
}
interface KernelEventProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class KernelEventProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.KernelEventProperties */
    getAction(): string
    getName(): string
    getSubsystem(): string
    getUid(): string
    setAction(action: string): void
    setName(name: string): void
    setSubsystem(subsystem: string): void
    setUid(uid: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: KernelEventProperties_ConstructProps)
    _init (config?: KernelEventProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): KernelEventProperties
    static $gtype: GObject.Type
}
interface Location3gpp_ConstructProps extends GObject.Object_ConstructProps {
}
class Location3gpp {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Location3gpp */
    getCellId(): number
    getLocationAreaCode(): number
    getMobileCountryCode(): number
    getMobileNetworkCode(): number
    getOperatorCode(): string
    getTrackingAreaCode(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Location3gpp_ConstructProps)
    _init (config?: Location3gpp_ConstructProps): void
    static $gtype: GObject.Type
}
interface LocationCdmaBs_ConstructProps extends GObject.Object_ConstructProps {
}
class LocationCdmaBs {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.LocationCdmaBs */
    getLatitude(): number
    getLongitude(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LocationCdmaBs_ConstructProps)
    _init (config?: LocationCdmaBs_ConstructProps): void
    static $gtype: GObject.Type
}
interface LocationGpsNmea_ConstructProps extends GObject.Object_ConstructProps {
}
class LocationGpsNmea {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.LocationGpsNmea */
    buildFull(): string
    getTrace(traceType: string): string
    getTraces(): string[]
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LocationGpsNmea_ConstructProps)
    _init (config?: LocationGpsNmea_ConstructProps): void
    static $gtype: GObject.Type
}
interface LocationGpsRaw_ConstructProps extends GObject.Object_ConstructProps {
}
class LocationGpsRaw {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.LocationGpsRaw */
    getAltitude(): number
    getLatitude(): number
    getLongitude(): number
    getUtcTime(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LocationGpsRaw_ConstructProps)
    _init (config?: LocationGpsRaw_ConstructProps): void
    static $gtype: GObject.Type
}
interface Manager_ConstructProps extends GdbusObjectManagerClient_ConstructProps {
}
class Manager {
    /* Properties of Gio-2.0.Gio.DBusObjectManagerClient */
    readonly nameOwner: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Manager */
    getProxy(): Gio.DBusProxy
    getVersion(): string
    inhibitDevice(uid: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    inhibitDeviceFinish(res: Gio.AsyncResult): boolean
    inhibitDeviceSync(uid: string, cancellable?: Gio.Cancellable | null): boolean
    peekProxy(): Gio.DBusProxy
    reportKernelEvent(properties: KernelEventProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    reportKernelEventFinish(res: Gio.AsyncResult): boolean
    reportKernelEventSync(properties: KernelEventProperties, cancellable?: Gio.Cancellable | null): boolean
    scanDevices(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    scanDevicesFinish(res: Gio.AsyncResult): boolean
    scanDevicesSync(cancellable?: Gio.Cancellable | null): boolean
    setLogging(level: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setLoggingFinish(res: Gio.AsyncResult): boolean
    setLoggingSync(level: string, cancellable?: Gio.Cancellable | null): boolean
    uninhibitDevice(uid: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    uninhibitDeviceFinish(res: Gio.AsyncResult): boolean
    uninhibitDeviceSync(uid: string, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusObjectManagerClient */
    getConnection(): Gio.DBusConnection
    getFlags(): Gio.DBusObjectManagerClientFlags
    getName(): string
    getNameOwner(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusObjectManager */
    getInterface(objectPath: string, interfaceName: string): Gio.DBusInterface | null
    getObject(objectPath: string): Gio.DBusObject | null
    getObjectPath(): string
    getObjects(): Gio.DBusObject[]
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Signals of Gio-2.0.Gio.DBusObjectManagerClient */
    connect(sigName: "interface-proxy-properties-changed", callback: ((objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "interface-proxy-properties-changed", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-proxy-properties-changed", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-proxy-properties-changed", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "interface-proxy-properties-changed", objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "interface-proxy-signal", callback: ((objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "interface-proxy-signal", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-proxy-signal", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-proxy-signal", callback: (objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "interface-proxy-signal", objectProxy: Gio.DBusObjectProxy, interfaceProxy: Gio.DBusProxy, senderName: string, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Gio-2.0.Gio.DBusObjectManager */
    connect(sigName: "interface-added", callback: ((object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-added", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-added", object: Gio.DBusObject, interface: Gio.DBusInterface): void
    connect(sigName: "interface-removed", callback: ((object: Gio.DBusObject, interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-removed", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (object: Gio.DBusObject, interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-removed", object: Gio.DBusObject, interface: Gio.DBusInterface): void
    connect(sigName: "object-added", callback: ((object: Gio.DBusObject) => void)): number
    on(sigName: "object-added", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "object-added", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "object-added", callback: (object: Gio.DBusObject) => void): NodeJS.EventEmitter
    emit(sigName: "object-added", object: Gio.DBusObject): void
    connect(sigName: "object-removed", callback: ((object: Gio.DBusObject) => void)): number
    on(sigName: "object-removed", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "object-removed", callback: (object: Gio.DBusObject) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "object-removed", callback: (object: Gio.DBusObject) => void): NodeJS.EventEmitter
    emit(sigName: "object-removed", object: Gio.DBusObject): void
    connect(sigName: "notify::name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Manager_ConstructProps)
    _init (config?: Manager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Manager
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Manager
    static newFinish(res: Gio.AsyncResult): Manager
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, cancellable?: Gio.Cancellable | null): Manager
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Manager
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusObjectManagerClientFlags, name: string | null, objectPath: string, getProxyTypeFunc?: Gio.DBusProxyTypeFunc | null, cancellable?: Gio.Cancellable | null): Manager
    static newForBusFinish(res: Gio.AsyncResult): Manager
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Manager
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Manager
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, getProxyTypeFunc?: Gio.DBusProxyTypeFunc | null, cancellable?: Gio.Cancellable | null): Manager
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static newForBus(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusObjectManagerClientFlags, name: string, objectPath: string, getProxyTypeFunc?: Gio.DBusProxyTypeFunc | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface Modem_ConstructProps extends GdbusModemProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies?: number
    bearers?: string[]
    carrierConfiguration?: string
    carrierConfigurationRevision?: string
    currentBands?: GLib.Variant
    currentCapabilities?: number
    currentModes?: GLib.Variant
    device?: string
    deviceIdentifier?: string
    drivers?: string[]
    equipmentIdentifier?: string
    hardwareRevision?: string
    manufacturer?: string
    maxActiveBearers?: number
    maxActiveMultiplexedBearers?: number
    maxBearers?: number
    model?: string
    ownNumbers?: string[]
    plugin?: string
    ports?: GLib.Variant
    powerState?: number
    primaryPort?: string
    primarySimSlot?: number
    revision?: string
    signalQuality?: GLib.Variant
    sim?: string
    simSlots?: string[]
    state?: number
    stateFailedReason?: number
    supportedBands?: GLib.Variant
    supportedCapabilities?: GLib.Variant
    supportedIpFamilies?: number
    supportedModes?: GLib.Variant
    unlockRequired?: number
    unlockRetries?: GLib.Variant
}
class Modem {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem */
    accessTechnologies: number
    bearers: string[]
    carrierConfiguration: string
    carrierConfigurationRevision: string
    currentBands: GLib.Variant
    currentCapabilities: number
    currentModes: GLib.Variant
    device: string
    deviceIdentifier: string
    drivers: string[]
    equipmentIdentifier: string
    hardwareRevision: string
    manufacturer: string
    maxActiveBearers: number
    maxActiveMultiplexedBearers: number
    maxBearers: number
    model: string
    ownNumbers: string[]
    plugin: string
    ports: GLib.Variant
    powerState: number
    primaryPort: string
    primarySimSlot: number
    revision: string
    signalQuality: GLib.Variant
    sim: string
    simSlots: string[]
    state: number
    stateFailedReason: number
    supportedBands: GLib.Variant
    supportedCapabilities: GLib.Variant
    supportedIpFamilies: number
    supportedModes: GLib.Variant
    unlockRequired: number
    unlockRetries: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Modem */
    command(cmd: string, timeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    commandFinish(res: Gio.AsyncResult): string
    commandSync(cmd: string, timeout: number, cancellable?: Gio.Cancellable | null): string
    createBearer(properties: BearerProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createBearerFinish(res: Gio.AsyncResult): Bearer
    createBearerSync(properties: BearerProperties, cancellable?: Gio.Cancellable | null): Bearer
    deleteBearer(bearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteBearerFinish(res: Gio.AsyncResult): boolean
    deleteBearerSync(bearer: string, cancellable?: Gio.Cancellable | null): boolean
    disable(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disableFinish(res: Gio.AsyncResult): boolean
    disableSync(cancellable?: Gio.Cancellable | null): boolean
    dupBearerPaths(): string[]
    dupCarrierConfiguration(): string
    dupCarrierConfigurationRevision(): string
    dupDevice(): string
    dupDeviceIdentifier(): string
    dupDrivers(): string[]
    dupEquipmentIdentifier(): string
    dupHardwareRevision(): string
    dupManufacturer(): string
    dupModel(): string
    dupOwnNumbers(): string[]
    dupPath(): string
    dupPlugin(): string
    dupPrimaryPort(): string
    dupRevision(): string
    dupSimPath(): string
    dupSimSlotPaths(): string[]
    enable(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    enableFinish(res: Gio.AsyncResult): boolean
    enableSync(cancellable?: Gio.Cancellable | null): boolean
    factoryReset(code: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    factoryResetFinish(res: Gio.AsyncResult): boolean
    factoryResetSync(code: string, cancellable?: Gio.Cancellable | null): boolean
    getAccessTechnologies(): ModemAccessTechnology
    getBearerPaths(): string[]
    getCarrierConfiguration(): string
    getCarrierConfigurationRevision(): string
    getCellInfo(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getCellInfoFinish(res: Gio.AsyncResult): CellInfo[]
    getCellInfoSync(cancellable?: Gio.Cancellable | null): CellInfo[]
    getCurrentBands(): [ /* returnType */ boolean, /* bands */ ModemBand[] ]
    getCurrentCapabilities(): ModemCapability
    getCurrentModes(): [ /* returnType */ boolean, /* allowed */ ModemMode, /* preferred */ ModemMode ]
    getDevice(): string
    getDeviceIdentifier(): string
    getDrivers(): string[]
    getEquipmentIdentifier(): string
    getHardwareRevision(): string
    getManufacturer(): string
    getMaxActiveBearers(): number
    getMaxActiveMultiplexedBearers(): number
    getMaxBearers(): number
    getModel(): string
    getPlugin(): string
    getPorts(): [ /* returnType */ boolean, /* ports */ ModemPortInfo[] ]
    getPowerState(): ModemPowerState
    getPrimaryPort(): string
    getPrimarySimSlot(): number
    getRevision(): string
    getSignalQuality(): [ /* returnType */ number, /* recent */ boolean ]
    getSim(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getSimFinish(res: Gio.AsyncResult): Sim
    getSimSlotPaths(): string[]
    getSimSync(cancellable?: Gio.Cancellable | null): Sim
    getState(): ModemState
    getStateFailedReason(): ModemStateFailedReason
    getSupportedBands(): [ /* returnType */ boolean, /* bands */ ModemBand[] ]
    getSupportedCapabilities(): [ /* returnType */ boolean, /* capabilities */ ModemCapability[] ]
    getSupportedIpFamilies(): BearerIpFamily
    getSupportedModes(): [ /* returnType */ boolean, /* modes */ ModemModeCombination[] ]
    getUnlockRequired(): ModemLock
    getUnlockRetries(): UnlockRetries
    listBearers(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    listBearersFinish(res: Gio.AsyncResult): Bearer[]
    listBearersSync(cancellable?: Gio.Cancellable | null): Bearer[]
    listSimSlots(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    listSimSlotsFinish(res: Gio.AsyncResult): Sim[]
    listSimSlotsSync(cancellable?: Gio.Cancellable | null): Sim[]
    peekCurrentBands(): [ /* returnType */ boolean, /* bands */ ModemBand[] ]
    peekPorts(): [ /* returnType */ boolean, /* ports */ ModemPortInfo[] ]
    peekSupportedBands(): [ /* returnType */ boolean, /* bands */ ModemBand[] ]
    peekSupportedCapabilities(): [ /* returnType */ boolean, /* capabilities */ ModemCapability[] ]
    peekSupportedModes(): [ /* returnType */ boolean, /* modes */ ModemModeCombination[] ]
    peekUnlockRetries(): UnlockRetries
    reset(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    resetFinish(res: Gio.AsyncResult): boolean
    resetSync(cancellable?: Gio.Cancellable | null): boolean
    setCurrentBands(bands: ModemBand, nBands: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setCurrentBandsFinish(res: Gio.AsyncResult): boolean
    setCurrentBandsSync(bands: ModemBand, nBands: number, cancellable?: Gio.Cancellable | null): boolean
    setCurrentCapabilities(capabilities: ModemCapability, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setCurrentCapabilitiesFinish(res: Gio.AsyncResult): boolean
    setCurrentCapabilitiesSync(capabilities: ModemCapability, cancellable?: Gio.Cancellable | null): boolean
    setCurrentModes(modes: ModemMode, preferred: ModemMode, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setCurrentModesFinish(res: Gio.AsyncResult): boolean
    setCurrentModesSync(modes: ModemMode, preferred: ModemMode, cancellable?: Gio.Cancellable | null): boolean
    setPowerState(state: ModemPowerState, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setPowerStateFinish(res: Gio.AsyncResult): boolean
    setPowerStateSync(state: ModemPowerState, cancellable?: Gio.Cancellable | null): boolean
    setPrimarySimSlot(simSlot: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setPrimarySimSlotFinish(res: Gio.AsyncResult): boolean
    setPrimarySimSlotSync(simSlot: number, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem */
    callCommand(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCommandFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCommandSync(argCmd: string, argTimeout: number, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResponse */ string | null ]
    callCreateBearer(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateBearerFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateBearerSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteBearer(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteBearerFinish(res: Gio.AsyncResult): boolean
    callDeleteBearerSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callFactoryReset(argCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFactoryResetFinish(res: Gio.AsyncResult): boolean
    callFactoryResetSync(argCode: string, cancellable?: Gio.Cancellable | null): boolean
    callGetCellInfo(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetCellInfoFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callGetCellInfoSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outCellInfo */ GLib.Variant | null ]
    callListBearers(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListBearersFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callListBearersSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearers */ string[] | null ]
    callReset(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callResetFinish(res: Gio.AsyncResult): boolean
    callResetSync(cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentBands(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentBandsFinish(res: Gio.AsyncResult): boolean
    callSetCurrentBandsSync(argBands: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentCapabilities(argCapabilities: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentCapabilitiesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentCapabilitiesSync(argCapabilities: number, cancellable?: Gio.Cancellable | null): boolean
    callSetCurrentModes(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetCurrentModesFinish(res: Gio.AsyncResult): boolean
    callSetCurrentModesSync(argModes: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerStateFinish(res: Gio.AsyncResult): boolean
    callSetPowerStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    callSetPrimarySimSlot(argSimSlot: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPrimarySimSlotFinish(res: Gio.AsyncResult): boolean
    callSetPrimarySimSlotSync(argSimSlot: number, cancellable?: Gio.Cancellable | null): boolean
    completeCommand(invocation: Gio.DBusMethodInvocation, response: string): void
    completeCreateBearer(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteBearer(invocation: Gio.DBusMethodInvocation): void
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeFactoryReset(invocation: Gio.DBusMethodInvocation): void
    completeGetCellInfo(invocation: Gio.DBusMethodInvocation, cellInfo: GLib.Variant): void
    completeListBearers(invocation: Gio.DBusMethodInvocation, bearers: string): void
    completeReset(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentBands(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentCapabilities(invocation: Gio.DBusMethodInvocation): void
    completeSetCurrentModes(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerState(invocation: Gio.DBusMethodInvocation): void
    completeSetPrimarySimSlot(invocation: Gio.DBusMethodInvocation): void
    emitStateChanged(argOld: number, argNew: number, argReason: number): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem */
    connect(sigName: "handle-command", callback: ((invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => boolean)): number
    on(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-command", callback: (invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-command", invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number): void
    connect(sigName: "handle-create-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-bearer", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-bearer", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-bearer", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-bearer", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-bearer", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-factory-reset", callback: ((invocation: Gio.DBusMethodInvocation, argCode: string) => boolean)): number
    on(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-factory-reset", callback: (invocation: Gio.DBusMethodInvocation, argCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-factory-reset", invocation: Gio.DBusMethodInvocation, argCode: string): void
    connect(sigName: "handle-get-cell-info", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-cell-info", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-cell-info", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-bearers", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-bearers", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-bearers", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-reset", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-reset", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-reset", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-current-bands", callback: ((invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-bands", callback: (invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-bands", invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant): void
    connect(sigName: "handle-set-current-capabilities", callback: ((invocation: Gio.DBusMethodInvocation, argCapabilities: number) => boolean)): number
    on(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-capabilities", callback: (invocation: Gio.DBusMethodInvocation, argCapabilities: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-capabilities", invocation: Gio.DBusMethodInvocation, argCapabilities: number): void
    connect(sigName: "handle-set-current-modes", callback: ((invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-current-modes", callback: (invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-current-modes", invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant): void
    connect(sigName: "handle-set-power-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "handle-set-primary-sim-slot", callback: ((invocation: Gio.DBusMethodInvocation, argSimSlot: number) => boolean)): number
    on(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-primary-sim-slot", callback: (invocation: Gio.DBusMethodInvocation, argSimSlot: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-primary-sim-slot", invocation: Gio.DBusMethodInvocation, argSimSlot: number): void
    connect(sigName: "state-changed", callback: ((argOld: number, argNew: number, argReason: number) => void)): number
    on(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-changed", callback: (argOld: number, argNew: number, argReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "state-changed", argOld: number, argNew: number, argReason: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier-configuration", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier-configuration", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier-configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::carrier-configuration-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::carrier-configuration-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::carrier-configuration-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::drivers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drivers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::drivers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::equipment-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::equipment-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::equipment-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hardware-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hardware-revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hardware-revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::manufacturer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manufacturer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::manufacturer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-active-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-active-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-active-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-active-multiplexed-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-active-multiplexed-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-active-multiplexed-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-bearers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-bearers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::model", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::own-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::own-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::own-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ports", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ports", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ports", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::power-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::power-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::power-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-sim-slot", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-sim-slot", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-sim-slot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::revision", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::revision", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-slots", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-slots", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-slots", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state-failed-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-failed-reason", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state-failed-reason", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-ip-families", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-ip-families", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-ip-families", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-modes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-modes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unlock-required", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unlock-required", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unlock-required", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unlock-retries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unlock-retries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unlock-retries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Modem_ConstructProps)
    _init (config?: Modem_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Modem
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Modem
    static newForBusFinish(res: Gio.AsyncResult): Modem
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Modem
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Modem
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Modem
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem
    static getPendingNetworkInitiatedSessions(self: ModemOma): [ /* returnType */ boolean, /* sessions */ OmaPendingNetworkInitiatedSession[] ]
    static peekPendingNetworkInitiatedSessions(self: ModemOma): [ /* returnType */ boolean, /* sessions */ OmaPendingNetworkInitiatedSession[] ]
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface Modem3gpp_ConstructProps extends GdbusModem3gppProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks?: number
    epsUeModeOperation?: number
    imei?: string
    initialEpsBearer?: string
    initialEpsBearerSettings?: GLib.Variant
    nr5gRegistrationSettings?: GLib.Variant
    operatorCode?: string
    operatorName?: string
    packetServiceState?: number
    pco?: GLib.Variant
    registrationState?: number
    subscriptionState?: number
}
class Modem3gpp {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    enabledFacilityLocks: number
    epsUeModeOperation: number
    imei: string
    initialEpsBearer: string
    initialEpsBearerSettings: GLib.Variant
    nr5gRegistrationSettings: GLib.Variant
    operatorCode: string
    operatorName: string
    packetServiceState: number
    pco: GLib.Variant
    registrationState: number
    subscriptionState: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Modem3gpp */
    disableFacilityLock(facility: Modem3gppFacility, controlKey: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disableFacilityLockFinish(res: Gio.AsyncResult): boolean
    disableFacilityLockSync(facility: Modem3gppFacility, controlKey: string, cancellable?: Gio.Cancellable | null): boolean
    dupImei(): string
    dupInitialEpsBearerPath(): string
    dupOperatorCode(): string
    dupOperatorName(): string
    dupPath(): string
    getEnabledFacilityLocks(): Modem3gppFacility
    getEpsUeModeOperation(): Modem3gppEpsUeModeOperation
    getImei(): string
    getInitialEpsBearer(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getInitialEpsBearerFinish(res: Gio.AsyncResult): Bearer
    getInitialEpsBearerSettings(): BearerProperties
    getInitialEpsBearerSync(cancellable?: Gio.Cancellable | null): Bearer
    getNr5gRegistrationSettings(): Nr5gRegistrationSettings
    getOperatorCode(): string
    getOperatorName(): string
    getPacketServiceState(): Modem3gppPacketServiceState
    getPath(): string
    getPco(): Pco[]
    getRegistrationState(): Modem3gppRegistrationState
    getSubscriptionState(): Modem3gppSubscriptionState
    peekInitialEpsBearerSettings(): BearerProperties
    peekNr5gRegistrationSettings(): Nr5gRegistrationSettings
    register(networkId: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    registerFinish(res: Gio.AsyncResult): boolean
    registerSync(networkId: string, cancellable?: Gio.Cancellable | null): boolean
    scan(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    scanFinish(res: Gio.AsyncResult): Modem3gppNetwork[]
    scanSync(cancellable?: Gio.Cancellable | null): Modem3gppNetwork[]
    setEpsUeModeOperation(mode: Modem3gppEpsUeModeOperation, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setEpsUeModeOperationFinish(res: Gio.AsyncResult): boolean
    setEpsUeModeOperationSync(mode: Modem3gppEpsUeModeOperation, cancellable?: Gio.Cancellable | null): boolean
    setInitialEpsBearerSettings(config: BearerProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setInitialEpsBearerSettingsFinish(res: Gio.AsyncResult): boolean
    setInitialEpsBearerSettingsSync(config: BearerProperties, cancellable?: Gio.Cancellable | null): boolean
    setNr5gRegistrationSettings(settings: Nr5gRegistrationSettings, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setNr5gRegistrationSettingsFinish(res: Gio.AsyncResult): boolean
    setNr5gRegistrationSettingsSync(settings: Nr5gRegistrationSettings, cancellable?: Gio.Cancellable | null): boolean
    setPacketServiceState(state: Modem3gppPacketServiceState, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setPacketServiceStateFinish(res: Gio.AsyncResult): boolean
    setPacketServiceStateSync(state: Modem3gppPacketServiceState, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    callDisableFacilityLock(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisableFacilityLockFinish(res: Gio.AsyncResult): boolean
    callDisableFacilityLockSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callRegister(argOperatorId: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRegisterFinish(res: Gio.AsyncResult): boolean
    callRegisterSync(argOperatorId: string, cancellable?: Gio.Cancellable | null): boolean
    callScan(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callScanFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callScanSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResults */ GLib.Variant | null ]
    callSetEpsUeModeOperation(argMode: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetEpsUeModeOperationFinish(res: Gio.AsyncResult): boolean
    callSetEpsUeModeOperationSync(argMode: number, cancellable?: Gio.Cancellable | null): boolean
    callSetInitialEpsBearerSettings(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetInitialEpsBearerSettingsFinish(res: Gio.AsyncResult): boolean
    callSetInitialEpsBearerSettingsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetNr5gRegistrationSettings(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetNr5gRegistrationSettingsFinish(res: Gio.AsyncResult): boolean
    callSetNr5gRegistrationSettingsSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetPacketServiceState(argState: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPacketServiceStateFinish(res: Gio.AsyncResult): boolean
    callSetPacketServiceStateSync(argState: number, cancellable?: Gio.Cancellable | null): boolean
    completeDisableFacilityLock(invocation: Gio.DBusMethodInvocation): void
    completeRegister(invocation: Gio.DBusMethodInvocation): void
    completeScan(invocation: Gio.DBusMethodInvocation, results: GLib.Variant): void
    completeSetEpsUeModeOperation(invocation: Gio.DBusMethodInvocation): void
    completeSetInitialEpsBearerSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetNr5gRegistrationSettings(invocation: Gio.DBusMethodInvocation): void
    completeSetPacketServiceState(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gpp */
    connect(sigName: "handle-disable-facility-lock", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disable-facility-lock", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disable-facility-lock", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-register", callback: ((invocation: Gio.DBusMethodInvocation, argOperatorId: string) => boolean)): number
    on(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-register", callback: (invocation: Gio.DBusMethodInvocation, argOperatorId: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-register", invocation: Gio.DBusMethodInvocation, argOperatorId: string): void
    connect(sigName: "handle-scan", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-scan", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-scan", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set-eps-ue-mode-operation", callback: ((invocation: Gio.DBusMethodInvocation, argMode: number) => boolean)): number
    on(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-eps-ue-mode-operation", callback: (invocation: Gio.DBusMethodInvocation, argMode: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-eps-ue-mode-operation", invocation: Gio.DBusMethodInvocation, argMode: number): void
    connect(sigName: "handle-set-initial-eps-bearer-settings", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-initial-eps-bearer-settings", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-initial-eps-bearer-settings", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "handle-set-nr5g-registration-settings", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-nr5g-registration-settings", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-nr5g-registration-settings", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-set-packet-service-state", callback: ((invocation: Gio.DBusMethodInvocation, argState: number) => boolean)): number
    on(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-packet-service-state", callback: (invocation: Gio.DBusMethodInvocation, argState: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-packet-service-state", invocation: Gio.DBusMethodInvocation, argState: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled-facility-locks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled-facility-locks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled-facility-locks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eps-ue-mode-operation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eps-ue-mode-operation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eps-ue-mode-operation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::imei", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::imei", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::imei", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-eps-bearer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-eps-bearer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-eps-bearer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::initial-eps-bearer-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-eps-bearer-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::initial-eps-bearer-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nr5g-registration-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nr5g-registration-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nr5g-registration-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::packet-service-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::packet-service-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::packet-service-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pco", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pco", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pco", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Modem3gpp_ConstructProps)
    _init (config?: Modem3gpp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Modem3gpp
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Modem3gpp
    static newForBusFinish(res: Gio.AsyncResult): Modem3gpp
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Modem3gpp
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Modem3gpp
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem3gpp
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Modem3gpp
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem3gpp
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface Modem3gppProfileManager_ConstructProps extends GdbusModem3gppProfileManagerProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField?: string
}
class Modem3gppProfileManager {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    indexField: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Modem3gppProfileManager */
    delete(profile: TODO_3gppProfile, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(res: Gio.AsyncResult): boolean
    deleteSync(profile: TODO_3gppProfile, cancellable?: Gio.Cancellable | null): boolean
    dupIndexField(): string
    dupPath(): string
    getIndexField(): string
    getPath(): string
    list(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    listFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* profiles */ TODO_3gppProfile[] | null ]
    listSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* profiles */ TODO_3gppProfile[] | null ]
    set(requested: TODO_3gppProfile, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setFinish(res: Gio.AsyncResult): TODO_3gppProfile
    setSync(requested: TODO_3gppProfile, cancellable?: Gio.Cancellable | null): TODO_3gppProfile
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    callDelete(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProfiles */ GLib.Variant | null ]
    callSet(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    callSetSync(argRequestedProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStoredProperties */ GLib.Variant | null ]
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, profiles: GLib.Variant): void
    completeSet(invocation: Gio.DBusMethodInvocation, storedProperties: GLib.Variant): void
    emitUpdated(): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManager */
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-set", callback: ((invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set", callback: (invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set", invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant): void
    connect(sigName: "updated", callback: (() => void)): number
    on(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "updated", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "updated", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "updated"): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index-field", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index-field", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index-field", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Modem3gppProfileManager_ConstructProps)
    _init (config?: Modem3gppProfileManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Modem3gppProfileManager
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Modem3gppProfileManager
    static newForBusFinish(res: Gio.AsyncResult): Modem3gppProfileManager
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Modem3gppProfileManager
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Modem3gppProfileManager
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem3gppProfileManager
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Modem3gppProfileManager
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem3gppProfileManager
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface Modem3gppUssd_ConstructProps extends GdbusModem3gppUssdProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification?: string
    networkRequest?: string
    state?: number
}
class Modem3gppUssd {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    networkNotification: string
    networkRequest: string
    state: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Modem3gppUssd */
    cancel(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    cancelFinish(res: Gio.AsyncResult): boolean
    cancelSync(cancellable?: Gio.Cancellable | null): boolean
    dupNetworkNotification(): string
    dupNetworkRequest(): string
    dupPath(): string
    getNetworkNotification(): string
    getNetworkRequest(): string
    getPath(): string
    getState(): Modem3gppUssdSessionState
    initiate(command: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initiateFinish(res: Gio.AsyncResult): string
    initiateSync(command: string, cancellable?: Gio.Cancellable | null): string
    respond(response: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    respondFinish(res: Gio.AsyncResult): string
    respondSync(response: string, cancellable?: Gio.Cancellable | null): string
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    callCancel(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelFinish(res: Gio.AsyncResult): boolean
    callCancelSync(cancellable?: Gio.Cancellable | null): boolean
    callInitiate(argCommand: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInitiateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callInitiateSync(argCommand: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespond(argResponse: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callRespondFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outReply */ string | null ]
    callRespondSync(argResponse: string, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outReply */ string | null ]
    completeCancel(invocation: Gio.DBusMethodInvocation): void
    completeInitiate(invocation: Gio.DBusMethodInvocation, reply: string): void
    completeRespond(invocation: Gio.DBusMethodInvocation, reply: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModem3gppUssd */
    connect(sigName: "handle-cancel", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-initiate", callback: ((invocation: Gio.DBusMethodInvocation, argCommand: string) => boolean)): number
    on(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-initiate", callback: (invocation: Gio.DBusMethodInvocation, argCommand: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-initiate", invocation: Gio.DBusMethodInvocation, argCommand: string): void
    connect(sigName: "handle-respond", callback: ((invocation: Gio.DBusMethodInvocation, argResponse: string) => boolean)): number
    on(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-respond", callback: (invocation: Gio.DBusMethodInvocation, argResponse: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-respond", invocation: Gio.DBusMethodInvocation, argResponse: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-notification", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-notification", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-notification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Modem3gppUssd_ConstructProps)
    _init (config?: Modem3gppUssd_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Modem3gppUssd
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Modem3gppUssd
    static newForBusFinish(res: Gio.AsyncResult): Modem3gppUssd
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Modem3gppUssd
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Modem3gppUssd
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem3gppUssd
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Modem3gppUssd
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Modem3gppUssd
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemCdma_ConstructProps extends GdbusModemCdmaProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState?: number
    cdma1xRegistrationState?: number
    esn?: string
    evdoRegistrationState?: number
    meid?: string
    nid?: number
    sid?: number
}
class ModemCdma {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemCdma */
    activationState: number
    cdma1xRegistrationState: number
    esn: string
    evdoRegistrationState: number
    meid: string
    nid: number
    sid: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemCdma */
    activate(carrier: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    activateFinish(res: Gio.AsyncResult): boolean
    activateManual(properties: CdmaManualActivationProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    activateManualFinish(res: Gio.AsyncResult): boolean
    activateManualSync(properties: CdmaManualActivationProperties, cancellable?: Gio.Cancellable | null): boolean
    activateSync(carrier: string, cancellable?: Gio.Cancellable | null): boolean
    dupEsn(): string
    dupMeid(): string
    dupPath(): string
    getActivationState(): ModemCdmaActivationState
    getCdma1xRegistrationState(): ModemCdmaRegistrationState
    getEsn(): string
    getEvdoRegistrationState(): ModemCdmaRegistrationState
    getMeid(): string
    getNid(): number
    getPath(): string
    getSid(): number
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemCdma */
    callActivate(argCarrierCode: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateFinish(res: Gio.AsyncResult): boolean
    callActivateManual(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callActivateManualFinish(res: Gio.AsyncResult): boolean
    callActivateManualSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callActivateSync(argCarrierCode: string, cancellable?: Gio.Cancellable | null): boolean
    completeActivate(invocation: Gio.DBusMethodInvocation): void
    completeActivateManual(invocation: Gio.DBusMethodInvocation): void
    emitActivationStateChanged(argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemCdma */
    connect(sigName: "activation-state-changed", callback: ((argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void)): number
    on(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activation-state-changed", callback: (argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "activation-state-changed", argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant): void
    connect(sigName: "handle-activate", callback: ((invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => boolean)): number
    on(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate", callback: (invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate", invocation: Gio.DBusMethodInvocation, argCarrierCode: string): void
    connect(sigName: "handle-activate-manual", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-activate-manual", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-activate-manual", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::activation-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activation-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::activation-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::esn", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::esn", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::esn", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemCdma_ConstructProps)
    _init (config?: ModemCdma_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemCdma
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemCdma
    static newForBusFinish(res: Gio.AsyncResult): ModemCdma
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemCdma
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemCdma
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemCdma
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemCdma
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemCdma
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemFirmware_ConstructProps extends GdbusModemFirmwareProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings?: GLib.Variant
}
class ModemFirmware {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    updateSettings: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemFirmware */
    dupPath(): string
    getPath(): string
    getUpdateSettings(): FirmwareUpdateSettings
    list(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    listFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* selected */ FirmwareProperties | null, /* installed */ FirmwareProperties[] | null ]
    listSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* selected */ FirmwareProperties | null, /* installed */ FirmwareProperties[] | null ]
    peekUpdateSettings(): FirmwareUpdateSettings
    select(uniqueId: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    selectFinish(res: Gio.AsyncResult): boolean
    selectSync(uniqueId: string, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outSelected */ string | null, /* outInstalled */ GLib.Variant | null ]
    callSelect(argUniqueid: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSelectFinish(res: Gio.AsyncResult): boolean
    callSelectSync(argUniqueid: string, cancellable?: Gio.Cancellable | null): boolean
    completeList(invocation: Gio.DBusMethodInvocation, selected: string, installed: GLib.Variant): void
    completeSelect(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemFirmware */
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-select", callback: ((invocation: Gio.DBusMethodInvocation, argUniqueid: string) => boolean)): number
    on(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-select", callback: (invocation: Gio.DBusMethodInvocation, argUniqueid: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-select", invocation: Gio.DBusMethodInvocation, argUniqueid: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::update-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::update-settings", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::update-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemFirmware_ConstructProps)
    _init (config?: ModemFirmware_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemFirmware
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemFirmware
    static newForBusFinish(res: Gio.AsyncResult): ModemFirmware
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemFirmware
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemFirmware
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemFirmware
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemFirmware
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemFirmware
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemLocation_ConstructProps extends GdbusModemLocationProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers?: string[]
    capabilities?: number
    enabled?: number
    gpsRefreshRate?: number
    location?: GLib.Variant
    signalsLocation?: boolean
    suplServer?: string
    supportedAssistanceData?: number
}
class ModemLocation {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemLocation */
    assistanceDataServers: string[]
    capabilities: number
    enabled: number
    gpsRefreshRate: number
    location: GLib.Variant
    suplServer: string
    supportedAssistanceData: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemLocation */
    dupAssistanceDataServers(): string[]
    dupPath(): string
    dupSuplServer(): string
    get3gpp(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    get3gppFinish(res: Gio.AsyncResult): Location3gpp
    get3gppSync(cancellable?: Gio.Cancellable | null): Location3gpp
    getAssistanceDataServers(): string[]
    getCapabilities(): ModemLocationSource
    getCdmaBs(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getCdmaBsFinish(res: Gio.AsyncResult): LocationCdmaBs
    getCdmaBsSync(cancellable?: Gio.Cancellable | null): LocationCdmaBs
    getEnabled(): ModemLocationSource
    getFull(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getFullFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* location3gpp */ Location3gpp | null, /* locationGpsNmea */ LocationGpsNmea | null, /* locationGpsRaw */ LocationGpsRaw | null, /* locationCdmaBs */ LocationCdmaBs | null ]
    getFullSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* location3gpp */ Location3gpp | null, /* locationGpsNmea */ LocationGpsNmea | null, /* locationGpsRaw */ LocationGpsRaw | null, /* locationCdmaBs */ LocationCdmaBs | null ]
    getGpsNmea(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getGpsNmeaFinish(res: Gio.AsyncResult): LocationGpsNmea
    getGpsNmeaSync(cancellable?: Gio.Cancellable | null): LocationGpsNmea
    getGpsRaw(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getGpsRawFinish(res: Gio.AsyncResult): LocationGpsRaw
    getGpsRawSync(cancellable?: Gio.Cancellable | null): LocationGpsRaw
    getGpsRefreshRate(): number
    getPath(): string
    getSignaled3gpp(): Location3gpp
    getSignaledCdmaBs(): LocationCdmaBs
    getSignaledGpsNmea(): LocationGpsNmea
    getSignaledGpsRaw(): LocationGpsRaw
    getSuplServer(): string
    getSupportedAssistanceData(): ModemLocationAssistanceDataType
    injectAssistanceData(data: Uint8Array, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    injectAssistanceDataFinish(res: Gio.AsyncResult): boolean
    injectAssistanceDataSync(data: Uint8Array, cancellable?: Gio.Cancellable | null): boolean
    peekSignaled3gpp(): Location3gpp
    peekSignaledCdmaBs(): LocationCdmaBs
    peekSignaledGpsNmea(): LocationGpsNmea
    peekSignaledGpsRaw(): LocationGpsRaw
    setGpsRefreshRate(rate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setGpsRefreshRateFinish(res: Gio.AsyncResult): boolean
    setGpsRefreshRateSync(rate: number, cancellable?: Gio.Cancellable | null): boolean
    setSuplServer(supl: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setSuplServerFinish(res: Gio.AsyncResult): boolean
    setSuplServerSync(supl: string, cancellable?: Gio.Cancellable | null): boolean
    setup(sources: ModemLocationSource, signalLocation: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setupFinish(res: Gio.AsyncResult): boolean
    setupSync(sources: ModemLocationSource, signalLocation: boolean, cancellable?: Gio.Cancellable | null): boolean
    signalsLocation(): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemLocation */
    callGetLocation(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetLocationFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callGetLocationSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outLocation */ GLib.Variant | null ]
    callInjectAssistanceData(argData: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callInjectAssistanceDataFinish(res: Gio.AsyncResult): boolean
    callInjectAssistanceDataSync(argData: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    callSetGpsRefreshRate(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetGpsRefreshRateFinish(res: Gio.AsyncResult): boolean
    callSetGpsRefreshRateSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetSuplServer(argSupl: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetSuplServerFinish(res: Gio.AsyncResult): boolean
    callSetSuplServerSync(argSupl: string, cancellable?: Gio.Cancellable | null): boolean
    callSetup(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argSources: number, argSignalLocation: boolean, cancellable?: Gio.Cancellable | null): boolean
    completeGetLocation(invocation: Gio.DBusMethodInvocation, location: GLib.Variant): void
    completeInjectAssistanceData(invocation: Gio.DBusMethodInvocation): void
    completeSetGpsRefreshRate(invocation: Gio.DBusMethodInvocation): void
    completeSetSuplServer(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemLocation */
    connect(sigName: "handle-get-location", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-location", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-location", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-inject-assistance-data", callback: ((invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => boolean)): number
    on(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-inject-assistance-data", callback: (invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-inject-assistance-data", invocation: Gio.DBusMethodInvocation, argData: GLib.Variant): void
    connect(sigName: "handle-set-gps-refresh-rate", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-gps-refresh-rate", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-gps-refresh-rate", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-set-supl-server", callback: ((invocation: Gio.DBusMethodInvocation, argSupl: string) => boolean)): number
    on(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-supl-server", callback: (invocation: Gio.DBusMethodInvocation, argSupl: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-supl-server", invocation: Gio.DBusMethodInvocation, argSupl: string): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::assistance-data-servers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::assistance-data-servers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::assistance-data-servers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capabilities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gps-refresh-rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gps-refresh-rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gps-refresh-rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supl-server", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supl-server", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supl-server", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-assistance-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-assistance-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-assistance-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemLocation_ConstructProps)
    _init (config?: ModemLocation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemLocation
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemLocation
    static newForBusFinish(res: Gio.AsyncResult): ModemLocation
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemLocation
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemLocation
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemLocation
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemLocation
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemLocation
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemMessaging_ConstructProps extends GdbusModemMessagingProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage?: number
    messages?: string[]
    supportedStorages?: GLib.Variant
}
class ModemMessaging {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    defaultStorage: number
    messages: string[]
    supportedStorages: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemMessaging */
    create(properties: SmsProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createFinish(res: Gio.AsyncResult): Sms
    createSync(properties: SmsProperties, cancellable?: Gio.Cancellable | null): Sms
    delete(sms: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteFinish(res: Gio.AsyncResult): boolean
    deleteSync(sms: string, cancellable?: Gio.Cancellable | null): boolean
    dupPath(): string
    getDefaultStorage(): SmsStorage
    getPath(): string
    getSupportedStorages(): [ /* returnType */ boolean, /* storages */ SmsStorage[] ]
    list(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    listFinish(res: Gio.AsyncResult): Sms[]
    listSync(cancellable?: Gio.Cancellable | null): Sms[]
    peekSupportedStorages(): [ /* returnType */ boolean, /* storages */ SmsStorage, /* nStorages */ number ]
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    callCreate(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDelete(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteFinish(res: Gio.AsyncResult): boolean
    callDeleteSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callList(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    completeCreate(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDelete(invocation: Gio.DBusMethodInvocation): void
    completeList(invocation: Gio.DBusMethodInvocation, result: string): void
    emitAdded(argPath: string, argReceived: boolean): void
    emitDeleted(argPath: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemMessaging */
    connect(sigName: "added", callback: ((argPath: string, argReceived: boolean) => void)): number
    on(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "added", callback: (argPath: string, argReceived: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "added", callback: (argPath: string, argReceived: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "added", argPath: string, argReceived: boolean): void
    connect(sigName: "deleted", callback: ((argPath: string) => void)): number
    on(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "deleted", argPath: string): void
    connect(sigName: "handle-create", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-list", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::messages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::messages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::messages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::supported-storages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-storages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::supported-storages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemMessaging_ConstructProps)
    _init (config?: ModemMessaging_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemMessaging
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemMessaging
    static newForBusFinish(res: Gio.AsyncResult): ModemMessaging
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemMessaging
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemMessaging
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemMessaging
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemMessaging
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemMessaging
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemOma_ConstructProps extends GdbusModemOmaProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features?: number
    pendingNetworkInitiatedSessions?: GLib.Variant
    sessionState?: number
    sessionType?: number
}
class ModemOma {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemOma */
    features: number
    pendingNetworkInitiatedSessions: GLib.Variant
    sessionState: number
    sessionType: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemOma */
    acceptNetworkInitiatedSession(sessionId: number, accept: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    acceptNetworkInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    acceptNetworkInitiatedSessionSync(sessionId: number, accept: boolean, cancellable?: Gio.Cancellable | null): boolean
    cancelSession(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    cancelSessionFinish(res: Gio.AsyncResult): boolean
    cancelSessionSync(cancellable?: Gio.Cancellable | null): boolean
    dupPath(): string
    getFeatures(): OmaFeature
    getPath(): string
    getPendingNetworkInitiatedSessions(): [ /* returnType */ boolean, /* sessions */ OmaPendingNetworkInitiatedSession[] ]
    getSessionState(): OmaSessionState
    getSessionType(): OmaSessionType
    peekPendingNetworkInitiatedSessions(): [ /* returnType */ boolean, /* sessions */ OmaPendingNetworkInitiatedSession[] ]
    setup(features: OmaFeature, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setupFinish(res: Gio.AsyncResult): boolean
    setupSync(features: OmaFeature, cancellable?: Gio.Cancellable | null): boolean
    startClientInitiatedSession(sessionType: OmaSessionType, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    startClientInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    startClientInitiatedSessionSync(sessionType: OmaSessionType, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemOma */
    callAcceptNetworkInitiatedSession(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callAcceptNetworkInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callAcceptNetworkInitiatedSessionSync(argSessionId: number, argAccept: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCancelSession(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCancelSessionFinish(res: Gio.AsyncResult): boolean
    callCancelSessionSync(cancellable?: Gio.Cancellable | null): boolean
    callSetup(argFeatures: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argFeatures: number, cancellable?: Gio.Cancellable | null): boolean
    callStartClientInitiatedSession(argSessionType: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStartClientInitiatedSessionFinish(res: Gio.AsyncResult): boolean
    callStartClientInitiatedSessionSync(argSessionType: number, cancellable?: Gio.Cancellable | null): boolean
    completeAcceptNetworkInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    completeCancelSession(invocation: Gio.DBusMethodInvocation): void
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeStartClientInitiatedSession(invocation: Gio.DBusMethodInvocation): void
    emitSessionStateChanged(argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemOma */
    connect(sigName: "handle-accept-network-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => boolean)): number
    on(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-accept-network-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-accept-network-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean): void
    connect(sigName: "handle-cancel-session", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-cancel-session", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-cancel-session", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argFeatures: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argFeatures: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argFeatures: number): void
    connect(sigName: "handle-start-client-initiated-session", callback: ((invocation: Gio.DBusMethodInvocation, argSessionType: number) => boolean)): number
    on(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-start-client-initiated-session", callback: (invocation: Gio.DBusMethodInvocation, argSessionType: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-start-client-initiated-session", invocation: Gio.DBusMethodInvocation, argSessionType: number): void
    connect(sigName: "session-state-changed", callback: ((argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void)): number
    on(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "session-state-changed", callback: (argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void): NodeJS.EventEmitter
    emit(sigName: "session-state-changed", argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::features", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::features", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pending-network-initiated-sessions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pending-network-initiated-sessions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pending-network-initiated-sessions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::session-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::session-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::session-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemOma_ConstructProps)
    _init (config?: ModemOma_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemOma
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemOma
    static newForBusFinish(res: Gio.AsyncResult): ModemOma
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemOma
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemOma
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemOma
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemOma
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemOma
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemSar_ConstructProps extends GdbusModemSarProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel?: number
    state?: boolean
}
class ModemSar {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSar */
    powerLevel: number
    state: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemSar */
    dupPath(): string
    enable(enable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    enableFinish(res: Gio.AsyncResult): boolean
    enableSync(enable: boolean, cancellable?: Gio.Cancellable | null): boolean
    getPath(): string
    getPowerLevel(): number
    getState(): boolean
    setPowerLevel(level: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setPowerLevelFinish(res: Gio.AsyncResult): boolean
    setPowerLevelSync(level: number, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSar */
    callEnable(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnableFinish(res: Gio.AsyncResult): boolean
    callEnableSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSetPowerLevel(argLevel: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPowerLevelFinish(res: Gio.AsyncResult): boolean
    callSetPowerLevelSync(argLevel: number, cancellable?: Gio.Cancellable | null): boolean
    completeEnable(invocation: Gio.DBusMethodInvocation): void
    completeSetPowerLevel(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSar */
    connect(sigName: "handle-enable", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-set-power-level", callback: ((invocation: Gio.DBusMethodInvocation, argLevel: number) => boolean)): number
    on(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-power-level", callback: (invocation: Gio.DBusMethodInvocation, argLevel: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-power-level", invocation: Gio.DBusMethodInvocation, argLevel: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::power-level", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::power-level", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::power-level", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemSar_ConstructProps)
    _init (config?: ModemSar_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemSar
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemSar
    static newForBusFinish(res: Gio.AsyncResult): ModemSar
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemSar
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemSar
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemSar
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemSar
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemSar
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemSignal_ConstructProps extends GdbusModemSignalProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma?: GLib.Variant
    errorRateThreshold?: boolean
    evdo?: GLib.Variant
    gsm?: GLib.Variant
    lte?: GLib.Variant
    nr5g?: GLib.Variant
    rate?: number
    rssiThreshold?: number
    umts?: GLib.Variant
}
class ModemSignal {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemSignal */
    cdma: GLib.Variant
    errorRateThreshold: boolean
    evdo: GLib.Variant
    gsm: GLib.Variant
    lte: GLib.Variant
    nr5g: GLib.Variant
    rate: number
    rssiThreshold: number
    umts: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemSignal */
    dupPath(): string
    getCdma(): Signal
    getErrorRateThreshold(): boolean
    getEvdo(): Signal
    getGsm(): Signal
    getLte(): Signal
    getNr5g(): Signal
    getPath(): string
    getRate(): number
    getRssiThreshold(): number
    getUmts(): Signal
    peekCdma(): Signal
    peekEvdo(): Signal
    peekGsm(): Signal
    peekLte(): Signal
    peekNr5g(): Signal
    peekUmts(): Signal
    setup(rate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setupFinish(res: Gio.AsyncResult): boolean
    setupSync(rate: number, cancellable?: Gio.Cancellable | null): boolean
    setupThresholds(properties: SignalThresholdProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setupThresholdsFinish(res: Gio.AsyncResult): boolean
    setupThresholdsSync(properties: SignalThresholdProperties, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSignal */
    callSetup(argRate: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupFinish(res: Gio.AsyncResult): boolean
    callSetupSync(argRate: number, cancellable?: Gio.Cancellable | null): boolean
    callSetupThresholds(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetupThresholdsFinish(res: Gio.AsyncResult): boolean
    callSetupThresholdsSync(argSettings: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeSetup(invocation: Gio.DBusMethodInvocation): void
    completeSetupThresholds(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSignal */
    connect(sigName: "handle-setup", callback: ((invocation: Gio.DBusMethodInvocation, argRate: number) => boolean)): number
    on(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup", callback: (invocation: Gio.DBusMethodInvocation, argRate: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup", invocation: Gio.DBusMethodInvocation, argRate: number): void
    connect(sigName: "handle-setup-thresholds", callback: ((invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean)): number
    on(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-setup-thresholds", callback: (invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-setup-thresholds", invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::error-rate-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::error-rate-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::error-rate-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::evdo", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::evdo", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::evdo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gsm", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gsm", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gsm", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lte", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lte", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lte", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nr5g", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nr5g", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nr5g", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rssi-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rssi-threshold", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rssi-threshold", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::umts", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::umts", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::umts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemSignal_ConstructProps)
    _init (config?: ModemSignal_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemSignal
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemSignal
    static newForBusFinish(res: Gio.AsyncResult): ModemSignal
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemSignal
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemSignal
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemSignal
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemSignal
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemSignal
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemSimple_ConstructProps extends GdbusModemSimpleProxy_ConstructProps {
}
class ModemSimple {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemSimple */
    connect(properties: SimpleConnectProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    connectFinish(res: Gio.AsyncResult): Bearer
    connectSync(properties: SimpleConnectProperties, cancellable?: Gio.Cancellable | null): Bearer
    disconnect(bearer?: string | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disconnectFinish(res: Gio.AsyncResult): boolean
    disconnectSync(bearer?: string | null, cancellable?: Gio.Cancellable | null): boolean
    dupPath(): string
    getPath(): string
    getStatus(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getStatusFinish(res: Gio.AsyncResult): SimpleStatus
    getStatusSync(cancellable?: Gio.Cancellable | null): SimpleStatus
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemSimple */
    callConnect(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callConnectFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callConnectSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outBearer */ string | null ]
    callDisconnect(argBearer: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDisconnectFinish(res: Gio.AsyncResult): boolean
    callDisconnectSync(argBearer: string, cancellable?: Gio.Cancellable | null): boolean
    callGetStatus(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetStatusFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    callGetStatusSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outProperties */ GLib.Variant | null ]
    completeConnect(invocation: Gio.DBusMethodInvocation, bearer: string): void
    completeDisconnect(invocation: Gio.DBusMethodInvocation): void
    completeGetStatus(invocation: Gio.DBusMethodInvocation, properties: GLib.Variant): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemSimple */
    connect(sigName: "handle-connect", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-connect", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-connect", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-disconnect", callback: ((invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean)): number
    on(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-disconnect", callback: (invocation: Gio.DBusMethodInvocation, argBearer: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-disconnect", invocation: Gio.DBusMethodInvocation, argBearer: string): void
    connect(sigName: "handle-get-status", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-status", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-status", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemSimple_ConstructProps)
    _init (config?: ModemSimple_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemSimple
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemSimple
    static newForBusFinish(res: Gio.AsyncResult): ModemSimple
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemSimple
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemSimple
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemSimple
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemSimple
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemSimple
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemTime_ConstructProps extends GdbusModemTimeProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone?: GLib.Variant
}
class ModemTime {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemTime */
    networkTimezone: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemTime */
    dupPath(): string
    getNetworkTime(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    getNetworkTimeFinish(res: Gio.AsyncResult): string
    getNetworkTimeSync(cancellable?: Gio.Cancellable | null): string
    getNetworkTimezone(): NetworkTimezone
    getPath(): string
    peekNetworkTimezone(): NetworkTimezone
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemTime */
    callGetNetworkTime(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callGetNetworkTimeFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outTime */ string | null ]
    callGetNetworkTimeSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outTime */ string | null ]
    completeGetNetworkTime(invocation: Gio.DBusMethodInvocation, time: string): void
    emitNetworkTimeChanged(argTime: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemTime */
    connect(sigName: "handle-get-network-time", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-get-network-time", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-get-network-time", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "network-time-changed", callback: ((argTime: string) => void)): number
    on(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-time-changed", callback: (argTime: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-time-changed", callback: (argTime: string) => void): NodeJS.EventEmitter
    emit(sigName: "network-time-changed", argTime: string): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::network-timezone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-timezone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::network-timezone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemTime_ConstructProps)
    _init (config?: ModemTime_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemTime
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemTime
    static newForBusFinish(res: Gio.AsyncResult): ModemTime
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemTime
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemTime
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemTime
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemTime
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemTime
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface ModemVoice_ConstructProps extends GdbusModemVoiceProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls?: string[]
    emergencyOnly?: boolean
}
class ModemVoice {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusModemVoice */
    calls: string[]
    emergencyOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.ModemVoice */
    callWaitingQuery(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWaitingQueryFinish(res: Gio.AsyncResult, status: boolean): boolean
    callWaitingQuerySync(cancellable: Gio.Cancellable | null, status: boolean): boolean
    callWaitingSetup(enable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWaitingSetupFinish(res: Gio.AsyncResult): boolean
    callWaitingSetupSync(enable: boolean, cancellable?: Gio.Cancellable | null): boolean
    createCall(properties: CallProperties, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createCallFinish(res: Gio.AsyncResult): Call
    createCallSync(properties: CallProperties, cancellable?: Gio.Cancellable | null): Call
    deleteCall(call: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    deleteCallFinish(res: Gio.AsyncResult): boolean
    deleteCallSync(call: string, cancellable?: Gio.Cancellable | null): boolean
    dupPath(): string
    getEmergencyOnly(): boolean
    getPath(): string
    hangupAll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    hangupAllFinish(res: Gio.AsyncResult): boolean
    hangupAllSync(cancellable?: Gio.Cancellable | null): boolean
    hangupAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    hangupAndAcceptFinish(res: Gio.AsyncResult): boolean
    hangupAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    holdAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    holdAndAcceptFinish(res: Gio.AsyncResult): boolean
    holdAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    listCalls(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    listCallsFinish(res: Gio.AsyncResult): Call[]
    listCallsSync(cancellable?: Gio.Cancellable | null): Call[]
    transfer(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    transferFinish(res: Gio.AsyncResult): boolean
    transferSync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusModemVoice */
    callCallWaitingQuery(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingQueryFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingQuerySync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outStatus */ boolean | null ]
    callCallWaitingSetup(argEnable: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCallWaitingSetupFinish(res: Gio.AsyncResult): boolean
    callCallWaitingSetupSync(argEnable: boolean, cancellable?: Gio.Cancellable | null): boolean
    callCreateCall(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callCreateCallFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outPath */ string | null ]
    callCreateCallSync(argProperties: GLib.Variant, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outPath */ string | null ]
    callDeleteCall(argPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callDeleteCallFinish(res: Gio.AsyncResult): boolean
    callDeleteCallSync(argPath: string, cancellable?: Gio.Cancellable | null): boolean
    callHangupAll(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAllFinish(res: Gio.AsyncResult): boolean
    callHangupAllSync(cancellable?: Gio.Cancellable | null): boolean
    callHangupAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHangupAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHangupAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callHoldAndAccept(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callHoldAndAcceptFinish(res: Gio.AsyncResult): boolean
    callHoldAndAcceptSync(cancellable?: Gio.Cancellable | null): boolean
    callListCalls(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callListCallsFinish(res: Gio.AsyncResult): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callListCallsSync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* outResult */ string[] | null ]
    callTransfer(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callTransferFinish(res: Gio.AsyncResult): boolean
    callTransferSync(cancellable?: Gio.Cancellable | null): boolean
    completeCallWaitingQuery(invocation: Gio.DBusMethodInvocation, status: boolean): void
    completeCallWaitingSetup(invocation: Gio.DBusMethodInvocation): void
    completeCreateCall(invocation: Gio.DBusMethodInvocation, path: string): void
    completeDeleteCall(invocation: Gio.DBusMethodInvocation): void
    completeHangupAll(invocation: Gio.DBusMethodInvocation): void
    completeHangupAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeHoldAndAccept(invocation: Gio.DBusMethodInvocation): void
    completeListCalls(invocation: Gio.DBusMethodInvocation, result: string): void
    completeTransfer(invocation: Gio.DBusMethodInvocation): void
    emitCallAdded(argPath: string): void
    emitCallDeleted(argPath: string): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusModemVoice */
    connect(sigName: "call-added", callback: ((argPath: string) => void)): number
    on(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-added", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-added", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-added", argPath: string): void
    connect(sigName: "call-deleted", callback: ((argPath: string) => void)): number
    on(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "call-deleted", callback: (argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "call-deleted", callback: (argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "call-deleted", argPath: string): void
    connect(sigName: "handle-call-waiting-query", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-query", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-query", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-call-waiting-setup", callback: ((invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean)): number
    on(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-call-waiting-setup", callback: (invocation: Gio.DBusMethodInvocation, argEnable: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-call-waiting-setup", invocation: Gio.DBusMethodInvocation, argEnable: boolean): void
    connect(sigName: "handle-create-call", callback: ((invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean)): number
    on(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-create-call", callback: (invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-create-call", invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant): void
    connect(sigName: "handle-delete-call", callback: ((invocation: Gio.DBusMethodInvocation, argPath: string) => boolean)): number
    on(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-delete-call", callback: (invocation: Gio.DBusMethodInvocation, argPath: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-delete-call", invocation: Gio.DBusMethodInvocation, argPath: string): void
    connect(sigName: "handle-hangup-all", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-all", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-all", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hangup-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hangup-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hangup-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-hold-and-accept", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-hold-and-accept", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-hold-and-accept", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-list-calls", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-list-calls", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-list-calls", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-transfer", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-transfer", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-transfer", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::calls", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::calls", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::calls", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::emergency-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::emergency-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::emergency-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ModemVoice_ConstructProps)
    _init (config?: ModemVoice_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): ModemVoice
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): ModemVoice
    static newForBusFinish(res: Gio.AsyncResult): ModemVoice
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): ModemVoice
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): ModemVoice
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemVoice
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): ModemVoice
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): ModemVoice
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface NetworkTimezone_ConstructProps extends GObject.Object_ConstructProps {
}
class NetworkTimezone {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.NetworkTimezone */
    getDstOffset(): number
    getLeapSeconds(): number
    getOffset(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NetworkTimezone_ConstructProps)
    _init (config?: NetworkTimezone_ConstructProps): void
    static $gtype: GObject.Type
}
interface Nr5gRegistrationSettings_ConstructProps extends GObject.Object_ConstructProps {
}
class Nr5gRegistrationSettings {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Nr5gRegistrationSettings */
    getDrxCycle(): Modem3gppDrxCycle
    getMicoMode(): Modem3gppMicoMode
    setDrxCycle(drxCycle: Modem3gppDrxCycle): void
    setMicoMode(micoMode: Modem3gppMicoMode): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Nr5gRegistrationSettings_ConstructProps)
    _init (config?: Nr5gRegistrationSettings_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Nr5gRegistrationSettings
    static $gtype: GObject.Type
}
interface Object_ConstructProps extends GdbusObjectProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem?: GdbusModem
    modemCdma?: GdbusModemCdma
    modemFirmware?: GdbusModemFirmware
    modemLocation?: GdbusModemLocation
    modemMessaging?: GdbusModemMessaging
    modemOma?: GdbusModemOma
    modemSar?: GdbusModemSar
    modemSignal?: GdbusModemSignal
    modemSimple?: GdbusModemSimple
    modemTime?: GdbusModemTime
    modemVoice?: GdbusModemVoice
    modem3gpp?: GdbusModem3gpp
    modem3gppProfileManager?: GdbusModem3gppProfileManager
    modem3gppUssd?: GdbusModem3gppUssd
}
class Object {
    /* Properties of ModemManager-1.0.ModemManager.GdbusObject */
    modem: GdbusModem
    modemCdma: GdbusModemCdma
    modemFirmware: GdbusModemFirmware
    modemLocation: GdbusModemLocation
    modemMessaging: GdbusModemMessaging
    modemOma: GdbusModemOma
    modemSar: GdbusModemSar
    modemSignal: GdbusModemSignal
    modemSimple: GdbusModemSimple
    modemTime: GdbusModemTime
    modemVoice: GdbusModemVoice
    modem3gpp: GdbusModem3gpp
    modem3gppProfileManager: GdbusModem3gppProfileManager
    modem3gppUssd: GdbusModem3gppUssd
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Object */
    dupPath(): string
    getModem(): Modem
    getModem3gpp(): Modem3gpp
    getModem3gppProfileManager(): Modem3gppProfileManager
    getModem3gppUssd(): Modem3gppUssd
    getModemCdma(): ModemCdma
    getModemFirmware(): ModemFirmware
    getModemLocation(): ModemLocation
    getModemMessaging(): ModemMessaging
    getModemOma(): ModemOma
    getModemSar(): ModemSar
    getModemSignal(): ModemSignal
    getModemSimple(): ModemSimple
    getModemTime(): ModemTime
    getModemVoice(): ModemVoice
    /* Methods of Gio-2.0.Gio.DBusObjectProxy */
    getConnection(): Gio.DBusConnection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.DBusObject */
    getInterface(interfaceName: string): Gio.DBusInterface | null
    getInterfaces(): Gio.DBusInterface[]
    getObjectPath(): string
    /* Methods of ModemManager-1.0.ModemManager.GdbusObject */
    getModem(): GdbusModem | null
    getModem3gpp(): GdbusModem3gpp | null
    getModem3gppProfileManager(): GdbusModem3gppProfileManager | null
    getModem3gppUssd(): GdbusModem3gppUssd | null
    getModemCdma(): GdbusModemCdma | null
    getModemFirmware(): GdbusModemFirmware | null
    getModemLocation(): GdbusModemLocation | null
    getModemMessaging(): GdbusModemMessaging | null
    getModemOma(): GdbusModemOma | null
    getModemSar(): GdbusModemSar | null
    getModemSignal(): GdbusModemSignal | null
    getModemSimple(): GdbusModemSimple | null
    getModemTime(): GdbusModemTime | null
    getModemVoice(): GdbusModemVoice | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Gio-2.0.Gio.DBusObject */
    connect(sigName: "interface-added", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-added", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-added", interface: Gio.DBusInterface): void
    connect(sigName: "interface-removed", callback: ((interface: Gio.DBusInterface) => void)): number
    on(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "interface-removed", callback: (interface: Gio.DBusInterface) => void): NodeJS.EventEmitter
    emit(sigName: "interface-removed", interface: Gio.DBusInterface): void
    connect(sigName: "notify::modem", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-cdma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-cdma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-firmware", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-firmware", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-firmware", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-messaging", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-messaging", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-messaging", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-oma", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-oma", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-oma", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-sar", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-sar", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-sar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-signal", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-signal", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-signal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-simple", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-simple", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-simple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem-voice", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem-voice", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem-voice", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp-profile-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp-profile-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp-profile-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::modem3gpp-ussd", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modem3gpp-ussd", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::modem3gpp-ussd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Object_ConstructProps)
    _init (config?: Object_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(connection: Gio.DBusConnection, objectPath: string): Object
    /* Function overloads */
    static new(connection: Gio.DBusConnection, objectPath: string): Object
    static $gtype: GObject.Type
}
interface Pco_ConstructProps extends GObject.Object_ConstructProps {
}
class Pco {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Pco */
    getData(): [ /* returnType */ number, /* dataSize */ number ]
    getSessionId(): number
    isComplete(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Pco_ConstructProps)
    _init (config?: Pco_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static listFree(pcoList: Pco[]): void
    static $gtype: GObject.Type
}
interface Signal_ConstructProps extends GObject.Object_ConstructProps {
}
class Signal {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Signal */
    getEcio(): number
    getErrorRate(): number
    getIo(): number
    getRscp(): number
    getRsrp(): number
    getRsrq(): number
    getRssi(): number
    getSinr(): number
    getSnr(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Signal_ConstructProps)
    _init (config?: Signal_ConstructProps): void
    static $gtype: GObject.Type
}
interface SignalThresholdProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class SignalThresholdProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.SignalThresholdProperties */
    getErrorRate(): boolean
    getRssi(): number
    setErrorRate(errorRateThreshold: boolean): void
    setRssi(rssiThreshold: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SignalThresholdProperties_ConstructProps)
    _init (config?: SignalThresholdProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SignalThresholdProperties
    static $gtype: GObject.Type
}
interface Sim_ConstructProps extends GdbusSimProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusSim */
    active?: boolean
    eid?: string
    emergencyNumbers?: string[]
    esimStatus?: number
    imsi?: string
    operatorIdentifier?: string
    operatorName?: string
    preferredNetworks?: GLib.Variant
    removability?: number
    simIdentifier?: string
    simType?: number
}
class Sim {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusSim */
    active: boolean
    eid: string
    emergencyNumbers: string[]
    esimStatus: number
    imsi: string
    operatorIdentifier: string
    operatorName: string
    preferredNetworks: GLib.Variant
    removability: number
    simIdentifier: string
    simType: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Sim */
    changePin(oldPin: string, newPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    changePinFinish(res: Gio.AsyncResult): boolean
    changePinSync(oldPin: string, newPin: string, cancellable?: Gio.Cancellable | null): boolean
    disablePin(pin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    disablePinFinish(res: Gio.AsyncResult): boolean
    disablePinSync(pin: string, cancellable?: Gio.Cancellable | null): boolean
    dupEid(): string
    dupEmergencyNumbers(): string[]
    dupIdentifier(): string
    dupImsi(): string
    dupOperatorIdentifier(): string
    dupOperatorName(): string
    dupPath(): string
    enablePin(pin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    enablePinFinish(res: Gio.AsyncResult): boolean
    enablePinSync(pin: string, cancellable?: Gio.Cancellable | null): boolean
    getActive(): boolean
    getEid(): string
    getEmergencyNumbers(): string[]
    getEsimStatus(): SimEsimStatus
    getIdentifier(): string
    getImsi(): string
    getOperatorIdentifier(): string
    getOperatorName(): string
    getPath(): string
    getPreferredNetworks(): SimPreferredNetwork[]
    getRemovability(): SimRemovability
    getSimType(): SimType
    sendPin(pin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    sendPinFinish(res: Gio.AsyncResult): boolean
    sendPinSync(pin: string, cancellable?: Gio.Cancellable | null): boolean
    sendPuk(puk: string, pin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    sendPukFinish(res: Gio.AsyncResult): boolean
    sendPukSync(puk: string, pin: string, cancellable?: Gio.Cancellable | null): boolean
    setPreferredNetworks(preferredNetworks: SimPreferredNetwork[], cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    setPreferredNetworksFinish(res: Gio.AsyncResult): boolean
    setPreferredNetworksSync(preferredNetworks: SimPreferredNetwork[], cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusSim */
    callChangePin(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callChangePinFinish(res: Gio.AsyncResult): boolean
    callChangePinSync(argOldPin: string, argNewPin: string, cancellable?: Gio.Cancellable | null): boolean
    callEnablePin(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callEnablePinFinish(res: Gio.AsyncResult): boolean
    callEnablePinSync(argPin: string, argEnabled: boolean, cancellable?: Gio.Cancellable | null): boolean
    callSendPin(argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPinFinish(res: Gio.AsyncResult): boolean
    callSendPinSync(argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSendPuk(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendPukFinish(res: Gio.AsyncResult): boolean
    callSendPukSync(argPuk: string, argPin: string, cancellable?: Gio.Cancellable | null): boolean
    callSetPreferredNetworks(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSetPreferredNetworksFinish(res: Gio.AsyncResult): boolean
    callSetPreferredNetworksSync(argPreferredNetworks: GLib.Variant, cancellable?: Gio.Cancellable | null): boolean
    completeChangePin(invocation: Gio.DBusMethodInvocation): void
    completeEnablePin(invocation: Gio.DBusMethodInvocation): void
    completeSendPin(invocation: Gio.DBusMethodInvocation): void
    completeSendPuk(invocation: Gio.DBusMethodInvocation): void
    completeSetPreferredNetworks(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSim */
    connect(sigName: "handle-change-pin", callback: ((invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => boolean)): number
    on(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-change-pin", callback: (invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-change-pin", invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string): void
    connect(sigName: "handle-enable-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => boolean)): number
    on(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-enable-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "handle-enable-pin", invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean): void
    connect(sigName: "handle-send-pin", callback: ((invocation: Gio.DBusMethodInvocation, argPin: string) => boolean)): number
    on(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-pin", callback: (invocation: Gio.DBusMethodInvocation, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-pin", invocation: Gio.DBusMethodInvocation, argPin: string): void
    connect(sigName: "handle-send-puk", callback: ((invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => boolean)): number
    on(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send-puk", callback: (invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send-puk", invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string): void
    connect(sigName: "handle-set-preferred-networks", callback: ((invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => boolean)): number
    on(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-set-preferred-networks", callback: (invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "handle-set-preferred-networks", invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::eid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::eid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::eid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::emergency-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::emergency-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::emergency-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::esim-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::esim-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::esim-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::imsi", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::imsi", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::imsi", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-networks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-networks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-networks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removability", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removability", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removability", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sim-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sim-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sim-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Sim_ConstructProps)
    _init (config?: Sim_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Sim
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Sim
    static newForBusFinish(res: Gio.AsyncResult): Sim
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Sim
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Sim
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Sim
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Sim
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Sim
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface SimpleConnectProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class SimpleConnectProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.SimpleConnectProperties */
    getAllowRoaming(): boolean
    getAllowedAuth(): BearerAllowedAuth
    getApn(): string
    getApnType(): BearerApnType
    getIpType(): BearerIpFamily
    getMultiplex(): BearerMultiplexSupport
    getNumber(): string
    getOperatorId(): string
    getPassword(): string
    getPin(): string
    getProfileId(): number
    getRmProtocol(): ModemCdmaRmProtocol
    getUser(): string
    setAllowRoaming(allowRoaming: boolean): void
    setAllowedAuth(allowedAuth: BearerAllowedAuth): void
    setApn(apn: string): void
    setApnType(apnType: BearerApnType): void
    setIpType(ipType: BearerIpFamily): void
    setMultiplex(multiplex: BearerMultiplexSupport): void
    setNumber(number: string): void
    setOperatorId(operatorId: string): void
    setPassword(password: string): void
    setPin(pin: string): void
    setProfileId(profileId: number): void
    setRmProtocol(protocol: ModemCdmaRmProtocol): void
    setUser(user: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SimpleConnectProperties_ConstructProps)
    _init (config?: SimpleConnectProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SimpleConnectProperties
    static $gtype: GObject.Type
}
interface SimpleStatus_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.SimpleStatus */
    accessTechnologies?: ModemAccessTechnology
    cdmaCdma1xRegistrationState?: ModemCdmaRegistrationState
    cdmaEvdoRegistrationState?: ModemCdmaRegistrationState
    cdmaNid?: number
    cdmaSid?: number
    currentBands?: GLib.Variant
    m3gppOperatorCode?: string
    m3gppOperatorName?: string
    m3gppRegistrationState?: Modem3gppRegistrationState
    m3gppSubscriptionState?: Modem3gppSubscriptionState
    signalQuality?: GLib.Variant
    state?: ModemState
}
class SimpleStatus {
    /* Properties of ModemManager-1.0.ModemManager.SimpleStatus */
    accessTechnologies: ModemAccessTechnology
    cdmaCdma1xRegistrationState: ModemCdmaRegistrationState
    cdmaEvdoRegistrationState: ModemCdmaRegistrationState
    cdmaNid: number
    cdmaSid: number
    currentBands: GLib.Variant
    m3gppOperatorCode: string
    m3gppOperatorName: string
    m3gppRegistrationState: Modem3gppRegistrationState
    m3gppSubscriptionState: Modem3gppSubscriptionState
    signalQuality: GLib.Variant
    state: ModemState
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.SimpleStatus */
    get3gppOperatorCode(): string
    get3gppOperatorName(): string
    get3gppRegistrationState(): Modem3gppRegistrationState
    get3gppSubscriptionState(): Modem3gppSubscriptionState
    getAccessTechnologies(): ModemAccessTechnology
    getCdmaCdma1xRegistrationState(): ModemCdmaRegistrationState
    getCdmaEvdoRegistrationState(): ModemCdmaRegistrationState
    getCdmaNid(): number
    getCdmaSid(): number
    getCurrentBands(): [ /* bands */ ModemBand, /* nBands */ number ]
    getSignalQuality(): [ /* returnType */ number, /* recent */ boolean | null ]
    getState(): ModemState
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-technologies", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-technologies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma-cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma-cdma1x-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma-cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma-cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma-cdma1x-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma-evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma-evdo-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma-evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma-evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma-evdo-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma-nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma-nid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma-nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma-nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma-nid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cdma-sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cdma-sid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cdma-sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cdma-sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cdma-sid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-bands", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-bands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::m3gpp-operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::m3gpp-operator-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::m3gpp-operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::m3gpp-operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::m3gpp-operator-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::m3gpp-operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::m3gpp-operator-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::m3gpp-operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::m3gpp-operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::m3gpp-operator-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::m3gpp-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::m3gpp-registration-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::m3gpp-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::m3gpp-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::m3gpp-registration-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::m3gpp-subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::m3gpp-subscription-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::m3gpp-subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::m3gpp-subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::m3gpp-subscription-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::signal-quality", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::signal-quality", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SimpleStatus_ConstructProps)
    _init (config?: SimpleStatus_ConstructProps): void
    static $gtype: GObject.Type
}
interface Sms_ConstructProps extends GdbusSmsProxy_ConstructProps {
    /* Constructor properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class"?: number
    data?: GLib.Variant
    deliveryReportRequest?: boolean
    deliveryState?: number
    dischargeTimestamp?: string
    messageReference?: number
    number?: string
    pduType?: number
    serviceCategory?: number
    smsc?: string
    state?: number
    storage?: number
    teleserviceId?: number
    text?: string
    timestamp?: string
    validity?: GLib.Variant
}
class Sms {
    /* Properties of Gio-2.0.Gio.DBusProxy */
    gDefaultTimeout: number
    gInterfaceInfo: Gio.DBusInterfaceInfo
    readonly gNameOwner: string
    /* Properties of ModemManager-1.0.ModemManager.GdbusSms */
    "class": number
    data: GLib.Variant
    deliveryReportRequest: boolean
    deliveryState: number
    dischargeTimestamp: string
    messageReference: number
    number: string
    pduType: number
    serviceCategory: number
    smsc: string
    state: number
    storage: number
    teleserviceId: number
    text: string
    timestamp: string
    validity: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.Sms */
    dupData(): Uint8Array
    dupDischargeTimestamp(): string
    dupNumber(): string
    dupPath(): string
    dupSmsc(): string
    dupText(): string
    dupTimestamp(): string
    getClass(): number
    getData(): Uint8Array
    getDeliveryReportRequest(): boolean
    getDeliveryState(): number
    getDischargeTimestamp(): string
    getMessageReference(): number
    getNumber(): string
    getPath(): string
    getPduType(): SmsPduType
    getServiceCategory(): SmsCdmaServiceCategory
    getSmsc(): string
    getState(): SmsState
    getStorage(): SmsStorage
    getTeleserviceId(): SmsCdmaTeleserviceId
    getText(): string
    getTimestamp(): string
    getValidityRelative(): number
    getValidityType(): SmsValidityType
    send(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    sendFinish(res: Gio.AsyncResult): boolean
    sendSync(cancellable?: Gio.Cancellable | null): boolean
    store(storage: SmsStorage, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    storeFinish(res: Gio.AsyncResult): boolean
    storeSync(storage: SmsStorage, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Gio-2.0.Gio.DBusProxy */
    call(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callFinish(res: Gio.AsyncResult): GLib.Variant
    callSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, cancellable?: Gio.Cancellable | null): GLib.Variant
    callWithUnixFdList(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callWithUnixFdListFinish(res: Gio.AsyncResult): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    callWithUnixFdListSync(methodName: string, parameters: GLib.Variant | null, flags: Gio.DBusCallFlags, timeoutMsec: number, fdList?: Gio.UnixFDList | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ GLib.Variant, /* outFdList */ Gio.UnixFDList | null ]
    getCachedProperty(propertyName: string): GLib.Variant | null
    getCachedPropertyNames(): string[] | null
    getConnection(): Gio.DBusConnection
    getDefaultTimeout(): number
    getFlags(): Gio.DBusProxyFlags
    getInterfaceInfo(): Gio.DBusInterfaceInfo | null
    getInterfaceName(): string
    getName(): string | null
    getNameOwner(): string | null
    getObjectPath(): string
    setCachedProperty(propertyName: string, value?: GLib.Variant | null): void
    setDefaultTimeout(timeoutMsec: number): void
    setInterfaceInfo(info?: Gio.DBusInterfaceInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    initAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    initFinish(res: Gio.AsyncResult): boolean
    newFinish(res: Gio.AsyncResult): GObject.Object
    /* Methods of Gio-2.0.Gio.DBusInterface */
    getObject(): Gio.DBusObject | null
    getInfo(): Gio.DBusInterfaceInfo
    setObject(object?: Gio.DBusObject | null): void
    /* Methods of Gio-2.0.Gio.Initable */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of ModemManager-1.0.ModemManager.GdbusSms */
    callSend(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callSendFinish(res: Gio.AsyncResult): boolean
    callSendSync(cancellable?: Gio.Cancellable | null): boolean
    callStore(argStorage: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    callStoreFinish(res: Gio.AsyncResult): boolean
    callStoreSync(argStorage: number, cancellable?: Gio.Cancellable | null): boolean
    completeSend(invocation: Gio.DBusMethodInvocation): void
    completeStore(invocation: Gio.DBusMethodInvocation): void
    /* Signals of Gio-2.0.Gio.DBusProxy */
    connect(sigName: "g-properties-changed", callback: ((changedProperties: GLib.Variant, invalidatedProperties: string[]) => void)): number
    on(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-properties-changed", callback: (changedProperties: GLib.Variant, invalidatedProperties: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "g-properties-changed", changedProperties: GLib.Variant, invalidatedProperties: string[]): void
    connect(sigName: "g-signal", callback: ((senderName: string | null, signalName: string, parameters: GLib.Variant) => void)): number
    on(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "g-signal", callback: (senderName: string | null, signalName: string, parameters: GLib.Variant) => void): NodeJS.EventEmitter
    emit(sigName: "g-signal", senderName: string | null, signalName: string, parameters: GLib.Variant): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of ModemManager-1.0.ModemManager.GdbusSms */
    connect(sigName: "handle-send", callback: ((invocation: Gio.DBusMethodInvocation) => boolean)): number
    on(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-send", callback: (invocation: Gio.DBusMethodInvocation) => void): NodeJS.EventEmitter
    emit(sigName: "handle-send", invocation: Gio.DBusMethodInvocation): void
    connect(sigName: "handle-store", callback: ((invocation: Gio.DBusMethodInvocation, argStorage: number) => boolean)): number
    on(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "handle-store", callback: (invocation: Gio.DBusMethodInvocation, argStorage: number) => void): NodeJS.EventEmitter
    emit(sigName: "handle-store", invocation: Gio.DBusMethodInvocation, argStorage: number): void
    connect(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-default-timeout", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-default-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-interface-info", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-interface-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::g-name-owner", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::g-name-owner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delivery-report-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-report-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delivery-report-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::delivery-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::delivery-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::discharge-timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::discharge-timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::discharge-timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::message-reference", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-reference", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::message-reference", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pdu-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pdu-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pdu-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::service-category", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-category", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::service-category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smsc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smsc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smsc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::storage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::teleservice-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::teleservice-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::teleservice-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timestamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::timestamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::validity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::validity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::validity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Sms_ConstructProps)
    _init (config?: Sms_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFinish(res: Gio.AsyncResult): Sms
    /* Function overloads */
    static newFinish(res: Gio.AsyncResult): Sms
    static newForBusFinish(res: Gio.AsyncResult): Sms
    /* Function overloads */
    static newForBusFinish(res: Gio.AsyncResult): Sms
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null): Sms
    /* Function overloads */
    static newForBusSync(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Sms
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, name: string | null, objectPath: string, cancellable?: Gio.Cancellable | null): Sms
    /* Function overloads */
    static newSync(connection: Gio.DBusConnection, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string | null, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null): Sms
    static newvAsync(objectType: GObject.Type, nParameters: number, parameters: GObject.Parameter, ioPriority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static newv(objectType: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static interfaceInfo(): Gio.DBusInterfaceInfo
    static overrideProperties(klass: GObject.ObjectClass, propertyIdBegin: number): number
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, name: string, objectPath: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /* Function overloads */
    static newForBus(busType: Gio.BusType, flags: Gio.DBusProxyFlags, info: Gio.DBusInterfaceInfo | null, name: string, objectPath: string, interfaceName: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
interface SmsProperties_ConstructProps extends GObject.Object_ConstructProps {
}
class SmsProperties {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.SmsProperties */
    getClass(): number
    getData(): [ /* returnType */ number, /* dataLen */ number ]
    getDataBytearray(): Uint8Array
    getDeliveryReportRequest(): boolean
    getNumber(): string
    getServiceCategory(): SmsCdmaServiceCategory
    getSmsc(): string
    getTeleserviceId(): SmsCdmaTeleserviceId
    getText(): string
    getValidityRelative(): number
    getValidityType(): SmsValidityType
    peekDataBytearray(): Uint8Array
    setClass(messageClass: number): void
    setData(data: number, dataLength: number): void
    setDataBytearray(data: Uint8Array): void
    setDeliveryReportRequest(request: boolean): void
    setNumber(number: string): void
    setServiceCategory(serviceCategory: SmsCdmaServiceCategory): void
    setSmsc(smsc: string): void
    setTeleserviceId(teleserviceId: SmsCdmaTeleserviceId): void
    setText(text: string): void
    setValidityRelative(validity: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SmsProperties_ConstructProps)
    _init (config?: SmsProperties_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SmsProperties
    static $gtype: GObject.Type
}
interface UnlockRetries_ConstructProps extends GObject.Object_ConstructProps {
}
class UnlockRetries {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of ModemManager-1.0.ModemManager.UnlockRetries */
    foreach(callback: UnlockRetriesForeachCb): void
    get(lock: ModemLock): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: UnlockRetries_ConstructProps)
    _init (config?: UnlockRetries_ConstructProps): void
    static $gtype: GObject.Type
}
abstract class TODO_3gppProfileClass {
    static name: string
}
class TODO_3gppProfilePrivate {
    static name: string
}
abstract class BearerClass {
    static name: string
}
abstract class BearerIpConfigClass {
    static name: string
}
class BearerIpConfigPrivate {
    static name: string
}
class BearerPrivate {
    static name: string
}
abstract class BearerPropertiesClass {
    static name: string
}
class BearerPropertiesPrivate {
    static name: string
}
abstract class BearerStatsClass {
    static name: string
}
class BearerStatsPrivate {
    static name: string
}
abstract class CallAudioFormatClass {
    static name: string
}
class CallAudioFormatPrivate {
    static name: string
}
abstract class CallClass {
    static name: string
}
class CallPrivate {
    static name: string
}
abstract class CallPropertiesClass {
    static name: string
}
class CallPropertiesPrivate {
    static name: string
}
abstract class CdmaManualActivationPropertiesClass {
    static name: string
}
class CdmaManualActivationPropertiesPrivate {
    static name: string
}
abstract class CellInfoCdmaClass {
    static name: string
}
class CellInfoCdmaPrivate {
    static name: string
}
abstract class CellInfoClass {
    /* Fields of ModemManager-1.0.ModemManager.CellInfoClass */
    readonly getDictionary: (self: CellInfo) => GLib.VariantDict
    readonly buildString: (self: CellInfo) => GLib.String
    static name: string
}
abstract class CellInfoGsmClass {
    static name: string
}
class CellInfoGsmPrivate {
    static name: string
}
abstract class CellInfoLteClass {
    static name: string
}
class CellInfoLtePrivate {
    static name: string
}
abstract class CellInfoNr5gClass {
    static name: string
}
class CellInfoNr5gPrivate {
    static name: string
}
class CellInfoPrivate {
    static name: string
}
abstract class CellInfoTdscdmaClass {
    static name: string
}
class CellInfoTdscdmaPrivate {
    static name: string
}
abstract class CellInfoUmtsClass {
    static name: string
}
class CellInfoUmtsPrivate {
    static name: string
}
abstract class FirmwarePropertiesClass {
    static name: string
}
class FirmwarePropertiesPrivate {
    static name: string
}
abstract class FirmwareUpdateSettingsClass {
    static name: string
}
class FirmwareUpdateSettingsPrivate {
    static name: string
}
abstract class GdbusBearerIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusBearerIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleConnect: (object: GdbusBearer, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleDisconnect: (object: GdbusBearer, invocation: Gio.DBusMethodInvocation) => boolean
    readonly getBearerType: (object: GdbusBearer) => number
    readonly getConnected: (object: GdbusBearer) => boolean
    readonly getConnectionError: (object: GdbusBearer) => GLib.Variant | null
    readonly getInterface: (object: GdbusBearer) => string | null
    readonly getIp4Config: (object: GdbusBearer) => GLib.Variant | null
    readonly getIp6Config: (object: GdbusBearer) => GLib.Variant | null
    readonly getIpTimeout: (object: GdbusBearer) => number
    readonly getMultiplexed: (object: GdbusBearer) => boolean
    readonly getProfileId: (object: GdbusBearer) => number
    readonly getProperties: (object: GdbusBearer) => GLib.Variant | null
    readonly getReloadStatsSupported: (object: GdbusBearer) => boolean
    readonly getStats: (object: GdbusBearer) => GLib.Variant | null
    readonly getSuspended: (object: GdbusBearer) => boolean
    static name: string
}
abstract class GdbusBearerProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusBearerProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusBearerProxyPrivate {
    static name: string
}
abstract class GdbusBearerSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusBearerSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusBearerSkeletonPrivate {
    static name: string
}
abstract class GdbusCallIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusCallIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleAccept: (object: GdbusCall, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleDeflect: (object: GdbusCall, invocation: Gio.DBusMethodInvocation, argNumber: string) => boolean
    readonly handleHangup: (object: GdbusCall, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleJoinMultiparty: (object: GdbusCall, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleLeaveMultiparty: (object: GdbusCall, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSendDtmf: (object: GdbusCall, invocation: Gio.DBusMethodInvocation, argDtmf: string) => boolean
    readonly handleStart: (object: GdbusCall, invocation: Gio.DBusMethodInvocation) => boolean
    readonly getAudioFormat: (object: GdbusCall) => GLib.Variant | null
    readonly getAudioPort: (object: GdbusCall) => string | null
    readonly getDirection: (object: GdbusCall) => number
    readonly getMultiparty: (object: GdbusCall) => boolean
    readonly getNumber: (object: GdbusCall) => string | null
    readonly getState: (object: GdbusCall) => number
    readonly getStateReason: (object: GdbusCall) => number
    readonly dtmfReceived: (object: GdbusCall, argDtmf: string) => void
    readonly stateChanged: (object: GdbusCall, argOld: number, argNew: number, argReason: number) => void
    static name: string
}
abstract class GdbusCallProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusCallProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusCallProxyPrivate {
    static name: string
}
abstract class GdbusCallSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusCallSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusCallSkeletonPrivate {
    static name: string
}
abstract class GdbusModem3gppIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleDisableFacilityLock: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleRegister: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation, argOperatorId: string) => boolean
    readonly handleScan: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSetEpsUeModeOperation: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation, argMode: number) => boolean
    readonly handleSetInitialEpsBearerSettings: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean
    readonly handleSetNr5gRegistrationSettings: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleSetPacketServiceState: (object: GdbusModem3gpp, invocation: Gio.DBusMethodInvocation, argState: number) => boolean
    readonly getEnabledFacilityLocks: (object: GdbusModem3gpp) => number
    readonly getEpsUeModeOperation: (object: GdbusModem3gpp) => number
    readonly getImei: (object: GdbusModem3gpp) => string | null
    readonly getInitialEpsBearer: (object: GdbusModem3gpp) => string | null
    readonly getInitialEpsBearerSettings: (object: GdbusModem3gpp) => GLib.Variant | null
    readonly getNr5gRegistrationSettings: (object: GdbusModem3gpp) => GLib.Variant | null
    readonly getOperatorCode: (object: GdbusModem3gpp) => string | null
    readonly getOperatorName: (object: GdbusModem3gpp) => string | null
    readonly getPacketServiceState: (object: GdbusModem3gpp) => number
    readonly getPco: (object: GdbusModem3gpp) => GLib.Variant | null
    readonly getRegistrationState: (object: GdbusModem3gpp) => number
    readonly getSubscriptionState: (object: GdbusModem3gpp) => number
    static name: string
}
abstract class GdbusModem3gppProfileManagerIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManagerIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleDelete: (object: GdbusModem3gppProfileManager, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleList: (object: GdbusModem3gppProfileManager, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSet: (object: GdbusModem3gppProfileManager, invocation: Gio.DBusMethodInvocation, argRequestedProperties: GLib.Variant) => boolean
    readonly getIndexField: (object: GdbusModem3gppProfileManager) => string | null
    readonly updated: (object: GdbusModem3gppProfileManager) => void
    static name: string
}
abstract class GdbusModem3gppProfileManagerProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManagerProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModem3gppProfileManagerProxyPrivate {
    static name: string
}
abstract class GdbusModem3gppProfileManagerSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppProfileManagerSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModem3gppProfileManagerSkeletonPrivate {
    static name: string
}
abstract class GdbusModem3gppProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModem3gppProxyPrivate {
    static name: string
}
abstract class GdbusModem3gppSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModem3gppSkeletonPrivate {
    static name: string
}
abstract class GdbusModem3gppUssdIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppUssdIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleCancel: (object: GdbusModem3gppUssd, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleInitiate: (object: GdbusModem3gppUssd, invocation: Gio.DBusMethodInvocation, argCommand: string) => boolean
    readonly handleRespond: (object: GdbusModem3gppUssd, invocation: Gio.DBusMethodInvocation, argResponse: string) => boolean
    readonly getNetworkNotification: (object: GdbusModem3gppUssd) => string | null
    readonly getNetworkRequest: (object: GdbusModem3gppUssd) => string | null
    readonly getState: (object: GdbusModem3gppUssd) => number
    static name: string
}
abstract class GdbusModem3gppUssdProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppUssdProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModem3gppUssdProxyPrivate {
    static name: string
}
abstract class GdbusModem3gppUssdSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModem3gppUssdSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModem3gppUssdSkeletonPrivate {
    static name: string
}
abstract class GdbusModemCdmaIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemCdmaIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleActivate: (object: GdbusModemCdma, invocation: Gio.DBusMethodInvocation, argCarrierCode: string) => boolean
    readonly handleActivateManual: (object: GdbusModemCdma, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly getActivationState: (object: GdbusModemCdma) => number
    readonly getCdma1xRegistrationState: (object: GdbusModemCdma) => number
    readonly getEsn: (object: GdbusModemCdma) => string | null
    readonly getEvdoRegistrationState: (object: GdbusModemCdma) => number
    readonly getMeid: (object: GdbusModemCdma) => string | null
    readonly getNid: (object: GdbusModemCdma) => number
    readonly getSid: (object: GdbusModemCdma) => number
    readonly activationStateChanged: (object: GdbusModemCdma, argActivationState: number, argActivationError: number, argStatusChanges: GLib.Variant) => void
    static name: string
}
abstract class GdbusModemCdmaProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemCdmaProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemCdmaProxyPrivate {
    static name: string
}
abstract class GdbusModemCdmaSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemCdmaSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemCdmaSkeletonPrivate {
    static name: string
}
abstract class GdbusModemFirmwareIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemFirmwareIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleList: (object: GdbusModemFirmware, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSelect: (object: GdbusModemFirmware, invocation: Gio.DBusMethodInvocation, argUniqueid: string) => boolean
    readonly getUpdateSettings: (object: GdbusModemFirmware) => GLib.Variant | null
    static name: string
}
abstract class GdbusModemFirmwareProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemFirmwareProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemFirmwareProxyPrivate {
    static name: string
}
abstract class GdbusModemFirmwareSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemFirmwareSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemFirmwareSkeletonPrivate {
    static name: string
}
abstract class GdbusModemIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleCommand: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argCmd: string, argTimeout: number) => boolean
    readonly handleCreateBearer: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleDeleteBearer: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean
    readonly handleEnable: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean
    readonly handleFactoryReset: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argCode: string) => boolean
    readonly handleGetCellInfo: (object: GdbusModem, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleListBearers: (object: GdbusModem, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleReset: (object: GdbusModem, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSetCurrentBands: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argBands: GLib.Variant) => boolean
    readonly handleSetCurrentCapabilities: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argCapabilities: number) => boolean
    readonly handleSetCurrentModes: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argModes: GLib.Variant) => boolean
    readonly handleSetPowerState: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argState: number) => boolean
    readonly handleSetPrimarySimSlot: (object: GdbusModem, invocation: Gio.DBusMethodInvocation, argSimSlot: number) => boolean
    readonly getAccessTechnologies: (object: GdbusModem) => number
    readonly getBearers: (object: GdbusModem) => string[] | null
    readonly getCarrierConfiguration: (object: GdbusModem) => string | null
    readonly getCarrierConfigurationRevision: (object: GdbusModem) => string | null
    readonly getCurrentBands: (object: GdbusModem) => GLib.Variant | null
    readonly getCurrentCapabilities: (object: GdbusModem) => number
    readonly getCurrentModes: (object: GdbusModem) => GLib.Variant | null
    readonly getDevice: (object: GdbusModem) => string | null
    readonly getDeviceIdentifier: (object: GdbusModem) => string | null
    readonly getDrivers: (object: GdbusModem) => string[] | null
    readonly getEquipmentIdentifier: (object: GdbusModem) => string | null
    readonly getHardwareRevision: (object: GdbusModem) => string | null
    readonly getManufacturer: (object: GdbusModem) => string | null
    readonly getMaxActiveBearers: (object: GdbusModem) => number
    readonly getMaxActiveMultiplexedBearers: (object: GdbusModem) => number
    readonly getMaxBearers: (object: GdbusModem) => number
    readonly getModel: (object: GdbusModem) => string | null
    readonly getOwnNumbers: (object: GdbusModem) => string[] | null
    readonly getPlugin: (object: GdbusModem) => string | null
    readonly getPorts: (object: GdbusModem) => GLib.Variant | null
    readonly getPowerState: (object: GdbusModem) => number
    readonly getPrimaryPort: (object: GdbusModem) => string | null
    readonly getPrimarySimSlot: (object: GdbusModem) => number
    readonly getRevision: (object: GdbusModem) => string | null
    readonly getSignalQuality: (object: GdbusModem) => GLib.Variant | null
    readonly getSim: (object: GdbusModem) => string | null
    readonly getSimSlots: (object: GdbusModem) => string[] | null
    readonly getState: (object: GdbusModem) => number
    readonly getStateFailedReason: (object: GdbusModem) => number
    readonly getSupportedBands: (object: GdbusModem) => GLib.Variant | null
    readonly getSupportedCapabilities: (object: GdbusModem) => GLib.Variant | null
    readonly getSupportedIpFamilies: (object: GdbusModem) => number
    readonly getSupportedModes: (object: GdbusModem) => GLib.Variant | null
    readonly getUnlockRequired: (object: GdbusModem) => number
    readonly getUnlockRetries: (object: GdbusModem) => GLib.Variant | null
    readonly stateChanged: (object: GdbusModem, argOld: number, argNew: number, argReason: number) => void
    static name: string
}
abstract class GdbusModemLocationIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemLocationIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleGetLocation: (object: GdbusModemLocation, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleInjectAssistanceData: (object: GdbusModemLocation, invocation: Gio.DBusMethodInvocation, argData: GLib.Variant) => boolean
    readonly handleSetGpsRefreshRate: (object: GdbusModemLocation, invocation: Gio.DBusMethodInvocation, argRate: number) => boolean
    readonly handleSetSuplServer: (object: GdbusModemLocation, invocation: Gio.DBusMethodInvocation, argSupl: string) => boolean
    readonly handleSetup: (object: GdbusModemLocation, invocation: Gio.DBusMethodInvocation, argSources: number, argSignalLocation: boolean) => boolean
    readonly getAssistanceDataServers: (object: GdbusModemLocation) => string[] | null
    readonly getCapabilities: (object: GdbusModemLocation) => number
    readonly getEnabled: (object: GdbusModemLocation) => number
    readonly getGpsRefreshRate: (object: GdbusModemLocation) => number
    readonly getLocation: (object: GdbusModemLocation) => GLib.Variant | null
    readonly getSignalsLocation: (object: GdbusModemLocation) => boolean
    readonly getSuplServer: (object: GdbusModemLocation) => string | null
    readonly getSupportedAssistanceData: (object: GdbusModemLocation) => number
    static name: string
}
abstract class GdbusModemLocationProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemLocationProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemLocationProxyPrivate {
    static name: string
}
abstract class GdbusModemLocationSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemLocationSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemLocationSkeletonPrivate {
    static name: string
}
abstract class GdbusModemMessagingIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemMessagingIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleCreate: (object: GdbusModemMessaging, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleDelete: (object: GdbusModemMessaging, invocation: Gio.DBusMethodInvocation, argPath: string) => boolean
    readonly handleList: (object: GdbusModemMessaging, invocation: Gio.DBusMethodInvocation) => boolean
    readonly getDefaultStorage: (object: GdbusModemMessaging) => number
    readonly getMessages: (object: GdbusModemMessaging) => string[] | null
    readonly getSupportedStorages: (object: GdbusModemMessaging) => GLib.Variant | null
    readonly added: (object: GdbusModemMessaging, argPath: string, argReceived: boolean) => void
    readonly deleted: (object: GdbusModemMessaging, argPath: string) => void
    static name: string
}
abstract class GdbusModemMessagingProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemMessagingProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemMessagingProxyPrivate {
    static name: string
}
abstract class GdbusModemMessagingSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemMessagingSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemMessagingSkeletonPrivate {
    static name: string
}
abstract class GdbusModemOmaIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemOmaIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleAcceptNetworkInitiatedSession: (object: GdbusModemOma, invocation: Gio.DBusMethodInvocation, argSessionId: number, argAccept: boolean) => boolean
    readonly handleCancelSession: (object: GdbusModemOma, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSetup: (object: GdbusModemOma, invocation: Gio.DBusMethodInvocation, argFeatures: number) => boolean
    readonly handleStartClientInitiatedSession: (object: GdbusModemOma, invocation: Gio.DBusMethodInvocation, argSessionType: number) => boolean
    readonly getFeatures: (object: GdbusModemOma) => number
    readonly getPendingNetworkInitiatedSessions: (object: GdbusModemOma) => GLib.Variant | null
    readonly getSessionState: (object: GdbusModemOma) => number
    readonly getSessionType: (object: GdbusModemOma) => number
    readonly sessionStateChanged: (object: GdbusModemOma, argOldSessionState: number, argNewSessionState: number, argSessionStateFailedReason: number) => void
    static name: string
}
abstract class GdbusModemOmaProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemOmaProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemOmaProxyPrivate {
    static name: string
}
abstract class GdbusModemOmaSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemOmaSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemOmaSkeletonPrivate {
    static name: string
}
abstract class GdbusModemProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemProxyPrivate {
    static name: string
}
abstract class GdbusModemSarIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSarIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleEnable: (object: GdbusModemSar, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean
    readonly handleSetPowerLevel: (object: GdbusModemSar, invocation: Gio.DBusMethodInvocation, argLevel: number) => boolean
    readonly getPowerLevel: (object: GdbusModemSar) => number
    readonly getState: (object: GdbusModemSar) => boolean
    static name: string
}
abstract class GdbusModemSarProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSarProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemSarProxyPrivate {
    static name: string
}
abstract class GdbusModemSarSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSarSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemSarSkeletonPrivate {
    static name: string
}
abstract class GdbusModemSignalIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSignalIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleSetup: (object: GdbusModemSignal, invocation: Gio.DBusMethodInvocation, argRate: number) => boolean
    readonly handleSetupThresholds: (object: GdbusModemSignal, invocation: Gio.DBusMethodInvocation, argSettings: GLib.Variant) => boolean
    readonly getCdma: (object: GdbusModemSignal) => GLib.Variant | null
    readonly getErrorRateThreshold: (object: GdbusModemSignal) => boolean
    readonly getEvdo: (object: GdbusModemSignal) => GLib.Variant | null
    readonly getGsm: (object: GdbusModemSignal) => GLib.Variant | null
    readonly getLte: (object: GdbusModemSignal) => GLib.Variant | null
    readonly getNr5g: (object: GdbusModemSignal) => GLib.Variant | null
    readonly getRate: (object: GdbusModemSignal) => number
    readonly getRssiThreshold: (object: GdbusModemSignal) => number
    readonly getUmts: (object: GdbusModemSignal) => GLib.Variant | null
    static name: string
}
abstract class GdbusModemSignalProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSignalProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemSignalProxyPrivate {
    static name: string
}
abstract class GdbusModemSignalSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSignalSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemSignalSkeletonPrivate {
    static name: string
}
abstract class GdbusModemSimpleIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSimpleIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleConnect: (object: GdbusModemSimple, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleDisconnect: (object: GdbusModemSimple, invocation: Gio.DBusMethodInvocation, argBearer: string) => boolean
    readonly handleGetStatus: (object: GdbusModemSimple, invocation: Gio.DBusMethodInvocation) => boolean
    static name: string
}
abstract class GdbusModemSimpleProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSimpleProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemSimpleProxyPrivate {
    static name: string
}
abstract class GdbusModemSimpleSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSimpleSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemSimpleSkeletonPrivate {
    static name: string
}
abstract class GdbusModemSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemSkeletonPrivate {
    static name: string
}
abstract class GdbusModemTimeIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemTimeIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleGetNetworkTime: (object: GdbusModemTime, invocation: Gio.DBusMethodInvocation) => boolean
    readonly getNetworkTimezone: (object: GdbusModemTime) => GLib.Variant | null
    readonly networkTimeChanged: (object: GdbusModemTime, argTime: string) => void
    static name: string
}
abstract class GdbusModemTimeProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemTimeProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemTimeProxyPrivate {
    static name: string
}
abstract class GdbusModemTimeSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemTimeSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemTimeSkeletonPrivate {
    static name: string
}
abstract class GdbusModemVoiceIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemVoiceIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleCallWaitingQuery: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleCallWaitingSetup: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation, argEnable: boolean) => boolean
    readonly handleCreateCall: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleDeleteCall: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation, argPath: string) => boolean
    readonly handleHangupAll: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleHangupAndAccept: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleHoldAndAccept: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleListCalls: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleTransfer: (object: GdbusModemVoice, invocation: Gio.DBusMethodInvocation) => boolean
    readonly getCalls: (object: GdbusModemVoice) => string[] | null
    readonly getEmergencyOnly: (object: GdbusModemVoice) => boolean
    readonly callAdded: (object: GdbusModemVoice, argPath: string) => void
    readonly callDeleted: (object: GdbusModemVoice, argPath: string) => void
    static name: string
}
abstract class GdbusModemVoiceProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemVoiceProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusModemVoiceProxyPrivate {
    static name: string
}
abstract class GdbusModemVoiceSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusModemVoiceSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusModemVoiceSkeletonPrivate {
    static name: string
}
abstract class GdbusObjectIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusObjectIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class GdbusObjectManagerClientClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusObjectManagerClientClass */
    readonly parentClass: Gio.DBusObjectManagerClientClass
    static name: string
}
class GdbusObjectManagerClientPrivate {
    static name: string
}
abstract class GdbusObjectProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusObjectProxyClass */
    readonly parentClass: Gio.DBusObjectProxyClass
    static name: string
}
class GdbusObjectProxyPrivate {
    static name: string
}
abstract class GdbusObjectSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusObjectSkeletonClass */
    readonly parentClass: Gio.DBusObjectSkeletonClass
    static name: string
}
class GdbusObjectSkeletonPrivate {
    static name: string
}
abstract class GdbusOrgFreedesktopModemManager1Iface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1Iface */
    readonly parentIface: GObject.TypeInterface
    readonly handleInhibitDevice: (object: GdbusOrgFreedesktopModemManager1, invocation: Gio.DBusMethodInvocation, argUid: string, argInhibit: boolean) => boolean
    readonly handleReportKernelEvent: (object: GdbusOrgFreedesktopModemManager1, invocation: Gio.DBusMethodInvocation, argProperties: GLib.Variant) => boolean
    readonly handleScanDevices: (object: GdbusOrgFreedesktopModemManager1, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleSetLogging: (object: GdbusOrgFreedesktopModemManager1, invocation: Gio.DBusMethodInvocation, argLevel: string) => boolean
    readonly getVersion: (object: GdbusOrgFreedesktopModemManager1) => string | null
    static name: string
}
abstract class GdbusOrgFreedesktopModemManager1ProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1ProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusOrgFreedesktopModemManager1ProxyPrivate {
    static name: string
}
abstract class GdbusOrgFreedesktopModemManager1SkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusOrgFreedesktopModemManager1SkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusOrgFreedesktopModemManager1SkeletonPrivate {
    static name: string
}
abstract class GdbusSimIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusSimIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleChangePin: (object: GdbusSim, invocation: Gio.DBusMethodInvocation, argOldPin: string, argNewPin: string) => boolean
    readonly handleEnablePin: (object: GdbusSim, invocation: Gio.DBusMethodInvocation, argPin: string, argEnabled: boolean) => boolean
    readonly handleSendPin: (object: GdbusSim, invocation: Gio.DBusMethodInvocation, argPin: string) => boolean
    readonly handleSendPuk: (object: GdbusSim, invocation: Gio.DBusMethodInvocation, argPuk: string, argPin: string) => boolean
    readonly handleSetPreferredNetworks: (object: GdbusSim, invocation: Gio.DBusMethodInvocation, argPreferredNetworks: GLib.Variant) => boolean
    readonly getActive: (object: GdbusSim) => boolean
    readonly getEid: (object: GdbusSim) => string | null
    readonly getEmergencyNumbers: (object: GdbusSim) => string[] | null
    readonly getEsimStatus: (object: GdbusSim) => number
    readonly getImsi: (object: GdbusSim) => string | null
    readonly getOperatorIdentifier: (object: GdbusSim) => string | null
    readonly getOperatorName: (object: GdbusSim) => string | null
    readonly getPreferredNetworks: (object: GdbusSim) => GLib.Variant | null
    readonly getRemovability: (object: GdbusSim) => number
    readonly getSimIdentifier: (object: GdbusSim) => string | null
    readonly getSimType: (object: GdbusSim) => number
    static name: string
}
abstract class GdbusSimProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusSimProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusSimProxyPrivate {
    static name: string
}
abstract class GdbusSimSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusSimSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusSimSkeletonPrivate {
    static name: string
}
abstract class GdbusSmsIface {
    /* Fields of ModemManager-1.0.ModemManager.GdbusSmsIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleSend: (object: GdbusSms, invocation: Gio.DBusMethodInvocation) => boolean
    readonly handleStore: (object: GdbusSms, invocation: Gio.DBusMethodInvocation, argStorage: number) => boolean
    readonly getClass: (object: GdbusSms) => number
    readonly getData: (object: GdbusSms) => GLib.Variant | null
    readonly getDeliveryReportRequest: (object: GdbusSms) => boolean
    readonly getDeliveryState: (object: GdbusSms) => number
    readonly getDischargeTimestamp: (object: GdbusSms) => string | null
    readonly getMessageReference: (object: GdbusSms) => number
    readonly getNumber: (object: GdbusSms) => string | null
    readonly getPduType: (object: GdbusSms) => number
    readonly getServiceCategory: (object: GdbusSms) => number
    readonly getSmsc: (object: GdbusSms) => string | null
    readonly getState: (object: GdbusSms) => number
    readonly getStorage: (object: GdbusSms) => number
    readonly getTeleserviceId: (object: GdbusSms) => number
    readonly getText: (object: GdbusSms) => string | null
    readonly getTimestamp: (object: GdbusSms) => string | null
    readonly getValidity: (object: GdbusSms) => GLib.Variant | null
    static name: string
}
abstract class GdbusSmsProxyClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusSmsProxyClass */
    readonly parentClass: Gio.DBusProxyClass
    static name: string
}
class GdbusSmsProxyPrivate {
    static name: string
}
abstract class GdbusSmsSkeletonClass {
    /* Fields of ModemManager-1.0.ModemManager.GdbusSmsSkeletonClass */
    readonly parentClass: Gio.DBusInterfaceSkeletonClass
    static name: string
}
class GdbusSmsSkeletonPrivate {
    static name: string
}
abstract class KernelEventPropertiesClass {
    static name: string
}
class KernelEventPropertiesPrivate {
    static name: string
}
abstract class Location3gppClass {
    static name: string
}
class Location3gppPrivate {
    static name: string
}
abstract class LocationCdmaBsClass {
    static name: string
}
class LocationCdmaBsPrivate {
    static name: string
}
abstract class LocationGpsNmeaClass {
    static name: string
}
class LocationGpsNmeaPrivate {
    static name: string
}
abstract class LocationGpsRawClass {
    static name: string
}
class LocationGpsRawPrivate {
    static name: string
}
abstract class ManagerClass {
    static name: string
}
class ManagerPrivate {
    static name: string
}
abstract class Modem3gppClass {
    static name: string
}
class Modem3gppNetwork {
    /* Methods of ModemManager-1.0.ModemManager.Modem3gppNetwork */
    free(): void
    getAccessTechnology(): ModemAccessTechnology
    getAvailability(): Modem3gppNetworkAvailability
    getOperatorCode(): string
    getOperatorLong(): string
    getOperatorShort(): string
    static name: string
}
class Modem3gppPrivate {
    static name: string
}
abstract class Modem3gppProfileManagerClass {
    static name: string
}
abstract class Modem3gppUssdClass {
    static name: string
}
abstract class ModemCdmaClass {
    static name: string
}
abstract class ModemClass {
    static name: string
}
abstract class ModemFirmwareClass {
    static name: string
}
class ModemFirmwarePrivate {
    static name: string
}
abstract class ModemLocationClass {
    static name: string
}
class ModemLocationPrivate {
    static name: string
}
abstract class ModemMessagingClass {
    static name: string
}
class ModemMessagingPrivate {
    static name: string
}
class ModemModeCombination {
    /* Fields of ModemManager-1.0.ModemManager.ModemModeCombination */
    readonly allowed: ModemMode
    readonly preferred: ModemMode
    static name: string
}
abstract class ModemOmaClass {
    static name: string
}
class ModemOmaPrivate {
    static name: string
}
class ModemPortInfo {
    /* Fields of ModemManager-1.0.ModemManager.ModemPortInfo */
    readonly name: string
    readonly type: ModemPortType
    /* Methods of ModemManager-1.0.ModemManager.ModemPortInfo */
    arrayFree(arraySize: number): void
    static name: string
}
class ModemPrivate {
    static name: string
}
abstract class ModemSarClass {
    static name: string
}
abstract class ModemSignalClass {
    static name: string
}
class ModemSignalPrivate {
    static name: string
}
abstract class ModemSimpleClass {
    static name: string
}
abstract class ModemTimeClass {
    static name: string
}
class ModemTimePrivate {
    static name: string
}
abstract class ModemVoiceClass {
    static name: string
}
class ModemVoicePrivate {
    static name: string
}
abstract class NetworkTimezoneClass {
    static name: string
}
class NetworkTimezonePrivate {
    static name: string
}
abstract class Nr5gRegistrationSettingsClass {
    static name: string
}
class Nr5gRegistrationSettingsPrivate {
    static name: string
}
abstract class ObjectClass {
    static name: string
}
class OmaPendingNetworkInitiatedSession {
    /* Fields of ModemManager-1.0.ModemManager.OmaPendingNetworkInitiatedSession */
    readonly sessionType: OmaSessionType
    readonly sessionId: number
    static name: string
}
abstract class PcoClass {
    static name: string
}
class PcoPrivate {
    static name: string
}
abstract class SignalClass {
    static name: string
}
class SignalPrivate {
    static name: string
}
abstract class SignalThresholdPropertiesClass {
    static name: string
}
class SignalThresholdPropertiesPrivate {
    static name: string
}
abstract class SimClass {
    static name: string
}
class SimPreferredNetwork {
    /* Methods of ModemManager-1.0.ModemManager.SimPreferredNetwork */
    free(): void
    getAccessTechnology(): ModemAccessTechnology
    getOperatorCode(): string
    setAccessTechnology(accessTechnology: ModemAccessTechnology): void
    setOperatorCode(operatorCode: string): void
    static name: string
    static new(): SimPreferredNetwork
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): SimPreferredNetwork
}
abstract class SimpleConnectPropertiesClass {
    static name: string
}
class SimpleConnectPropertiesPrivate {
    static name: string
}
abstract class SimpleStatusClass {
    static name: string
}
class SimpleStatusPrivate {
    static name: string
}
abstract class SmsClass {
    static name: string
}
abstract class SmsPropertiesClass {
    static name: string
}
class SmsPropertiesPrivate {
    static name: string
}
abstract class UnlockRetriesClass {
    static name: string
}
class UnlockRetriesPrivate {
    static name: string
}
}
export default ModemManager;