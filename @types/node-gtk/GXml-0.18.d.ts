/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * GXml-0.18
 */

import type libxml2 from './libxml2-2.0';
import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';
import type Gee from './Gee-0.8';

export namespace GXml {

enum CssSelectorType {
    CLASS,
    ID,
    ALL,
    ELEMENT,
    ATTRIBUTE,
    ATTRIBUTE_EQUAL,
    ATTRIBUTE_CONTAINS,
    ATTRIBUTE_SUBSTRING,
    ATTRIBUTE_START_WITH,
    ATTRIBUTE_START_WITH_HYPHEN,
    ATTRIBUTE_END_WITH,
    PSEUDO,
    AND,
    INSIDE,
    PARENT,
    AFTER,
    BEFORE,
}
enum NodeType {
    INVALID,
    ELEMENT,
    ATTRIBUTE,
    TEXT,
    CDATA_SECTION,
    ENTITY_REFERENCE,
    ENTITY,
    PROCESSING_INSTRUCTION,
    COMMENT,
    DOCUMENT,
    DOCUMENT_TYPE,
    DOCUMENT_FRAGMENT,
    NOTATION,
}
enum XPathObjectType {
    UNDEFINED,
    NODESET,
    BOOLEAN,
    NUMBER,
    STRING,
    POINT,
    RANGE,
    LOCATIONSET,
    USERS,
    XSLT_TREE,
}
enum CssSelectorError {
    NULL,
    ATTRIBUTE,
    INVALID,
    LENGTH,
    STRING,
    TYPE,
}
enum DocumentError {
    INVALID_DOCUMENT_ERROR,
    INVALID_FILE,
}
enum DomError {
    INDEX_SIZE_ERROR,
    DOMSTRING_SIZE_ERROR,
    HIERARCHY_REQUEST_ERROR,
    WRONG_DOCUMENT_ERROR,
    INVALID_CHARACTER_ERROR,
    NO_DATA_ALLOWED_ERROR,
    NO_MODIFICATION_ALLOWED_ERROR,
    NOT_FOUND_ERROR,
    NOT_SUPPORTED_ERROR,
    INUSE_ATTRIBUTE_ERROR,
    INVALID_STATE_ERROR,
    SYNTAX_ERROR,
    INVALID_MODIFICATION_ERROR,
    NAMESPACE_ERROR,
    INVALID_ACCESS_ERROR,
    VALIDATION_ERROR,
    TYPE_MISMATCH_ERROR,
    SECURITY_ERROR,
    NETWORK_ERROR,
    ABORT_ERROR,
    URL_MISMATCH_ERROR,
    QUOTA_EXCEEDED_ERROR,
    TIME_OUT_ERROR,
    INVALID_NODE_TYPE_ERROR,
    DATA_CLONE_ERROR,
}
enum EnumerationError {
    INVALID_VALUE,
    INVALID_TEXT,
}
enum Error {
    NOT_SUPPORTED,
    PARSER,
    WRITER,
}
enum ParserError {
    INVALID_DATA_ERROR,
    INVALID_FILE_ERROR,
    INVALID_STREAM_ERROR,
}
enum IXsdSchemaError {
    INVALIDATION_ERROR,
}
enum SerializableError {
    UNSUPPORTED_TYPE_ERROR,
    STR_TO_VALUE_ERROR,
}
enum SerializableEnumError {
    INVALID_VALUE_ERROR,
    PARSE_ERROR,
}
enum XPathError {
    EXPRESSION_OK,
    NUMBER_ERROR,
    UNFINISHED_LITERAL_ERROR,
    START_LITERAL_ERROR,
    VARIABLE_REF_ERROR,
    UNDEF_VARIABLE_ERROR,
    INVALID_PREDICATE_ERROR,
    EXPR_ERROR,
    UNCLOSED_ERROR,
    UNKNOWN_FUNC_ERROR,
    INVALID_OPERAND,
    INVALID_TYPE,
    INVALID_ARITY,
    INVALID_CTXT_SIZE,
    INVALID_CTXT_POSITION,
    MEMORY_ERROR,
    XPTR_SYNTAX_ERROR,
    XPTR_RESOURCE_ERROR,
    XPTR_SUB_RESOURCE_ERROR,
    UNDEF_PREFIX_ERROR,
    ENCODING_ERROR,
    INVALID_CHAR_ERROR,
    INVALID_CTXT,
}
enum TDocumentReadType {
    NEXT,
    CONTINUE,
    STOP,
}
enum DomEventPhase {
    NONE,
    CAPTURING_PHASE,
    AT_TARGET,
    BUBBLING_PHASE,
}
enum DomNodeNodeType {
    INVALID,
    ELEMENT_NODE,
    ATTRIBUTE_NODE,
    TEXT_NODE,
    CDATA_SECTION_NODE,
    ENTITY_REFERENCE_NODE,
    ENTITY_NODE,
    PROCESSING_INSTRUCTION_NODE,
    COMMENT_NODE,
    DOCUMENT_NODE,
    DOCUMENT_TYPE_NODE,
    DOCUMENT_FRAGMENT_NODE,
    NOTATION_NODE,
}
enum DomRangeBoundaryPoints {
    START_TO_START,
    START_TO_END,
    END_TO_END,
    END_TO_START,
}
enum DomEventFlags {
    STOP_PROPAGATION_FLAG,
    STOP_IMMEDIATE_PROPAGATION_FLAG,
    CANCELED_FLAG,
    INITIALIZED_FLAG,
    DISPATCH_FLAG,
}
enum DomNodeDocumentPosition {
    NONE,
    DISCONNECTED,
    PRECEDING,
    FOLLOWING,
    CONTAINS,
    CONTAINED_BY,
    IMPLEMENTATION_SPECIFIC,
}
interface DomMutationCallback {
    (mutations: Gee.List, observer: DomMutationObserver): void
}
interface Collection_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class Collection {
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Collection_ConstructProps)
    _init (config?: Collection_ConstructProps): void
    static $gtype: GObject.Type
}
interface List_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class List {
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: List_ConstructProps)
    _init (config?: List_ConstructProps): void
    static $gtype: GObject.Type
}
interface MappeableElement_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class MappeableElement {
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.MappeableElement */
    getMapKey(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElement_ConstructProps)
    _init (config?: MappeableElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Map_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Map */
    attributeKey?: string
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class Map {
    /* Properties of GXml-0.18.GXml.Map */
    attributeKey: string
    readonly keysSet: Gee.Set
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Map */
    item(key: string): DomElement | null
    hasKey(key: string): boolean
    getAttributeKey(): string
    setAttributeKey(value: string): void
    getKeysSet(): Gee.Set
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Map_ConstructProps)
    _init (config?: Map_ConstructProps): void
    static $gtype: GObject.Type
}
interface MappeableElementPairKey_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class MappeableElementPairKey {
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.MappeableElementPairKey */
    getMapPrimaryKey(): string
    getMapSecondaryKey(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElementPairKey_ConstructProps)
    _init (config?: MappeableElementPairKey_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface PairedMap_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.PairedMap */
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class PairedMap {
    /* Properties of GXml-0.18.GXml.PairedMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    readonly primaryKeysSet: Gee.Set
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.PairedMap */
    item(primaryKey: string, secondaryKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PairedMap_ConstructProps)
    _init (config?: PairedMap_ConstructProps): void
    static $gtype: GObject.Type
}
interface MappeableElementThreeKey_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class MappeableElementThreeKey {
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.MappeableElementThreeKey */
    getMapPkey(): string
    getMapSkey(): string
    getMapTkey(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MappeableElementThreeKey_ConstructProps)
    _init (config?: MappeableElementThreeKey_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface ThreeMap_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.ThreeMap */
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    attributeThirdKey?: string
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class ThreeMap {
    /* Properties of GXml-0.18.GXml.ThreeMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    attributeThirdKey: string
    readonly primaryKeysSet: Gee.Set
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.ThreeMap */
    item(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    hasThirdKey(pkey: string, skey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    thirdKeysSet(pkey: string, skey: string): Gee.Set
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getAttributeThirdKey(): string
    setAttributeThirdKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-third-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ThreeMap_ConstructProps)
    _init (config?: ThreeMap_ConstructProps): void
    static $gtype: GObject.Type
}
interface Attribute_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Attribute */
    namespace?: Namespace
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Attribute {
    /* Properties of GXml-0.18.GXml.Attribute */
    namespace: Namespace
    readonly prefix: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Attribute */
    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void
    getPrefix(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Attribute_ConstructProps)
    _init (config?: Attribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface CDATA_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class CDATA {
    /* Properties of GXml-0.18.GXml.CDATA */
    readonly str: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.CDATA */
    getStr(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CDATA_ConstructProps)
    _init (config?: CDATA_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Character_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Character */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Character {
    /* Properties of GXml-0.18.GXml.Character */
    str: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Character */
    getStr(): string
    setStr(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Character_ConstructProps)
    _init (config?: Character_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Comment_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Comment */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Comment {
    /* Properties of GXml-0.18.GXml.Comment */
    str: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Comment */
    getStr(): string
    setStr(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Comment_ConstructProps)
    _init (config?: Comment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Document_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Document */
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Document {
    /* Properties of GXml-0.18.GXml.Document */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Document */
    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Document_ConstructProps)
    _init (config?: Document_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DocumentType_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class DocumentType {
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DocumentType_ConstructProps)
    _init (config?: DocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomAttr_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomAttr */
    value?: string
}
class DomAttr {
    /* Properties of GXml-0.18.GXml.DomAttr */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly name: string
    value: string
    readonly specified: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getName(): string
    getValue(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomAttr_ConstructProps)
    _init (config?: DomAttr_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomCharacterData_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomCharacterData {
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCharacterData_ConstructProps)
    _init (config?: DomCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomText_ConstructProps extends DomCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomText {
    /* Properties of GXml-0.18.GXml.DomText */
    readonly wholeText: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomText_ConstructProps)
    _init (config?: DomText_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomProcessingInstruction_ConstructProps extends DomCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomProcessingInstruction {
    /* Properties of GXml-0.18.GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomProcessingInstruction_ConstructProps)
    _init (config?: DomProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomComment_ConstructProps extends DomCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomComment {
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    getData(): string
    setData(value: string): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomComment_ConstructProps)
    _init (config?: DomComment_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomNonElementParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
class DomNonElementParentNode {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNonElementParentNode_ConstructProps)
    _init (config?: DomNonElementParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomParentNode_ConstructProps extends GObject.Object_ConstructProps {
}
class DomParentNode {
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomParentNode_ConstructProps)
    _init (config?: DomParentNode_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomNonDocumentTypeChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
class DomNonDocumentTypeChildNode {
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNonDocumentTypeChildNode_ConstructProps)
    _init (config?: DomNonDocumentTypeChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomChildNode_ConstructProps extends GObject.Object_ConstructProps {
}
class DomChildNode {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomChildNode_ConstructProps)
    _init (config?: DomChildNode_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomNodeList_ConstructProps extends GObject.Object_ConstructProps {
}
class DomNodeList {
    /* Properties of GXml-0.18.GXml.DomNodeList */
    readonly length: number
    /* Properties of Gee-0.8.Gee.BidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.Collection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.BidirList */
    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getSize(): number
    getIsEmpty(): boolean
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeList_ConstructProps)
    _init (config?: DomNodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface DomHTMLCollection_ConstructProps extends GObject.Object_ConstructProps {
}
class DomHTMLCollection {
    /* Properties of GXml-0.18.GXml.DomHTMLCollection */
    readonly length: number
    /* Properties of Gee-0.8.Gee.BidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.Collection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.BidirList */
    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getSize(): number
    getIsEmpty(): boolean
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomHTMLCollection_ConstructProps)
    _init (config?: DomHTMLCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
class DomNodeIterator {
    /* Properties of GXml-0.18.GXml.DomNodeIterator */
    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    /* Methods of GXml-0.18.GXml.DomNodeIterator */
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    static name: string
}
interface DomTreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
class DomTreeWalker {
    /* Properties of GXml-0.18.GXml.DomTreeWalker */
    readonly root: DomNode
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    readonly currentNode: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomTreeWalker */
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    getRoot(): DomNode
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    getCurrentNode(): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTreeWalker_ConstructProps)
    _init (config?: DomTreeWalker_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomNamedNodeMap_ConstructProps extends GObject.Object_ConstructProps {
}
class DomNamedNodeMap {
    /* Properties of GXml-0.18.GXml.DomNamedNodeMap */
    readonly length: number
    /* Properties of Gee-0.8.Gee.Map */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomNamedNodeMap */
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.Map */
    hasKey(key?: object | null): boolean
    contains(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    remove(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    clear(): void
    mapIterator(): Gee.MapIterator
    setAll(map: Gee.Map): void
    unsetAll(map: Gee.Map): boolean
    removeAll(map: Gee.Map): boolean
    hasAll(map: Gee.Map): boolean
    containsAll(map: Gee.Map): boolean
    getSize(): number
    getIsEmpty(): boolean
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    getKeyType(): GObject.Type
    getValueType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNamedNodeMap_ConstructProps)
    _init (config?: DomNamedNodeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static empty(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.Map
    static $gtype: GObject.Type
}
interface DomTokenList_ConstructProps extends GObject.Object_ConstructProps {
}
class DomTokenList {
    /* Properties of GXml-0.18.GXml.DomTokenList */
    readonly length: number
    /* Properties of Gee-0.8.Gee.BidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.Collection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.BidirList */
    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getSize(): number
    getIsEmpty(): boolean
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTokenList_ConstructProps)
    _init (config?: DomTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface DomSettableTokenList_ConstructProps extends DomTokenList_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomSettableTokenList */
    value?: string
}
class DomSettableTokenList {
    /* Properties of GXml-0.18.GXml.DomSettableTokenList */
    value: string
    /* Properties of GXml-0.18.GXml.DomTokenList */
    readonly length: number
    /* Properties of Gee-0.8.Gee.BidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.Collection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.BidirList */
    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getSize(): number
    getIsEmpty(): boolean
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomSettableTokenList_ConstructProps)
    _init (config?: DomSettableTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomDocument_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomDocument {
    /* Properties of GXml-0.18.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocument_ConstructProps)
    _init (config?: DomDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomXMLDocument_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomXMLDocument {
    /* Properties of GXml-0.18.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomXMLDocument_ConstructProps)
    _init (config?: DomXMLDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
class DomImplementation {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomImplementation_ConstructProps)
    _init (config?: DomImplementation_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomDocumentFragment_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomDocumentFragment {
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocumentFragment_ConstructProps)
    _init (config?: DomDocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomDocumentType_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomDocumentType {
    /* Properties of GXml-0.18.GXml.DomDocumentType */
    readonly name: string
    readonly publicId: string
    readonly systemId: string
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomDocumentType */
    getName(): string
    getPublicId(): string
    getSystemId(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomDocumentType_ConstructProps)
    _init (config?: DomDocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomHtmlDocument_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomHtmlDocument {
    /* Properties of GXml-0.18.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomHtmlDocument */
    readFromString(str: string): void
    readFromStringTolerant(str: string): void
    toHtml(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomHtmlDocument_ConstructProps)
    _init (config?: DomHtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomElement_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomElement {
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomElement_ConstructProps)
    _init (config?: DomElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomEventTarget_ConstructProps extends GObject.Object_ConstructProps {
}
class DomEventTarget {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventTarget_ConstructProps)
    _init (config?: DomEventTarget_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomEventListener_ConstructProps extends GObject.Object_ConstructProps {
}
class DomEventListener {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomEventListener */
    handleEvent(event: DomEvent): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventListener_ConstructProps)
    _init (config?: DomEventListener_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
class DomEvent {
    /* Properties of GXml-0.18.GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomEvent */
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::etype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEvent_ConstructProps)
    _init (config?: DomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomCustomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
class DomCustomEvent {
    /* Properties of GXml-0.18.GXml.DomCustomEvent */
    readonly detail: any
    /* Properties of GXml-0.18.GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomCustomEvent */
    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail: any): void
    getDetail(): /* result */ any
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomEvent */
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::etype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCustomEvent_ConstructProps)
    _init (config?: DomCustomEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomMutationObserver_ConstructProps extends GObject.Object_ConstructProps {
}
class DomMutationObserver {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomMutationObserver */
    observe(target: Node, options: DomMutationObserverInit): void
    disconnect(): void
    takeRecords(): Gee.List
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationObserver_ConstructProps)
    _init (config?: DomMutationObserver_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomMutationRecord_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomMutationRecord */
    addedNodes?: DomNodeList
    removedNodes?: DomNodeList
}
class DomMutationRecord {
    /* Properties of GXml-0.18.GXml.DomMutationRecord */
    readonly mtype: string
    readonly target: DomNode
    addedNodes: DomNodeList
    removedNodes: DomNodeList
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    readonly attributeName: string
    readonly attributeNamespace: string
    readonly oldValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomMutationRecord */
    getMtype(): string
    getTarget(): DomNode
    getAddedNodes(): DomNodeList
    setAddedNodes(value: DomNodeList): void
    getRemovedNodes(): DomNodeList
    setRemovedNodes(value: DomNodeList): void
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getAttributeName(): string | null
    getAttributeNamespace(): string | null
    getOldValue(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::mtype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mtype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::added-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::added-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::removed-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::removed-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::old-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::old-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationRecord_ConstructProps)
    _init (config?: DomMutationRecord_ConstructProps): void
    static $gtype: GObject.Type
}
interface DomNode_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class DomNode {
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNode_ConstructProps)
    _init (config?: DomNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface DomRange_ConstructProps extends GObject.Object_ConstructProps {
}
class DomRange {
    /* Properties of GXml-0.18.GXml.DomRange */
    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomRange */
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    collapse(toStart: boolean): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::start-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomRange_ConstructProps)
    _init (config?: DomRange_ConstructProps): void
    static $gtype: GObject.Type
}
interface Element_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Element */
    content?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Element {
    /* Properties of GXml-0.18.GXml.Element */
    readonly tagName: string
    content: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Element */
    normalize(): void
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getTagName(): string
    getContent(): string
    setContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Element_ConstructProps)
    _init (config?: Element_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomObject_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
}
class GomObject {
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomObject */
    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(pname: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    getAttribute(name: string): string | null
    setAttribute(name: string, val: string): boolean
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomObject_ConstructProps)
    _init (config?: GomObject_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomProperty_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomProperty */
    value?: string
}
class GomProperty {
    /* Properties of GXml-0.18.GXml.GomProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomProperty_ConstructProps)
    _init (config?: GomProperty_ConstructProps): void
    static $gtype: GObject.Type
}
interface Namespace_ConstructProps extends GObject.Object_ConstructProps {
}
class Namespace {
    /* Properties of GXml-0.18.GXml.Namespace */
    readonly uri: string
    readonly prefix: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Namespace */
    getUri(): string | null
    getPrefix(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Namespace_ConstructProps)
    _init (config?: Namespace_ConstructProps): void
    static $gtype: GObject.Type
}
interface Node_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Node {
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Node_ConstructProps)
    _init (config?: Node_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Notation_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Notation {
    /* Properties of GXml-0.18.GXml.Notation */
    readonly publicId: string
    readonly externalId: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Notation */
    getPublicId(): string | null
    getExternalId(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::external-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::external-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Notation_ConstructProps)
    _init (config?: Notation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Entity_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Entity {
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Entity_ConstructProps)
    _init (config?: Entity_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface Parser_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Parser */
    backup?: boolean
    indent?: boolean
}
class Parser {
    /* Properties of GXml-0.18.GXml.Parser */
    backup: boolean
    indent: boolean
    readonly node: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Parser */
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    readFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFileFinish(res: Gio.AsyncResult): void
    readStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readStreamAsync(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readStreamFinish(res: Gio.AsyncResult): void
    readString(str: string, cancellable?: Gio.Cancellable | null): void
    readStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readStringFinish(res: Gio.AsyncResult): void
    createStream(cancellable?: Gio.Cancellable | null): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    readChildNodes(parent: DomNode): void
    readChildNodesAsync(parent: DomNode, callback?: Gio.AsyncReadyCallback | null): void
    readChildNodesFinish(res: Gio.AsyncResult): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    addElementCollection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    readChildNodesStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readChildNodesString(str: string, cancellable?: Gio.Cancellable | null): void
    readUnparsed(): string
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getNode(): DomNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Parser_ConstructProps)
    _init (config?: Parser_ConstructProps): void
    static $gtype: GObject.Type
}
interface ProcessingInstruction_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.ProcessingInstruction */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class ProcessingInstruction {
    /* Properties of GXml-0.18.GXml.ProcessingInstruction */
    readonly target: string
    data: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.ProcessingInstruction */
    getTarget(): string
    getData(): string
    setData(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ProcessingInstruction_ConstructProps)
    _init (config?: ProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface IXsdSchema_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdSchema */
    elementDefinitions?: IXsdListElements
    simpleTypeDefinitions?: IXsdListSimpleTypes
    complexTypeDefinitions?: IXsdListComplexTypes
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class IXsdSchema {
    /* Properties of GXml-0.18.GXml.IXsdSchema */
    elementDefinitions: IXsdListElements
    simpleTypeDefinitions: IXsdListSimpleTypes
    complexTypeDefinitions: IXsdListComplexTypes
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdSchema */
    getElementDefinitions(): IXsdListElements
    setElementDefinitions(value: IXsdListElements): void
    getSimpleTypeDefinitions(): IXsdListSimpleTypes
    setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    getComplexTypeDefinitions(): IXsdListComplexTypes
    setComplexTypeDefinitions(value: IXsdListComplexTypes): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSchema_ConstructProps)
    _init (config?: IXsdSchema_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface IXsdBaseType_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseType */
    anotation?: IXsdAnnotation
}
class IXsdBaseType {
    /* Properties of GXml-0.18.GXml.IXsdBaseType */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdBaseType */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseType_ConstructProps)
    _init (config?: IXsdBaseType_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdSimpleType_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdSimpleType */
    final?: string
    id?: string
    name?: string
    annotation?: IXsdAnnotation
    list?: IXsdTypeList
    union?: IXsdTypeUnion
    restriction?: IXsdTypeRestriction
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseType */
    anotation?: IXsdAnnotation
}
class IXsdSimpleType {
    /* Properties of GXml-0.18.GXml.IXsdSimpleType */
    final: string
    id: string
    name: string
    annotation: IXsdAnnotation
    list: IXsdTypeList
    union: IXsdTypeUnion
    restriction: IXsdTypeRestriction
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.IXsdBaseType */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdSimpleType */
    getFinal(): string
    setFinal(value: string): void
    getId(): string
    setId(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    getList(): IXsdTypeList
    setList(value: IXsdTypeList): void
    getUnion(): IXsdTypeUnion
    setUnion(value: IXsdTypeUnion): void
    getRestriction(): IXsdTypeRestriction
    setRestriction(value: IXsdTypeRestriction): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.IXsdBaseType */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::union", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::restriction", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSimpleType_ConstructProps)
    _init (config?: IXsdSimpleType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface IXsdTypeDef_ConstructProps extends GObject.Object_ConstructProps {
}
class IXsdTypeDef {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeDef_ConstructProps)
    _init (config?: IXsdTypeDef_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestriction_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestriction */
    base?: string
    id?: string
    simpleType?: IXsdSimpleType
    enumerations?: IXsdListTypeRestrictionEnumerations
    whiteSpaces?: IXsdListTypeRestrictionWhiteSpaces
}
class IXsdTypeRestriction {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestriction */
    base: string
    id: string
    simpleType: IXsdSimpleType
    enumerations: IXsdListTypeRestrictionEnumerations
    whiteSpaces: IXsdListTypeRestrictionWhiteSpaces
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdTypeRestriction */
    getBase(): string
    setBase(value: string): void
    getId(): string
    setId(value: string): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getEnumerations(): IXsdListTypeRestrictionEnumerations
    setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enumerations", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::white-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestriction_ConstructProps)
    _init (config?: IXsdTypeRestriction_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeList_ConstructProps extends GObject.Object_ConstructProps {
}
class IXsdTypeList {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeList_ConstructProps)
    _init (config?: IXsdTypeList_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeUnion_ConstructProps extends GObject.Object_ConstructProps {
}
class IXsdTypeUnion {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeUnion_ConstructProps)
    _init (config?: IXsdTypeUnion_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionDef_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionDef {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionDef_ConstructProps)
    _init (config?: IXsdTypeRestrictionDef_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionMinExclusive_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionMinExclusive {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionMinInclusive_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionMinInclusive {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionMaxExclusive_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionMaxExclusive {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxExclusive_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionMaxInclusive_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionMaxInclusive {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxInclusive_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionTotalDigits_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionTotalDigits {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionTotalDigits_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionFractionDigits_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionFractionDigits {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: IXsdTypeRestrictionFractionDigits_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionLength_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionLength {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionLength_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionMinLength_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionMinLength {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMinLength_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionMaxLength_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionMaxLength {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: IXsdTypeRestrictionMaxLength_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionEnumeration_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionEnumeration */
    id?: string
    value?: string
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionEnumeration {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionEnumeration */
    id: string
    value: string
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionEnumeration */
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: IXsdTypeRestrictionEnumeration_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionWhiteSpace_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionWhiteSpace */
    fixed?: boolean
    id?: string
    value?: string
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionWhiteSpace {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionWhiteSpace */
    fixed: boolean
    id: string
    value: string
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionWhiteSpace */
    getFixed(): boolean
    setFixed(value: boolean): void
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: IXsdTypeRestrictionWhiteSpace_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionPattern_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionPattern {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionPattern_ConstructProps)
    _init (config?: IXsdTypeRestrictionPattern_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionAssertion_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionAssertion {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: IXsdTypeRestrictionAssertion_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdTypeRestrictionExplicitTimezone_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation?: IXsdAnnotation
}
class IXsdTypeRestrictionExplicitTimezone {
    /* Properties of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    annotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdTypeRestrictionDef */
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: IXsdTypeRestrictionExplicitTimezone_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdComplexType_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdComplexType */
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    defaultAttributesApply?: boolean
    contentType?: IXsdBaseContent
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseType */
    anotation?: IXsdAnnotation
}
class IXsdComplexType {
    /* Properties of GXml-0.18.GXml.IXsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    defaultAttributesApply: boolean
    contentType: IXsdBaseContent
    readonly typeAttributes: IXsdListAttributes
    readonly groupAttributes: IXsdListAttributesGroup
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.IXsdBaseType */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdComplexType */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): IXsdBaseContent
    setContentType(value: IXsdBaseContent): void
    getTypeAttributes(): IXsdListAttributes
    getGroupAttributes(): IXsdListAttributesGroup
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.IXsdBaseType */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-attributes-apply", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdComplexType_ConstructProps)
    _init (config?: IXsdComplexType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface IXsdExtension_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdExtension */
    base?: string
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class IXsdExtension {
    /* Properties of GXml-0.18.GXml.IXsdExtension */
    base: string
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdExtension */
    getBase(): string
    setBase(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdExtension_ConstructProps)
    _init (config?: IXsdExtension_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface IXsdElement_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdElement */
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    id?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitutionGroup?: DomTokenList
    targetNamespace?: string
    objectType?: string
    anotation?: IXsdAnnotation
    simpleType?: IXsdSimpleType
    complexType?: IXsdComplexType
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class IXsdElement {
    /* Properties of GXml-0.18.GXml.IXsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    id: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitutionGroup: DomTokenList
    targetNamespace: string
    objectType: string
    anotation: IXsdAnnotation
    simpleType: IXsdSimpleType
    complexType: IXsdComplexType
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdElement */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getId(): string | null
    setId(value?: string | null): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getComplexType(): IXsdComplexType
    setComplexType(value: IXsdComplexType): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::maxOccurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::maxOccurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::minOccurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minOccurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nillable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ref", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::substitution-group", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target-namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdElement_ConstructProps)
    _init (config?: IXsdElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface IXsdAnnotation_ConstructProps extends GObject.Object_ConstructProps {
}
class IXsdAnnotation {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAnnotation_ConstructProps)
    _init (config?: IXsdAnnotation_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdBaseContent_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation?: IXsdAnnotation
}
class IXsdBaseContent {
    /* Properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdBaseContent */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseContent_ConstructProps)
    _init (config?: IXsdBaseContent_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdSimpleContent_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation?: IXsdAnnotation
}
class IXsdSimpleContent {
    /* Properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdBaseContent */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdSimpleContent_ConstructProps)
    _init (config?: IXsdSimpleContent_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdComplexContent_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation?: IXsdAnnotation
}
class IXsdComplexContent {
    /* Properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdBaseContent */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdComplexContent_ConstructProps)
    _init (config?: IXsdComplexContent_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdOpenContent_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation?: IXsdAnnotation
}
class IXsdOpenContent {
    /* Properties of GXml-0.18.GXml.IXsdBaseContent */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdBaseContent */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdOpenContent_ConstructProps)
    _init (config?: IXsdOpenContent_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdBaseAttribute_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdBaseAttribute */
    anotation?: IXsdAnnotation
}
class IXsdBaseAttribute {
    /* Properties of GXml-0.18.GXml.IXsdBaseAttribute */
    anotation: IXsdAnnotation
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdBaseAttribute */
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdBaseAttribute_ConstructProps)
    _init (config?: IXsdBaseAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdAttribute_ConstructProps extends GObject.Object_ConstructProps {
}
class IXsdAttribute {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAttribute_ConstructProps)
    _init (config?: IXsdAttribute_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdAttributeGroup_ConstructProps extends GObject.Object_ConstructProps {
}
class IXsdAttributeGroup {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdAttributeGroup_ConstructProps)
    _init (config?: IXsdAttributeGroup_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdList_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdList {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdList_ConstructProps)
    _init (config?: IXsdList_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListElements_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListElements {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListElements_ConstructProps)
    _init (config?: IXsdListElements_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListSimpleTypes_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListSimpleTypes {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListSimpleTypes_ConstructProps)
    _init (config?: IXsdListSimpleTypes_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListComplexTypes_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListComplexTypes {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListComplexTypes_ConstructProps)
    _init (config?: IXsdListComplexTypes_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListAttributes_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListAttributes {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListAttributes_ConstructProps)
    _init (config?: IXsdListAttributes_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListAttributesGroup_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListAttributesGroup {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListAttributesGroup_ConstructProps)
    _init (config?: IXsdListAttributesGroup_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListTypeRestrictionEnumerations_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListTypeRestrictionEnumerations {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: IXsdListTypeRestrictionEnumerations_ConstructProps): void
    static $gtype: GObject.Type
}
interface IXsdListTypeRestrictionWhiteSpaces_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.IXsdList */
    element?: DomElement
    itemsType?: GObject.Type
    itemsName?: GObject.Type
}
class IXsdListTypeRestrictionWhiteSpaces {
    /* Properties of GXml-0.18.GXml.IXsdList */
    element: DomElement
    itemsType: GObject.Type
    itemsName: GObject.Type
    readonly length: number
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.IXsdList */
    getItem(index: number): DomElement | null
    append(element: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getItemsName(): GObject.Type
    setItemsName(value: GObject.Type): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    getNodesIndex(): GLib.Queue
    setElement(value: DomElement): void
    getItemsName(): string
    setItemsType(value: GObject.Type): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: IXsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    static $gtype: GObject.Type
}
interface Serializable_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class Serializable {
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    nodeName(): string
    propertyUseNick(): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Serializable_ConstructProps)
    _init (config?: Serializable_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableCollection_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class SerializableCollection {
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableCollection */
    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    isCollection(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of GXml-0.18.GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    nodeName(): string
    propertyUseNick(): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableCollection_ConstructProps)
    _init (config?: SerializableCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableMapDualKey_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableMapDualKey {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableMapDualKey */
    getMapPrimaryKey(): object | null
    getMapSecondaryKey(): object | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableMapDualKey_ConstructProps)
    _init (config?: SerializableMapDualKey_ConstructProps): void
    static $gtype: GObject.Type
}
interface SerializableMapKey_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableMapKey {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableMapKey */
    getMapKey(): object | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableMapKey_ConstructProps)
    _init (config?: SerializableMapKey_ConstructProps): void
    static $gtype: GObject.Type
}
interface SerializableProperty_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableProperty {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableProperty_ConstructProps)
    _init (config?: SerializableProperty_ConstructProps): void
    static $gtype: GObject.Type
}
interface Text_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Text */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class Text {
    /* Properties of GXml-0.18.GXml.Text */
    str: string
    /* Properties of GXml-0.18.GXml.Node */
    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string
    value: string
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.Text */
    getStr(): string
    setStr(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string
    getValue(): string
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Text_ConstructProps)
    _init (config?: Text_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface XPathContext_ConstructProps extends GObject.Object_ConstructProps {
}
class XPathContext {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XPathContext_ConstructProps)
    _init (config?: XPathContext_ConstructProps): void
    static $gtype: GObject.Type
}
interface XPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
class XPathObject {
    /* Properties of GXml-0.18.GXml.XPathObject */
    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.XPathObject */
    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XPathObject_ConstructProps)
    _init (config?: XPathObject_ConstructProps): void
    static $gtype: GObject.Type
}
interface CssSelectorData_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.CssSelectorData */
    selectorType?: CssSelectorType
    data?: string
    value?: string
}
class CssSelectorData {
    /* Properties of GXml-0.18.GXml.CssSelectorData */
    selectorType: CssSelectorType
    data: string
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.CssSelectorData */
    getSelectorType(): CssSelectorType
    setSelectorType(value: CssSelectorType): void
    getData(): string
    setData(value: string): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selector-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selector-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssSelectorData_ConstructProps)
    _init (config?: CssSelectorData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withValues(t: CssSelectorType, data: string, val: string): CssSelectorData
    static new(): CssSelectorData
    static $gtype: GObject.Type
}
interface CssSelectorParser_ConstructProps extends GObject.Object_ConstructProps {
}
class CssSelectorParser {
    /* Properties of GXml-0.18.GXml.CssSelectorParser */
    readonly selectors: Gee.List
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.CssSelectorParser */
    parse(query: string): void
    match(element: DomElement): boolean
    getSelectors(): Gee.List
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selectors", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectors", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CssSelectorParser_ConstructProps)
    _init (config?: CssSelectorParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CssSelectorParser
    static $gtype: GObject.Type
}
interface DomNodeFilter_ConstructProps extends GObject.Object_ConstructProps {
}
class DomNodeFilter {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomNodeFilter_ConstructProps)
    _init (config?: DomNodeFilter_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomNodeFilter
    static $gtype: GObject.Type
}
interface DomElementList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
class DomElementList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomElementList_ConstructProps)
    _init (config?: DomElementList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomElementList
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): DomElementList
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface DomEventInit_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomEventInit */
    bubbles?: boolean
    cancelable?: boolean
}
class DomEventInit {
    /* Properties of GXml-0.18.GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomEventInit */
    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomEventInit_ConstructProps)
    _init (config?: DomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomEventInit
    static $gtype: GObject.Type
}
interface DomCustomEventInit_ConstructProps extends DomEventInit_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCustomEventInit */
    detail?: any
}
class DomCustomEventInit {
    /* Properties of GXml-0.18.GXml.DomCustomEventInit */
    detail: any
    /* Properties of GXml-0.18.GXml.DomEventInit */
    bubbles: boolean
    cancelable: boolean
    /* Fields of GXml-0.18.GXml.DomEventInit */
    readonly parentInstance: GObject.Object
    readonly priv: DomEventInitPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomCustomEventInit */
    getDetail(): /* result */ any
    setDetail(value: any): void
    /* Methods of GXml-0.18.GXml.DomEventInit */
    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomCustomEventInit_ConstructProps)
    _init (config?: DomCustomEventInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomCustomEventInit
    /* Function overloads */
    static new(): DomCustomEventInit
    static $gtype: GObject.Type
}
interface DomTimeStamp_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomTimeStamp */
    time?: GLib.DateTime
}
class DomTimeStamp {
    /* Properties of GXml-0.18.GXml.DomTimeStamp */
    time: GLib.DateTime
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomTimeStamp */
    toString(): string
    getTime(): GLib.DateTime
    setTime(value: GLib.DateTime): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::time", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomTimeStamp_ConstructProps)
    _init (config?: DomTimeStamp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomTimeStamp
    static $gtype: GObject.Type
}
interface DomMutationObserverInit_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomMutationObserverInit */
    childList?: boolean
    attributes?: boolean
    characterData?: boolean
    subtree?: boolean
    attributeOldValue?: boolean
    characterDataOldValue?: boolean
    attributeFilter?: Gee.List
}
class DomMutationObserverInit {
    /* Properties of GXml-0.18.GXml.DomMutationObserverInit */
    childList: boolean
    attributes: boolean
    characterData: boolean
    subtree: boolean
    attributeOldValue: boolean
    characterDataOldValue: boolean
    attributeFilter: Gee.List
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomMutationObserverInit */
    getChildList(): boolean
    setChildList(value: boolean): void
    getAttributes(): boolean
    setAttributes(value: boolean): void
    getCharacterData(): boolean
    setCharacterData(value: boolean): void
    getSubtree(): boolean
    setSubtree(value: boolean): void
    getAttributeOldValue(): boolean
    setAttributeOldValue(value: boolean): void
    getCharacterDataOldValue(): boolean
    setCharacterDataOldValue(value: boolean): void
    getAttributeFilter(): Gee.List
    setAttributeFilter(value: Gee.List): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::child-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::subtree", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtree", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-old-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-old-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-data-old-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-data-old-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomMutationObserverInit_ConstructProps)
    _init (config?: DomMutationObserverInit_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomMutationObserverInit
    static $gtype: GObject.Type
}
interface DomErrorName_ConstructProps extends GObject.Object_ConstructProps {
}
class DomErrorName {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.DomErrorName */
    getName(errorCode: number): string
    getCode(errorName: string): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DomErrorName_ConstructProps)
    _init (config?: DomErrorName_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DomErrorName
    static $gtype: GObject.Type
}
interface ElementList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
class ElementList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ElementList_ConstructProps)
    _init (config?: ElementList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ElementList
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): ElementList
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface GHtmlDocument_ConstructProps extends GDocument_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GHtmlDocument {
    /* Properties of GXml-0.18.GXml.GHtmlDocument */
    readonly defaultOptions: number
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.DomDocument */
    readonly documentUri: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GXml-0.18.GXml.GDocument */
    readonly parentInstance: GNode
    readonly priv: GDocumentPrivate
    readonly doc: object | null
    readonly buffer: any
    readonly implementation: GImplementation
    readonly url: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly constructor_: DomEvent
    /* Fields of GXml-0.18.GXml.GNode */
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GDocument */
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomHtmlDocument */
    readFromString(str: string): void
    readFromStringTolerant(str: string): void
    toHtml(): string
    /* Methods of GXml-0.18.GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::default-options", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-options", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHtmlDocument_ConstructProps)
    _init (config?: GHtmlDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static fromPath(path: string, options: number): GHtmlDocument
    /* Function overloads */
    static fromPath(path: string, options: number): GHtmlDocument
    static fromUri(uri: string, options: number): GHtmlDocument
    /* Function overloads */
    static fromUri(uri: string, options: number): GHtmlDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): GHtmlDocument
    /* Function overloads */
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): GHtmlDocument
    static fromString(html: string, options: number): GHtmlDocument
    /* Function overloads */
    static fromString(str: string, options: number): GHtmlDocument
    static fromStringContext(html: string, options: number): GHtmlDocument
    static fromStringDoc(html: string, options: number): GHtmlDocument
    static new(): GHtmlDocument
    /* Function overloads */
    static new(): GHtmlDocument
    static getDefaultOptions(): number
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomAttr_ConstructProps extends GomNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomAttr */
    value?: string
}
class GomAttr {
    /* Properties of GXml-0.18.GXml.DomAttr */
    readonly namespaceUri: string
    readonly name: string
    value: string
    readonly specified: boolean
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly parentInstance: GObject.Object
    readonly priv: GomNodePrivate
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomAttr */
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getName(): string
    getValue(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomAttr_ConstructProps)
    _init (config?: GomAttr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: DomElement, name: string, value: string): GomAttr
    /* Function overloads */
    static new(): GomAttr
    static namespace(element: DomElement, namespaceUri: string, prefix: string | null, name: string, value: string): GomAttr
    static $gtype: GObject.Type
}
interface BaseCollection_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class BaseCollection {
    /* Properties of GXml-0.18.GXml.Collection */
    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string
    itemsType: GObject.Type
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodes-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::items-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: BaseCollection_ConstructProps)
    _init (config?: BaseCollection_ConstructProps): void
    static $gtype: GObject.Type
}
interface GomArrayList_ConstructProps extends BaseCollection_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class GomArrayList {
    /* Properties of GXml-0.18.GXml.Collection */
    readonly length: number
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly parentInstance: GObject.Object
    readonly priv: BaseCollectionPrivate
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomArrayList_ConstructProps)
    _init (config?: GomArrayList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomArrayList
    static $gtype: GObject.Type
}
interface GomHashMap_ConstructProps extends BaseCollection_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Map */
    attributeKey?: string
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class GomHashMap {
    /* Properties of GXml-0.18.GXml.Map */
    attributeKey: string
    readonly keysSet: Gee.Set
    /* Properties of GXml-0.18.GXml.Collection */
    readonly length: number
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly parentInstance: GObject.Object
    readonly priv: BaseCollectionPrivate
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomHashMap */
    initializeElementWithKey(element: GomElement, itemsType: GObject.Type, attributeKey: string): void
    initializeWithKey(itemsType: GObject.Type, attributeKey: string): void
    get(key: string): DomElement | null
    getKeys(): string[]
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Map */
    item(key: string): DomElement | null
    hasKey(key: string): boolean
    getAttributeKey(): string
    setAttributeKey(value: string): void
    getKeysSet(): Gee.Set
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomHashMap_ConstructProps)
    _init (config?: GomHashMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomHashMap
    static $gtype: GObject.Type
}
interface GomHashPairedMap_ConstructProps extends BaseCollection_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.PairedMap */
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class GomHashPairedMap {
    /* Properties of GXml-0.18.GXml.PairedMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    readonly primaryKeysSet: Gee.Set
    /* Properties of GXml-0.18.GXml.Collection */
    readonly length: number
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly parentInstance: GObject.Object
    readonly priv: BaseCollectionPrivate
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomHashPairedMap */
    initializeElementWithKeys(element: GomElement, itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string): void
    initializeWithKeys(itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string): void
    get(primaryKey: string, secondaryKey: string): DomElement | null
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.PairedMap */
    item(primaryKey: string, secondaryKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomHashPairedMap_ConstructProps)
    _init (config?: GomHashPairedMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomHashPairedMap
    static $gtype: GObject.Type
}
interface GomHashThreeMap_ConstructProps extends BaseCollection_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.ThreeMap */
    attributePrimaryKey?: string
    attributeSecondaryKey?: string
    attributeThirdKey?: string
    /* Constructor properties of GXml-0.18.GXml.Collection */
    element?: DomElement
    itemsType?: GObject.Type
}
class GomHashThreeMap {
    /* Properties of GXml-0.18.GXml.ThreeMap */
    attributePrimaryKey: string
    attributeSecondaryKey: string
    attributeThirdKey: string
    readonly primaryKeysSet: Gee.Set
    /* Properties of GXml-0.18.GXml.Collection */
    readonly length: number
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly parentInstance: GObject.Object
    readonly priv: BaseCollectionPrivate
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomHashThreeMap */
    initializeElementWithKeys(element: GomElement, itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    initializeWithKeys(itemsType: GObject.Type, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    get(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    getThirdKeys(pkey: string, skey: string): string[]
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.ThreeMap */
    item(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    hasThirdKey(pkey: string, skey: string, key: string): boolean
    secondaryKeysSet(pkey: string): Gee.Set
    thirdKeysSet(pkey: string, skey: string): Gee.Set
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getAttributeThirdKey(): string
    setAttributeThirdKey(value: string): void
    getPrimaryKeysSet(): Gee.Set
    /* Methods of GXml-0.18.GXml.Collection */
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.Type): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string
    getItemsType(): GObject.Type
    setItemsType(value: GObject.Type): void
    getLength(): number
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-primary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-secondary-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attribute-third-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attribute-third-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomHashThreeMap_ConstructProps)
    _init (config?: GomHashThreeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomHashThreeMap
    static $gtype: GObject.Type
}
interface GomDocument_ConstructProps extends GomNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomDocument {
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly parentInstance: GObject.Object
    readonly priv: GomNodePrivate
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomDocument */
    writeFile(file: Gio.File): void
    writeFileAsync(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    readFromFile(file: Gio.File): void
    readFromFileAsync(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml-0.18.GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDocument_ConstructProps)
    _init (config?: GomDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDocument
    /* Function overloads */
    static new(): GomDocument
    static fromPath(path: string): GomDocument
    static fromUri(uri: string): GomDocument
    static fromFile(file: Gio.File): GomDocument
    static fromStream(stream: Gio.InputStream): GomDocument
    static fromString(str: string): GomDocument
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
class GomImplementation {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomImplementation_ConstructProps)
    _init (config?: GomImplementation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomImplementation
    static $gtype: GObject.Type
}
interface GomDocumentType_ConstructProps extends GomNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomDocumentType {
    /* Properties of GXml-0.18.GXml.DomDocumentType */
    readonly name: string
    readonly publicId: string
    readonly systemId: string
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly parentInstance: GObject.Object
    readonly priv: GomNodePrivate
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomDocumentType */
    getName(): string
    getPublicId(): string
    getSystemId(): string
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDocumentType_ConstructProps)
    _init (config?: GomDocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, name: string, publicId?: string | null, systemId?: string | null): GomDocumentType
    /* Function overloads */
    static new(): GomDocumentType
    static withName(doc: DomDocument, name: string): GomDocumentType
    static withIds(doc: DomDocument, name: string, publicId: string, systemId: string): GomDocumentType
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomDocumentFragment_ConstructProps extends GomNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomDocumentFragment {
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly parentInstance: GObject.Object
    readonly priv: GomNodePrivate
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDocumentFragment_ConstructProps)
    _init (config?: GomDocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): GomDocumentFragment
    /* Function overloads */
    static new(): GomDocumentFragment
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomElement_ConstructProps extends GomNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomElement */
    parseChildren?: boolean
    unparsed?: string
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomElement {
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly parentInstance: GObject.Object
    readonly priv: GomNodePrivate
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.GomObject */
    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(pname: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    getAttribute(name: string): string | null
    setAttribute(name: string, val: string): boolean
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomElement_ConstructProps)
    _init (config?: GomElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomElement
    /* Function overloads */
    static new(): GomElement
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomElementAttributes_ConstructProps extends Gee.HashMap_ConstructProps {
}
class GomElementAttributes {
    /* Properties of Gee-0.8.Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml-0.18.GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.HashMap */
    getKeyHashFunc(): [ /* returnType */ Gee.HashDataFunc, /* resultTarget */ object | null ]
    getKeyEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    getValueEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNamedNodeMap */
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.Map */
    hasKey(key?: object | null): boolean
    contains(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    remove(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    setAll(map: Gee.Map): void
    unsetAll(map: Gee.Map): boolean
    removeAll(map: Gee.Map): boolean
    hasAll(map: Gee.Map): boolean
    containsAll(map: Gee.Map): boolean
    getIsEmpty(): boolean
    getKeyType(): GObject.Type
    getValueType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomElementAttributes_ConstructProps)
    _init (config?: GomElementAttributes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(element: GomElement): GomElementAttributes
    /* Function overloads */
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): GomElementAttributes
    static empty(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.Map
    static $gtype: GObject.Type
}
interface GomNode_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomNode {
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomNode_ConstructProps)
    _init (config?: GomNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomNode
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomNodeList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
class GomNodeList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomNodeList */
    readonly length: number
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomNodeList_ConstructProps)
    _init (config?: GomNodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomNodeList
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GomNodeList
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface GomBaseProperty_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomBaseProperty */
    value?: string
}
class GomBaseProperty {
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.GomProperty */
    validateValue(val: string): boolean
    setValue(value?: string | null): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomBaseProperty_ConstructProps)
    _init (config?: GomBaseProperty_ConstructProps): void
    static $gtype: GObject.Type
}
interface GomString_ConstructProps extends GomBaseProperty_ConstructProps {
}
class GomString {
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomString_ConstructProps)
    _init (config?: GomString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomString
    static $gtype: GObject.Type
}
interface GomArrayString_ConstructProps extends GomBaseProperty_ConstructProps {
}
class GomArrayString {
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomArrayString */
    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomArrayString_ConstructProps)
    _init (config?: GomArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomArrayString
    static $gtype: GObject.Type
}
interface GomXsdArrayString_ConstructProps extends GomArrayString_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdArrayString */
    simpleType?: string
    source?: Gio.File
}
class GomXsdArrayString {
    /* Properties of GXml-0.18.GXml.GomXsdArrayString */
    simpleType: string
    source: Gio.File
    /* Fields of GXml-0.18.GXml.GomArrayString */
    readonly parentInstance: GomBaseProperty
    readonly priv: GomArrayStringPrivate
    readonly value: string
    readonly values: string[]
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdArrayString */
    load(): void
    getSimpleType(): string
    setSimpleType(value: string): void
    getSource(): Gio.File
    setSource(value: Gio.File): void
    /* Methods of GXml-0.18.GXml.GomArrayString */
    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::source", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::source", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdArrayString_ConstructProps)
    _init (config?: GomXsdArrayString_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdArrayString
    /* Function overloads */
    static new(): GomXsdArrayString
    static $gtype: GObject.Type
}
interface GomDouble_ConstructProps extends GomBaseProperty_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomDouble */
    decimals?: number
}
class GomDouble {
    /* Properties of GXml-0.18.GXml.GomDouble */
    decimals: number
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomDouble */
    getDouble(): number
    setDouble(value: number): void
    getDecimals(): number
    setDecimals(value: number): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::decimals", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDouble_ConstructProps)
    _init (config?: GomDouble_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDouble
    static $gtype: GObject.Type
}
interface GomFloat_ConstructProps extends GomDouble_ConstructProps {
}
class GomFloat {
    /* Properties of GXml-0.18.GXml.GomDouble */
    decimals: number
    /* Fields of GXml-0.18.GXml.GomDouble */
    readonly parentInstance: GomBaseProperty
    readonly priv: GomDoublePrivate
    readonly value: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomFloat */
    getFloat(): number
    setFloat(value: number): void
    /* Methods of GXml-0.18.GXml.GomDouble */
    getDouble(): number
    setDouble(value: number): void
    getDecimals(): number
    setDecimals(value: number): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::decimals", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decimals", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomFloat_ConstructProps)
    _init (config?: GomFloat_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomFloat
    /* Function overloads */
    static new(): GomFloat
    static $gtype: GObject.Type
}
interface GomInt_ConstructProps extends GomBaseProperty_ConstructProps {
}
class GomInt {
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomInt */
    getInteger(): number
    setInteger(value: number): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomInt_ConstructProps)
    _init (config?: GomInt_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomInt
    static $gtype: GObject.Type
}
interface GomBoolean_ConstructProps extends GomBaseProperty_ConstructProps {
}
class GomBoolean {
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomBoolean */
    getBoolean(): boolean
    setBoolean(value: boolean): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomBoolean_ConstructProps)
    _init (config?: GomBoolean_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomBoolean
    static $gtype: GObject.Type
}
interface GomEnum_ConstructProps extends GomBaseProperty_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomEnum */
    enumType?: GObject.Type
}
class GomEnum {
    /* Properties of GXml-0.18.GXml.GomEnum */
    enumType: GObject.Type
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomEnum */
    initializeEnum(enumType: GObject.Type): void
    getEnum(): number
    setEnum(value: number): void
    getEnumType(): GObject.Type
    setEnumType(value: GObject.Type): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::enum-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enum-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enum-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomEnum_ConstructProps)
    _init (config?: GomEnum_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomEnum
    static $gtype: GObject.Type
}
interface GomDate_ConstructProps extends GomBaseProperty_ConstructProps {
}
class GomDate {
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomDate */
    getDate(): /* result */ GLib.Date
    setDate(date: GLib.Date): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDate_ConstructProps)
    _init (config?: GomDate_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDate
    static $gtype: GObject.Type
}
interface GomDateTime_ConstructProps extends GomBaseProperty_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomDateTime */
    format?: string
}
class GomDateTime {
    /* Properties of GXml-0.18.GXml.GomDateTime */
    format: string
    /* Properties of GXml-0.18.GXml.GomBaseProperty */
    value: string
    /* Fields of GXml-0.18.GXml.GomBaseProperty */
    readonly parentInstance: GObject.Object
    readonly priv: GomBasePropertyPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomDateTime */
    getDatetime(): GLib.DateTime
    setDatetime(dt: GLib.DateTime): void
    getFormat(): string
    setFormat(value: string): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::format", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::format", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomDateTime_ConstructProps)
    _init (config?: GomDateTime_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomDateTime
    static $gtype: GObject.Type
}
interface GomXsdSchema_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdSchema */
    elementDefinitions?: GomXsdListElements
    simpleTypeDefinitions?: GomXsdListSimpleTypes
    complexTypeDefinitions?: GomXsdListComplexTypes
}
class GomXsdSchema {
    /* Properties of GXml-0.18.GXml.GomXsdSchema */
    elementDefinitions: GomXsdListElements
    simpleTypeDefinitions: GomXsdListSimpleTypes
    complexTypeDefinitions: GomXsdListComplexTypes
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdSchema */
    getElementDefinitions(): GomXsdListElements
    setElementDefinitions(value: GomXsdListElements): void
    getSimpleTypeDefinitions(): GomXsdListSimpleTypes
    setSimpleTypeDefinitions(value: GomXsdListSimpleTypes): void
    getComplexTypeDefinitions(): GomXsdListComplexTypes
    setComplexTypeDefinitions(value: GomXsdListComplexTypes): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::element-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::element-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type-definitions", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdSchema_ConstructProps)
    _init (config?: GomXsdSchema_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdSchema
    /* Function overloads */
    static new(): GomXsdSchema
    static new(): GomXsdSchema
    static $gtype: GObject.Type
}
interface GomXsdSimpleType_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdSimpleType */
    final?: string
    name?: string
    annotation?: GomXsdAnnotation
    list?: GomXsdTypeList
    union?: GomXsdTypeUnion
    restriction?: GomXsdTypeRestriction
}
class GomXsdSimpleType {
    /* Properties of GXml-0.18.GXml.GomXsdSimpleType */
    final: string
    name: string
    annotation: GomXsdAnnotation
    list: GomXsdTypeList
    union: GomXsdTypeUnion
    restriction: GomXsdTypeRestriction
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdSimpleType */
    getFinal(): string
    setFinal(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    getList(): GomXsdTypeList
    setList(value: GomXsdTypeList): void
    getUnion(): GomXsdTypeUnion
    setUnion(value: GomXsdTypeUnion): void
    getRestriction(): GomXsdTypeRestriction
    setRestriction(value: GomXsdTypeRestriction): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::union", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::union", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::restriction", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::restriction", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdSimpleType_ConstructProps)
    _init (config?: GomXsdSimpleType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdSimpleType
    /* Function overloads */
    static new(): GomXsdSimpleType
    static new(): GomXsdSimpleType
    static $gtype: GObject.Type
}
interface GomXsdTypeDefinition_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdTypeDefinition */
    annotation?: GomXsdAnnotation
}
class GomXsdTypeDefinition {
    /* Properties of GXml-0.18.GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeDefinition_ConstructProps)
    _init (config?: GomXsdTypeDefinition_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeDefinition
    /* Function overloads */
    static new(): GomXsdTypeDefinition
    static new(): GomXsdTypeDefinition
    static $gtype: GObject.Type
}
interface GomXsdTypeList_ConstructProps extends GomXsdTypeDefinition_ConstructProps {
}
class GomXsdTypeList {
    /* Properties of GXml-0.18.GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeDefinition */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeDefinitionPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeList_ConstructProps)
    _init (config?: GomXsdTypeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeList
    /* Function overloads */
    static new(): GomXsdTypeList
    static new(): GomXsdTypeList
    static new(): GomXsdTypeList
    static $gtype: GObject.Type
}
interface GomXsdTypeUnion_ConstructProps extends GomXsdTypeDefinition_ConstructProps {
}
class GomXsdTypeUnion {
    /* Properties of GXml-0.18.GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeDefinition */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeDefinitionPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeUnion_ConstructProps)
    _init (config?: GomXsdTypeUnion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeUnion
    /* Function overloads */
    static new(): GomXsdTypeUnion
    static new(): GomXsdTypeUnion
    static new(): GomXsdTypeUnion
    static $gtype: GObject.Type
}
interface GomXsdTypeRestriction_ConstructProps extends GomXsdTypeDefinition_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdTypeRestriction */
    base?: string
    simpleType?: GomXsdSimpleType
    enumerations?: GomXsdListTypeRestrictionEnumerations
    whiteSpaces?: GomXsdListTypeRestrictionWhiteSpaces
}
class GomXsdTypeRestriction {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestriction */
    base: string
    simpleType: GomXsdSimpleType
    enumerations: GomXsdListTypeRestrictionEnumerations
    whiteSpaces: GomXsdListTypeRestrictionWhiteSpaces
    /* Properties of GXml-0.18.GXml.GomXsdTypeDefinition */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeDefinition */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeDefinitionPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestriction */
    getBase(): string
    setBase(value: string): void
    getSimpleType(): GomXsdSimpleType
    setSimpleType(value: GomXsdSimpleType): void
    getEnumerations(): GomXsdListTypeRestrictionEnumerations
    setEnumerations(value: GomXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): GomXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: GomXsdListTypeRestrictionWhiteSpaces): void
    /* Methods of GXml-0.18.GXml.GomXsdTypeDefinition */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enumerations", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enumerations", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::white-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::white-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestriction_ConstructProps)
    _init (config?: GomXsdTypeRestriction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestriction
    /* Function overloads */
    static new(): GomXsdTypeRestriction
    static new(): GomXsdTypeRestriction
    static new(): GomXsdTypeRestriction
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionDef_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation?: GomXsdAnnotation
}
class GomXsdTypeRestrictionDef {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionDef_ConstructProps)
    _init (config?: GomXsdTypeRestrictionDef_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionDef
    /* Function overloads */
    static new(): GomXsdTypeRestrictionDef
    static new(): GomXsdTypeRestrictionDef
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionMinExclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionMinExclusive {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMinExclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMinExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMinExclusive
    /* Function overloads */
    static new(): GomXsdTypeRestrictionMinExclusive
    static new(): GomXsdTypeRestrictionMinExclusive
    static new(): GomXsdTypeRestrictionMinExclusive
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionMinInclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionMinInclusive {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMinInclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMinInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMinInclusive
    /* Function overloads */
    static new(): GomXsdTypeRestrictionMinInclusive
    static new(): GomXsdTypeRestrictionMinInclusive
    static new(): GomXsdTypeRestrictionMinInclusive
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionMaxExclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionMaxExclusive {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMaxExclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMaxExclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMaxExclusive
    /* Function overloads */
    static new(): GomXsdTypeRestrictionMaxExclusive
    static new(): GomXsdTypeRestrictionMaxExclusive
    static new(): GomXsdTypeRestrictionMaxExclusive
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionMaxInclusive_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionMaxInclusive {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMaxInclusive_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMaxInclusive_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMaxInclusive
    /* Function overloads */
    static new(): GomXsdTypeRestrictionMaxInclusive
    static new(): GomXsdTypeRestrictionMaxInclusive
    static new(): GomXsdTypeRestrictionMaxInclusive
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionTotalDigits_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionTotalDigits {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionTotalDigits_ConstructProps)
    _init (config?: GomXsdTypeRestrictionTotalDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionTotalDigits
    /* Function overloads */
    static new(): GomXsdTypeRestrictionTotalDigits
    static new(): GomXsdTypeRestrictionTotalDigits
    static new(): GomXsdTypeRestrictionTotalDigits
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionFractionDigits_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionFractionDigits {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionFractionDigits_ConstructProps)
    _init (config?: GomXsdTypeRestrictionFractionDigits_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionFractionDigits
    /* Function overloads */
    static new(): GomXsdTypeRestrictionFractionDigits
    static new(): GomXsdTypeRestrictionFractionDigits
    static new(): GomXsdTypeRestrictionFractionDigits
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionLength_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionLength {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionLength_ConstructProps)
    _init (config?: GomXsdTypeRestrictionLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionLength
    /* Function overloads */
    static new(): GomXsdTypeRestrictionLength
    static new(): GomXsdTypeRestrictionLength
    static new(): GomXsdTypeRestrictionLength
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionMinLength_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionMinLength {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMinLength_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMinLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMinLength
    /* Function overloads */
    static new(): GomXsdTypeRestrictionMinLength
    static new(): GomXsdTypeRestrictionMinLength
    static new(): GomXsdTypeRestrictionMinLength
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionMaxLength_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionMaxLength {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionMaxLength_ConstructProps)
    _init (config?: GomXsdTypeRestrictionMaxLength_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionMaxLength
    /* Function overloads */
    static new(): GomXsdTypeRestrictionMaxLength
    static new(): GomXsdTypeRestrictionMaxLength
    static new(): GomXsdTypeRestrictionMaxLength
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionEnumeration_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdTypeRestrictionEnumeration */
    value?: string
}
class GomXsdTypeRestrictionEnumeration {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionEnumeration */
    value: string
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionEnumeration */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionEnumeration_ConstructProps)
    _init (config?: GomXsdTypeRestrictionEnumeration_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionEnumeration
    /* Function overloads */
    static new(): GomXsdTypeRestrictionEnumeration
    static new(): GomXsdTypeRestrictionEnumeration
    static new(): GomXsdTypeRestrictionEnumeration
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionWhiteSpace_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdTypeRestrictionWhiteSpace */
    fixed?: GomXsdTypeRestrictionWhiteSpaceFixed
    value?: string
}
class GomXsdTypeRestrictionWhiteSpace {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionWhiteSpace */
    fixed: GomXsdTypeRestrictionWhiteSpaceFixed
    value: string
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionWhiteSpace */
    getFixed(): GomXsdTypeRestrictionWhiteSpaceFixed
    setFixed(value: GomXsdTypeRestrictionWhiteSpaceFixed): void
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionWhiteSpace_ConstructProps)
    _init (config?: GomXsdTypeRestrictionWhiteSpace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionWhiteSpace
    /* Function overloads */
    static new(): GomXsdTypeRestrictionWhiteSpace
    static new(): GomXsdTypeRestrictionWhiteSpace
    static new(): GomXsdTypeRestrictionWhiteSpace
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionWhiteSpaceFixed_ConstructProps extends GomBoolean_ConstructProps {
}
class GomXsdTypeRestrictionWhiteSpaceFixed {
    /* Fields of GXml-0.18.GXml.GomBoolean */
    readonly parentInstance: GomBaseProperty
    readonly priv: GomBooleanPrivate
    readonly value: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomBoolean */
    getBoolean(): boolean
    setBoolean(value: boolean): void
    /* Methods of GXml-0.18.GXml.GomBaseProperty */
    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionWhiteSpaceFixed_ConstructProps)
    _init (config?: GomXsdTypeRestrictionWhiteSpaceFixed_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionWhiteSpaceFixed
    /* Function overloads */
    static new(): GomXsdTypeRestrictionWhiteSpaceFixed
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionPattern_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionPattern {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionPattern_ConstructProps)
    _init (config?: GomXsdTypeRestrictionPattern_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionPattern
    /* Function overloads */
    static new(): GomXsdTypeRestrictionPattern
    static new(): GomXsdTypeRestrictionPattern
    static new(): GomXsdTypeRestrictionPattern
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionAssertion_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionAssertion {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionAssertion_ConstructProps)
    _init (config?: GomXsdTypeRestrictionAssertion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionAssertion
    /* Function overloads */
    static new(): GomXsdTypeRestrictionAssertion
    static new(): GomXsdTypeRestrictionAssertion
    static new(): GomXsdTypeRestrictionAssertion
    static $gtype: GObject.Type
}
interface GomXsdTypeRestrictionExplicitTimezone_ConstructProps extends GomXsdTypeRestrictionDef_ConstructProps {
}
class GomXsdTypeRestrictionExplicitTimezone {
    /* Properties of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    annotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    readonly parentInstance: GomElement
    readonly priv: GomXsdTypeRestrictionDefPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdTypeRestrictionDef */
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::annotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdTypeRestrictionExplicitTimezone_ConstructProps)
    _init (config?: GomXsdTypeRestrictionExplicitTimezone_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdTypeRestrictionExplicitTimezone
    /* Function overloads */
    static new(): GomXsdTypeRestrictionExplicitTimezone
    static new(): GomXsdTypeRestrictionExplicitTimezone
    static new(): GomXsdTypeRestrictionExplicitTimezone
    static $gtype: GObject.Type
}
interface GomXsdComplexType_ConstructProps extends GomXsdBaseType_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdComplexType */
    abstract?: boolean
    block?: string
    final?: string
    mixed?: boolean
    name?: string
    defaultAttributesApply?: boolean
    contentType?: GomXsdBaseContent
}
class GomXsdComplexType {
    /* Properties of GXml-0.18.GXml.GomXsdComplexType */
    abstract: boolean
    block: string
    final: string
    mixed: boolean
    name: string
    defaultAttributesApply: boolean
    contentType: GomXsdBaseContent
    readonly typeAttributes: GomXsdList
    readonly groupAttributes: GomXsdList
    /* Properties of GXml-0.18.GXml.GomXsdBaseType */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdBaseType */
    readonly parentInstance: GomElement
    readonly priv: GomXsdBaseTypePrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdComplexType */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): GomXsdBaseContent
    setContentType(value: GomXsdBaseContent): void
    getTypeAttributes(): GomXsdList
    getGroupAttributes(): GomXsdList
    /* Methods of GXml-0.18.GXml.GomXsdBaseType */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-attributes-apply", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-attributes-apply", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::group-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdComplexType_ConstructProps)
    _init (config?: GomXsdComplexType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdComplexType
    /* Function overloads */
    static new(): GomXsdComplexType
    static new(): GomXsdComplexType
    static new(): GomXsdComplexType
    static $gtype: GObject.Type
}
interface GomXsdExtension_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdExtension */
    base?: string
}
class GomXsdExtension {
    /* Properties of GXml-0.18.GXml.GomXsdExtension */
    base: string
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdExtension */
    getBase(): string
    setBase(value: string): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdExtension_ConstructProps)
    _init (config?: GomXsdExtension_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdExtension
    /* Function overloads */
    static new(): GomXsdExtension
    static new(): GomXsdExtension
    static $gtype: GObject.Type
}
interface GomXsdElement_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdElement */
    abstract?: boolean
    block?: string
    "default"?: string
    final?: string
    fixed?: string
    form?: string
    maxOccurs?: string
    minOccurs?: string
    name?: string
    nillable?: boolean
    ref?: string
    substitutionGroup?: DomTokenList
    targetNamespace?: string
    objectType?: string
    anotation?: GomXsdAnnotation
    simpleType?: GomXsdSimpleType
    complexType?: GomXsdComplexType
}
class GomXsdElement {
    /* Properties of GXml-0.18.GXml.GomXsdElement */
    abstract: boolean
    block: string
    "default": string
    final: string
    fixed: string
    form: string
    maxOccurs: string
    minOccurs: string
    name: string
    nillable: boolean
    ref: string
    substitutionGroup: DomTokenList
    targetNamespace: string
    objectType: string
    anotation: GomXsdAnnotation
    simpleType: GomXsdSimpleType
    complexType: GomXsdComplexType
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdElement */
    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    getSimpleType(): GomXsdSimpleType
    setSimpleType(value: GomXsdSimpleType): void
    getComplexType(): GomXsdComplexType
    setComplexType(value: GomXsdComplexType): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abstract", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::block", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-occurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-occurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::min-occurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-occurs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nillable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nillable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ref", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ref", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::substitution-group", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::substitution-group", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target-namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::simple-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complex-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complex-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdElement_ConstructProps)
    _init (config?: GomXsdElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdElement
    /* Function overloads */
    static new(): GomXsdElement
    static new(): GomXsdElement
    static $gtype: GObject.Type
}
interface GomXsdAnnotation_ConstructProps extends GomElement_ConstructProps {
}
class GomXsdAnnotation {
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdAnnotation_ConstructProps)
    _init (config?: GomXsdAnnotation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdAnnotation
    /* Function overloads */
    static new(): GomXsdAnnotation
    static new(): GomXsdAnnotation
    static $gtype: GObject.Type
}
interface GomXsdBaseType_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdBaseType */
    anotation?: GomXsdAnnotation
}
class GomXsdBaseType {
    /* Properties of GXml-0.18.GXml.GomXsdBaseType */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseType */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdBaseType_ConstructProps)
    _init (config?: GomXsdBaseType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdBaseType
    /* Function overloads */
    static new(): GomXsdBaseType
    static new(): GomXsdBaseType
    static $gtype: GObject.Type
}
interface GomXsdBaseContent_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdBaseContent */
    anotation?: GomXsdAnnotation
}
class GomXsdBaseContent {
    /* Properties of GXml-0.18.GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdBaseContent_ConstructProps)
    _init (config?: GomXsdBaseContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdBaseContent
    /* Function overloads */
    static new(): GomXsdBaseContent
    static new(): GomXsdBaseContent
    static $gtype: GObject.Type
}
interface GomXsdSimpleContent_ConstructProps extends GomXsdBaseContent_ConstructProps {
}
class GomXsdSimpleContent {
    /* Properties of GXml-0.18.GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdBaseContent */
    readonly parentInstance: GomElement
    readonly priv: GomXsdBaseContentPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdSimpleContent_ConstructProps)
    _init (config?: GomXsdSimpleContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdSimpleContent
    /* Function overloads */
    static new(): GomXsdSimpleContent
    static new(): GomXsdSimpleContent
    static new(): GomXsdSimpleContent
    static $gtype: GObject.Type
}
interface GomXsdComplexContent_ConstructProps extends GomXsdBaseContent_ConstructProps {
}
class GomXsdComplexContent {
    /* Properties of GXml-0.18.GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdBaseContent */
    readonly parentInstance: GomElement
    readonly priv: GomXsdBaseContentPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdComplexContent_ConstructProps)
    _init (config?: GomXsdComplexContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdComplexContent
    /* Function overloads */
    static new(): GomXsdComplexContent
    static new(): GomXsdComplexContent
    static new(): GomXsdComplexContent
    static $gtype: GObject.Type
}
interface GomXsdOpenContent_ConstructProps extends GomXsdBaseContent_ConstructProps {
}
class GomXsdOpenContent {
    /* Properties of GXml-0.18.GXml.GomXsdBaseContent */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdBaseContent */
    readonly parentInstance: GomElement
    readonly priv: GomXsdBaseContentPrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseContent */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdOpenContent_ConstructProps)
    _init (config?: GomXsdOpenContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdOpenContent
    /* Function overloads */
    static new(): GomXsdOpenContent
    static new(): GomXsdOpenContent
    static new(): GomXsdOpenContent
    static $gtype: GObject.Type
}
interface GomXsdBaseAttribute_ConstructProps extends GomElement_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GomXsdBaseAttribute */
    anotation?: GomXsdAnnotation
}
class GomXsdBaseAttribute {
    /* Properties of GXml-0.18.GXml.GomXsdBaseAttribute */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly parentInstance: GomNode
    readonly priv: GomElementPrivate
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseAttribute */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdBaseAttribute_ConstructProps)
    _init (config?: GomXsdBaseAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdBaseAttribute
    /* Function overloads */
    static new(): GomXsdBaseAttribute
    static new(): GomXsdBaseAttribute
    static $gtype: GObject.Type
}
interface GomXsdAttribute_ConstructProps extends GomXsdBaseAttribute_ConstructProps {
}
class GomXsdAttribute {
    /* Properties of GXml-0.18.GXml.GomXsdBaseAttribute */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdBaseAttribute */
    readonly parentInstance: GomElement
    readonly priv: GomXsdBaseAttributePrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseAttribute */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdAttribute_ConstructProps)
    _init (config?: GomXsdAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdAttribute
    /* Function overloads */
    static new(): GomXsdAttribute
    static new(): GomXsdAttribute
    static new(): GomXsdAttribute
    static $gtype: GObject.Type
}
interface GomXsdAttributeGroup_ConstructProps extends GomXsdBaseAttribute_ConstructProps {
}
class GomXsdAttributeGroup {
    /* Properties of GXml-0.18.GXml.GomXsdBaseAttribute */
    anotation: GomXsdAnnotation
    /* Properties of GXml-0.18.GXml.GomElement */
    parseChildren: boolean
    unparsed: string
    /* Fields of GXml-0.18.GXml.GomXsdBaseAttribute */
    readonly parentInstance: GomElement
    readonly priv: GomXsdBaseAttributePrivate
    /* Fields of GXml-0.18.GXml.GomElement */
    readonly attributes: GomElementAttributes
    readonly namespaceUri: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdBaseAttribute */
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    /* Methods of GXml-0.18.GXml.GomElement */
    readFromUri(uri: string): void
    readFromUriAsync(uri: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string): void
    readFromStringAsync(str: string, callback?: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeFile(f: Gio.File): void
    writeFileAsync(f: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anotation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parse-children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unparsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdAttributeGroup_ConstructProps)
    _init (config?: GomXsdAttributeGroup_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdAttributeGroup
    /* Function overloads */
    static new(): GomXsdAttributeGroup
    static new(): GomXsdAttributeGroup
    static new(): GomXsdAttributeGroup
    static $gtype: GObject.Type
}
interface GomXsdList_ConstructProps extends GomArrayList_ConstructProps {
}
class GomXsdList {
    /* Properties of GXml-0.18.GXml.GomXsdList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GomArrayList */
    readonly parentInstance: BaseCollection
    readonly priv: GomArrayListPrivate
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdList_ConstructProps)
    _init (config?: GomXsdList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdList
    /* Function overloads */
    static new(): GomXsdList
    static $gtype: GObject.Type
}
interface GomXsdListElements_ConstructProps extends GomXsdList_ConstructProps {
}
class GomXsdListElements {
    /* Properties of GXml-0.18.GXml.GomXsdList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GomXsdList */
    readonly parentInstance: GomArrayList
    readonly priv: GomXsdListPrivate
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListElements_ConstructProps)
    _init (config?: GomXsdListElements_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListElements
    /* Function overloads */
    static new(): GomXsdListElements
    static new(): GomXsdListElements
    static $gtype: GObject.Type
}
interface GomXsdListSimpleTypes_ConstructProps extends GomXsdList_ConstructProps {
}
class GomXsdListSimpleTypes {
    /* Properties of GXml-0.18.GXml.GomXsdList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GomXsdList */
    readonly parentInstance: GomArrayList
    readonly priv: GomXsdListPrivate
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListSimpleTypes_ConstructProps)
    _init (config?: GomXsdListSimpleTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListSimpleTypes
    /* Function overloads */
    static new(): GomXsdListSimpleTypes
    static new(): GomXsdListSimpleTypes
    static $gtype: GObject.Type
}
interface GomXsdListComplexTypes_ConstructProps extends GomXsdList_ConstructProps {
}
class GomXsdListComplexTypes {
    /* Properties of GXml-0.18.GXml.GomXsdList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GomXsdList */
    readonly parentInstance: GomArrayList
    readonly priv: GomXsdListPrivate
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListComplexTypes_ConstructProps)
    _init (config?: GomXsdListComplexTypes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListComplexTypes
    /* Function overloads */
    static new(): GomXsdListComplexTypes
    static new(): GomXsdListComplexTypes
    static $gtype: GObject.Type
}
interface GomXsdListTypeRestrictionEnumerations_ConstructProps extends GomXsdList_ConstructProps {
}
class GomXsdListTypeRestrictionEnumerations {
    /* Properties of GXml-0.18.GXml.GomXsdList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GomXsdList */
    readonly parentInstance: GomArrayList
    readonly priv: GomXsdListPrivate
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListTypeRestrictionEnumerations_ConstructProps)
    _init (config?: GomXsdListTypeRestrictionEnumerations_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListTypeRestrictionEnumerations
    /* Function overloads */
    static new(): GomXsdListTypeRestrictionEnumerations
    static new(): GomXsdListTypeRestrictionEnumerations
    static $gtype: GObject.Type
}
interface GomXsdListTypeRestrictionWhiteSpaces_ConstructProps extends GomXsdList_ConstructProps {
}
class GomXsdListTypeRestrictionWhiteSpaces {
    /* Properties of GXml-0.18.GXml.GomXsdList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GomXsdList */
    readonly parentInstance: GomArrayList
    readonly priv: GomXsdListPrivate
    /* Fields of GXml-0.18.GXml.BaseCollection */
    readonly nodesIndex: GLib.Queue
    readonly element: GomElement
    readonly itemsName: string
    readonly itemsType: GObject.Type
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GomXsdList */
    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number
    /* Methods of GXml-0.18.GXml.BaseCollection */
    initializeElement(e: GomElement): void
    validateAppend(index: number, element: DomElement): boolean
    clear(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomXsdListTypeRestrictionWhiteSpaces_ConstructProps)
    _init (config?: GomXsdListTypeRestrictionWhiteSpaces_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomXsdListTypeRestrictionWhiteSpaces
    /* Function overloads */
    static new(): GomXsdListTypeRestrictionWhiteSpaces
    static new(): GomXsdListTypeRestrictionWhiteSpaces
    static $gtype: GObject.Type
}
interface GomCharacterData_ConstructProps extends GomNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomCharacterData {
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly parentInstance: GObject.Object
    readonly priv: GomNodePrivate
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomCharacterData_ConstructProps)
    _init (config?: GomCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GomCharacterData
    /* Function overloads */
    static new(): GomCharacterData
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomText_ConstructProps extends GomCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomText {
    /* Properties of GXml-0.18.GXml.DomText */
    readonly wholeText: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GomCharacterData */
    readonly parentInstance: GomNode
    readonly priv: GomCharacterDataPrivate
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomText_ConstructProps)
    _init (config?: GomText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): GomText
    /* Function overloads */
    static new(): GomText
    static new(): GomText
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomProcessingInstruction_ConstructProps extends GomCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomProcessingInstruction {
    /* Properties of GXml-0.18.GXml.DomProcessingInstruction */
    readonly target: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GomCharacterData */
    readonly parentInstance: GomNode
    readonly priv: GomCharacterDataPrivate
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomProcessingInstruction */
    getTarget(): string
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomProcessingInstruction_ConstructProps)
    _init (config?: GomProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, target: string, data: string): GomProcessingInstruction
    /* Function overloads */
    static new(): GomProcessingInstruction
    static new(): GomProcessingInstruction
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GomComment_ConstructProps extends GomCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GomComment {
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GomCharacterData */
    readonly parentInstance: GomNode
    readonly priv: GomCharacterDataPrivate
    /* Fields of GXml-0.18.GXml.GomNode */
    readonly localName: string
    readonly prefix: string
    readonly baseUri: string
    readonly nodeValue: string
    readonly parent: DomNode
    readonly nodeType: DomNodeNodeType
    readonly childNodes: GomNodeList
    readonly document: DomDocument
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GomComment_ConstructProps)
    _init (config?: GomComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument, data: string): GomComment
    /* Function overloads */
    static new(): GomComment
    static new(): GomComment
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GAttribute_ConstructProps extends GNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Attribute */
    namespace?: Namespace
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class GAttribute {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.Attribute */
    namespace: Namespace
    readonly prefix: string
    /* Properties of GXml-0.18.GXml.DomAttr */
    readonly namespaceUri: string
    readonly localName: string
    readonly specified: boolean
    /* Fields of GXml-0.18.GXml.GNode */
    readonly parentInstance: GObject.Object
    readonly priv: GNodePrivate
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Attribute */
    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void
    getPrefix(): string | null
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomAttr */
    getNamespaceUri(): string | null
    getLocalName(): string
    setValue(value: string): void
    getSpecified(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GAttribute_ConstructProps)
    _init (config?: GAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GAttribute
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GCDATA_ConstructProps extends GNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class GCDATA {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.CDATA */
    readonly str: string
    /* Fields of GXml-0.18.GXml.GNode */
    readonly parentInstance: GObject.Object
    readonly priv: GNodePrivate
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.CDATA */
    getStr(): string
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GCDATA_ConstructProps)
    _init (config?: GCDATA_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GCDATA
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GCharacterData_ConstructProps extends GNonDocumentChildNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Character */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GCharacterData {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.Character */
    str: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GNonDocumentChildNode */
    readonly parentInstance: GChildNode
    readonly priv: GNonDocumentChildNodePrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Character */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GCharacterData_ConstructProps)
    _init (config?: GCharacterData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GCharacterData
    /* Function overloads */
    static new(): GCharacterData
    static new(): GCharacterData
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GChildNode_ConstructProps extends GNode_ConstructProps {
}
class GChildNode {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Fields of GXml-0.18.GXml.GNode */
    readonly parentInstance: GObject.Object
    readonly priv: GNodePrivate
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GChildNode_ConstructProps)
    _init (config?: GChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GChildNode
    static $gtype: GObject.Type
}
interface GNonDocumentChildNode_ConstructProps extends GChildNode_ConstructProps {
}
class GNonDocumentChildNode {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GChildNode */
    readonly parentInstance: GNode
    readonly priv: GChildNodePrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GNonDocumentChildNode_ConstructProps)
    _init (config?: GNonDocumentChildNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GNonDocumentChildNode
    /* Function overloads */
    static new(): GNonDocumentChildNode
    static $gtype: GObject.Type
}
interface GComment_ConstructProps extends GCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Comment */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GComment {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.Comment */
    str: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GCharacterData */
    readonly parentInstance: GNonDocumentChildNode
    readonly priv: GCharacterDataPrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Comment */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GComment_ConstructProps)
    _init (config?: GComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GComment
    /* Function overloads */
    static new(): GComment
    static new(): GComment
    static new(): GComment
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GDocument_ConstructProps extends GNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Document */
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GDocument {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.Document */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.DomDocument */
    readonly implementation: DomImplementation
    readonly url: string
    readonly documentUri: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GXml-0.18.GXml.GNode */
    readonly parentInstance: GObject.Object
    readonly priv: GNodePrivate
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GDocument */
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Document */
    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Methods of GXml-0.18.GXml.DomDocument */
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDocument_ConstructProps)
    _init (config?: GDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDocument
    static fromPath(path: string, options: number): GDocument
    static fromUri(uri: string, options: number): GDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): GDocument
    static fromString(str: string, options: number): GDocument
    static fromStream(istream: Gio.InputStream): GDocument
    static fromDoc(doc: libxml2.Doc): GDocument
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GImplementation_ConstructProps extends GObject.Object_ConstructProps {
}
class GImplementation {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomImplementation */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GImplementation_ConstructProps)
    _init (config?: GImplementation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GImplementation
    static $gtype: GObject.Type
}
interface GDocumentType_ConstructProps extends GChildNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GDocumentType {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomDocumentType */
    readonly publicId: string
    readonly systemId: string
    /* Fields of GXml-0.18.GXml.GChildNode */
    readonly parentInstance: GNode
    readonly priv: GChildNodePrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomDocumentType */
    getPublicId(): string
    getSystemId(): string
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDocumentType_ConstructProps)
    _init (config?: GDocumentType_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withName(name: string): GDocumentType
    static withIds(name: string, publicId: string, systemId: string): GDocumentType
    static new(): GDocumentType
    /* Function overloads */
    static new(): GDocumentType
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GDocumentFragment_ConstructProps extends GDocument_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GDocumentFragment {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Fields of GXml-0.18.GXml.GDocument */
    readonly parentInstance: GNode
    readonly priv: GDocumentPrivate
    readonly doc: object | null
    readonly buffer: any
    readonly implementation: GImplementation
    readonly url: string
    readonly origin: string
    readonly compatMode: string
    readonly characterSet: string
    readonly contentType: string
    readonly constructor_: DomEvent
    /* Fields of GXml-0.18.GXml.GNode */
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GDocument */
    libxmlToString(): string
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomNonElementParentNode */
    getElementById(elementId: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDocumentFragment_ConstructProps)
    _init (config?: GDocumentFragment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: GDocument): GDocumentFragment
    /* Function overloads */
    static new(): GDocumentFragment
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GDomNodeIterator_ConstructProps extends GObject.Object_ConstructProps {
}
class GDomNodeIterator {
    /* Properties of GXml-0.18.GXml.DomNodeIterator */
    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNodeIterator */
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-before-reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomNodeIterator_ConstructProps)
    _init (config?: GDomNodeIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(n: DomNode, whatToShow: number, filter: DomNodeFilter): GDomNodeIterator
    static $gtype: GObject.Type
}
interface GDomTreeWalker_ConstructProps extends GObject.Object_ConstructProps {
}
class GDomTreeWalker {
    /* Properties of GXml-0.18.GXml.DomTreeWalker */
    readonly root: DomNode
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    readonly currentNode: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomTreeWalker */
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    getRoot(): DomNode
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    getCurrentNode(): DomNode
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomTreeWalker_ConstructProps)
    _init (config?: GDomTreeWalker_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(r: DomNode, w: number, f: DomNodeFilter): GDomTreeWalker
    static $gtype: GObject.Type
}
interface GDomTokenList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
class GDomTokenList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomTokenList */
    readonly length: number
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GDomTokenList */
    update(): void
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomTokenList_ConstructProps)
    _init (config?: GDomTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): GDomTokenList
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GDomTokenList
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface GDomSettableTokenList_ConstructProps extends GDomTokenList_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomSettableTokenList */
    value?: string
}
class GDomSettableTokenList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomSettableTokenList */
    value: string
    /* Properties of GXml-0.18.GXml.DomTokenList */
    readonly length: number
    /* Fields of GXml-0.18.GXml.GDomTokenList */
    readonly parentInstance: Gee.ArrayList
    readonly priv: GDomTokenListPrivate
    readonly element: DomElement
    readonly attr: string
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GDomTokenList */
    update(): void
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomSettableTokenList */
    getValue(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomTokenList */
    item(index: number): string | null
    contains(token: string): boolean
    add(tokens: string[]): void
    remove(tokens: string[]): void
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomSettableTokenList_ConstructProps)
    _init (config?: GDomSettableTokenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: DomElement, attr?: string | null): GDomSettableTokenList
    /* Function overloads */
    static new(e: DomElement, attr?: string | null): GDomSettableTokenList
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GDomSettableTokenList
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface GDomHTMLCollection_ConstructProps extends Gee.ArrayList_ConstructProps {
}
class GDomHTMLCollection {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomHTMLCollection */
    readonly length: number
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomHTMLCollection_ConstructProps)
    _init (config?: GDomHTMLCollection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDomHTMLCollection
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): GDomHTMLCollection
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface GDomEvent_ConstructProps extends GObject.Object_ConstructProps {
}
class GDomEvent {
    /* Properties of GXml-0.18.GXml.DomEvent */
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomEvent */
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::etype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::etype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-trusted", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-trusted", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-prevented", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-prevented", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomEvent_ConstructProps)
    _init (config?: GDomEvent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDomEvent
    static $gtype: GObject.Type
}
interface GDomCustomEvent_ConstructProps extends GDomEvent_ConstructProps {
}
class GDomCustomEvent {
    /* Properties of GXml-0.18.GXml.GDomCustomEvent */
    readonly detail: any
    /* Fields of GXml-0.18.GXml.GDomEvent */
    readonly parentInstance: GObject.Object
    readonly priv: GDomEventPrivate
    readonly etype: string
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    readonly flags: DomEventFlags
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GDomCustomEvent */
    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any | null): void
    getDetail(): /* result */ any
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomCustomEvent_ConstructProps)
    _init (config?: GDomCustomEvent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GDomCustomEvent
    /* Function overloads */
    static new(): GDomCustomEvent
    static $gtype: GObject.Type
}
interface GDomRange_ConstructProps extends GObject.Object_ConstructProps {
}
class GDomRange {
    /* Properties of GXml-0.18.GXml.DomRange */
    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomRange */
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    collapse(toStart: boolean): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::start-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GDomRange_ConstructProps)
    _init (config?: GDomRange_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: DomDocument): GDomRange
    static $gtype: GObject.Type
}
interface GElement_ConstructProps extends GNonDocumentChildNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.DomElement */
    id?: string
    className?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
    /* Constructor properties of GXml-0.18.GXml.Element */
    content?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class GElement {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.DomParentNode */
    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    /* Properties of GXml-0.18.GXml.DomElement */
    readonly namespaceUri: string
    readonly prefix: string
    readonly localName: string
    readonly tagName: string
    id: string
    className: string
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Properties of GXml-0.18.GXml.Element */
    content: string
    /* Fields of GXml-0.18.GXml.GNonDocumentChildNode */
    readonly parentInstance: GChildNode
    readonly priv: GNonDocumentChildNodePrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomParentNode */
    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    /* Methods of GXml-0.18.GXml.DomElement */
    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string
    getTagName(): string
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.Element */
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getContent(): string
    setContent(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.XPathContext */
    evaluate(expression: string, resolver?: Gee.List | null): XPathObject
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GElement_ConstructProps)
    _init (config?: GElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GElement
    /* Function overloads */
    static new(): GElement
    static new(): GElement
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GHashMapAttr_ConstructProps extends Gee.AbstractMap_ConstructProps {
}
class GHashMapAttr {
    /* Properties of Gee-0.8.Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml-0.18.GXml.DomNamedNodeMap */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNamedNodeMap */
    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.Map */
    hasKey(key?: object | null): boolean
    contains(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    remove(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    setAll(map: Gee.Map): void
    unsetAll(map: Gee.Map): boolean
    removeAll(map: Gee.Map): boolean
    hasAll(map: Gee.Map): boolean
    containsAll(map: Gee.Map): boolean
    getIsEmpty(): boolean
    getKeyType(): GObject.Type
    getValueType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterable */
    iterator(): Gee.Iterator
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHashMapAttr_ConstructProps)
    _init (config?: GHashMapAttr_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GHashMapAttr
    static empty(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.Map
    static $gtype: GObject.Type
}
interface GHashMapAttrEntry_ConstructProps extends Gee.MapEntry_ConstructProps {
}
class GHashMapAttrEntry {
    /* Properties of Gee-0.8.Gee.MapEntry */
    readonly key: object
    value: object
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.MapEntry */
    getKey(): object | null
    getValue(): object | null
    setValue(value?: object | null): void
    getReadOnly(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHashMapAttrEntry_ConstructProps)
    _init (config?: GHashMapAttrEntry_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, attr?: object | null): GHashMapAttrEntry
    static $gtype: GObject.Type
}
interface GHashMapAttrIterator_ConstructProps extends GObject.Object_ConstructProps {
}
class GHashMapAttrIterator {
    /* Properties of Gee-0.8.Gee.MapIterator */
    readonly valid: boolean
    readonly mutable: boolean
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.MapIterator */
    next(): boolean
    hasNext(): boolean
    getKey(): object | null
    getValue(): object | null
    setValue(value?: object | null): void
    unset(): void
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldMapFunc, seed?: object | null): object | null
    foreach(f: Gee.ForallMapFunc): boolean
    getValid(): boolean
    getMutable(): boolean
    getReadOnly(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::valid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mutable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mutable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GHashMapAttrIterator_ConstructProps)
    _init (config?: GHashMapAttrIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GHashMapAttrIterator
    static $gtype: GObject.Type
}
interface GListChildren_ConstructProps extends Gee.AbstractBidirList_ConstructProps {
}
class GListChildren {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.DomNodeList */
    readonly length: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomNodeList */
    item(index: number): DomNode | null
    getLength(): number
    /* Methods of Gee-0.8.Gee.BidirList */
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.List */
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    first(): object | null
    last(): object | null
    insertAll(index: number, collection: Gee.Collection): void
    sort(compareFunc: GLib.CompareDataFunc | null): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.Collection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    addAll(collection: Gee.Collection): boolean
    containsAll(collection: Gee.Collection): boolean
    removeAll(collection: Gee.Collection): boolean
    retainAll(collection: Gee.Collection): boolean
    toArray(): object[]
    addAllArray(array: object[]): boolean
    containsAllArray(array: object[]): boolean
    removeAllArray(array: object[]): boolean
    addAllIterator(iter: Gee.Iterator): boolean
    containsAllIterator(iter: Gee.Iterator): boolean
    removeAllIterator(iter: Gee.Iterator): boolean
    getIsEmpty(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of GXml-0.18.GXml.DomHTMLCollection */
    getElement(index: number): DomElement | null
    toArray(): DomElement[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListChildren_ConstructProps)
    _init (config?: GListChildren_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GListChildren
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List
    /* Function overloads */
    static empty(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static $gtype: GObject.Type
}
interface GListChildrenIterator_ConstructProps extends GObject.Object_ConstructProps {
}
class GListChildrenIterator {
    /* Properties of Gee-0.8.Gee.Iterator */
    readonly valid: boolean
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterator */
    next(): boolean
    hasNext(): boolean
    get(): object | null
    remove(): void
    getValid(): boolean
    getReadOnly(): boolean
    /* Methods of Gee-0.8.Gee.BidirIterator */
    previous(): boolean
    hasPrevious(): boolean
    first(): boolean
    last(): boolean
    /* Methods of Gee-0.8.Gee.ListIterator */
    set(item?: object | null): void
    add(item?: object | null): void
    index(): number
    /* Methods of Gee-0.8.Gee.BidirListIterator */
    insert(item?: object | null): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::valid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListChildrenIterator_ConstructProps)
    _init (config?: GListChildrenIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GListChildrenIterator
    static unfold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.UnfoldFunc, current?: Gee.Lazy | null): Gee.Iterator
    static concat(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, iters: Gee.Iterator): Gee.Iterator
    static $gtype: GObject.Type
}
interface GListNamespaces_ConstructProps extends Gee.AbstractList_ConstructProps {
}
class GListNamespaces {
    /* Properties of Gee-0.8.Gee.AbstractList */
    readonly readOnlyView: Gee.List
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListNamespaces_ConstructProps)
    _init (config?: GListNamespaces_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GListNamespaces
    static $gtype: GObject.Type
}
interface GListNamespacesIterator_ConstructProps extends GObject.Object_ConstructProps {
}
class GListNamespacesIterator {
    /* Properties of Gee-0.8.Gee.Iterator */
    readonly valid: boolean
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of Gee-0.8.Gee.Iterator */
    next(): boolean
    hasNext(): boolean
    get(): object | null
    remove(): void
    getValid(): boolean
    getReadOnly(): boolean
    /* Methods of Gee-0.8.Gee.ListIterator */
    set(item?: object | null): void
    add(item?: object | null): void
    index(): number
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::valid", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GListNamespacesIterator_ConstructProps)
    _init (config?: GListNamespacesIterator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(node?: object | null): GListNamespacesIterator
    static unfold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.UnfoldFunc, current?: Gee.Lazy | null): Gee.Iterator
    static concat(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, iters: Gee.Iterator): Gee.Iterator
    static $gtype: GObject.Type
}
interface GNamespace_ConstructProps extends GObject.Object_ConstructProps {
}
class GNamespace {
    /* Properties of GXml-0.18.GXml.Namespace */
    readonly uri: string
    readonly prefix: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNamespace */
    getInternalNs(): object | null
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Namespace */
    getUri(): string | null
    getPrefix(): string | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GNamespace_ConstructProps)
    _init (config?: GNamespace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(ns?: object | null): GNamespace
    static $gtype: GObject.Type
}
interface GNode_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.GNode */
    value?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GNode {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    readonly baseUri: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GNode_ConstructProps)
    _init (config?: GNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static toGnode(doc: GDocument, node?: object | null): Node
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GProcessingInstruction_ConstructProps extends GCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.ProcessingInstruction */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GProcessingInstruction {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.ProcessingInstruction */
    readonly target: string
    data: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GCharacterData */
    readonly parentInstance: GNonDocumentChildNode
    readonly priv: GCharacterDataPrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.ProcessingInstruction */
    getTarget(): string
    getData(): string
    setData(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GProcessingInstruction_ConstructProps)
    _init (config?: GProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GProcessingInstruction
    /* Function overloads */
    static new(): GProcessingInstruction
    static new(): GProcessingInstruction
    static new(): GProcessingInstruction
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GText_ConstructProps extends GCharacterData_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Text */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
    /* Constructor properties of GXml-0.18.GXml.DomCharacterData */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.DomNode */
    ownerDocument?: DomDocument
    nodeValue?: string
    textContent?: string
}
class GText {
    /* Properties of GXml-0.18.GXml.GNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string
    value: string
    /* Properties of GXml-0.18.GXml.Text */
    str: string
    /* Properties of GXml-0.18.GXml.DomText */
    readonly wholeText: string
    /* Properties of GXml-0.18.GXml.DomCharacterData */
    data: string
    readonly length: number
    /* Properties of GXml-0.18.GXml.DomNode */
    readonly nodeType: DomNodeNodeType
    readonly nodeName: string
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string
    textContent: string
    /* Properties of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    /* Fields of GXml-0.18.GXml.GCharacterData */
    readonly parentInstance: GNonDocumentChildNode
    readonly priv: GCharacterDataPrivate
    /* Fields of GXml-0.18.GXml.GNode */
    readonly doc: GDocument
    readonly node: object | null
    readonly baseUri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.GNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    getInternalNode(): object | null
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List
    getDocument(): Document
    getParent(): Node
    getTypeNode(): NodeType
    getName(): string
    getValue(): string
    setValue(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Text */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Methods of GXml-0.18.GXml.DomText */
    splitText(offset: number): DomText
    getWholeText(): string
    /* Methods of GXml-0.18.GXml.DomCharacterData */
    substringData(offset: number, count: number): string
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string
    setData(value: string): void
    getLength(): number
    /* Methods of GXml-0.18.GXml.DomNode */
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void
    /* Methods of GXml-0.18.GXml.DomEventTarget */
    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean
    /* Methods of GXml-0.18.GXml.DomNonDocumentTypeChildNode */
    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null
    /* Methods of GXml-0.18.GXml.DomChildNode */
    remove(): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GText_ConstructProps)
    _init (config?: GText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: GDocument, node?: object | null): GText
    /* Function overloads */
    static new(): GText
    static new(): GText
    static new(): GText
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface GXPathObject_ConstructProps extends GObject.Object_ConstructProps {
}
class GXPathObject {
    /* Properties of GXml-0.18.GXml.XPathObject */
    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.XPathObject */
    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::boolean-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::nodeset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nodeset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GXPathObject_ConstructProps)
    _init (config?: GXPathObject_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(document: GDocument, pointer?: object | null): GXPathObject
    static $gtype: GObject.Type
}
interface NodeList_ConstructProps extends Gee.ArrayList_ConstructProps {
}
class NodeList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.NodeList */
    get(index: number): Node
    toArray(): Node[]
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: NodeList_ConstructProps)
    _init (config?: NodeList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): NodeList
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): NodeList
    static $gtype: GObject.Type
}
interface SerializableBool_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableBool {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableBool */
    getValue(): boolean
    setValue(val: boolean): void
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableBool_ConstructProps)
    _init (config?: SerializableBool_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableBool
    static $gtype: GObject.Type
}
interface SerializableContainer_ConstructProps extends SerializableObjectModel_ConstructProps {
}
class SerializableContainer {
    /* Properties of GXml-0.18.GXml.SerializableObjectModel */
    ignoredSerializableProperties: GLib.HashTable
    /* Fields of GXml-0.18.GXml.SerializableObjectModel */
    readonly parentInstance: GObject.Object
    readonly priv: SerializableObjectModelPrivate
    readonly node: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableContainer */
    initContainers(): void
    /* Methods of GXml-0.18.GXml.SerializableObjectModel */
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    setDefaultNamespace(node: Node): boolean
    nodeName(): string
    defaultNodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Element, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    toString(): string
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableContainer_ConstructProps)
    _init (config?: SerializableContainer_ConstructProps): void
    static $gtype: GObject.Type
}
interface SerializableDouble_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableDouble {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableDouble */
    getFraction(): number
    setFraction(fraction: number): void
    getValue(): number
    setValue(val: number): void
    toString(): string
    format(f: string): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableDouble_ConstructProps)
    _init (config?: SerializableDouble_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableDouble
    static $gtype: GObject.Type
}
interface SerializableEnum_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableEnum {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableEnum */
    setEnumType(type: GObject.Type): void
    getEnumType(): GObject.Type
    parse(str: string): void
    parseInteger(v: number): void
    toInteger(): number
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableEnum_ConstructProps)
    _init (config?: SerializableEnum_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static withEnum(type: GObject.Type): SerializableEnum
    static new(): SerializableEnum
    static $gtype: GObject.Type
}
interface SerializableFloat_ConstructProps extends SerializableDouble_ConstructProps {
}
class SerializableFloat {
    /* Fields of GXml-0.18.GXml.SerializableDouble */
    readonly parentInstance: GObject.Object
    readonly priv: SerializableDoublePrivate
    readonly val: string
    readonly fraction: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableFloat */
    getValue(): number
    setValue(val: number): void
    /* Methods of GXml-0.18.GXml.SerializableDouble */
    getFraction(): number
    setFraction(fraction: number): void
    setValue(val: number): void
    toString(): string
    format(f: string): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableFloat_ConstructProps)
    _init (config?: SerializableFloat_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableFloat
    /* Function overloads */
    static new(): SerializableFloat
    static $gtype: GObject.Type
}
interface SerializableArrayList_ConstructProps extends Gee.ArrayList_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.SerializableArrayList */
    ignoredSerializableProperties?: GLib.HashTable
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class SerializableArrayList {
    /* Properties of GXml-0.18.GXml.SerializableArrayList */
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly readOnly: boolean
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of Gee-0.8.Gee.ArrayList */
    readonly items: object[]
    readonly itemsLength1: number
    readonly size: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableArrayList */
    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of Gee-0.8.Gee.ArrayList */
    addAll(collection: Gee.Collection): boolean
    getEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    setDefaultNamespace(node: Node): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml-0.18.GXml.SerializableCollection */
    deserializeNode(node: Node): boolean
    isCollection(): boolean
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableArrayList_ConstructProps)
    _init (config?: SerializableArrayList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableArrayList
    /* Function overloads */
    static new(gType: GObject.Type, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): SerializableArrayList
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableDualKeyMap_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.SerializableDualKeyMap */
    ignoredSerializableProperties?: GLib.HashTable
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class SerializableDualKeyMap {
    /* Properties of GXml-0.18.GXml.SerializableDualKeyMap */
    readonly valueType: GObject.Type
    readonly primaryKeyType: GObject.Type
    readonly secondaryKeyType: GObject.Type
    readonly primaryKeys: Gee.Collection
    readonly size: number
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableDualKeyMap */
    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    secondaryKeys(key?: object | null): Gee.Collection
    valuesForKey(primaryKey?: object | null): Gee.Collection
    values(): Gee.Collection
    set(primaryKey?: object | null, secundaryKey?: object | null, val?: object | null): void
    get(primaryKey?: object | null, secondaryKey?: object | null): object | null
    setDefaultNamespace(node: Node): boolean
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getValueType(): GObject.Type
    getPrimaryKeyType(): GObject.Type
    getSecondaryKeyType(): GObject.Type
    getPrimaryKeys(): Gee.Collection
    getSize(): number
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Methods of GXml-0.18.GXml.Serializable */
    setDefaultNamespace(node: Node): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml-0.18.GXml.SerializableCollection */
    deserializeNode(node: Node): boolean
    isCollection(): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "notify::value-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-key-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-key-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::secondary-key-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-key-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::primary-keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableDualKeyMap_ConstructProps)
    _init (config?: SerializableDualKeyMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableDualKeyMap
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableHashMap_ConstructProps extends Gee.HashMap_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.SerializableHashMap */
    ignoredSerializableProperties?: GLib.HashTable
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class SerializableHashMap {
    /* Properties of GXml-0.18.GXml.SerializableHashMap */
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of Gee-0.8.Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    readonly readOnlyView: Gee.Map
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableHashMap */
    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of Gee-0.8.Gee.HashMap */
    getKeyHashFunc(): [ /* returnType */ Gee.HashDataFunc, /* resultTarget */ object | null ]
    getKeyEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    getValueEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Serializable */
    setDefaultNamespace(node: Node): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml-0.18.GXml.SerializableCollection */
    deserializeNode(node: Node): boolean
    isCollection(): boolean
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableHashMap_ConstructProps)
    _init (config?: SerializableHashMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableHashMap
    /* Function overloads */
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): SerializableHashMap
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableTreeMap_ConstructProps extends Gee.TreeMap_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.SerializableTreeMap */
    ignoredSerializableProperties?: GLib.HashTable
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class SerializableTreeMap {
    /* Properties of GXml-0.18.GXml.SerializableTreeMap */
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of Gee-0.8.Gee.AbstractBidirSortedMap */
    readonly readOnlyView: Gee.BidirSortedMap
    /* Properties of Gee-0.8.Gee.AbstractSortedMap */
    readonly ascendingKeys: Gee.SortedSet
    readonly ascendingEntries: Gee.SortedSet
    /* Properties of Gee-0.8.Gee.AbstractMap */
    readonly size: number
    readonly readOnly: boolean
    readonly keys: Gee.Set
    readonly values: Gee.Collection
    readonly entries: Gee.Set
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableTreeMap */
    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    nodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of Gee-0.8.Gee.TreeMap */
    getKeyCompareFunc(): [ /* returnType */ GLib.CompareDataFunc, /* resultTarget */ object | null ]
    getValueEqualFunc(): [ /* returnType */ Gee.EqualDataFunc, /* resultTarget */ object | null ]
    /* Methods of Gee-0.8.Gee.AbstractBidirSortedMap */
    bidirMapIterator(): Gee.BidirMapIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirSortedMap
    /* Methods of Gee-0.8.Gee.AbstractSortedMap */
    headMap(before?: object | null): Gee.SortedMap
    tailMap(after?: object | null): Gee.SortedMap
    subMap(before?: object | null, after?: object | null): Gee.SortedMap
    getAscendingKeys(): Gee.SortedSet
    getAscendingEntries(): Gee.SortedSet
    /* Methods of Gee-0.8.Gee.AbstractMap */
    hasKey(key?: object | null): boolean
    has(key?: object | null, value?: object | null): boolean
    get(key?: object | null): object | null
    set(key?: object | null, value?: object | null): void
    unset(key?: object | null): [ /* returnType */ boolean, /* value */ object | null ]
    mapIterator(): Gee.MapIterator
    clear(): void
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    getSize(): number
    getReadOnly(): boolean
    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Serializable */
    getEnableUnknownSerializableProperty(): boolean
    setDefaultNamespace(node: Node): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Methods of GXml-0.18.GXml.SerializableCollection */
    deserializeNode(node: Node): boolean
    isCollection(): boolean
    /* Methods of Gee-0.8.Gee.Traversable */
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    fold(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): object | null
    map(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.MapFunc): Gee.Iterator
    scan(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FoldFunc, seed?: object | null): Gee.Iterator
    filter(pred: Gee.Predicate): Gee.Iterator
    chop(offset: number, length: number): Gee.Iterator
    flatMap(aType: GObject.Type, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.FlatMapFunc): Gee.Iterator
    tee(forks: number): Gee.Iterator[]
    firstMatch(pred: Gee.Predicate): object | null
    anyMatch(pred: Gee.Predicate): boolean
    allMatch(pred: Gee.Predicate): boolean
    max(compare: GLib.CompareDataFunc): object | null
    min(compare: GLib.CompareDataFunc): object | null
    orderBy(compare: GLib.CompareDataFunc | null): Gee.Iterator
    getElementType(): GObject.Type
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ascending-keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ascending-keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ascending-entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ascending-entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keys", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::values", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableTreeMap_ConstructProps)
    _init (config?: SerializableTreeMap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableTreeMap
    /* Function overloads */
    static new(kType: GObject.Type, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.Type, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyCompareFunc: GLib.CompareDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): SerializableTreeMap
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableInt_ConstructProps extends SerializableDouble_ConstructProps {
}
class SerializableInt {
    /* Fields of GXml-0.18.GXml.SerializableDouble */
    readonly parentInstance: GObject.Object
    readonly priv: SerializableDoublePrivate
    readonly val: string
    readonly fraction: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableInt */
    getValue(): number
    setValue(val: number): void
    /* Methods of GXml-0.18.GXml.SerializableDouble */
    getFraction(): number
    setFraction(fraction: number): void
    setValue(val: number): void
    toString(): string
    format(f: string): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableInt_ConstructProps)
    _init (config?: SerializableInt_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableInt
    /* Function overloads */
    static new(): SerializableInt
    static $gtype: GObject.Type
}
interface SerializableObjectModel_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.SerializableObjectModel */
    ignoredSerializableProperties?: GLib.HashTable
    /* Constructor properties of GXml-0.18.GXml.Serializable */
    serializedXmlNodeValue?: string
}
class SerializableObjectModel {
    /* Properties of GXml-0.18.GXml.SerializableObjectModel */
    ignoredSerializableProperties: GLib.HashTable
    /* Properties of GXml-0.18.GXml.Serializable */
    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableObjectModel */
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean
    setDefaultNamespace(node: Node): boolean
    nodeName(): string
    defaultNodeName(): string
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Element, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    toString(): string
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Serializable */
    setDefaultNamespace(node: Node): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of GXml-0.18.GXml.Serializable */
    connect(sigName: "serialize-unknown-property", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "serialize-unknown-property-type", callback: ((element: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: (element: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", element: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "deserialize-unknown-property-type", callback: ((node: Node, prop: GObject.ParamSpec) => void)): number
    on(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: (node: Node, prop: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", node: Node, prop: GObject.ParamSpec): void
    connect(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignored-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-properties", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unknown-serializable-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::serialized-xml-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableObjectModel_ConstructProps)
    _init (config?: SerializableObjectModel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string
    static $gtype: GObject.Type
}
interface SerializableValueList_ConstructProps extends GObject.Object_ConstructProps {
}
class SerializableValueList {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.SerializableValueList */
    getValues(): Gee.List
    addValues(vals: string[]): void
    getValueAt(index: number): string | null
    selectValueAt(index: number): void
    getValuesArray(): string[]
    isValue(): boolean
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.SerializableProperty */
    getSerializablePropertyValue(): string
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SerializableValueList_ConstructProps)
    _init (config?: SerializableValueList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SerializableValueList
    static $gtype: GObject.Type
}
interface TAttribute_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Attribute */
    namespace?: Namespace
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TAttribute {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.Attribute */
    namespace: Namespace
    readonly prefix: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Attribute */
    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void
    getPrefix(): string | null
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TAttribute_ConstructProps)
    _init (config?: TAttribute_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, name: string, value: string): TAttribute
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TCDATA_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TCDATA {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.CDATA */
    readonly str: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.CDATA */
    getStr(): string
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TCDATA_ConstructProps)
    _init (config?: TCDATA_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, text: string): TCDATA
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TComment_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Comment */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TComment {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.Comment */
    str: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Comment */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TComment_ConstructProps)
    _init (config?: TComment_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: Document, text: string): TComment
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TDocument_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Document */
    indent?: boolean
    nsTop?: boolean
    prefixDefaultNs?: boolean
    backup?: boolean
    file?: Gio.File
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TDocument {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.Document */
    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TDocument */
    saveTo(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Document */
    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ns-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ns-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix-default-ns", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix-default-ns", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::file", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TDocument_ConstructProps)
    _init (config?: TDocument_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TDocument
    static fromPath(path: string): TDocument
    static fromUri(uri: string): TDocument
    static fromFile(file: Gio.File): TDocument
    static fromStream(stream: Gio.InputStream): TDocument
    static fromString(str: string): TDocument
    static fromPathWithReadtypeFunc(path: string, func: any): TDocument
    static fromUriWithReadtypeFunc(uri: string, func: any): TDocument
    static fromFileWithReadtypeFunc(file: Gio.File, func: any): TDocument
    static fromStreamWithReadtypeFunc(stream: Gio.InputStream, func: any): TDocument
    static fromStringWithReadtypeFunc(str: string, func: any): TDocument
    static twSaveAs(doc: Document, f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    static writeDocument(doc: Document, tw: libxml2.TextWriter): void
    static startNode(doc: Document, tw: libxml2.TextWriter, node: Node, root: boolean, declaredNs: Gee.ArrayList): /* declaredNs */ Gee.ArrayList
    static readDoc(doc: Document, file: Gio.File, rtfunc?: any | null): void
    static readDocStream(doc: Document, istream: Gio.InputStream, rtfunc?: any | null): void
    static readNode(node: Node, tr: libxml2.TextReader, rntfunc?: any | null): TDocumentReadType
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TElement_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Element */
    content?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TElement {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.Element */
    readonly tagName: string
    content: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Element */
    normalize(): void
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getTagName(): string
    getContent(): string
    setContent(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TElement_ConstructProps)
    _init (config?: TElement_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, name: string): TElement
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TNamespace_ConstructProps extends TNode_ConstructProps {
}
class TNamespace {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.Namespace */
    readonly uri: string
    readonly prefix: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Namespace */
    getUri(): string | null
    getPrefix(): string | null
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TNamespace_ConstructProps)
    _init (config?: TNamespace_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, uri: string, prefix?: string | null): TNamespace
    static $gtype: GObject.Type
}
interface TNode_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.TNode */
    value?: string
}
class TNode {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly name: string
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    value: string
    readonly parent: Node
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TNode_ConstructProps)
    _init (config?: TNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TNodeTChildrenList_ConstructProps extends Gee.AbstractBidirList_ConstructProps {
}
class TNodeTChildrenList {
    /* Properties of Gee-0.8.Gee.AbstractBidirList */
    readonly readOnlyView: Gee.BidirList
    /* Properties of Gee-0.8.Gee.AbstractCollection */
    readonly size: number
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gee-0.8.Gee.AbstractBidirList */
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void
    reserved1(): void
    reserved2(): void
    reserved3(): void
    reserved4(): void
    reserved5(): void
    reserved6(): void
    reserved7(): void
    reserved8(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList
    /* Methods of Gee-0.8.Gee.AbstractList */
    listIterator(): Gee.ListIterator
    get(index: number): object | null
    set(index: number, item?: object | null): void
    indexOf(item?: object | null): number
    insert(index: number, item?: object | null): void
    removeAt(index: number): object | null
    slice(start: number, stop: number): Gee.List | null
    getReadOnlyView(): Gee.List
    /* Methods of Gee-0.8.Gee.AbstractCollection */
    contains(item?: object | null): boolean
    add(item?: object | null): boolean
    remove(item?: object | null): boolean
    clear(): void
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean
    getSize(): number
    getReadOnly(): boolean
    getReadOnlyView(): Gee.Collection
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TNodeTChildrenList_ConstructProps)
    _init (config?: TNodeTChildrenList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(e: Node): TNodeTChildrenList
    static $gtype: GObject.Type
}
interface TProcessingInstruction_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.ProcessingInstruction */
    data?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TProcessingInstruction {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.ProcessingInstruction */
    readonly target: string
    data: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.ProcessingInstruction */
    getTarget(): string
    getData(): string
    setData(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TProcessingInstruction_ConstructProps)
    _init (config?: TProcessingInstruction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(doc: Document, target: string, data: string): TProcessingInstruction
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface TText_ConstructProps extends TNode_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Text */
    str?: string
    /* Constructor properties of GXml-0.18.GXml.Node */
    value?: string
}
class TText {
    /* Properties of GXml-0.18.GXml.TNode */
    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    /* Properties of GXml-0.18.GXml.Text */
    str: string
    /* Fields of GXml-0.18.GXml.TNode */
    readonly parentInstance: GObject.Object
    readonly priv: TNodePrivate
    readonly name: string
    readonly value: string
    readonly doc: Document
    readonly parent: Node
    readonly nodeType: NodeType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.TNode */
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string
    setParent(node: Node): void
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document
    getName(): string
    getNamespaces(): Gee.List
    getTypeNode(): NodeType
    getValue(): string
    setValue(value: string): void
    getParent(): Node
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Text */
    getStr(): string
    setStr(value: string): void
    /* Methods of GXml-0.18.GXml.Node */
    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string
    nsUri(): string
    setValue(value: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attrs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::str", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: TText_ConstructProps)
    _init (config?: TText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(d: Document, text: string): TText
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static $gtype: GObject.Type
}
interface XParser_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GXml-0.18.GXml.Parser */
    backup?: boolean
    indent?: boolean
}
class XParser {
    /* Properties of GXml-0.18.GXml.Parser */
    backup: boolean
    indent: boolean
    readonly node: DomNode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GXml-0.18.GXml.XParser */
    readNode(node: DomNode): void
    readChildNodesStreamAsync(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readChildNodesStreamFinish(res: Gio.AsyncResult): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of GXml-0.18.GXml.Parser */
    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeString(): string
    writeStringAsync(callback?: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    readFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFileAsync(file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readFileFinish(res: Gio.AsyncResult): void
    readStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readStreamAsync(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readStreamFinish(res: Gio.AsyncResult): void
    readString(str: string, cancellable?: Gio.Cancellable | null): void
    readStringAsync(str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    readStringFinish(res: Gio.AsyncResult): void
    createStream(cancellable?: Gio.Cancellable | null): Gio.InputStream
    createStreamAsync(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    readChildNodes(parent: DomNode): void
    readChildNodesAsync(parent: DomNode, callback?: Gio.AsyncReadyCallback | null): void
    readChildNodesFinish(res: Gio.AsyncResult): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    addElementCollection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    readChildNodesStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readChildNodesString(str: string, cancellable?: Gio.Cancellable | null): void
    readUnparsed(): string
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getNode(): DomNode
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::backup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: XParser_ConstructProps)
    _init (config?: XParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(node: DomNode): XParser
    static $gtype: GObject.Type
}
abstract class CssSelectorDataClass {
    /* Fields of GXml-0.18.GXml.CssSelectorDataClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class CssSelectorDataPrivate {
    static name: string
}
abstract class CssSelectorParserClass {
    /* Fields of GXml-0.18.GXml.CssSelectorParserClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class CssSelectorParserPrivate {
    static name: string
}
abstract class DomNodeFilterClass {
    /* Fields of GXml-0.18.GXml.DomNodeFilterClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class DomNodeFilterPrivate {
    static name: string
}
abstract class DomElementListClass {
    /* Fields of GXml-0.18.GXml.DomElementListClass */
    readonly parentClass: Gee.ArrayListClass
    static name: string
}
class DomElementListPrivate {
    static name: string
}
abstract class DomEventInitClass {
    /* Fields of GXml-0.18.GXml.DomEventInitClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class DomEventInitPrivate {
    static name: string
}
abstract class DomCustomEventInitClass {
    /* Fields of GXml-0.18.GXml.DomCustomEventInitClass */
    readonly parentClass: DomEventInitClass
    static name: string
}
class DomCustomEventInitPrivate {
    static name: string
}
abstract class DomTimeStampClass {
    /* Fields of GXml-0.18.GXml.DomTimeStampClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class DomTimeStampPrivate {
    static name: string
}
abstract class DomMutationObserverInitClass {
    /* Fields of GXml-0.18.GXml.DomMutationObserverInitClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class DomMutationObserverInitPrivate {
    static name: string
}
abstract class DomErrorNameClass {
    /* Fields of GXml-0.18.GXml.DomErrorNameClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class DomErrorNamePrivate {
    static name: string
}
abstract class ElementListClass {
    /* Fields of GXml-0.18.GXml.ElementListClass */
    readonly parentClass: Gee.ArrayListClass
    static name: string
}
class ElementListPrivate {
    static name: string
}
class Enumeration {
    static name: string
    static new(): Enumeration
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Enumeration
    static getNick(enumeration: GObject.Type, val: number): string
    static getNickCamelcase(enumeration: GObject.Type, val: number): string
    static getString(enumeration: GObject.Type, val: number, useNick: boolean, camelcase: boolean): string
    static parse(enumeration: GObject.Type, val: string): GObject.EnumValue | null
    static toArray(enumeration: GObject.Type): GObject.EnumValue[]
    static parseInteger(enumeration: GObject.Type, val: number): GObject.EnumValue | null
    static toStringArray(enumeration: GObject.Type): string[]
}
abstract class GHtmlDocumentClass {
    /* Fields of GXml-0.18.GXml.GHtmlDocumentClass */
    readonly parentClass: GDocumentClass
    static name: string
}
class GHtmlDocumentPrivate {
    static name: string
}
abstract class GomAttrClass {
    /* Fields of GXml-0.18.GXml.GomAttrClass */
    readonly parentClass: GomNodeClass
    static name: string
}
class GomAttrPrivate {
    static name: string
}
abstract class BaseCollectionClass {
    /* Fields of GXml-0.18.GXml.BaseCollectionClass */
    readonly parentClass: GObject.ObjectClass
    readonly validateAppend: (self: BaseCollection, index: number, element: DomElement) => boolean
    readonly clear: (self: BaseCollection) => void
    static name: string
}
class BaseCollectionPrivate {
    static name: string
}
abstract class GomArrayListClass {
    /* Fields of GXml-0.18.GXml.GomArrayListClass */
    readonly parentClass: BaseCollectionClass
    static name: string
}
class GomArrayListPrivate {
    static name: string
}
abstract class GomHashMapClass {
    /* Fields of GXml-0.18.GXml.GomHashMapClass */
    readonly parentClass: BaseCollectionClass
    static name: string
}
class GomHashMapPrivate {
    static name: string
}
abstract class GomHashPairedMapClass {
    /* Fields of GXml-0.18.GXml.GomHashPairedMapClass */
    readonly parentClass: BaseCollectionClass
    static name: string
}
class GomHashPairedMapPrivate {
    static name: string
}
abstract class GomHashThreeMapClass {
    /* Fields of GXml-0.18.GXml.GomHashThreeMapClass */
    readonly parentClass: BaseCollectionClass
    static name: string
}
class GomHashThreeMapPrivate {
    static name: string
}
abstract class GomDocumentClass {
    /* Fields of GXml-0.18.GXml.GomDocumentClass */
    readonly parentClass: GomNodeClass
    static name: string
}
class GomDocumentPrivate {
    static name: string
}
abstract class GomImplementationClass {
    /* Fields of GXml-0.18.GXml.GomImplementationClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GomImplementationPrivate {
    static name: string
}
abstract class GomDocumentTypeClass {
    /* Fields of GXml-0.18.GXml.GomDocumentTypeClass */
    readonly parentClass: GomNodeClass
    static name: string
}
class GomDocumentTypePrivate {
    static name: string
}
abstract class GomDocumentFragmentClass {
    /* Fields of GXml-0.18.GXml.GomDocumentFragmentClass */
    readonly parentClass: GomNodeClass
    static name: string
}
class GomDocumentFragmentPrivate {
    static name: string
}
abstract class GomElementClass {
    /* Fields of GXml-0.18.GXml.GomElementClass */
    readonly parentClass: GomNodeClass
    static name: string
}
class GomElementPrivate {
    static name: string
}
abstract class GomElementAttributesClass {
    /* Fields of GXml-0.18.GXml.GomElementAttributesClass */
    readonly parentClass: Gee.HashMapClass
    static name: string
}
class GomElementAttributesPrivate {
    static name: string
}
abstract class GomNodeClass {
    /* Fields of GXml-0.18.GXml.GomNodeClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GomNodePrivate {
    static name: string
}
abstract class GomNodeListClass {
    /* Fields of GXml-0.18.GXml.GomNodeListClass */
    readonly parentClass: Gee.ArrayListClass
    static name: string
}
class GomNodeListPrivate {
    static name: string
}
abstract class GomBasePropertyClass {
    /* Fields of GXml-0.18.GXml.GomBasePropertyClass */
    readonly parentClass: GObject.ObjectClass
    readonly validateValue: (self: GomBaseProperty, val: string) => boolean
    static name: string
}
class GomBasePropertyPrivate {
    static name: string
}
abstract class GomStringClass {
    /* Fields of GXml-0.18.GXml.GomStringClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomStringPrivate {
    static name: string
}
abstract class GomArrayStringClass {
    /* Fields of GXml-0.18.GXml.GomArrayStringClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomArrayStringPrivate {
    static name: string
}
abstract class GomXsdArrayStringClass {
    /* Fields of GXml-0.18.GXml.GomXsdArrayStringClass */
    readonly parentClass: GomArrayStringClass
    static name: string
}
class GomXsdArrayStringPrivate {
    static name: string
}
abstract class GomDoubleClass {
    /* Fields of GXml-0.18.GXml.GomDoubleClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomDoublePrivate {
    static name: string
}
abstract class GomFloatClass {
    /* Fields of GXml-0.18.GXml.GomFloatClass */
    readonly parentClass: GomDoubleClass
    static name: string
}
class GomFloatPrivate {
    static name: string
}
abstract class GomIntClass {
    /* Fields of GXml-0.18.GXml.GomIntClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomIntPrivate {
    static name: string
}
abstract class GomBooleanClass {
    /* Fields of GXml-0.18.GXml.GomBooleanClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomBooleanPrivate {
    static name: string
}
abstract class GomEnumClass {
    /* Fields of GXml-0.18.GXml.GomEnumClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomEnumPrivate {
    static name: string
}
abstract class GomDateClass {
    /* Fields of GXml-0.18.GXml.GomDateClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomDatePrivate {
    static name: string
}
abstract class GomDateTimeClass {
    /* Fields of GXml-0.18.GXml.GomDateTimeClass */
    readonly parentClass: GomBasePropertyClass
    static name: string
}
class GomDateTimePrivate {
    static name: string
}
abstract class GomXsdSchemaClass {
    /* Fields of GXml-0.18.GXml.GomXsdSchemaClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdSchemaPrivate {
    static name: string
}
abstract class GomXsdSimpleTypeClass {
    /* Fields of GXml-0.18.GXml.GomXsdSimpleTypeClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdSimpleTypePrivate {
    static name: string
}
abstract class GomXsdTypeDefinitionClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeDefinitionClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdTypeDefinitionPrivate {
    static name: string
}
abstract class GomXsdTypeListClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeListClass */
    readonly parentClass: GomXsdTypeDefinitionClass
    static name: string
}
class GomXsdTypeListPrivate {
    static name: string
}
abstract class GomXsdTypeUnionClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeUnionClass */
    readonly parentClass: GomXsdTypeDefinitionClass
    static name: string
}
class GomXsdTypeUnionPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionClass */
    readonly parentClass: GomXsdTypeDefinitionClass
    static name: string
}
class GomXsdTypeRestrictionPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionDefClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionDefClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdTypeRestrictionDefPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionMinExclusiveClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionMinExclusiveClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionMinExclusivePrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionMinInclusiveClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionMinInclusiveClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionMinInclusivePrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionMaxExclusiveClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionMaxExclusiveClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionMaxExclusivePrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionMaxInclusiveClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionMaxInclusiveClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionMaxInclusivePrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionTotalDigitsClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionTotalDigitsClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionTotalDigitsPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionFractionDigitsClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionFractionDigitsClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionFractionDigitsPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionLengthClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionLengthClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionLengthPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionMinLengthClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionMinLengthClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionMinLengthPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionMaxLengthClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionMaxLengthClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionMaxLengthPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionEnumerationClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionEnumerationClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionEnumerationPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionWhiteSpaceClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionWhiteSpaceClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionWhiteSpacePrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionWhiteSpaceFixedClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionWhiteSpaceFixedClass */
    readonly parentClass: GomBooleanClass
    static name: string
}
class GomXsdTypeRestrictionWhiteSpaceFixedPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionPatternClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionPatternClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionPatternPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionAssertionClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionAssertionClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionAssertionPrivate {
    static name: string
}
abstract class GomXsdTypeRestrictionExplicitTimezoneClass {
    /* Fields of GXml-0.18.GXml.GomXsdTypeRestrictionExplicitTimezoneClass */
    readonly parentClass: GomXsdTypeRestrictionDefClass
    static name: string
}
class GomXsdTypeRestrictionExplicitTimezonePrivate {
    static name: string
}
abstract class GomXsdComplexTypeClass {
    /* Fields of GXml-0.18.GXml.GomXsdComplexTypeClass */
    readonly parentClass: GomXsdBaseTypeClass
    static name: string
}
class GomXsdComplexTypePrivate {
    static name: string
}
abstract class GomXsdExtensionClass {
    /* Fields of GXml-0.18.GXml.GomXsdExtensionClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdExtensionPrivate {
    static name: string
}
abstract class GomXsdElementClass {
    /* Fields of GXml-0.18.GXml.GomXsdElementClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdElementPrivate {
    static name: string
}
abstract class GomXsdAnnotationClass {
    /* Fields of GXml-0.18.GXml.GomXsdAnnotationClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdAnnotationPrivate {
    static name: string
}
abstract class GomXsdBaseTypeClass {
    /* Fields of GXml-0.18.GXml.GomXsdBaseTypeClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdBaseTypePrivate {
    static name: string
}
abstract class GomXsdBaseContentClass {
    /* Fields of GXml-0.18.GXml.GomXsdBaseContentClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdBaseContentPrivate {
    static name: string
}
abstract class GomXsdSimpleContentClass {
    /* Fields of GXml-0.18.GXml.GomXsdSimpleContentClass */
    readonly parentClass: GomXsdBaseContentClass
    static name: string
}
class GomXsdSimpleContentPrivate {
    static name: string
}
abstract class GomXsdComplexContentClass {
    /* Fields of GXml-0.18.GXml.GomXsdComplexContentClass */
    readonly parentClass: GomXsdBaseContentClass
    static name: string
}
class GomXsdComplexContentPrivate {
    static name: string
}
abstract class GomXsdOpenContentClass {
    /* Fields of GXml-0.18.GXml.GomXsdOpenContentClass */
    readonly parentClass: GomXsdBaseContentClass
    static name: string
}
class GomXsdOpenContentPrivate {
    static name: string
}
abstract class GomXsdBaseAttributeClass {
    /* Fields of GXml-0.18.GXml.GomXsdBaseAttributeClass */
    readonly parentClass: GomElementClass
    static name: string
}
class GomXsdBaseAttributePrivate {
    static name: string
}
abstract class GomXsdAttributeClass {
    /* Fields of GXml-0.18.GXml.GomXsdAttributeClass */
    readonly parentClass: GomXsdBaseAttributeClass
    static name: string
}
class GomXsdAttributePrivate {
    static name: string
}
abstract class GomXsdAttributeGroupClass {
    /* Fields of GXml-0.18.GXml.GomXsdAttributeGroupClass */
    readonly parentClass: GomXsdBaseAttributeClass
    static name: string
}
class GomXsdAttributeGroupPrivate {
    static name: string
}
abstract class GomXsdListClass {
    /* Fields of GXml-0.18.GXml.GomXsdListClass */
    readonly parentClass: GomArrayListClass
    static name: string
}
class GomXsdListPrivate {
    static name: string
}
abstract class GomXsdListElementsClass {
    /* Fields of GXml-0.18.GXml.GomXsdListElementsClass */
    readonly parentClass: GomXsdListClass
    static name: string
}
class GomXsdListElementsPrivate {
    static name: string
}
abstract class GomXsdListSimpleTypesClass {
    /* Fields of GXml-0.18.GXml.GomXsdListSimpleTypesClass */
    readonly parentClass: GomXsdListClass
    static name: string
}
class GomXsdListSimpleTypesPrivate {
    static name: string
}
abstract class GomXsdListComplexTypesClass {
    /* Fields of GXml-0.18.GXml.GomXsdListComplexTypesClass */
    readonly parentClass: GomXsdListClass
    static name: string
}
class GomXsdListComplexTypesPrivate {
    static name: string
}
abstract class GomXsdListTypeRestrictionEnumerationsClass {
    /* Fields of GXml-0.18.GXml.GomXsdListTypeRestrictionEnumerationsClass */
    readonly parentClass: GomXsdListClass
    static name: string
}
class GomXsdListTypeRestrictionEnumerationsPrivate {
    static name: string
}
abstract class GomXsdListTypeRestrictionWhiteSpacesClass {
    /* Fields of GXml-0.18.GXml.GomXsdListTypeRestrictionWhiteSpacesClass */
    readonly parentClass: GomXsdListClass
    static name: string
}
class GomXsdListTypeRestrictionWhiteSpacesPrivate {
    static name: string
}
abstract class GomCharacterDataClass {
    /* Fields of GXml-0.18.GXml.GomCharacterDataClass */
    readonly parentClass: GomNodeClass
    static name: string
}
class GomCharacterDataPrivate {
    static name: string
}
abstract class GomTextClass {
    /* Fields of GXml-0.18.GXml.GomTextClass */
    readonly parentClass: GomCharacterDataClass
    static name: string
}
class GomTextPrivate {
    static name: string
}
abstract class GomProcessingInstructionClass {
    /* Fields of GXml-0.18.GXml.GomProcessingInstructionClass */
    readonly parentClass: GomCharacterDataClass
    static name: string
}
class GomProcessingInstructionPrivate {
    static name: string
}
abstract class GomCommentClass {
    /* Fields of GXml-0.18.GXml.GomCommentClass */
    readonly parentClass: GomCharacterDataClass
    static name: string
}
class GomCommentPrivate {
    static name: string
}
abstract class GAttributeClass {
    /* Fields of GXml-0.18.GXml.GAttributeClass */
    readonly parentClass: GNodeClass
    static name: string
}
class GAttributePrivate {
    static name: string
}
abstract class GCDATAClass {
    /* Fields of GXml-0.18.GXml.GCDATAClass */
    readonly parentClass: GNodeClass
    static name: string
}
class GCDATAPrivate {
    static name: string
}
abstract class GCharacterDataClass {
    /* Fields of GXml-0.18.GXml.GCharacterDataClass */
    readonly parentClass: GNonDocumentChildNodeClass
    static name: string
}
class GCharacterDataPrivate {
    static name: string
}
abstract class GChildNodeClass {
    /* Fields of GXml-0.18.GXml.GChildNodeClass */
    readonly parentClass: GNodeClass
    static name: string
}
class GChildNodePrivate {
    static name: string
}
abstract class GNonDocumentChildNodeClass {
    /* Fields of GXml-0.18.GXml.GNonDocumentChildNodeClass */
    readonly parentClass: GChildNodeClass
    static name: string
}
class GNonDocumentChildNodePrivate {
    static name: string
}
abstract class GCommentClass {
    /* Fields of GXml-0.18.GXml.GCommentClass */
    readonly parentClass: GCharacterDataClass
    static name: string
}
class GCommentPrivate {
    static name: string
}
abstract class GDocumentClass {
    /* Fields of GXml-0.18.GXml.GDocumentClass */
    readonly parentClass: GNodeClass
    readonly save: (self: GDocument, cancellable?: Gio.Cancellable | null) => boolean
    readonly saveAs: (self: GDocument, f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    static name: string
}
class GDocumentPrivate {
    static name: string
}
abstract class GImplementationClass {
    /* Fields of GXml-0.18.GXml.GImplementationClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GImplementationPrivate {
    static name: string
}
abstract class GDocumentTypeClass {
    /* Fields of GXml-0.18.GXml.GDocumentTypeClass */
    readonly parentClass: GChildNodeClass
    static name: string
}
class GDocumentTypePrivate {
    static name: string
}
abstract class GDocumentFragmentClass {
    /* Fields of GXml-0.18.GXml.GDocumentFragmentClass */
    readonly parentClass: GDocumentClass
    static name: string
}
class GDocumentFragmentPrivate {
    static name: string
}
abstract class GDomNodeIteratorClass {
    /* Fields of GXml-0.18.GXml.GDomNodeIteratorClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GDomNodeIteratorPrivate {
    static name: string
}
abstract class GDomTreeWalkerClass {
    /* Fields of GXml-0.18.GXml.GDomTreeWalkerClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GDomTreeWalkerPrivate {
    static name: string
}
abstract class GDomTokenListClass {
    /* Fields of GXml-0.18.GXml.GDomTokenListClass */
    readonly parentClass: Gee.ArrayListClass
    static name: string
}
class GDomTokenListPrivate {
    static name: string
}
abstract class GDomSettableTokenListClass {
    /* Fields of GXml-0.18.GXml.GDomSettableTokenListClass */
    readonly parentClass: GDomTokenListClass
    static name: string
}
class GDomSettableTokenListPrivate {
    static name: string
}
abstract class GDomHTMLCollectionClass {
    /* Fields of GXml-0.18.GXml.GDomHTMLCollectionClass */
    readonly parentClass: Gee.ArrayListClass
    static name: string
}
class GDomHTMLCollectionPrivate {
    static name: string
}
abstract class GDomEventClass {
    /* Fields of GXml-0.18.GXml.GDomEventClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GDomEventPrivate {
    static name: string
}
abstract class GDomCustomEventClass {
    /* Fields of GXml-0.18.GXml.GDomCustomEventClass */
    readonly parentClass: GDomEventClass
    static name: string
}
class GDomCustomEventPrivate {
    static name: string
}
abstract class GDomRangeClass {
    /* Fields of GXml-0.18.GXml.GDomRangeClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GDomRangePrivate {
    static name: string
}
abstract class GElementClass {
    /* Fields of GXml-0.18.GXml.GElementClass */
    readonly parentClass: GNonDocumentChildNodeClass
    static name: string
}
class GElementPrivate {
    static name: string
}
abstract class GHashMapAttrClass {
    /* Fields of GXml-0.18.GXml.GHashMapAttrClass */
    readonly parentClass: Gee.AbstractMapClass
    static name: string
}
class GHashMapAttrPrivate {
    static name: string
}
abstract class GHashMapAttrEntryClass {
    /* Fields of GXml-0.18.GXml.GHashMapAttrEntryClass */
    readonly parentClass: Gee.MapEntryClass
    static name: string
}
class GHashMapAttrEntryPrivate {
    static name: string
}
abstract class GHashMapAttrIteratorClass {
    /* Fields of GXml-0.18.GXml.GHashMapAttrIteratorClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GHashMapAttrIteratorPrivate {
    static name: string
}
abstract class GListChildrenClass {
    /* Fields of GXml-0.18.GXml.GListChildrenClass */
    readonly parentClass: Gee.AbstractBidirListClass
    static name: string
}
class GListChildrenPrivate {
    static name: string
}
abstract class GListChildrenIteratorClass {
    /* Fields of GXml-0.18.GXml.GListChildrenIteratorClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GListChildrenIteratorPrivate {
    static name: string
}
abstract class GListNamespacesClass {
    /* Fields of GXml-0.18.GXml.GListNamespacesClass */
    readonly parentClass: Gee.AbstractListClass
    static name: string
}
class GListNamespacesPrivate {
    static name: string
}
abstract class GListNamespacesIteratorClass {
    /* Fields of GXml-0.18.GXml.GListNamespacesIteratorClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GListNamespacesIteratorPrivate {
    static name: string
}
abstract class GNamespaceClass {
    /* Fields of GXml-0.18.GXml.GNamespaceClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GNamespacePrivate {
    static name: string
}
abstract class GNodeClass {
    /* Fields of GXml-0.18.GXml.GNodeClass */
    readonly parentClass: GObject.ObjectClass
    readonly setNamespace: (self: GNode, uri: string, prefix?: string | null) => boolean
    readonly toString: (self: GNode) => string
    static name: string
}
class GNodePrivate {
    static name: string
}
abstract class GProcessingInstructionClass {
    /* Fields of GXml-0.18.GXml.GProcessingInstructionClass */
    readonly parentClass: GCharacterDataClass
    static name: string
}
class GProcessingInstructionPrivate {
    static name: string
}
abstract class GTextClass {
    /* Fields of GXml-0.18.GXml.GTextClass */
    readonly parentClass: GCharacterDataClass
    static name: string
}
class GTextPrivate {
    static name: string
}
abstract class GXPathObjectClass {
    /* Fields of GXml-0.18.GXml.GXPathObjectClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class GXPathObjectPrivate {
    static name: string
}
abstract class NodeListClass {
    /* Fields of GXml-0.18.GXml.NodeListClass */
    readonly parentClass: Gee.ArrayListClass
    static name: string
}
class NodeListPrivate {
    static name: string
}
abstract class SerializableBoolClass {
    /* Fields of GXml-0.18.GXml.SerializableBoolClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class SerializableBoolPrivate {
    static name: string
}
abstract class SerializableContainerClass {
    /* Fields of GXml-0.18.GXml.SerializableContainerClass */
    readonly parentClass: SerializableObjectModelClass
    readonly initContainers: (self: SerializableContainer) => void
    static name: string
}
class SerializableContainerPrivate {
    static name: string
}
abstract class SerializableDoubleClass {
    /* Fields of GXml-0.18.GXml.SerializableDoubleClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class SerializableDoublePrivate {
    static name: string
}
abstract class SerializableEnumClass {
    /* Fields of GXml-0.18.GXml.SerializableEnumClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class SerializableEnumPrivate {
    static name: string
}
abstract class SerializableFloatClass {
    /* Fields of GXml-0.18.GXml.SerializableFloatClass */
    readonly parentClass: SerializableDoubleClass
    static name: string
}
class SerializableFloatPrivate {
    static name: string
}
abstract class SerializableArrayListClass {
    /* Fields of GXml-0.18.GXml.SerializableArrayListClass */
    readonly parentClass: Gee.ArrayListClass
    readonly deserializeProceed: (self: SerializableArrayList) => boolean
    readonly deserialized: (self: SerializableArrayList) => boolean
    readonly deserializeNode: (self: SerializableArrayList, node: Node) => boolean
    readonly deserializeChildren: (self: SerializableArrayList) => boolean
    readonly setDefaultNamespace: (self: SerializableArrayList, node: Node) => boolean
    readonly serializeUseXmlNodeValue: (self: SerializableArrayList) => boolean
    readonly propertyUseNick: (self: SerializableArrayList) => boolean
    readonly nodeName: (self: SerializableArrayList) => string
    readonly findPropertySpec: (self: SerializableArrayList, propertyName: string) => GObject.ParamSpec | null
    readonly listSerializableProperties: (self: SerializableArrayList) => GObject.ParamSpec[]
    readonly serialize: (self: SerializableArrayList, node: Node) => Node | null
    readonly serializeProperty: (self: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => Node | null
    readonly deserialize: (self: SerializableArrayList, node: Node) => boolean
    readonly deserializeProperty: (self: SerializableArrayList, propertyNode: Node) => boolean
    static name: string
}
class SerializableArrayListPrivate {
    static name: string
}
abstract class SerializableDualKeyMapClass {
    /* Fields of GXml-0.18.GXml.SerializableDualKeyMapClass */
    readonly parentClass: GObject.ObjectClass
    readonly deserializeProceed: (self: SerializableDualKeyMap) => boolean
    readonly deserialized: (self: SerializableDualKeyMap) => boolean
    readonly deserializeNode: (self: SerializableDualKeyMap, node: Node) => boolean
    readonly deserializeChildren: (self: SerializableDualKeyMap) => boolean
    readonly setDefaultNamespace: (self: SerializableDualKeyMap, node: Node) => boolean
    readonly getEnableUnknownSerializableProperty: (self: SerializableDualKeyMap) => boolean
    readonly serializeUseXmlNodeValue: (self: SerializableDualKeyMap) => boolean
    readonly propertyUseNick: (self: SerializableDualKeyMap) => boolean
    readonly nodeName: (self: SerializableDualKeyMap) => string
    readonly findPropertySpec: (self: SerializableDualKeyMap, propertyName: string) => GObject.ParamSpec | null
    readonly listSerializableProperties: (self: SerializableDualKeyMap) => GObject.ParamSpec[]
    readonly serialize: (self: SerializableDualKeyMap, node: Node) => Node | null
    readonly serializeProperty: (self: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => Node | null
    readonly deserialize: (self: SerializableDualKeyMap, node: Node) => boolean
    readonly deserializeProperty: (self: SerializableDualKeyMap, propertyNode: Node) => boolean
    static name: string
}
class SerializableDualKeyMapPrivate {
    static name: string
}
abstract class SerializableHashMapClass {
    /* Fields of GXml-0.18.GXml.SerializableHashMapClass */
    readonly parentClass: Gee.HashMapClass
    readonly deserializeProceed: (self: SerializableHashMap) => boolean
    readonly deserialized: (self: SerializableHashMap) => boolean
    readonly deserializeNode: (self: SerializableHashMap, node: Node) => boolean
    readonly deserializeChildren: (self: SerializableHashMap) => boolean
    readonly setDefaultNamespace: (self: SerializableHashMap, node: Node) => boolean
    readonly getEnableUnknownSerializableProperty: (self: SerializableHashMap) => boolean
    readonly serializeUseXmlNodeValue: (self: SerializableHashMap) => boolean
    readonly propertyUseNick: (self: SerializableHashMap) => boolean
    readonly nodeName: (self: SerializableHashMap) => string
    readonly findPropertySpec: (self: SerializableHashMap, propertyName: string) => GObject.ParamSpec | null
    readonly listSerializableProperties: (self: SerializableHashMap) => GObject.ParamSpec[]
    readonly serialize: (self: SerializableHashMap, node: Node) => Node | null
    readonly serializeProperty: (self: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => Node | null
    readonly deserialize: (self: SerializableHashMap, node: Node) => boolean
    readonly deserializeProperty: (self: SerializableHashMap, propertyNode: Node) => boolean
    static name: string
}
class SerializableHashMapPrivate {
    static name: string
}
abstract class SerializableTreeMapClass {
    /* Fields of GXml-0.18.GXml.SerializableTreeMapClass */
    readonly parentClass: Gee.TreeMapClass
    readonly deserializeProceed: (self: SerializableTreeMap) => boolean
    readonly deserialized: (self: SerializableTreeMap) => boolean
    readonly deserializeNode: (self: SerializableTreeMap, node: Node) => boolean
    readonly deserializeChildren: (self: SerializableTreeMap) => boolean
    readonly setDefaultNamespace: (self: SerializableTreeMap, node: Node) => boolean
    readonly serializeUseXmlNodeValue: (self: SerializableTreeMap) => boolean
    readonly propertyUseNick: (self: SerializableTreeMap) => boolean
    readonly nodeName: (self: SerializableTreeMap) => string
    readonly findPropertySpec: (self: SerializableTreeMap, propertyName: string) => GObject.ParamSpec | null
    readonly listSerializableProperties: (self: SerializableTreeMap) => GObject.ParamSpec[]
    readonly serialize: (self: SerializableTreeMap, node: Node) => Node | null
    readonly serializeProperty: (self: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => Node | null
    readonly deserialize: (self: SerializableTreeMap, node: Node) => boolean
    readonly deserializeProperty: (self: SerializableTreeMap, propertyNode: Node) => boolean
    static name: string
}
class SerializableTreeMapPrivate {
    static name: string
}
abstract class SerializableIntClass {
    /* Fields of GXml-0.18.GXml.SerializableIntClass */
    readonly parentClass: SerializableDoubleClass
    static name: string
}
class SerializableIntPrivate {
    static name: string
}
abstract class SerializableObjectModelClass {
    /* Fields of GXml-0.18.GXml.SerializableObjectModelClass */
    readonly parentClass: GObject.ObjectClass
    readonly getEnableUnknownSerializableProperty: (self: SerializableObjectModel) => boolean
    readonly serializeUseXmlNodeValue: (self: SerializableObjectModel) => boolean
    readonly propertyUseNick: (self: SerializableObjectModel) => boolean
    readonly setDefaultNamespace: (self: SerializableObjectModel, node: Node) => boolean
    readonly nodeName: (self: SerializableObjectModel) => string
    readonly findPropertySpec: (self: SerializableObjectModel, propertyName: string) => GObject.ParamSpec | null
    readonly listSerializableProperties: (self: SerializableObjectModel) => GObject.ParamSpec[]
    readonly serialize: (self: SerializableObjectModel, node: Node) => Node | null
    readonly serializeProperty: (self: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => Node | null
    readonly deserialize: (self: SerializableObjectModel, node: Node) => boolean
    readonly deserializeProperty: (self: SerializableObjectModel, propertyNode: Node) => boolean
    readonly toString: (self: SerializableObjectModel) => string
    static name: string
}
class SerializableObjectModelPrivate {
    static name: string
}
abstract class SerializableValueListClass {
    /* Fields of GXml-0.18.GXml.SerializableValueListClass */
    readonly parentClass: GObject.ObjectClass
    readonly getValues: (self: SerializableValueList) => Gee.List
    readonly addValues: (self: SerializableValueList, vals: string[]) => void
    readonly getValueAt: (self: SerializableValueList, index: number) => string | null
    readonly selectValueAt: (self: SerializableValueList, index: number) => void
    readonly getValuesArray: (self: SerializableValueList) => string[]
    readonly isValue: (self: SerializableValueList) => boolean
    static name: string
}
class SerializableValueListPrivate {
    static name: string
}
abstract class TAttributeClass {
    /* Fields of GXml-0.18.GXml.TAttributeClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TAttributePrivate {
    static name: string
}
abstract class TCDATAClass {
    /* Fields of GXml-0.18.GXml.TCDATAClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TCDATAPrivate {
    static name: string
}
abstract class TCommentClass {
    /* Fields of GXml-0.18.GXml.TCommentClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TCommentPrivate {
    static name: string
}
abstract class TDocumentClass {
    /* Fields of GXml-0.18.GXml.TDocumentClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TDocumentPrivate {
    static name: string
}
abstract class TElementClass {
    /* Fields of GXml-0.18.GXml.TElementClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TElementPrivate {
    static name: string
}
abstract class TNamespaceClass {
    /* Fields of GXml-0.18.GXml.TNamespaceClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TNamespacePrivate {
    static name: string
}
abstract class TNodeClass {
    /* Fields of GXml-0.18.GXml.TNodeClass */
    readonly parentClass: GObject.ObjectClass
    readonly setNamespace: (self: TNode, uri: string, prefix?: string | null) => boolean
    readonly toString: (self: TNode) => string
    readonly setParent: (self: TNode, node: Node) => void
    static name: string
}
class TNodePrivate {
    static name: string
}
abstract class TNodeTChildrenListClass {
    /* Fields of GXml-0.18.GXml.TNodeTChildrenListClass */
    readonly parentClass: Gee.AbstractBidirListClass
    static name: string
}
class TNodeTChildrenListPrivate {
    static name: string
}
abstract class TProcessingInstructionClass {
    /* Fields of GXml-0.18.GXml.TProcessingInstructionClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TProcessingInstructionPrivate {
    static name: string
}
abstract class TTextClass {
    /* Fields of GXml-0.18.GXml.TTextClass */
    readonly parentClass: TNodeClass
    static name: string
}
class TTextPrivate {
    static name: string
}
abstract class XParserClass {
    /* Fields of GXml-0.18.GXml.XParserClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class XParserPrivate {
    static name: string
}
abstract class CollectionIface {
    /* Fields of GXml-0.18.GXml.CollectionIface */
    readonly parentIface: GObject.TypeInterface
    readonly search: (self: Collection) => void
    readonly getItem: (self: Collection, index: number) => DomElement | null
    readonly append: (self: Collection, node: DomElement) => void
    readonly initialize: (self: Collection, t: GObject.Type) => void
    readonly createItem: (self: Collection) => DomElement | null
    readonly validateAppend: (self: Collection, index: number, element: DomElement) => boolean
    readonly clear: (self: Collection) => void
    readonly getNodesIndex: (self: Collection) => GLib.Queue
    readonly getElement: (self: Collection) => DomElement
    readonly setElement: (self: Collection, value: DomElement) => void
    readonly getItemsName: (self: Collection) => string
    readonly getItemsType: (self: Collection) => GObject.Type
    readonly setItemsType: (self: Collection, value: GObject.Type) => void
    readonly getLength: (self: Collection) => number
    static name: string
}
abstract class ListIface {
    /* Fields of GXml-0.18.GXml.ListIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class MappeableElementIface {
    /* Fields of GXml-0.18.GXml.MappeableElementIface */
    readonly parentIface: GObject.TypeInterface
    readonly getMapKey: (self: MappeableElement) => string
    static name: string
}
abstract class MapIface {
    /* Fields of GXml-0.18.GXml.MapIface */
    readonly parentIface: GObject.TypeInterface
    readonly item: (self: Map, key: string) => DomElement | null
    readonly hasKey: (self: Map, key: string) => boolean
    readonly getAttributeKey: (self: Map) => string
    readonly setAttributeKey: (self: Map, value: string) => void
    readonly getKeysSet: (self: Map) => Gee.Set
    static name: string
}
abstract class MappeableElementPairKeyIface {
    /* Fields of GXml-0.18.GXml.MappeableElementPairKeyIface */
    readonly parentIface: GObject.TypeInterface
    readonly getMapPrimaryKey: (self: MappeableElementPairKey) => string
    readonly getMapSecondaryKey: (self: MappeableElementPairKey) => string
    static name: string
}
abstract class PairedMapIface {
    /* Fields of GXml-0.18.GXml.PairedMapIface */
    readonly parentIface: GObject.TypeInterface
    readonly item: (self: PairedMap, primaryKey: string, secondaryKey: string) => DomElement | null
    readonly hasPrimaryKey: (self: PairedMap, key: string) => boolean
    readonly hasSecondaryKey: (self: PairedMap, pkey: string, key: string) => boolean
    readonly secondaryKeysSet: (self: PairedMap, pkey: string) => Gee.Set
    readonly getAttributePrimaryKey: (self: PairedMap) => string
    readonly setAttributePrimaryKey: (self: PairedMap, value: string) => void
    readonly getAttributeSecondaryKey: (self: PairedMap) => string
    readonly setAttributeSecondaryKey: (self: PairedMap, value: string) => void
    readonly getPrimaryKeysSet: (self: PairedMap) => Gee.Set
    static name: string
}
abstract class MappeableElementThreeKeyIface {
    /* Fields of GXml-0.18.GXml.MappeableElementThreeKeyIface */
    readonly parentIface: GObject.TypeInterface
    readonly getMapPkey: (self: MappeableElementThreeKey) => string
    readonly getMapSkey: (self: MappeableElementThreeKey) => string
    readonly getMapTkey: (self: MappeableElementThreeKey) => string
    static name: string
}
abstract class ThreeMapIface {
    /* Fields of GXml-0.18.GXml.ThreeMapIface */
    readonly parentIface: GObject.TypeInterface
    readonly item: (self: ThreeMap, primaryKey: string, secondaryKey: string, thirdKey: string) => DomElement | null
    readonly hasPrimaryKey: (self: ThreeMap, key: string) => boolean
    readonly hasSecondaryKey: (self: ThreeMap, pkey: string, key: string) => boolean
    readonly hasThirdKey: (self: ThreeMap, pkey: string, skey: string, key: string) => boolean
    readonly secondaryKeysSet: (self: ThreeMap, pkey: string) => Gee.Set
    readonly thirdKeysSet: (self: ThreeMap, pkey: string, skey: string) => Gee.Set
    readonly getAttributePrimaryKey: (self: ThreeMap) => string
    readonly setAttributePrimaryKey: (self: ThreeMap, value: string) => void
    readonly getAttributeSecondaryKey: (self: ThreeMap) => string
    readonly setAttributeSecondaryKey: (self: ThreeMap, value: string) => void
    readonly getAttributeThirdKey: (self: ThreeMap) => string
    readonly setAttributeThirdKey: (self: ThreeMap, value: string) => void
    readonly getPrimaryKeysSet: (self: ThreeMap) => Gee.Set
    static name: string
}
abstract class AttributeIface {
    /* Fields of GXml-0.18.GXml.AttributeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getNamespace: (self: Attribute) => Namespace | null
    readonly setNamespace: (self: Attribute, value?: Namespace | null) => void
    readonly getPrefix: (self: Attribute) => string | null
    static name: string
}
abstract class CDATAIface {
    /* Fields of GXml-0.18.GXml.CDATAIface */
    readonly parentIface: GObject.TypeInterface
    readonly getStr: (self: CDATA) => string
    static name: string
}
abstract class CharacterIface {
    /* Fields of GXml-0.18.GXml.CharacterIface */
    readonly parentIface: GObject.TypeInterface
    readonly getStr: (self: Character) => string
    readonly setStr: (self: Character, value: string) => void
    static name: string
}
abstract class CommentIface {
    /* Fields of GXml-0.18.GXml.CommentIface */
    readonly parentIface: GObject.TypeInterface
    readonly getStr: (self: Comment) => string
    readonly setStr: (self: Comment, value: string) => void
    static name: string
}
abstract class DocumentIface {
    /* Fields of GXml-0.18.GXml.DocumentIface */
    readonly parentIface: GObject.TypeInterface
    readonly createElement: (self: Document, name: string) => Node
    readonly createText: (self: Document, text: string) => Node
    readonly createComment: (self: Document, text: string) => Node
    readonly createCdata: (self: Document, text: string) => Node
    readonly createPi: (self: Document, target: string, data: string) => Node
    readonly save: (self: Document, cancellable?: Gio.Cancellable | null) => boolean
    readonly saveAs: (self: Document, f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    readonly getIndent: (self: Document) => boolean
    readonly setIndent: (self: Document, value: boolean) => void
    readonly getNsTop: (self: Document) => boolean
    readonly setNsTop: (self: Document, value: boolean) => void
    readonly getPrefixDefaultNs: (self: Document) => boolean
    readonly setPrefixDefaultNs: (self: Document, value: boolean) => void
    readonly getBackup: (self: Document) => boolean
    readonly setBackup: (self: Document, value: boolean) => void
    readonly getRoot: (self: Document) => Node
    readonly getFile: (self: Document) => Gio.File
    readonly setFile: (self: Document, value: Gio.File) => void
    static name: string
}
abstract class DocumentTypeIface {
    /* Fields of GXml-0.18.GXml.DocumentTypeIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class DomAttrIface {
    /* Fields of GXml-0.18.GXml.DomAttrIface */
    readonly parentIface: GObject.TypeInterface
    readonly getNamespaceUri: (self: DomAttr) => string | null
    readonly getPrefix: (self: DomAttr) => string | null
    readonly getLocalName: (self: DomAttr) => string
    readonly getName: (self: DomAttr) => string
    readonly getValue: (self: DomAttr) => string
    readonly setValue: (self: DomAttr, value: string) => void
    readonly getSpecified: (self: DomAttr) => boolean
    static name: string
}
abstract class DomCharacterDataIface {
    /* Fields of GXml-0.18.GXml.DomCharacterDataIface */
    readonly parentIface: GObject.TypeInterface
    readonly substringData: (self: DomCharacterData, offset: number, count: number) => string
    readonly appendData: (self: DomCharacterData, data: string) => void
    readonly insertData: (self: DomCharacterData, offset: number, data: string) => void
    readonly deleteData: (self: DomCharacterData, offset: number, count: number) => void
    readonly replaceData: (self: DomCharacterData, offset: number, count: number, data: string) => void
    readonly getData: (self: DomCharacterData) => string
    readonly setData: (self: DomCharacterData, value: string) => void
    readonly getLength: (self: DomCharacterData) => number
    static name: string
}
abstract class DomTextIface {
    /* Fields of GXml-0.18.GXml.DomTextIface */
    readonly parentIface: GObject.TypeInterface
    readonly splitText: (self: DomText, offset: number) => DomText
    readonly getWholeText: (self: DomText) => string
    static name: string
}
abstract class DomProcessingInstructionIface {
    /* Fields of GXml-0.18.GXml.DomProcessingInstructionIface */
    readonly parentIface: GObject.TypeInterface
    readonly getTarget: (self: DomProcessingInstruction) => string
    static name: string
}
abstract class DomCommentIface {
    /* Fields of GXml-0.18.GXml.DomCommentIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class DomNonElementParentNodeIface {
    /* Fields of GXml-0.18.GXml.DomNonElementParentNodeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getElementById: (self: DomNonElementParentNode, elementId: string) => DomElement | null
    static name: string
}
abstract class DomParentNodeIface {
    /* Fields of GXml-0.18.GXml.DomParentNodeIface */
    readonly parentIface: GObject.TypeInterface
    readonly querySelector: (self: DomParentNode, selectors: string) => DomElement | null
    readonly querySelectorAll: (self: DomParentNode, selectors: string) => DomNodeList
    readonly getElementsByPropertyValue: (self: DomParentNode, property: string, value: string) => DomElementList
    readonly getChildren: (self: DomParentNode) => DomHTMLCollection
    readonly getFirstElementChild: (self: DomParentNode) => DomElement | null
    readonly getLastElementChild: (self: DomParentNode) => DomElement | null
    readonly getChildElementCount: (self: DomParentNode) => number
    static name: string
}
abstract class DomNonDocumentTypeChildNodeIface {
    /* Fields of GXml-0.18.GXml.DomNonDocumentTypeChildNodeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getPreviousElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
    readonly getNextElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
    static name: string
}
abstract class DomChildNodeIface {
    /* Fields of GXml-0.18.GXml.DomChildNodeIface */
    readonly parentIface: GObject.TypeInterface
    readonly remove: (self: DomChildNode) => void
    static name: string
}
abstract class DomNodeListIface {
    /* Fields of GXml-0.18.GXml.DomNodeListIface */
    readonly parentIface: GObject.TypeInterface
    readonly item: (self: DomNodeList, index: number) => DomNode | null
    readonly getLength: (self: DomNodeList) => number
    static name: string
}
abstract class DomHTMLCollectionIface {
    /* Fields of GXml-0.18.GXml.DomHTMLCollectionIface */
    readonly parentIface: GObject.TypeInterface
    readonly getElement: (self: DomHTMLCollection, index: number) => DomElement | null
    readonly toArray: (self: DomHTMLCollection) => DomElement[]
    readonly item: (self: DomHTMLCollection, index: number) => DomElement | null
    readonly namedItem: (self: DomHTMLCollection, name: string) => DomElement | null
    readonly getLength: (self: DomHTMLCollection) => number
    static name: string
}
abstract class DomNodeIteratorIface {
    /* Fields of GXml-0.18.GXml.DomNodeIteratorIface */
    readonly parentIface: GObject.TypeInterface
    readonly nextNode: (self: DomNodeIterator) => DomNode | null
    readonly previousNode: (self: DomNodeIterator) => DomNode | null
    readonly detach: (self: DomNodeIterator) => void
    readonly getRoot: (self: DomNodeIterator) => DomNode
    readonly getReferenceNode: (self: DomNodeIterator) => DomNode
    readonly getPointerBeforeReferenceNode: (self: DomNodeIterator) => boolean
    readonly getWhatToShow: (self: DomNodeIterator) => number
    readonly getFilter: (self: DomNodeIterator) => DomNodeFilter | null
    static name: string
}
abstract class DomTreeWalkerIface {
    /* Fields of GXml-0.18.GXml.DomTreeWalkerIface */
    readonly parentIface: GObject.TypeInterface
    readonly parentNode: (self: DomTreeWalker) => DomNode | null
    readonly firstChild: (self: DomTreeWalker) => DomNode | null
    readonly lastChild: (self: DomTreeWalker) => DomNode | null
    readonly previousSibling: (self: DomTreeWalker) => DomNode | null
    readonly nextSibling: (self: DomTreeWalker) => DomNode | null
    readonly previousNode: (self: DomTreeWalker) => DomNode | null
    readonly nextNode: (self: DomTreeWalker) => DomNode | null
    readonly getRoot: (self: DomTreeWalker) => DomNode
    readonly getWhatToShow: (self: DomTreeWalker) => number
    readonly getFilter: (self: DomTreeWalker) => DomNodeFilter | null
    readonly getCurrentNode: (self: DomTreeWalker) => DomNode
    static name: string
}
abstract class DomNamedNodeMapIface {
    /* Fields of GXml-0.18.GXml.DomNamedNodeMapIface */
    readonly parentIface: GObject.TypeInterface
    readonly item: (self: DomNamedNodeMap, index: number) => DomNode | null
    readonly getNamedItem: (self: DomNamedNodeMap, name: string) => DomNode | null
    readonly setNamedItem: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    readonly removeNamedItem: (self: DomNamedNodeMap, name: string) => DomNode | null
    readonly removeNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string, localName: string) => DomNode | null
    readonly getNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string, localName: string) => DomNode | null
    readonly setNamedItemNs: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    readonly getLength: (self: DomNamedNodeMap) => number
    static name: string
}
abstract class DomTokenListIface {
    /* Fields of GXml-0.18.GXml.DomTokenListIface */
    readonly parentIface: GObject.TypeInterface
    readonly item: (self: DomTokenList, index: number) => string | null
    readonly contains: (self: DomTokenList, token: string) => boolean
    readonly add: (self: DomTokenList, tokens: string[]) => void
    readonly remove: (self: DomTokenList, tokens: string[]) => void
    readonly toggle: (self: DomTokenList, token: string, force: boolean, auto: boolean) => boolean
    readonly toString: (self: DomTokenList) => string
    readonly getLength: (self: DomTokenList) => number
    static name: string
}
abstract class DomSettableTokenListIface {
    /* Fields of GXml-0.18.GXml.DomSettableTokenListIface */
    readonly parentIface: GObject.TypeInterface
    readonly getValue: (self: DomSettableTokenList) => string
    readonly setValue: (self: DomSettableTokenList, value: string) => void
    static name: string
}
abstract class DomDocumentIface {
    /* Fields of GXml-0.18.GXml.DomDocumentIface */
    readonly parentIface: GObject.TypeInterface
    readonly getElementsByTagName: (self: DomDocument, localName: string) => DomHTMLCollection
    readonly getElementsByTagNameNs: (self: DomDocument, namespace: string | null, localName: string) => DomHTMLCollection
    readonly getElementsByClassName: (self: DomDocument, classNames: string) => DomHTMLCollection
    readonly createElement: (self: DomDocument, localName: string) => DomElement
    readonly createElementNs: (self: DomDocument, namespace: string | null, qualifiedName: string) => DomElement
    readonly createDocumentFragment: (self: DomDocument) => DomDocumentFragment
    readonly createTextNode: (self: DomDocument, data: string) => DomText
    readonly createComment: (self: DomDocument, data: string) => DomComment
    readonly createProcessingInstruction: (self: DomDocument, target: string, data: string) => DomProcessingInstruction
    readonly importNode: (self: DomDocument, node: DomNode, deep: boolean) => DomNode
    readonly adoptNode: (self: DomDocument, node: DomNode) => DomNode
    readonly createEvent: (self: DomDocument, interface: string) => DomEvent
    readonly createRange: (self: DomDocument) => DomRange
    readonly createNodeIterator: (self: DomDocument, root: DomNode, whatToShow: number, filter?: DomNodeFilter | null) => DomNodeIterator
    readonly createTreeWalker: (self: DomDocument, root: DomNode, whatToShow: number, filter?: DomNodeFilter | null) => DomTreeWalker
    readonly getImplementation: (self: DomDocument) => DomImplementation
    readonly getUrl: (self: DomDocument) => string
    readonly getDocumentUri: (self: DomDocument) => string
    readonly getOrigin: (self: DomDocument) => string
    readonly getCompatMode: (self: DomDocument) => string
    readonly getCharacterSet: (self: DomDocument) => string
    readonly getContentType: (self: DomDocument) => string
    readonly getDoctype: (self: DomDocument) => DomDocumentType | null
    readonly getDocumentElement: (self: DomDocument) => DomElement | null
    static name: string
}
abstract class DomXMLDocumentIface {
    /* Fields of GXml-0.18.GXml.DomXMLDocumentIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class DomImplementationIface {
    /* Fields of GXml-0.18.GXml.DomImplementationIface */
    readonly parentIface: GObject.TypeInterface
    readonly createDocumentType: (self: DomImplementation, qualifiedName: string, publicId: string, systemId: string) => DomDocumentType
    readonly createDocument: (self: DomImplementation, nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null) => DomXMLDocument
    readonly createHtmlDocument: (self: DomImplementation, title: string) => Document
    readonly hasFeature: (self: DomImplementation) => boolean
    static name: string
}
abstract class DomDocumentFragmentIface {
    /* Fields of GXml-0.18.GXml.DomDocumentFragmentIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class DomDocumentTypeIface {
    /* Fields of GXml-0.18.GXml.DomDocumentTypeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getName: (self: DomDocumentType) => string
    readonly getPublicId: (self: DomDocumentType) => string
    readonly getSystemId: (self: DomDocumentType) => string
    static name: string
}
abstract class DomHtmlDocumentIface {
    /* Fields of GXml-0.18.GXml.DomHtmlDocumentIface */
    readonly parentIface: GObject.TypeInterface
    readonly readFromString: (self: DomHtmlDocument, str: string) => void
    readonly readFromStringTolerant: (self: DomHtmlDocument, str: string) => void
    readonly toHtml: (self: DomHtmlDocument) => string
    static name: string
}
abstract class DomElementIface {
    /* Fields of GXml-0.18.GXml.DomElementIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAttribute: (self: DomElement, name: string) => string | null
    readonly getAttributeNs: (self: DomElement, namespace: string | null, localName: string) => string | null
    readonly setAttribute: (self: DomElement, name: string, value: string) => void
    readonly setAttributeNs: (self: DomElement, namespace: string | null, name: string, value: string) => void
    readonly removeAttribute: (self: DomElement, name: string) => void
    readonly removeAttributeNs: (self: DomElement, namespace: string | null, localName: string) => void
    readonly hasAttribute: (self: DomElement, name: string) => boolean
    readonly hasAttributeNs: (self: DomElement, namespace: string | null, localName: string) => boolean
    readonly getElementsByTagName: (self: DomElement, localName: string) => DomHTMLCollection
    readonly getElementsByTagNameNs: (self: DomElement, namespace: string | null, localName: string) => DomHTMLCollection
    readonly getElementsByClassName: (self: DomElement, classNames: string) => DomHTMLCollection
    readonly getNamespaceUri: (self: DomElement) => string | null
    readonly getPrefix: (self: DomElement) => string | null
    readonly getLocalName: (self: DomElement) => string
    readonly getTagName: (self: DomElement) => string
    readonly getId: (self: DomElement) => string | null
    readonly setId: (self: DomElement, value?: string | null) => void
    readonly getClassName: (self: DomElement) => string | null
    readonly setClassName: (self: DomElement, value?: string | null) => void
    readonly getClassList: (self: DomElement) => DomTokenList
    readonly getAttributes: (self: DomElement) => DomNamedNodeMap
    static name: string
}
abstract class DomEventTargetIface {
    /* Fields of GXml-0.18.GXml.DomEventTargetIface */
    readonly parentIface: GObject.TypeInterface
    readonly addEventListener: (self: DomEventTarget, type: string, callback: DomEventListener | null, capture: boolean) => void
    readonly removeEventListener: (self: DomEventTarget, type: string, callback: DomEventListener | null, capture: boolean) => void
    readonly dispatchEvent: (self: DomEventTarget, event: DomEvent) => boolean
    static name: string
}
abstract class DomEventListenerIface {
    /* Fields of GXml-0.18.GXml.DomEventListenerIface */
    readonly parentIface: GObject.TypeInterface
    readonly handleEvent: (self: DomEventListener, event: DomEvent) => void
    static name: string
}
abstract class DomEventIface {
    /* Fields of GXml-0.18.GXml.DomEventIface */
    readonly parentIface: GObject.TypeInterface
    readonly stopPropagation: (self: DomEvent) => void
    readonly stopImmediatePropagation: (self: DomEvent) => void
    readonly preventDefault: (self: DomEvent) => void
    readonly initEvent: (self: DomEvent, type: string, bubbles: boolean, cancelable: boolean) => void
    readonly getEtype: (self: DomEvent) => string
    readonly getEventTarget: (self: DomEvent) => DomEventTarget | null
    readonly getCurrentTarget: (self: DomEvent) => DomEventTarget | null
    readonly getBubbles: (self: DomEvent) => boolean
    readonly getCancelable: (self: DomEvent) => boolean
    readonly getIsTrusted: (self: DomEvent) => boolean
    readonly getTimeStamp: (self: DomEvent) => DomTimeStamp
    readonly getDefaultPrevented: (self: DomEvent) => boolean
    readonly getEventPhase: (self: DomEvent) => DomEventPhase
    static name: string
}
abstract class DomCustomEventIface {
    /* Fields of GXml-0.18.GXml.DomCustomEventIface */
    readonly parentIface: GObject.TypeInterface
    readonly initCustomEvent: (self: DomCustomEvent, type: string, bubbles: boolean, cancelable: boolean, detail: any) => void
    readonly getDetail: (self: DomCustomEvent) => /* result */ any
    static name: string
}
abstract class DomMutationObserverIface {
    /* Fields of GXml-0.18.GXml.DomMutationObserverIface */
    readonly parentIface: GObject.TypeInterface
    readonly observe: (self: DomMutationObserver, target: Node, options: DomMutationObserverInit) => void
    readonly disconnect: (self: DomMutationObserver) => void
    readonly takeRecords: (self: DomMutationObserver) => Gee.List
    static name: string
}
abstract class DomMutationRecordIface {
    /* Fields of GXml-0.18.GXml.DomMutationRecordIface */
    readonly parentIface: GObject.TypeInterface
    readonly getMtype: (self: DomMutationRecord) => string
    readonly getTarget: (self: DomMutationRecord) => DomNode
    readonly getAddedNodes: (self: DomMutationRecord) => DomNodeList
    readonly setAddedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    readonly getRemovedNodes: (self: DomMutationRecord) => DomNodeList
    readonly setRemovedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    readonly getPreviousSibling: (self: DomMutationRecord) => DomNode | null
    readonly getNextSibling: (self: DomMutationRecord) => DomNode | null
    readonly getAttributeName: (self: DomMutationRecord) => string | null
    readonly getAttributeNamespace: (self: DomMutationRecord) => string | null
    readonly getOldValue: (self: DomMutationRecord) => string | null
    static name: string
}
abstract class DomNodeIface {
    /* Fields of GXml-0.18.GXml.DomNodeIface */
    readonly parentIface: GObject.TypeInterface
    readonly hasChildNodes: (self: DomNode) => boolean
    readonly normalize: (self: DomNode) => void
    readonly isEqualNode: (self: DomNode, node?: DomNode | null) => boolean
    readonly compareDocumentPosition: (self: DomNode, other: DomNode) => DomNodeDocumentPosition
    readonly contains: (self: DomNode, other?: DomNode | null) => boolean
    readonly lookupPrefix: (self: DomNode, nspace?: string | null) => string | null
    readonly lookupNamespaceUri: (self: DomNode, prefix?: string | null) => string | null
    readonly isDefaultNamespace: (self: DomNode, nspace?: string | null) => boolean
    readonly insertBefore: (self: DomNode, node: DomNode, child?: DomNode | null) => DomNode
    readonly appendChild: (self: DomNode, node: DomNode) => DomNode
    readonly replaceChild: (self: DomNode, node: DomNode, child: DomNode) => DomNode
    readonly removeChild: (self: DomNode, child: DomNode) => DomNode
    readonly cloneNode: (self: DomNode, deep: boolean) => DomNode
    readonly getNodeType: (self: DomNode) => DomNodeNodeType
    readonly getNodeName: (self: DomNode) => string
    readonly getBaseUri: (self: DomNode) => string | null
    readonly getOwnerDocument: (self: DomNode) => DomDocument | null
    readonly setOwnerDocument: (self: DomNode, value?: DomDocument | null) => void
    readonly getParentNode: (self: DomNode) => DomNode | null
    readonly getParentElement: (self: DomNode) => DomElement | null
    readonly getChildNodes: (self: DomNode) => DomNodeList
    readonly getFirstChild: (self: DomNode) => DomNode | null
    readonly getLastChild: (self: DomNode) => DomNode | null
    readonly getPreviousSibling: (self: DomNode) => DomNode | null
    readonly getNextSibling: (self: DomNode) => DomNode | null
    readonly getNodeValue: (self: DomNode) => string | null
    readonly setNodeValue: (self: DomNode, value?: string | null) => void
    readonly getTextContent: (self: DomNode) => string | null
    readonly setTextContent: (self: DomNode, value?: string | null) => void
    static name: string
}
abstract class DomRangeIface {
    /* Fields of GXml-0.18.GXml.DomRangeIface */
    readonly parentIface: GObject.TypeInterface
    readonly setStart: (self: DomRange, node: DomNode, offset: number) => void
    readonly setEnd: (self: DomRange, node: DomNode, offset: number) => void
    readonly setStartBefore: (self: DomRange, node: DomNode) => void
    readonly setStartAfter: (self: DomRange, node: DomNode) => void
    readonly setEndBefore: (self: DomRange, node: DomNode) => void
    readonly setEndAfter: (self: DomRange, node: DomNode) => void
    readonly collapse: (self: DomRange, toStart: boolean) => void
    readonly selectNode: (self: DomRange, node: DomNode) => void
    readonly selectNodeContents: (self: DomRange, node: DomNode) => void
    readonly compareBoundaryPoints: (self: DomRange, how: DomRangeBoundaryPoints, sourceRange: DomRange) => number
    readonly deleteContents: (self: DomRange) => void
    readonly extractContents: (self: DomRange) => DomDocumentFragment | null
    readonly cloneContents: (self: DomRange) => DomDocumentFragment | null
    readonly insertNode: (self: DomRange, node: DomNode) => void
    readonly surroundContents: (self: DomRange, newParent: DomNode) => void
    readonly cloneRange: (self: DomRange) => DomRange
    readonly detach: (self: DomRange) => void
    readonly isPointInRange: (self: DomRange, node: DomNode, offset: number) => boolean
    readonly comparePoint: (self: DomRange, node: DomNode, offset: number) => number
    readonly intersectsNode: (self: DomRange, node: DomNode) => boolean
    readonly toString: (self: DomRange) => string
    readonly getStartContainer: (self: DomRange) => DomNode
    readonly getStartOffset: (self: DomRange) => number
    readonly getEndContainer: (self: DomRange) => DomNode
    readonly getEndOffset: (self: DomRange) => number
    readonly getCollapsed: (self: DomRange) => boolean
    readonly getCommonAncestorContainer: (self: DomRange) => DomNode
    static name: string
}
abstract class ElementIface {
    /* Fields of GXml-0.18.GXml.ElementIface */
    readonly parentIface: GObject.TypeInterface
    readonly normalize: (self: Element) => void
    readonly setAttr: (self: Element, name: string, value: string) => void
    readonly getAttr: (self: Element, name: string) => Node | null
    readonly removeAttr: (self: Element, name: string) => void
    readonly removeNsAttr: (self: Element, name: string, uri: string) => void
    readonly setNsAttr: (self: Element, ns: string, name: string, value: string) => void
    readonly getNsAttr: (self: Element, name: string, uri: string) => Node | null
    readonly getTagName: (self: Element) => string
    readonly getContent: (self: Element) => string
    readonly setContent: (self: Element, value: string) => void
    static name: string
}
abstract class GomObjectIface {
    /* Fields of GXml-0.18.GXml.GomObjectIface */
    readonly parentIface: GObject.TypeInterface
    readonly getPropertiesList: (self: GomObject) => GObject.ParamSpec[]
    readonly findPropertyName: (self: GomObject, pname: string) => GObject.ParamSpec | null
    readonly findObjectPropertyName: (self: GomObject, pname: string) => GObject.ParamSpec | null
    readonly getPropertyElementList: (self: GomObject) => GObject.ParamSpec[]
    readonly getPropertyString: (self: GomObject, prop: GObject.ParamSpec) => string | null
    readonly getAttribute: (self: GomObject, name: string) => string | null
    readonly setAttribute: (self: GomObject, name: string, val: string) => boolean
    readonly getChild: (self: GomObject, name: string) => DomElement | null
    readonly findElements: (self: GomObject, name: string) => DomElementList
    readonly removeAttribute: (self: GomObject, name: string) => boolean
    readonly setInstanceProperty: (self: GomObject, name: string) => boolean
    readonly cleanPropertyElements: (self: GomObject, name: string) => void
    static name: string
}
abstract class GomPropertyIface {
    /* Fields of GXml-0.18.GXml.GomPropertyIface */
    readonly parentIface: GObject.TypeInterface
    readonly validateValue: (self: GomProperty, val: string) => boolean
    readonly getValue: (self: GomProperty) => string | null
    readonly setValue: (self: GomProperty, value?: string | null) => void
    static name: string
}
abstract class NamespaceIface {
    /* Fields of GXml-0.18.GXml.NamespaceIface */
    readonly parentIface: GObject.TypeInterface
    readonly getUri: (self: Namespace) => string | null
    readonly getPrefix: (self: Namespace) => string | null
    static name: string
}
abstract class NodeIface {
    /* Fields of GXml-0.18.GXml.NodeIface */
    readonly parentIface: GObject.TypeInterface
    readonly get: (self: Node, key: string) => Node | null
    readonly getElementsByPropertyValue: (self: Node, property: string, value: string) => ElementList
    readonly getElementsByName: (self: Node, name: string) => ElementList
    readonly getElementsByNameNs: (self: Node, name: string, ns?: string | null) => ElementList
    readonly toString: (self: Node) => string
    readonly setNamespace: (self: Node, uri: string, prefix?: string | null) => boolean
    readonly nsPrefix: (self: Node) => string
    readonly nsUri: (self: Node) => string
    readonly getNamespaces: (self: Node) => Gee.List
    readonly getChildrenNodes: (self: Node) => Gee.BidirList
    readonly getAttrs: (self: Node) => Gee.Map
    readonly getName: (self: Node) => string
    readonly getValue: (self: Node) => string
    readonly setValue: (self: Node, value: string) => void
    readonly getTypeNode: (self: Node) => NodeType
    readonly getDocument: (self: Node) => Document
    readonly getParent: (self: Node) => Node
    static name: string
}
abstract class NotationIface {
    /* Fields of GXml-0.18.GXml.NotationIface */
    readonly parentIface: GObject.TypeInterface
    readonly getPublicId: (self: Notation) => string | null
    readonly getExternalId: (self: Notation) => string | null
    static name: string
}
abstract class EntityIface {
    /* Fields of GXml-0.18.GXml.EntityIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class ParserIface {
    /* Fields of GXml-0.18.GXml.ParserIface */
    readonly parentIface: GObject.TypeInterface
    readonly writeFile: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    readonly writeFileAsync: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly writeFileFinish: (self: Parser, res: Gio.AsyncResult) => void
    readonly writeString: (self: Parser) => string
    readonly writeStringAsync: (self: Parser, callback?: Gio.AsyncReadyCallback | null) => void
    readonly writeStringFinish: (self: Parser, res: Gio.AsyncResult) => string
    readonly writeStream: (self: Parser, stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => void
    readonly writeStreamAsync: (self: Parser, stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly writeStreamFinish: (self: Parser, res: Gio.AsyncResult) => void
    readonly readFile: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    readonly readFileAsync: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly readFileFinish: (self: Parser, res: Gio.AsyncResult) => void
    readonly readStream: (self: Parser, stream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    readonly readStreamAsync: (self: Parser, stream: Gio.InputStream, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly readStreamFinish: (self: Parser, res: Gio.AsyncResult) => void
    readonly readString: (self: Parser, str: string, cancellable?: Gio.Cancellable | null) => void
    readonly readStringAsync: (self: Parser, str: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly readStringFinish: (self: Parser, res: Gio.AsyncResult) => void
    readonly createStream: (self: Parser, cancellable?: Gio.Cancellable | null) => Gio.InputStream
    readonly createStreamAsync: (self: Parser, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly createStreamFinish: (self: Parser, res: Gio.AsyncResult) => Gio.InputStream
    readonly readChildNodes: (self: Parser, parent: DomNode) => void
    readonly readChildNodesAsync: (self: Parser, parent: DomNode, callback?: Gio.AsyncReadyCallback | null) => void
    readonly readChildNodesFinish: (self: Parser, res: Gio.AsyncResult) => void
    readonly readChildNode: (self: Parser, parent: DomNode) => boolean
    readonly readChildElement: (self: Parser, parent: DomNode) => boolean
    readonly readElementProperty: (self: Parser, parent: DomNode) => [ /* returnType */ boolean, /* element */ DomNode ]
    readonly addElementCollection: (self: Parser, parent: DomNode) => [ /* returnType */ boolean, /* element */ DomNode ]
    readonly readChildNodesStream: (self: Parser, istream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    readonly readChildNodesString: (self: Parser, str: string, cancellable?: Gio.Cancellable | null) => void
    readonly readUnparsed: (self: Parser) => string
    readonly moveNextNode: (self: Parser) => boolean
    readonly currentIsEmptyElement: (self: Parser) => boolean
    readonly currentIsElement: (self: Parser) => boolean
    readonly currentIsDocument: (self: Parser) => boolean
    readonly currentNodeName: (self: Parser) => string
    readonly createElement: (self: Parser, parent: DomNode) => DomElement | null
    readonly readElement: (self: Parser, element: DomElement) => void
    readonly getBackup: (self: Parser) => boolean
    readonly setBackup: (self: Parser, value: boolean) => void
    readonly getIndent: (self: Parser) => boolean
    readonly setIndent: (self: Parser, value: boolean) => void
    readonly getNode: (self: Parser) => DomNode
    static name: string
}
abstract class ProcessingInstructionIface {
    /* Fields of GXml-0.18.GXml.ProcessingInstructionIface */
    readonly parentIface: GObject.TypeInterface
    readonly getTarget: (self: ProcessingInstruction) => string
    readonly getData: (self: ProcessingInstruction) => string
    readonly setData: (self: ProcessingInstruction, value: string) => void
    static name: string
}
abstract class IXsdSchemaIface {
    /* Fields of GXml-0.18.GXml.IXsdSchemaIface */
    readonly parentIface: GObject.TypeInterface
    readonly getElementDefinitions: (self: IXsdSchema) => IXsdListElements
    readonly setElementDefinitions: (self: IXsdSchema, value: IXsdListElements) => void
    readonly getSimpleTypeDefinitions: (self: IXsdSchema) => IXsdListSimpleTypes
    readonly setSimpleTypeDefinitions: (self: IXsdSchema, value: IXsdListSimpleTypes) => void
    readonly getComplexTypeDefinitions: (self: IXsdSchema) => IXsdListComplexTypes
    readonly setComplexTypeDefinitions: (self: IXsdSchema, value: IXsdListComplexTypes) => void
    static name: string
}
abstract class IXsdBaseTypeIface {
    /* Fields of GXml-0.18.GXml.IXsdBaseTypeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAnotation: (self: IXsdBaseType) => IXsdAnnotation
    readonly setAnotation: (self: IXsdBaseType, value: IXsdAnnotation) => void
    static name: string
}
abstract class IXsdSimpleTypeIface {
    /* Fields of GXml-0.18.GXml.IXsdSimpleTypeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getFinal: (self: IXsdSimpleType) => string
    readonly setFinal: (self: IXsdSimpleType, value: string) => void
    readonly getId: (self: IXsdSimpleType) => string
    readonly setId: (self: IXsdSimpleType, value: string) => void
    readonly getName: (self: IXsdSimpleType) => string
    readonly setName: (self: IXsdSimpleType, value: string) => void
    readonly getAnnotation: (self: IXsdSimpleType) => IXsdAnnotation
    readonly setAnnotation: (self: IXsdSimpleType, value: IXsdAnnotation) => void
    readonly getList: (self: IXsdSimpleType) => IXsdTypeList
    readonly setList: (self: IXsdSimpleType, value: IXsdTypeList) => void
    readonly getUnion: (self: IXsdSimpleType) => IXsdTypeUnion
    readonly setUnion: (self: IXsdSimpleType, value: IXsdTypeUnion) => void
    readonly getRestriction: (self: IXsdSimpleType) => IXsdTypeRestriction
    readonly setRestriction: (self: IXsdSimpleType, value: IXsdTypeRestriction) => void
    static name: string
}
abstract class IXsdTypeDefIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeDefIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionIface */
    readonly parentIface: GObject.TypeInterface
    readonly getBase: (self: IXsdTypeRestriction) => string
    readonly setBase: (self: IXsdTypeRestriction, value: string) => void
    readonly getId: (self: IXsdTypeRestriction) => string
    readonly setId: (self: IXsdTypeRestriction, value: string) => void
    readonly getSimpleType: (self: IXsdTypeRestriction) => IXsdSimpleType
    readonly setSimpleType: (self: IXsdTypeRestriction, value: IXsdSimpleType) => void
    readonly getEnumerations: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionEnumerations
    readonly setEnumerations: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionEnumerations) => void
    readonly getWhiteSpaces: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionWhiteSpaces
    readonly setWhiteSpaces: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionWhiteSpaces) => void
    static name: string
}
abstract class IXsdTypeListIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeListIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeUnionIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeUnionIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionDefIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionDefIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAnnotation: (self: IXsdTypeRestrictionDef) => IXsdAnnotation
    readonly setAnnotation: (self: IXsdTypeRestrictionDef, value: IXsdAnnotation) => void
    static name: string
}
abstract class IXsdTypeRestrictionMinExclusiveIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionMinExclusiveIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionMinInclusiveIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionMinInclusiveIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionMaxExclusiveIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionMaxExclusiveIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionMaxInclusiveIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionMaxInclusiveIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionTotalDigitsIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionTotalDigitsIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionFractionDigitsIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionFractionDigitsIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionLengthIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionLengthIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionMinLengthIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionMinLengthIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionMaxLengthIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionMaxLengthIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionEnumerationIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionEnumerationIface */
    readonly parentIface: GObject.TypeInterface
    readonly getId: (self: IXsdTypeRestrictionEnumeration) => string
    readonly setId: (self: IXsdTypeRestrictionEnumeration, value: string) => void
    readonly getValue: (self: IXsdTypeRestrictionEnumeration) => string
    readonly setValue: (self: IXsdTypeRestrictionEnumeration, value: string) => void
    static name: string
}
abstract class IXsdTypeRestrictionWhiteSpaceIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionWhiteSpaceIface */
    readonly parentIface: GObject.TypeInterface
    readonly getFixed: (self: IXsdTypeRestrictionWhiteSpace) => boolean
    readonly setFixed: (self: IXsdTypeRestrictionWhiteSpace, value: boolean) => void
    readonly getId: (self: IXsdTypeRestrictionWhiteSpace) => string
    readonly setId: (self: IXsdTypeRestrictionWhiteSpace, value: string) => void
    readonly getValue: (self: IXsdTypeRestrictionWhiteSpace) => string
    readonly setValue: (self: IXsdTypeRestrictionWhiteSpace, value: string) => void
    static name: string
}
abstract class IXsdTypeRestrictionPatternIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionPatternIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionAssertionIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionAssertionIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdTypeRestrictionExplicitTimezoneIface {
    /* Fields of GXml-0.18.GXml.IXsdTypeRestrictionExplicitTimezoneIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdComplexTypeIface {
    /* Fields of GXml-0.18.GXml.IXsdComplexTypeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAbstract: (self: IXsdComplexType) => boolean
    readonly setAbstract: (self: IXsdComplexType, value: boolean) => void
    readonly getBlock: (self: IXsdComplexType) => string
    readonly setBlock: (self: IXsdComplexType, value: string) => void
    readonly getFinal: (self: IXsdComplexType) => string
    readonly setFinal: (self: IXsdComplexType, value: string) => void
    readonly getMixed: (self: IXsdComplexType) => boolean
    readonly setMixed: (self: IXsdComplexType, value: boolean) => void
    readonly getName: (self: IXsdComplexType) => string
    readonly setName: (self: IXsdComplexType, value: string) => void
    readonly getDefaultAttributesApply: (self: IXsdComplexType) => boolean
    readonly setDefaultAttributesApply: (self: IXsdComplexType, value: boolean) => void
    readonly getContentType: (self: IXsdComplexType) => IXsdBaseContent
    readonly setContentType: (self: IXsdComplexType, value: IXsdBaseContent) => void
    readonly getTypeAttributes: (self: IXsdComplexType) => IXsdListAttributes
    readonly getGroupAttributes: (self: IXsdComplexType) => IXsdListAttributesGroup
    static name: string
}
abstract class IXsdExtensionIface {
    /* Fields of GXml-0.18.GXml.IXsdExtensionIface */
    readonly parentIface: GObject.TypeInterface
    readonly getBase: (self: IXsdExtension) => string
    readonly setBase: (self: IXsdExtension, value: string) => void
    static name: string
}
abstract class IXsdElementIface {
    /* Fields of GXml-0.18.GXml.IXsdElementIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAbstract: (self: IXsdElement) => boolean
    readonly setAbstract: (self: IXsdElement, value: boolean) => void
    readonly getBlock: (self: IXsdElement) => string
    readonly setBlock: (self: IXsdElement, value: string) => void
    readonly getDefault: (self: IXsdElement) => string
    readonly setDefault: (self: IXsdElement, value: string) => void
    readonly getFinal: (self: IXsdElement) => string
    readonly setFinal: (self: IXsdElement, value: string) => void
    readonly getFixed: (self: IXsdElement) => string
    readonly setFixed: (self: IXsdElement, value: string) => void
    readonly getForm: (self: IXsdElement) => string
    readonly setForm: (self: IXsdElement, value: string) => void
    readonly getId: (self: IXsdElement) => string | null
    readonly setId: (self: IXsdElement, value?: string | null) => void
    readonly getMaxOccurs: (self: IXsdElement) => string
    readonly setMaxOccurs: (self: IXsdElement, value: string) => void
    readonly getMinOccurs: (self: IXsdElement) => string
    readonly setMinOccurs: (self: IXsdElement, value: string) => void
    readonly getName: (self: IXsdElement) => string
    readonly setName: (self: IXsdElement, value: string) => void
    readonly getNillable: (self: IXsdElement) => boolean
    readonly setNillable: (self: IXsdElement, value: boolean) => void
    readonly getRef: (self: IXsdElement) => string
    readonly setRef: (self: IXsdElement, value: string) => void
    readonly getSubstitutionGroup: (self: IXsdElement) => DomTokenList
    readonly setSubstitutionGroup: (self: IXsdElement, value: DomTokenList) => void
    readonly getTargetNamespace: (self: IXsdElement) => string
    readonly setTargetNamespace: (self: IXsdElement, value: string) => void
    readonly getObjectType: (self: IXsdElement) => string
    readonly setObjectType: (self: IXsdElement, value: string) => void
    readonly getAnotation: (self: IXsdElement) => IXsdAnnotation
    readonly setAnotation: (self: IXsdElement, value: IXsdAnnotation) => void
    readonly getSimpleType: (self: IXsdElement) => IXsdSimpleType
    readonly setSimpleType: (self: IXsdElement, value: IXsdSimpleType) => void
    readonly getComplexType: (self: IXsdElement) => IXsdComplexType
    readonly setComplexType: (self: IXsdElement, value: IXsdComplexType) => void
    static name: string
}
abstract class IXsdAnnotationIface {
    /* Fields of GXml-0.18.GXml.IXsdAnnotationIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdBaseContentIface {
    /* Fields of GXml-0.18.GXml.IXsdBaseContentIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAnotation: (self: IXsdBaseContent) => IXsdAnnotation
    readonly setAnotation: (self: IXsdBaseContent, value: IXsdAnnotation) => void
    static name: string
}
abstract class IXsdSimpleContentIface {
    /* Fields of GXml-0.18.GXml.IXsdSimpleContentIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdComplexContentIface {
    /* Fields of GXml-0.18.GXml.IXsdComplexContentIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdOpenContentIface {
    /* Fields of GXml-0.18.GXml.IXsdOpenContentIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdBaseAttributeIface {
    /* Fields of GXml-0.18.GXml.IXsdBaseAttributeIface */
    readonly parentIface: GObject.TypeInterface
    readonly getAnotation: (self: IXsdBaseAttribute) => IXsdAnnotation
    readonly setAnotation: (self: IXsdBaseAttribute, value: IXsdAnnotation) => void
    static name: string
}
abstract class IXsdAttributeIface {
    /* Fields of GXml-0.18.GXml.IXsdAttributeIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdAttributeGroupIface {
    /* Fields of GXml-0.18.GXml.IXsdAttributeGroupIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListIface {
    /* Fields of GXml-0.18.GXml.IXsdListIface */
    readonly parentIface: GObject.TypeInterface
    readonly getItem: (self: IXsdList, index: number) => DomElement | null
    readonly append: (self: IXsdList, element: DomElement) => void
    readonly remove: (self: IXsdList, index: number) => void
    readonly indexOf: (self: IXsdList, element: DomElement) => number
    readonly getElement: (self: IXsdList) => DomElement
    readonly setElement: (self: IXsdList, value: DomElement) => void
    readonly getItemsType: (self: IXsdList) => GObject.Type
    readonly setItemsType: (self: IXsdList, value: GObject.Type) => void
    readonly getItemsName: (self: IXsdList) => GObject.Type
    readonly setItemsName: (self: IXsdList, value: GObject.Type) => void
    readonly getLength: (self: IXsdList) => number
    static name: string
}
abstract class IXsdListElementsIface {
    /* Fields of GXml-0.18.GXml.IXsdListElementsIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListSimpleTypesIface {
    /* Fields of GXml-0.18.GXml.IXsdListSimpleTypesIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListComplexTypesIface {
    /* Fields of GXml-0.18.GXml.IXsdListComplexTypesIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListAttributesIface {
    /* Fields of GXml-0.18.GXml.IXsdListAttributesIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListAttributesGroupIface {
    /* Fields of GXml-0.18.GXml.IXsdListAttributesGroupIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListTypeRestrictionEnumerationsIface {
    /* Fields of GXml-0.18.GXml.IXsdListTypeRestrictionEnumerationsIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class IXsdListTypeRestrictionWhiteSpacesIface {
    /* Fields of GXml-0.18.GXml.IXsdListTypeRestrictionWhiteSpacesIface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class SerializableIface {
    /* Fields of GXml-0.18.GXml.SerializableIface */
    readonly parentIface: GObject.TypeInterface
    readonly getEnableUnknownSerializableProperty: (self: Serializable) => boolean
    readonly setDefaultNamespace: (self: Serializable, node: Node) => boolean
    readonly serializeUseXmlNodeValue: (self: Serializable) => boolean
    readonly nodeName: (self: Serializable) => string
    readonly propertyUseNick: (self: Serializable) => boolean
    readonly serialize: (self: Serializable, node: Node) => Node | null
    readonly serializeProperty: (self: Serializable, element: Node, prop: GObject.ParamSpec) => Node | null
    readonly deserialize: (self: Serializable, node: Node) => boolean
    readonly deserializeProperty: (self: Serializable, propertyNode: Node) => boolean
    readonly findPropertySpec: (self: Serializable, propertyName: string) => GObject.ParamSpec | null
    readonly defaultFindPropertySpec: (self: Serializable, propertyName: string) => GObject.ParamSpec | null
    readonly listSerializableProperties: (self: Serializable) => GObject.ParamSpec[]
    readonly defaultListSerializableProperties: (self: Serializable) => GObject.ParamSpec[]
    readonly getUnknownSerializableProperties: (self: Serializable) => Gee.Map
    readonly getUnknownSerializableNodes: (self: Serializable) => Gee.Collection
    readonly getSerializedXmlNodeValue: (self: Serializable) => string | null
    readonly setSerializedXmlNodeValue: (self: Serializable, value?: string | null) => void
    static name: string
}
abstract class SerializableCollectionIface {
    /* Fields of GXml-0.18.GXml.SerializableCollectionIface */
    readonly parentIface: GObject.TypeInterface
    readonly deserializeProceed: (self: SerializableCollection) => boolean
    readonly deserialized: (self: SerializableCollection) => boolean
    readonly deserializeNode: (self: SerializableCollection, node: Node) => boolean
    readonly deserializeChildren: (self: SerializableCollection) => boolean
    readonly isCollection: (self: SerializableCollection) => boolean
    static name: string
}
abstract class SerializableMapDualKeyIface {
    /* Fields of GXml-0.18.GXml.SerializableMapDualKeyIface */
    readonly parentIface: GObject.TypeInterface
    readonly getMapPrimaryKey: (self: SerializableMapDualKey) => object | null
    readonly getMapSecondaryKey: (self: SerializableMapDualKey) => object | null
    static name: string
}
abstract class SerializableMapKeyIface {
    /* Fields of GXml-0.18.GXml.SerializableMapKeyIface */
    readonly parentIface: GObject.TypeInterface
    readonly getMapKey: (self: SerializableMapKey) => object | null
    static name: string
}
abstract class SerializablePropertyIface {
    /* Fields of GXml-0.18.GXml.SerializablePropertyIface */
    readonly parentIface: GObject.TypeInterface
    readonly getSerializablePropertyValue: (self: SerializableProperty) => string
    readonly setSerializablePropertyValue: (self: SerializableProperty, val?: string | null) => void
    readonly deserializeProperty: (self: SerializableProperty, propertyNode: Node, prop: GObject.ParamSpec, nick: boolean) => boolean
    readonly serializeProperty: (self: SerializableProperty, propertyNode: Node, prop: GObject.ParamSpec, nick: boolean) => Node | null
    static name: string
}
abstract class TextIface {
    /* Fields of GXml-0.18.GXml.TextIface */
    readonly parentIface: GObject.TypeInterface
    readonly getStr: (self: Text) => string
    readonly setStr: (self: Text, value: string) => void
    static name: string
}
abstract class XPathContextIface {
    /* Fields of GXml-0.18.GXml.XPathContextIface */
    readonly parentIface: GObject.TypeInterface
    readonly evaluate: (self: XPathContext, expression: string, resolver?: Gee.List | null) => XPathObject
    static name: string
}
abstract class XPathObjectIface {
    /* Fields of GXml-0.18.GXml.XPathObjectIface */
    readonly parentIface: GObject.TypeInterface
    readonly getObjectType: (self: XPathObject) => XPathObjectType
    readonly getBooleanValue: (self: XPathObject) => boolean
    readonly getStringValue: (self: XPathObject) => string
    readonly getNumberValue: (self: XPathObject) => number
    readonly getNodeset: (self: XPathObject) => DomHTMLCollection
    static name: string
}
}
export default GXml;