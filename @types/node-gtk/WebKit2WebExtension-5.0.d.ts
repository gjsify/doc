/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * WebKit2WebExtension-5.0
 */

import type Soup from './Soup-3.0';
import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';
import type JavaScriptCore from './JavaScriptCore-5.0';
import type Gtk from './Gtk-4.0';
import type Gsk from './Gsk-4.0';
import type Graphene from './Graphene-1.0';
import type Gdk from './Gdk-4.0';
import type cairo from './cairo-1.0';
import type PangoCairo from './PangoCairo-1.0';
import type Pango from './Pango-1.0';
import type HarfBuzz from './HarfBuzz-0.0';
import type GdkPixbuf from './GdkPixbuf-2.0';
import type GModule from './GModule-2.0';

export namespace WebKit2WebExtension {

enum ConsoleMessageLevel {
    INFO,
    LOG,
    WARNING,
    ERROR,
    DEBUG,
}
enum ConsoleMessageSource {
    JAVASCRIPT,
    NETWORK,
    CONSOLE_API,
    SECURITY,
    OTHER,
}
enum ContextMenuAction {
    NO_ACTION,
    OPEN_LINK,
    OPEN_LINK_IN_NEW_WINDOW,
    DOWNLOAD_LINK_TO_DISK,
    COPY_LINK_TO_CLIPBOARD,
    OPEN_IMAGE_IN_NEW_WINDOW,
    DOWNLOAD_IMAGE_TO_DISK,
    COPY_IMAGE_TO_CLIPBOARD,
    COPY_IMAGE_URL_TO_CLIPBOARD,
    OPEN_FRAME_IN_NEW_WINDOW,
    GO_BACK,
    GO_FORWARD,
    STOP,
    RELOAD,
    COPY,
    CUT,
    PASTE,
    DELETE,
    SELECT_ALL,
    INPUT_METHODS,
    UNICODE,
    SPELLING_GUESS,
    NO_GUESSES_FOUND,
    IGNORE_SPELLING,
    LEARN_SPELLING,
    IGNORE_GRAMMAR,
    FONT_MENU,
    BOLD,
    ITALIC,
    UNDERLINE,
    OUTLINE,
    INSPECT_ELEMENT,
    OPEN_VIDEO_IN_NEW_WINDOW,
    OPEN_AUDIO_IN_NEW_WINDOW,
    COPY_VIDEO_LINK_TO_CLIPBOARD,
    COPY_AUDIO_LINK_TO_CLIPBOARD,
    TOGGLE_MEDIA_CONTROLS,
    TOGGLE_MEDIA_LOOP,
    ENTER_VIDEO_FULLSCREEN,
    MEDIA_PLAY,
    MEDIA_PAUSE,
    MEDIA_MUTE,
    DOWNLOAD_VIDEO_TO_DISK,
    DOWNLOAD_AUDIO_TO_DISK,
    INSERT_EMOJI,
    PASTE_AS_PLAIN_TEXT,
    CUSTOM,
}
enum FormSubmissionStep {
    SEND_DOM_EVENT,
    COMPLETE,
}
enum UserMessageError {
    USER_MESSAGE_UNHANDLED_MESSAGE,
}
enum HitTestResultContext {
    DOCUMENT,
    LINK,
    IMAGE,
    MEDIA,
    EDITABLE,
    SCROLLBAR,
    SELECTION,
}
const DOM_CSS_RULE_CHARSET_RULE: number
const DOM_CSS_RULE_FONT_FACE_RULE: number
const DOM_CSS_RULE_IMPORT_RULE: number
const DOM_CSS_RULE_MEDIA_RULE: number
const DOM_CSS_RULE_PAGE_RULE: number
const DOM_CSS_RULE_STYLE_RULE: number
const DOM_CSS_RULE_UNKNOWN_RULE: number
const DOM_CSS_VALUE_CSS_CUSTOM: number
const DOM_CSS_VALUE_CSS_INHERIT: number
const DOM_CSS_VALUE_CSS_PRIMITIVE_VALUE: number
const DOM_CSS_VALUE_CSS_VALUE_LIST: number
const DOM_ELEMENT_ALLOW_KEYBOARD_INPUT: number
const DOM_EVENT_AT_TARGET: number
const DOM_EVENT_BLUR: number
const DOM_EVENT_BUBBLING_PHASE: number
const DOM_EVENT_CAPTURING_PHASE: number
const DOM_EVENT_CHANGE: number
const DOM_EVENT_CLICK: number
const DOM_EVENT_DBLCLICK: number
const DOM_EVENT_DRAGDROP: number
const DOM_EVENT_FOCUS: number
const DOM_EVENT_KEYDOWN: number
const DOM_EVENT_KEYPRESS: number
const DOM_EVENT_KEYUP: number
const DOM_EVENT_MOUSEDOWN: number
const DOM_EVENT_MOUSEDRAG: number
const DOM_EVENT_MOUSEMOVE: number
const DOM_EVENT_MOUSEOUT: number
const DOM_EVENT_MOUSEOVER: number
const DOM_EVENT_MOUSEUP: number
const DOM_EVENT_NONE: number
const DOM_EVENT_SELECT: number
const DOM_KEYBOARD_EVENT_KEY_LOCATION_LEFT: number
const DOM_KEYBOARD_EVENT_KEY_LOCATION_NUMPAD: number
const DOM_KEYBOARD_EVENT_KEY_LOCATION_RIGHT: number
const DOM_KEYBOARD_EVENT_KEY_LOCATION_STANDARD: number
const DOM_NODE_ATTRIBUTE_NODE: number
const DOM_NODE_CDATA_SECTION_NODE: number
const DOM_NODE_COMMENT_NODE: number
const DOM_NODE_DOCUMENT_FRAGMENT_NODE: number
const DOM_NODE_DOCUMENT_NODE: number
const DOM_NODE_DOCUMENT_POSITION_CONTAINED_BY: number
const DOM_NODE_DOCUMENT_POSITION_CONTAINS: number
const DOM_NODE_DOCUMENT_POSITION_DISCONNECTED: number
const DOM_NODE_DOCUMENT_POSITION_FOLLOWING: number
const DOM_NODE_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number
const DOM_NODE_DOCUMENT_POSITION_PRECEDING: number
const DOM_NODE_DOCUMENT_TYPE_NODE: number
const DOM_NODE_ELEMENT_NODE: number
const DOM_NODE_ENTITY_NODE: number
const DOM_NODE_ENTITY_REFERENCE_NODE: number
const DOM_NODE_FILTER_ACCEPT: number
const DOM_NODE_FILTER_REJECT: number
const DOM_NODE_FILTER_SHOW_ALL: number
const DOM_NODE_FILTER_SHOW_ATTRIBUTE: number
const DOM_NODE_FILTER_SHOW_CDATA_SECTION: number
const DOM_NODE_FILTER_SHOW_COMMENT: number
const DOM_NODE_FILTER_SHOW_DOCUMENT: number
const DOM_NODE_FILTER_SHOW_DOCUMENT_FRAGMENT: number
const DOM_NODE_FILTER_SHOW_DOCUMENT_TYPE: number
const DOM_NODE_FILTER_SHOW_ELEMENT: number
const DOM_NODE_FILTER_SHOW_ENTITY: number
const DOM_NODE_FILTER_SHOW_ENTITY_REFERENCE: number
const DOM_NODE_FILTER_SHOW_NOTATION: number
const DOM_NODE_FILTER_SHOW_PROCESSING_INSTRUCTION: number
const DOM_NODE_FILTER_SHOW_TEXT: number
const DOM_NODE_FILTER_SKIP: number
const DOM_NODE_PROCESSING_INSTRUCTION_NODE: number
const DOM_NODE_TEXT_NODE: number
const DOM_RANGE_END_TO_END: number
const DOM_RANGE_END_TO_START: number
const DOM_RANGE_NODE_AFTER: number
const DOM_RANGE_NODE_BEFORE: number
const DOM_RANGE_NODE_BEFORE_AND_AFTER: number
const DOM_RANGE_NODE_INSIDE: number
const DOM_RANGE_START_TO_END: number
const DOM_RANGE_START_TO_START: number
const DOM_XPATH_RESULT_ANY_TYPE: number
const DOM_XPATH_RESULT_ANY_UNORDERED_NODE_TYPE: number
const DOM_XPATH_RESULT_BOOLEAN_TYPE: number
const DOM_XPATH_RESULT_FIRST_ORDERED_NODE_TYPE: number
const DOM_XPATH_RESULT_NUMBER_TYPE: number
const DOM_XPATH_RESULT_ORDERED_NODE_ITERATOR_TYPE: number
const DOM_XPATH_RESULT_ORDERED_NODE_SNAPSHOT_TYPE: number
const DOM_XPATH_RESULT_STRING_TYPE: number
const DOM_XPATH_RESULT_UNORDERED_NODE_ITERATOR_TYPE: number
const DOM_XPATH_RESULT_UNORDERED_NODE_SNAPSHOT_TYPE: number
interface WebExtensionInitializeFunction {
    (extension: WebExtension): void
}
interface WebExtensionInitializeWithUserDataFunction {
    (extension: WebExtension, userData: GLib.Variant): void
}
class DOMEventTarget {
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    static name: string
}
class DOMNodeFilter {
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter */
    acceptNode(node: DOMNode): number
    static name: string
}
class DOMXPathNSResolver {
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver */
    lookupNamespaceUri(prefix: string): string
    static name: string
}
interface ContextMenu_ConstructProps extends GObject.Object_ConstructProps {
}
class ContextMenu {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenu */
    append(item: ContextMenuItem): void
    first(): ContextMenuItem
    getItemAtPosition(position: number): ContextMenuItem
    getItems(): ContextMenuItem[]
    getNItems(): number
    getUserData(): GLib.Variant
    insert(item: ContextMenuItem, position: number): void
    last(): ContextMenuItem
    moveItem(item: ContextMenuItem, position: number): void
    prepend(item: ContextMenuItem): void
    remove(item: ContextMenuItem): void
    removeAll(): void
    setUserData(userData: GLib.Variant): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ContextMenu_ConstructProps)
    _init (config?: ContextMenu_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ContextMenu
    static newWithItems(items: ContextMenuItem[]): ContextMenu
    static $gtype: GObject.Type
}
interface ContextMenuItem_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
}
class ContextMenuItem {
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItem */
    getGaction(): Gio.Action
    getStockAction(): ContextMenuAction
    getSubmenu(): ContextMenu
    isSeparator(): boolean
    setSubmenu(submenu?: ContextMenu | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ContextMenuItem_ConstructProps)
    _init (config?: ContextMenuItem_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newFromGaction(action: Gio.Action, label: string, target?: GLib.Variant | null): ContextMenuItem
    static newFromStockAction(action: ContextMenuAction): ContextMenuItem
    static newFromStockActionWithLabel(action: ContextMenuAction, label: string): ContextMenuItem
    static newSeparator(): ContextMenuItem
    static newWithSubmenu(label: string, submenu: ContextMenu): ContextMenuItem
    static $gtype: GObject.Type
}
interface DOMAttr_ConstructProps extends DOMNode_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr */
    value?: string
}
class DOMAttr {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr */
    readonly localName: string
    readonly name: string
    readonly namespaceUri: string
    readonly ownerElement: DOMElement
    readonly prefix: string
    readonly specified: boolean
    value: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr */
    getLocalName(): string
    getName(): string
    getNamespaceUri(): string
    getOwnerElement(): DOMElement
    getPrefix(): string
    getSpecified(): boolean
    getValue(): string
    setValue(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::specified", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMAttr_ConstructProps)
    _init (config?: DOMAttr_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMBlob_ConstructProps extends DOMObject_ConstructProps {
}
class DOMBlob {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob */
    readonly size: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob */
    getSize(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMBlob_ConstructProps)
    _init (config?: DOMBlob_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCDATASection_ConstructProps extends DOMText_ConstructProps {
}
class DOMCDATASection {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText */
    readonly wholeText: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText */
    readonly parentInstance: DOMCharacterData
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText */
    getWholeText(): string
    replaceWholeText(content: string): DOMText
    splitText(offset: number): DOMText
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCDATASection_ConstructProps)
    _init (config?: DOMCDATASection_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCSSRule_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule */
    cssText?: string
}
class DOMCSSRule {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule */
    cssText: string
    readonly parentRule: DOMCSSRule
    readonly parentStyleSheet: DOMCSSStyleSheet
    readonly type: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule */
    getCssText(): string
    getParentRule(): DOMCSSRule
    getParentStyleSheet(): DOMCSSStyleSheet
    getRuleType(): number
    setCssText(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::css-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-rule", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-rule", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-style-sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-style-sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSRule_ConstructProps)
    _init (config?: DOMCSSRule_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCSSRuleList_ConstructProps extends DOMObject_ConstructProps {
}
class DOMCSSRuleList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList */
    getLength(): number
    item(index: number): DOMCSSRule
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSRuleList_ConstructProps)
    _init (config?: DOMCSSRuleList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCSSStyleDeclaration_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration */
    cssText?: string
}
class DOMCSSStyleDeclaration {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration */
    cssText: string
    readonly length: number
    readonly parentRule: DOMCSSRule
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration */
    getCssText(): string
    getLength(): number
    getParentRule(): DOMCSSRule
    getPropertyPriority(propertyName: string): string
    getPropertyShorthand(propertyName: string): string
    getPropertyValue(propertyName: string): string
    isPropertyImplicit(propertyName: string): boolean
    item(index: number): string
    removeProperty(propertyName: string): string
    setCssText(value: string): void
    setProperty(propertyName: string, value: string, priority: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::css-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-rule", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-rule", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSStyleDeclaration_ConstructProps)
    _init (config?: DOMCSSStyleDeclaration_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCSSStyleSheet_ConstructProps extends DOMStyleSheet_ConstructProps {
}
class DOMCSSStyleSheet {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet */
    readonly cssRules: DOMCSSRuleList
    readonly ownerRule: DOMCSSRule
    readonly rules: DOMCSSRuleList
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet */
    disabled: boolean
    readonly href: string
    readonly media: DOMMediaList
    readonly ownerNode: DOMNode
    readonly parentStyleSheet: DOMStyleSheet
    readonly title: string
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet */
    addRule(selector: string, style: string, index: number): number
    deleteRule(index: number): void
    getCssRules(): DOMCSSRuleList
    getOwnerRule(): DOMCSSRule
    getRules(): DOMCSSRuleList
    insertRule(rule: string, index: number): number
    removeRule(index: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet */
    getContentType(): string
    getDisabled(): boolean
    getHref(): string
    getMedia(): DOMMediaList
    getOwnerNode(): DOMNode
    getParentStyleSheet(): DOMStyleSheet
    getTitle(): string
    setDisabled(value: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::css-rules", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-rules", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-rule", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-rule", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rules", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rules", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-style-sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-style-sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSStyleSheet_ConstructProps)
    _init (config?: DOMCSSStyleSheet_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCSSValue_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue */
    cssText?: string
}
class DOMCSSValue {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue */
    cssText: string
    readonly cssValueType: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue */
    getCssText(): string
    getCssValueType(): number
    setCssText(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::css-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-value-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-value-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCSSValue_ConstructProps)
    _init (config?: DOMCSSValue_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMCharacterData_ConstructProps extends DOMNode_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    data?: string
}
class DOMCharacterData {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMCharacterData_ConstructProps)
    _init (config?: DOMCharacterData_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMClientRect_ConstructProps extends DOMObject_ConstructProps {
}
class DOMClientRect {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect */
    readonly bottom: number
    readonly height: number
    readonly left: number
    readonly right: number
    readonly top: number
    readonly width: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect */
    getBottom(): number
    getHeight(): number
    getLeft(): number
    getRight(): number
    getTop(): number
    getWidth(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMClientRect_ConstructProps)
    _init (config?: DOMClientRect_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMClientRectList_ConstructProps extends DOMObject_ConstructProps {
}
class DOMClientRectList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList */
    getLength(): number
    item(index: number): DOMClientRect
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMClientRectList_ConstructProps)
    _init (config?: DOMClientRectList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMComment_ConstructProps extends DOMCharacterData_ConstructProps {
}
class DOMComment {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    readonly parentInstance: DOMNode
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMComment_ConstructProps)
    _init (config?: DOMComment_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDOMImplementation_ConstructProps extends DOMObject_ConstructProps {
}
class DOMDOMImplementation {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation */
    createCssStyleSheet(title: string, media: string): DOMCSSStyleSheet
    createDocument(namespaceURI: string | null, qualifiedName: string, doctype?: DOMDocumentType | null): DOMDocument
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DOMDocumentType
    createHtmlDocument(title: string): DOMHTMLDocument
    hasFeature(feature: string, version: string): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMImplementation_ConstructProps)
    _init (config?: DOMDOMImplementation_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDOMSelection_ConstructProps extends DOMObject_ConstructProps {
}
class DOMDOMSelection {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection */
    readonly anchorNode: DOMNode
    readonly anchorOffset: number
    readonly baseNode: DOMNode
    readonly baseOffset: number
    readonly extentNode: DOMNode
    readonly extentOffset: number
    readonly focusNode: DOMNode
    readonly focusOffset: number
    readonly isCollapsed: boolean
    readonly rangeCount: number
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection */
    addRange(range: DOMRange): void
    collapse(node: DOMNode, offset: number): void
    collapseToEnd(): void
    collapseToStart(): void
    containsNode(node: DOMNode, allowPartial: boolean): boolean
    deleteFromDocument(): void
    empty(): void
    extend(node: DOMNode, offset: number): void
    getAnchorNode(): DOMNode
    getAnchorOffset(): number
    getBaseNode(): DOMNode
    getBaseOffset(): number
    getExtentNode(): DOMNode
    getExtentOffset(): number
    getFocusNode(): DOMNode
    getFocusOffset(): number
    getIsCollapsed(): boolean
    getRangeAt(index: number): DOMRange
    getRangeCount(): number
    getSelectionType(): string
    modify(alter: string, direction: string, granularity: string): void
    removeAllRanges(): void
    selectAllChildren(node: DOMNode): void
    setBaseAndExtent(baseNode: DOMNode, baseOffset: number, extentNode: DOMNode, extentOffset: number): void
    setPosition(node: DOMNode, offset: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::anchor-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchor-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extent-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extent-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::range-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::range-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMSelection_ConstructProps)
    _init (config?: DOMDOMSelection_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDOMTokenList_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList */
    value?: string
}
class DOMDOMTokenList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList */
    readonly length: number
    value: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList */
    contains(token: string): boolean
    getLength(): number
    getValue(): string
    item(index: number): string
    replace(token: string, newToken: string): void
    setValue(value: string): void
    toggle(token: string, force: boolean): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMTokenList_ConstructProps)
    _init (config?: DOMDOMTokenList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDOMWindow_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow */
    defaultStatus?: string
    name?: string
    status?: string
}
class DOMDOMWindow {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow */
    readonly closed: boolean
    defaultStatus: string
    readonly devicePixelRatio: number
    readonly document: DOMDocument
    readonly frameElement: DOMElement
    readonly frames: DOMDOMWindow
    readonly innerHeight: number
    readonly innerWidth: number
    readonly length: number
    name: string
    readonly offscreenBuffering: boolean
    readonly opener: DOMDOMWindow
    readonly orientation: number
    readonly outerHeight: number
    readonly outerWidth: number
    readonly pageXOffset: number
    readonly pageYOffset: number
    readonly parent: DOMDOMWindow
    readonly screenLeft: number
    readonly screenTop: number
    readonly screenX: number
    readonly screenY: number
    readonly scrollX: number
    readonly scrollY: number
    readonly self: DOMDOMWindow
    status: string
    readonly top: DOMDOMWindow
    readonly window: DOMDOMWindow
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow */
    alert(message: string): void
    blur(): void
    captureEvents(): void
    close(): void
    confirm(message: string): boolean
    find(string: string, caseSensitive: boolean, backwards: boolean, wrap: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean
    focus(): void
    getClosed(): boolean
    getComputedStyle(element: DOMElement, pseudoElement?: string | null): DOMCSSStyleDeclaration
    getDefaultStatus(): string
    getDevicePixelRatio(): number
    getDocument(): DOMDocument
    getFrameElement(): DOMElement
    getFrames(): DOMDOMWindow
    getInnerHeight(): number
    getInnerWidth(): number
    getLength(): number
    getName(): string
    getOffscreenBuffering(): boolean
    getOpener(): DOMDOMWindow
    getOrientation(): number
    getOuterHeight(): number
    getOuterWidth(): number
    getPageXOffset(): number
    getPageYOffset(): number
    getParent(): DOMDOMWindow
    getScreenLeft(): number
    getScreenTop(): number
    getScreenX(): number
    getScreenY(): number
    getScrollX(): number
    getScrollY(): number
    getSelection(): DOMDOMSelection
    getSelf(): DOMDOMWindow
    getStatus(): string
    getTop(): DOMDOMWindow
    getWindow(): DOMDOMWindow
    moveBy(x: number, y: number): void
    moveTo(x: number, y: number): void
    print(): void
    prompt(message: string, defaultValue: string): string
    releaseEvents(): void
    resizeBy(x: number, y: number): void
    resizeTo(width: number, height: number): void
    scrollBy(x: number, y: number): void
    scrollTo(x: number, y: number): void
    setDefaultStatus(value: string): void
    setName(value: string): void
    setStatus(value: string): void
    stop(): void
    webkitMessageHandlersPostMessage(handler: string, message: string): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::closed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::closed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-status", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::device-pixel-ratio", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-pixel-ratio", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frames", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frames", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offscreen-buffering", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-buffering", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opener", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opener", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::orientation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::self", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::self", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::status", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::window", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDOMWindow_ConstructProps)
    _init (config?: DOMDOMWindow_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDocument_ConstructProps extends DOMNode_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument */
    charset?: string
    cookie?: string
    designMode?: string
    dir?: string
    documentUri?: string
    selectedStylesheetSet?: string
    title?: string
    xmlStandalone?: boolean
    xmlVersion?: string
}
class DOMDocument {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument */
    readonly activeElement: DOMElement
    readonly anchors: DOMHTMLCollection
    readonly applets: DOMHTMLCollection
    readonly body: DOMHTMLElement
    readonly characterSet: string
    charset: string
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly compatMode: string
    readonly contentType: string
    cookie: string
    readonly currentScript: DOMHTMLScriptElement
    readonly defaultView: DOMDOMWindow
    designMode: string
    dir: string
    readonly doctype: DOMDocumentType
    readonly documentElement: DOMElement
    documentUri: string
    readonly domain: string
    readonly embeds: DOMHTMLCollection
    readonly firstElementChild: DOMElement
    readonly forms: DOMHTMLCollection
    readonly head: DOMHTMLHeadElement
    readonly hidden: boolean
    readonly images: DOMHTMLCollection
    readonly implementation: DOMDOMImplementation
    readonly inputEncoding: string
    readonly lastElementChild: DOMElement
    readonly lastModified: string
    readonly links: DOMHTMLCollection
    readonly origin: string
    readonly plugins: DOMHTMLCollection
    readonly pointerLockElement: DOMElement
    readonly preferredStylesheetSet: string
    readonly readyState: string
    readonly referrer: string
    readonly scripts: DOMHTMLCollection
    readonly scrollingElement: DOMElement
    selectedStylesheetSet: string
    readonly styleSheets: DOMStyleSheetList
    title: string
    readonly url: string
    readonly visibilityState: string
    readonly webkitCurrentFullScreenElement: DOMElement
    readonly webkitFullScreenKeyboardInputAllowed: boolean
    readonly webkitFullscreenElement: DOMElement
    readonly webkitFullscreenEnabled: boolean
    readonly webkitIsFullScreen: boolean
    readonly xmlEncoding: string
    xmlStandalone: boolean
    xmlVersion: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument */
    adoptNode(source: DOMNode): DOMNode
    caretRangeFromPoint(x: number, y: number): DOMRange
    createAttribute(name: string): DOMAttr
    createAttributeNs(namespaceURI: string | null, qualifiedName: string): DOMAttr
    createCdataSection(data: string): DOMCDATASection
    createComment(data: string): DOMComment
    createCssStyleDeclaration(): DOMCSSStyleDeclaration
    createDocumentFragment(): DOMDocumentFragment
    createElement(tagName: string): DOMElement
    createElementNs(namespaceURI: string | null, qualifiedName: string): DOMElement
    createEntityReference(name?: string | null): DOMEntityReference
    createEvent(eventType: string): DOMEvent
    createExpression(expression: string, resolver: DOMXPathNSResolver): DOMXPathExpression
    createNodeIterator(root: DOMNode, whatToShow: number, filter: DOMNodeFilter | null, expandEntityReferences: boolean): DOMNodeIterator
    createNsResolver(nodeResolver: DOMNode): DOMXPathNSResolver
    createProcessingInstruction(target: string, data: string): DOMProcessingInstruction
    createRange(): DOMRange
    createTextNode(data: string): DOMText
    createTreeWalker(root: DOMNode, whatToShow: number, filter: DOMNodeFilter | null, expandEntityReferences: boolean): DOMTreeWalker
    elementFromPoint(x: number, y: number): DOMElement
    evaluate(expression: string, contextNode: DOMNode, resolver: DOMXPathNSResolver | null, type: number, inResult?: DOMXPathResult | null): DOMXPathResult
    execCommand(command: string, userInterface: boolean, value: string): boolean
    exitPointerLock(): void
    getActiveElement(): DOMElement
    getAnchors(): DOMHTMLCollection
    getApplets(): DOMHTMLCollection
    getBody(): DOMHTMLElement
    getCharacterSet(): string
    getCharset(): string
    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getCompatMode(): string
    getContentType(): string
    getCookie(): string
    getCurrentScript(): DOMHTMLScriptElement
    getDefaultCharset(): string
    getDefaultView(): DOMDOMWindow
    getDesignMode(): string
    getDir(): string
    getDoctype(): DOMDocumentType
    getDocumentElement(): DOMElement
    getDocumentUri(): string
    getDomain(): string
    getElementById(elementId: string): DOMElement
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(classNames: string): DOMHTMLCollection
    getElementsByName(elementName: string): DOMNodeList
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(tagname: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getEmbeds(): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getForms(): DOMHTMLCollection
    getHead(): DOMHTMLHeadElement
    getHidden(): boolean
    getImages(): DOMHTMLCollection
    getImplementation(): DOMDOMImplementation
    getInputEncoding(): string
    getLastElementChild(): DOMElement
    getLastModified(): string
    getLinks(): DOMHTMLCollection
    getOrigin(): string
    getOverrideStyle(element: DOMElement, pseudoElement?: string | null): DOMCSSStyleDeclaration
    getPlugins(): DOMHTMLCollection
    getPointerLockElement(): DOMElement
    getPreferredStylesheetSet(): string
    getReadyState(): string
    getReferrer(): string
    getScripts(): DOMHTMLCollection
    getScrollingElement(): DOMElement
    getSelectedStylesheetSet(): string
    getStyleSheets(): DOMStyleSheetList
    getTitle(): string
    getUrl(): string
    getVisibilityState(): string
    getWebkitCurrentFullscreenElement(): DOMElement
    getWebkitFullscreenElement(): DOMElement
    getWebkitFullscreenEnabled(): boolean
    getWebkitFullscreenKeyboardInputAllowed(): boolean
    getWebkitIsFullscreen(): boolean
    getXmlEncoding(): string
    getXmlStandalone(): boolean
    getXmlVersion(): string
    hasFocus(): boolean
    importNode(importedNode: DOMNode, deep: boolean): DOMNode
    queryCommandEnabled(command: string): boolean
    queryCommandIndeterm(command: string): boolean
    queryCommandState(command: string): boolean
    queryCommandSupported(command: string): boolean
    queryCommandValue(command: string): string
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    setBody(value: DOMHTMLElement): void
    setCharset(value: string): void
    setCookie(value: string): void
    setDesignMode(value: string): void
    setDir(value: string): void
    setDocumentUri(value: string): void
    setSelectedStylesheetSet(value: string): void
    setTitle(value: string): void
    setXmlStandalone(value: boolean): void
    setXmlVersion(value: string): void
    webkitCancelFullscreen(): void
    webkitExitFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::active-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchors", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchors", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::applets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::applets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::body", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::body", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cookie", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cookie", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-script", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-script", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::design-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::design-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::embeds", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::embeds", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::forms", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::forms", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::head", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::head", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::images", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::images", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-modified", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-modified", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::links", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::links", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugins", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugins", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-lock-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-lock-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::referrer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::referrer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scripts", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scripts", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrolling-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrolling-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-sheets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-sheets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visibility-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visibility-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-full-screen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-full-screen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-is-full-screen", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-is-full-screen", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-standalone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-standalone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-version", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-version", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDocument_ConstructProps)
    _init (config?: DOMDocument_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDocumentFragment_ConstructProps extends DOMNode_ConstructProps {
}
class DOMDocumentFragment {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment */
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly firstElementChild: DOMElement
    readonly lastElementChild: DOMElement
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment */
    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getElementById(elementId: string): DOMElement
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDocumentFragment_ConstructProps)
    _init (config?: DOMDocumentFragment_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMDocumentType_ConstructProps extends DOMNode_ConstructProps {
}
class DOMDocumentType {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType */
    readonly entities: DOMNamedNodeMap
    readonly internalSubset: string
    readonly name: string
    readonly notations: DOMNamedNodeMap
    readonly publicId: string
    readonly systemId: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType */
    getEntities(): DOMNamedNodeMap
    getInternalSubset(): string
    getName(): string
    getNotations(): DOMNamedNodeMap
    getPublicId(): string
    getSystemId(): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::entities", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::entities", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::internal-subset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::internal-subset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::notations", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::notations", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::public-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMDocumentType_ConstructProps)
    _init (config?: DOMDocumentType_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMElement_ConstructProps extends DOMNode_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    className?: string
    id?: string
    innerHtml?: string
    outerHtml?: string
    scrollLeft?: number
    scrollTop?: number
}
class DOMElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getInnerHtml(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getOuterHtml(): string
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMElement_ConstructProps)
    _init (config?: DOMElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMEntityReference_ConstructProps extends DOMNode_ConstructProps {
}
class DOMEntityReference {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMEntityReference_ConstructProps)
    _init (config?: DOMEntityReference_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMEvent_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    cancelBubble?: boolean
    returnValue?: boolean
}
class DOMEvent {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getEventPhase(): number
    getEventType(): string
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopPropagation(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMEvent_ConstructProps)
    _init (config?: DOMEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMFile_ConstructProps extends DOMBlob_ConstructProps {
}
class DOMFile {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile */
    readonly name: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob */
    readonly size: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile */
    getName(): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob */
    getSize(): number
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMFile_ConstructProps)
    _init (config?: DOMFile_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMFileList_ConstructProps extends DOMObject_ConstructProps {
}
class DOMFileList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList */
    getLength(): number
    item(index: number): DOMFile
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMFileList_ConstructProps)
    _init (config?: DOMFileList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLAnchorElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement */
    charset?: string
    coords?: string
    hash?: string
    host?: string
    hostname?: string
    href?: string
    hreflang?: string
    name?: string
    pathname?: string
    port?: string
    protocol?: string
    rel?: string
    rev?: string
    search?: string
    shape?: string
    target?: string
    text?: string
    type?: string
}
class DOMHTMLAnchorElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement */
    charset: string
    coords: string
    hash: string
    host: string
    hostname: string
    href: string
    hreflang: string
    name: string
    pathname: string
    port: string
    protocol: string
    rel: string
    rev: string
    search: string
    shape: string
    target: string
    text: string
    type: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement */
    getCharset(): string
    getCoords(): string
    getHash(): string
    getHost(): string
    getHostname(): string
    getHref(): string
    getHreflang(): string
    getName(): string
    getPathname(): string
    getPort(): string
    getProtocol(): string
    getRel(): string
    getRev(): string
    getSearch(): string
    getShape(): string
    getTarget(): string
    getText(): string
    getTypeAttr(): string
    setCharset(value: string): void
    setCoords(value: string): void
    setHash(value: string): void
    setHost(value: string): void
    setHostname(value: string): void
    setHref(value: string): void
    setHreflang(value: string): void
    setName(value: string): void
    setPathname(value: string): void
    setPort(value: string): void
    setProtocol(value: string): void
    setRel(value: string): void
    setRev(value: string): void
    setSearch(value: string): void
    setShape(value: string): void
    setTarget(value: string): void
    setText(value: string): void
    setTypeAttr(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::coords", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::coords", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hash", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hash", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::host", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hostname", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hreflang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hreflang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pathname", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pathname", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rel", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rel", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rev", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rev", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shape", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shape", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAnchorElement_ConstructProps)
    _init (config?: DOMHTMLAnchorElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLAppletElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement */
    align?: string
    alt?: string
    archive?: string
    code?: string
    codeBase?: string
    height?: string
    hspace?: number
    name?: string
    object?: string
    vspace?: number
    width?: string
}
class DOMHTMLAppletElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement */
    align: string
    alt: string
    archive: string
    code: string
    codeBase: string
    height: string
    hspace: number
    name: string
    object: string
    vspace: number
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement */
    getAlign(): string
    getAlt(): string
    getArchive(): string
    getCode(): string
    getCodeBase(): string
    getHeight(): string
    getHspace(): number
    getName(): string
    getObject(): string
    getVspace(): number
    getWidth(): string
    setAlign(value: string): void
    setAlt(value: string): void
    setArchive(value: string): void
    setCode(value: string): void
    setCodeBase(value: string): void
    setHeight(value: string): void
    setHspace(value: number): void
    setName(value: string): void
    setObject(value: string): void
    setVspace(value: number): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::archive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::archive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code-base", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code-base", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::object", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAppletElement_ConstructProps)
    _init (config?: DOMHTMLAppletElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLAreaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement */
    alt?: string
    coords?: string
    hash?: string
    host?: string
    hostname?: string
    href?: string
    noHref?: boolean
    pathname?: string
    port?: string
    protocol?: string
    search?: string
    shape?: string
    target?: string
}
class DOMHTMLAreaElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement */
    alt: string
    coords: string
    hash: string
    host: string
    hostname: string
    href: string
    noHref: boolean
    pathname: string
    port: string
    protocol: string
    search: string
    shape: string
    target: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement */
    getAlt(): string
    getCoords(): string
    getHash(): string
    getHost(): string
    getHostname(): string
    getHref(): string
    getNoHref(): boolean
    getPathname(): string
    getPort(): string
    getProtocol(): string
    getSearch(): string
    getShape(): string
    getTarget(): string
    setAlt(value: string): void
    setCoords(value: string): void
    setHash(value: string): void
    setHost(value: string): void
    setHostname(value: string): void
    setHref(value: string): void
    setNoHref(value: boolean): void
    setPathname(value: string): void
    setPort(value: string): void
    setProtocol(value: string): void
    setSearch(value: string): void
    setShape(value: string): void
    setTarget(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::coords", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::coords", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hash", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hash", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::host", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hostname", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hostname", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pathname", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pathname", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::port", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::protocol", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shape", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shape", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLAreaElement_ConstructProps)
    _init (config?: DOMHTMLAreaElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLBRElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement */
    clear?: string
}
class DOMHTMLBRElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement */
    clear: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement */
    getClear(): string
    setClear(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::clear", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clear", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBRElement_ConstructProps)
    _init (config?: DOMHTMLBRElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLBaseElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement */
    href?: string
    target?: string
}
class DOMHTMLBaseElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement */
    href: string
    target: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement */
    getHref(): string
    getTarget(): string
    setHref(value: string): void
    setTarget(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBaseElement_ConstructProps)
    _init (config?: DOMHTMLBaseElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLBaseFontElement_ConstructProps extends DOMHTMLElement_ConstructProps {
}
class DOMHTMLBaseFontElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement */
    getColor(): string
    getFace(): string
    getSize(): number
    setColor(value: string): void
    setFace(value: string): void
    setSize(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBaseFontElement_ConstructProps)
    _init (config?: DOMHTMLBaseFontElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLBodyElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement */
    aLink?: string
    background?: string
    bgColor?: string
    link?: string
    text?: string
    vLink?: string
}
class DOMHTMLBodyElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement */
    aLink: string
    background: string
    bgColor: string
    link: string
    text: string
    vLink: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement */
    getALink(): string
    getBackground(): string
    getBgColor(): string
    getLink(): string
    getText(): string
    getVLink(): string
    setALink(value: string): void
    setBackground(value: string): void
    setBgColor(value: string): void
    setLink(value: string): void
    setText(value: string): void
    setVLink(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::a-link", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::a-link", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::link", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-link", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-link", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLBodyElement_ConstructProps)
    _init (config?: DOMHTMLBodyElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLButtonElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement */
    autofocus?: boolean
    disabled?: boolean
    name?: string
    type?: string
    value?: string
}
class DOMHTMLButtonElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement */
    autofocus: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    name: string
    type: string
    value: string
    readonly willValidate: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement */
    getAutofocus(): boolean
    getButtonType(): string
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getName(): string
    getValue(): string
    getWillValidate(): boolean
    setAutofocus(value: boolean): void
    setButtonType(value: string): void
    setDisabled(value: boolean): void
    setName(value: string): void
    setValue(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLButtonElement_ConstructProps)
    _init (config?: DOMHTMLButtonElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLCanvasElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement */
    height?: number
    width?: number
}
class DOMHTMLCanvasElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement */
    height: number
    width: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement */
    getHeight(): number
    getWidth(): number
    setHeight(value: number): void
    setWidth(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLCanvasElement_ConstructProps)
    _init (config?: DOMHTMLCanvasElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLCollection_ConstructProps extends DOMObject_ConstructProps {
}
class DOMHTMLCollection {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection */
    getLength(): number
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLCollection_ConstructProps)
    _init (config?: DOMHTMLCollection_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLDListElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement */
    compact?: boolean
}
class DOMHTMLDListElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement */
    compact: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDListElement_ConstructProps)
    _init (config?: DOMHTMLDListElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLDirectoryElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement */
    compact?: boolean
}
class DOMHTMLDirectoryElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement */
    compact: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDirectoryElement_ConstructProps)
    _init (config?: DOMHTMLDirectoryElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLDivElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement */
    align?: string
}
class DOMHTMLDivElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement */
    align: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDivElement_ConstructProps)
    _init (config?: DOMHTMLDivElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLDocument_ConstructProps extends DOMDocument_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument */
    alinkColor?: string
    bgColor?: string
    dir?: string
    fgColor?: string
    linkColor?: string
    vlinkColor?: string
}
class DOMHTMLDocument {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument */
    alinkColor: string
    bgColor: string
    dir: string
    fgColor: string
    readonly height: number
    linkColor: string
    vlinkColor: string
    readonly width: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument */
    readonly activeElement: DOMElement
    readonly anchors: DOMHTMLCollection
    readonly applets: DOMHTMLCollection
    readonly body: DOMHTMLElement
    readonly characterSet: string
    charset: string
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly compatMode: string
    readonly contentType: string
    cookie: string
    readonly currentScript: DOMHTMLScriptElement
    readonly defaultView: DOMDOMWindow
    designMode: string
    readonly doctype: DOMDocumentType
    readonly documentElement: DOMElement
    documentUri: string
    readonly domain: string
    readonly embeds: DOMHTMLCollection
    readonly firstElementChild: DOMElement
    readonly forms: DOMHTMLCollection
    readonly head: DOMHTMLHeadElement
    readonly hidden: boolean
    readonly images: DOMHTMLCollection
    readonly implementation: DOMDOMImplementation
    readonly inputEncoding: string
    readonly lastElementChild: DOMElement
    readonly lastModified: string
    readonly links: DOMHTMLCollection
    readonly origin: string
    readonly plugins: DOMHTMLCollection
    readonly pointerLockElement: DOMElement
    readonly preferredStylesheetSet: string
    readonly readyState: string
    readonly referrer: string
    readonly scripts: DOMHTMLCollection
    readonly scrollingElement: DOMElement
    selectedStylesheetSet: string
    readonly styleSheets: DOMStyleSheetList
    title: string
    readonly url: string
    readonly visibilityState: string
    readonly webkitCurrentFullScreenElement: DOMElement
    readonly webkitFullScreenKeyboardInputAllowed: boolean
    readonly webkitFullscreenElement: DOMElement
    readonly webkitFullscreenEnabled: boolean
    readonly webkitIsFullScreen: boolean
    readonly xmlEncoding: string
    xmlStandalone: boolean
    xmlVersion: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument */
    readonly parentInstance: DOMNode
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument */
    captureEvents(): void
    clear(): void
    close(): void
    getAlinkColor(): string
    getBgColor(): string
    getCompatMode(): string
    getDesignMode(): string
    getDir(): string
    getEmbeds(): DOMHTMLCollection
    getFgColor(): string
    getHeight(): number
    getLinkColor(): string
    getPlugins(): DOMHTMLCollection
    getScripts(): DOMHTMLCollection
    getVlinkColor(): string
    getWidth(): number
    releaseEvents(): void
    setAlinkColor(value: string): void
    setBgColor(value: string): void
    setDesignMode(value: string): void
    setDir(value: string): void
    setFgColor(value: string): void
    setLinkColor(value: string): void
    setVlinkColor(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument */
    adoptNode(source: DOMNode): DOMNode
    caretRangeFromPoint(x: number, y: number): DOMRange
    createAttribute(name: string): DOMAttr
    createAttributeNs(namespaceURI: string | null, qualifiedName: string): DOMAttr
    createCdataSection(data: string): DOMCDATASection
    createComment(data: string): DOMComment
    createCssStyleDeclaration(): DOMCSSStyleDeclaration
    createDocumentFragment(): DOMDocumentFragment
    createElement(tagName: string): DOMElement
    createElementNs(namespaceURI: string | null, qualifiedName: string): DOMElement
    createEntityReference(name?: string | null): DOMEntityReference
    createEvent(eventType: string): DOMEvent
    createExpression(expression: string, resolver: DOMXPathNSResolver): DOMXPathExpression
    createNodeIterator(root: DOMNode, whatToShow: number, filter: DOMNodeFilter | null, expandEntityReferences: boolean): DOMNodeIterator
    createNsResolver(nodeResolver: DOMNode): DOMXPathNSResolver
    createProcessingInstruction(target: string, data: string): DOMProcessingInstruction
    createRange(): DOMRange
    createTextNode(data: string): DOMText
    createTreeWalker(root: DOMNode, whatToShow: number, filter: DOMNodeFilter | null, expandEntityReferences: boolean): DOMTreeWalker
    elementFromPoint(x: number, y: number): DOMElement
    evaluate(expression: string, contextNode: DOMNode, resolver: DOMXPathNSResolver | null, type: number, inResult?: DOMXPathResult | null): DOMXPathResult
    execCommand(command: string, userInterface: boolean, value: string): boolean
    exitPointerLock(): void
    getActiveElement(): DOMElement
    getAnchors(): DOMHTMLCollection
    getApplets(): DOMHTMLCollection
    getBody(): DOMHTMLElement
    getCharacterSet(): string
    getCharset(): string
    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getContentType(): string
    getCookie(): string
    getCurrentScript(): DOMHTMLScriptElement
    getDefaultCharset(): string
    getDefaultView(): DOMDOMWindow
    getDoctype(): DOMDocumentType
    getDocumentElement(): DOMElement
    getDocumentUri(): string
    getDomain(): string
    getElementById(elementId: string): DOMElement
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(classNames: string): DOMHTMLCollection
    getElementsByName(elementName: string): DOMNodeList
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(tagname: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getForms(): DOMHTMLCollection
    getHead(): DOMHTMLHeadElement
    getHidden(): boolean
    getImages(): DOMHTMLCollection
    getImplementation(): DOMDOMImplementation
    getInputEncoding(): string
    getLastElementChild(): DOMElement
    getLastModified(): string
    getLinks(): DOMHTMLCollection
    getOrigin(): string
    getOverrideStyle(element: DOMElement, pseudoElement?: string | null): DOMCSSStyleDeclaration
    getPointerLockElement(): DOMElement
    getPreferredStylesheetSet(): string
    getReadyState(): string
    getReferrer(): string
    getScrollingElement(): DOMElement
    getSelectedStylesheetSet(): string
    getStyleSheets(): DOMStyleSheetList
    getTitle(): string
    getUrl(): string
    getVisibilityState(): string
    getWebkitCurrentFullscreenElement(): DOMElement
    getWebkitFullscreenElement(): DOMElement
    getWebkitFullscreenEnabled(): boolean
    getWebkitFullscreenKeyboardInputAllowed(): boolean
    getWebkitIsFullscreen(): boolean
    getXmlEncoding(): string
    getXmlStandalone(): boolean
    getXmlVersion(): string
    hasFocus(): boolean
    importNode(importedNode: DOMNode, deep: boolean): DOMNode
    queryCommandEnabled(command: string): boolean
    queryCommandIndeterm(command: string): boolean
    queryCommandState(command: string): boolean
    queryCommandSupported(command: string): boolean
    queryCommandValue(command: string): string
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    setBody(value: DOMHTMLElement): void
    setCharset(value: string): void
    setCookie(value: string): void
    setDesignMode(value: string): void
    setDir(value: string): void
    setDocumentUri(value: string): void
    setSelectedStylesheetSet(value: string): void
    setTitle(value: string): void
    setXmlStandalone(value: boolean): void
    setXmlVersion(value: string): void
    webkitCancelFullscreen(): void
    webkitExitFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alink-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alink-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::link-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::link-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vlink-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vlink-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::active-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::anchors", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchors", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::applets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::applets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::body", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::body", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::character-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compat-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cookie", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cookie", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-script", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-script", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::design-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::design-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::domain", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::embeds", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::embeds", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::forms", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::forms", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::head", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::head", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::images", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::images", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implementation", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-modified", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-modified", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::links", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::links", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::origin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::plugins", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::plugins", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-lock-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-lock-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::preferred-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ready-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::referrer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::referrer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scripts", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scripts", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrolling-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrolling-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-stylesheet-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-sheets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-sheets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::url", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visibility-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visibility-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-current-full-screen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-current-full-screen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-fullscreen-enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-fullscreen-enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-is-full-screen", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-is-full-screen", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-standalone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-standalone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xml-version", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xml-version", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLDocument_ConstructProps)
    _init (config?: DOMHTMLDocument_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLElement_ConstructProps extends DOMElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey?: string
    contentEditable?: string
    dir?: string
    draggable?: boolean
    hidden?: boolean
    innerText?: string
    lang?: string
    outerText?: string
    spellcheck?: boolean
    tabIndex?: number
    title?: string
    translate?: boolean
    webkitdropzone?: string
}
class DOMHTMLElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly parentInstance: DOMNode
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLElement_ConstructProps)
    _init (config?: DOMHTMLElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLEmbedElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement */
    align?: string
    height?: number
    name?: string
    src?: string
    type?: string
    width?: number
}
class DOMHTMLEmbedElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement */
    align: string
    height: number
    name: string
    src: string
    type: string
    width: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement */
    getAlign(): string
    getHeight(): number
    getName(): string
    getSrc(): string
    getTypeAttr(): string
    getWidth(): number
    setAlign(value: string): void
    setHeight(value: number): void
    setName(value: string): void
    setSrc(value: string): void
    setTypeAttr(value: string): void
    setWidth(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLEmbedElement_ConstructProps)
    _init (config?: DOMHTMLEmbedElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLFieldSetElement_ConstructProps extends DOMHTMLElement_ConstructProps {
}
class DOMHTMLFieldSetElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement */
    readonly form: DOMHTMLFormElement
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement */
    getForm(): DOMHTMLFormElement
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFieldSetElement_ConstructProps)
    _init (config?: DOMHTMLFieldSetElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLFontElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement */
    color?: string
    face?: string
    size?: string
}
class DOMHTMLFontElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement */
    color: string
    face: string
    size: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement */
    getColor(): string
    getFace(): string
    getSize(): string
    setColor(value: string): void
    setFace(value: string): void
    setSize(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::face", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::face", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFontElement_ConstructProps)
    _init (config?: DOMHTMLFontElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLFormElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement */
    acceptCharset?: string
    action?: string
    encoding?: string
    enctype?: string
    method?: string
    name?: string
    target?: string
}
class DOMHTMLFormElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement */
    acceptCharset: string
    action: string
    readonly elements: DOMHTMLCollection
    encoding: string
    enctype: string
    readonly length: number
    method: string
    name: string
    target: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement */
    getAcceptCharset(): string
    getAction(): string
    getElements(): DOMHTMLCollection
    getEncoding(): string
    getEnctype(): string
    getLength(): number
    getMethod(): string
    getName(): string
    getTarget(): string
    reset(): void
    setAcceptCharset(value: string): void
    setAction(value: string): void
    setEncoding(value: string): void
    setEnctype(value: string): void
    setMethod(value: string): void
    setName(value: string): void
    setTarget(value: string): void
    submit(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::accept-charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accept-charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::action", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::elements", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::elements", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enctype", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::method", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::method", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFormElement_ConstructProps)
    _init (config?: DOMHTMLFormElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLFrameElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement */
    frameBorder?: string
    longDesc?: string
    marginHeight?: string
    marginWidth?: string
    name?: string
    noResize?: boolean
    scrolling?: string
    src?: string
}
class DOMHTMLFrameElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement */
    readonly contentDocument: DOMDocument
    readonly contentWindow: DOMDOMWindow
    frameBorder: string
    readonly height: number
    longDesc: string
    marginHeight: string
    marginWidth: string
    name: string
    noResize: boolean
    scrolling: string
    src: string
    readonly width: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement */
    getContentDocument(): DOMDocument
    getContentWindow(): DOMDOMWindow
    getFrameBorder(): string
    getHeight(): number
    getLongDesc(): string
    getMarginHeight(): string
    getMarginWidth(): string
    getName(): string
    getNoResize(): boolean
    getScrolling(): string
    getSrc(): string
    getWidth(): number
    setFrameBorder(value: string): void
    setLongDesc(value: string): void
    setMarginHeight(value: string): void
    setMarginWidth(value: string): void
    setName(value: string): void
    setNoResize(value: boolean): void
    setScrolling(value: string): void
    setSrc(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-window", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-window", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-border", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-border", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::long-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-resize", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-resize", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrolling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrolling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFrameElement_ConstructProps)
    _init (config?: DOMHTMLFrameElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLFrameSetElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement */
    cols?: string
    rows?: string
}
class DOMHTMLFrameSetElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement */
    cols: string
    rows: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement */
    getCols(): string
    getRows(): string
    setCols(value: string): void
    setRows(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::cols", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cols", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLFrameSetElement_ConstructProps)
    _init (config?: DOMHTMLFrameSetElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLHRElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement */
    align?: string
    noShade?: boolean
    size?: string
    width?: string
}
class DOMHTMLHRElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement */
    align: string
    noShade: boolean
    size: string
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement */
    getAlign(): string
    getNoShade(): boolean
    getSize(): string
    getWidth(): string
    setAlign(value: string): void
    setNoShade(value: boolean): void
    setSize(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-shade", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-shade", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHRElement_ConstructProps)
    _init (config?: DOMHTMLHRElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLHeadElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement */
    profile?: string
}
class DOMHTMLHeadElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement */
    profile: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement */
    getProfile(): string
    setProfile(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::profile", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::profile", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHeadElement_ConstructProps)
    _init (config?: DOMHTMLHeadElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLHeadingElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement */
    align?: string
}
class DOMHTMLHeadingElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement */
    align: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHeadingElement_ConstructProps)
    _init (config?: DOMHTMLHeadingElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLHtmlElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement */
    version?: string
}
class DOMHTMLHtmlElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement */
    version: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement */
    getVersion(): string
    setVersion(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::version", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::version", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLHtmlElement_ConstructProps)
    _init (config?: DOMHTMLHtmlElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLIFrameElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement */
    align?: string
    frameBorder?: string
    height?: string
    longDesc?: string
    marginHeight?: string
    marginWidth?: string
    name?: string
    scrolling?: string
    src?: string
    width?: string
}
class DOMHTMLIFrameElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement */
    align: string
    readonly contentDocument: DOMDocument
    readonly contentWindow: DOMDOMWindow
    frameBorder: string
    height: string
    longDesc: string
    marginHeight: string
    marginWidth: string
    name: string
    scrolling: string
    src: string
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement */
    getAlign(): string
    getContentDocument(): DOMDocument
    getContentWindow(): DOMDOMWindow
    getFrameBorder(): string
    getHeight(): string
    getLongDesc(): string
    getMarginHeight(): string
    getMarginWidth(): string
    getName(): string
    getScrolling(): string
    getSrc(): string
    getWidth(): string
    setAlign(value: string): void
    setFrameBorder(value: string): void
    setHeight(value: string): void
    setLongDesc(value: string): void
    setMarginHeight(value: string): void
    setMarginWidth(value: string): void
    setName(value: string): void
    setScrolling(value: string): void
    setSrc(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-window", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-window", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::frame-border", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::frame-border", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::long-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scrolling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scrolling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLIFrameElement_ConstructProps)
    _init (config?: DOMHTMLIFrameElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLImageElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement */
    align?: string
    alt?: string
    border?: string
    height?: number
    hspace?: number
    isMap?: boolean
    longDesc?: string
    lowsrc?: string
    name?: string
    src?: string
    useMap?: string
    vspace?: number
    width?: number
}
class DOMHTMLImageElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement */
    align: string
    alt: string
    border: string
    readonly complete: boolean
    height: number
    hspace: number
    isMap: boolean
    longDesc: string
    lowsrc: string
    name: string
    readonly naturalHeight: number
    readonly naturalWidth: number
    src: string
    useMap: string
    vspace: number
    width: number
    readonly x: number
    readonly y: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement */
    getAlign(): string
    getAlt(): string
    getBorder(): string
    getComplete(): boolean
    getHeight(): number
    getHspace(): number
    getIsMap(): boolean
    getLongDesc(): string
    getLowsrc(): string
    getName(): string
    getNaturalHeight(): number
    getNaturalWidth(): number
    getSrc(): string
    getUseMap(): string
    getVspace(): number
    getWidth(): number
    getX(): number
    getY(): number
    setAlign(value: string): void
    setAlt(value: string): void
    setBorder(value: string): void
    setHeight(value: number): void
    setHspace(value: number): void
    setIsMap(value: boolean): void
    setLongDesc(value: string): void
    setLowsrc(value: string): void
    setName(value: string): void
    setSrc(value: string): void
    setUseMap(value: string): void
    setVspace(value: number): void
    setWidth(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::complete", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::complete", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::long-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lowsrc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lowsrc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::natural-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::natural-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLImageElement_ConstructProps)
    _init (config?: DOMHTMLImageElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLInputElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement */
    accept?: string
    align?: string
    alt?: string
    autofocus?: boolean
    capture?: string
    checked?: boolean
    defaultChecked?: boolean
    defaultValue?: string
    disabled?: boolean
    height?: number
    indeterminate?: boolean
    maxLength?: number
    multiple?: boolean
    name?: string
    readOnly?: boolean
    size?: number
    src?: string
    type?: string
    useMap?: string
    value?: string
    width?: number
}
class DOMHTMLInputElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement */
    accept: string
    align: string
    alt: string
    autofocus: boolean
    capture: string
    checked: boolean
    defaultChecked: boolean
    defaultValue: string
    disabled: boolean
    readonly files: DOMFileList
    readonly form: DOMHTMLFormElement
    height: number
    indeterminate: boolean
    maxLength: number
    multiple: boolean
    name: string
    readOnly: boolean
    size: number
    src: string
    type: string
    useMap: string
    value: string
    width: number
    readonly willValidate: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement */
    getAccept(): string
    getAlign(): string
    getAlt(): string
    getAutoFilled(): boolean
    getAutofocus(): boolean
    getCapture(): boolean
    getCaptureType(): string
    getChecked(): boolean
    getDefaultChecked(): boolean
    getDefaultValue(): string
    getDisabled(): boolean
    getFiles(): DOMFileList
    getForm(): DOMHTMLFormElement
    getHeight(): number
    getIndeterminate(): boolean
    getInputType(): string
    getMaxLength(): number
    getMultiple(): boolean
    getName(): string
    getReadOnly(): boolean
    getSize(): number
    getSrc(): string
    getUseMap(): string
    getValue(): string
    getWidth(): number
    getWillValidate(): boolean
    isEdited(): boolean
    select(): void
    setAccept(value: string): void
    setAlign(value: string): void
    setAlt(value: string): void
    setAutoFilled(value: boolean): void
    setAutofocus(value: boolean): void
    setCaptureType(value: string): void
    setChecked(value: boolean): void
    setDefaultChecked(value: boolean): void
    setDefaultValue(value: string): void
    setDisabled(value: boolean): void
    setEditingValue(value: string): void
    setFiles(value: DOMFileList): void
    setHeight(value: number): void
    setIndeterminate(value: boolean): void
    setInputType(value: string): void
    setMaxLength(value: number): void
    setMultiple(value: boolean): void
    setName(value: string): void
    setReadOnly(value: boolean): void
    setSize(value: number): void
    setSrc(value: string): void
    setUseMap(value: string): void
    setValue(value: string): void
    setWidth(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::accept", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accept", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::capture", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capture", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::checked", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::checked", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-checked", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-checked", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::files", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::files", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indeterminate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indeterminate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::max-length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiple", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiple", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLInputElement_ConstructProps)
    _init (config?: DOMHTMLInputElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLLIElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement */
    type?: string
    value?: number
}
class DOMHTMLLIElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement */
    type: string
    value: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement */
    getTypeAttr(): string
    getValue(): number
    setTypeAttr(value: string): void
    setValue(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLIElement_ConstructProps)
    _init (config?: DOMHTMLLIElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLLabelElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement */
    htmlFor?: string
}
class DOMHTMLLabelElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement */
    readonly form: DOMHTMLFormElement
    htmlFor: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement */
    getForm(): DOMHTMLFormElement
    getHtmlFor(): string
    setHtmlFor(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::html-for", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html-for", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLabelElement_ConstructProps)
    _init (config?: DOMHTMLLabelElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLLegendElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement */
    align?: string
}
class DOMHTMLLegendElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement */
    align: string
    readonly form: DOMHTMLFormElement
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement */
    getAlign(): string
    getForm(): DOMHTMLFormElement
    setAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLegendElement_ConstructProps)
    _init (config?: DOMHTMLLegendElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLLinkElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement */
    charset?: string
    disabled?: boolean
    href?: string
    hreflang?: string
    media?: string
    rel?: string
    rev?: string
    target?: string
    type?: string
}
class DOMHTMLLinkElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement */
    charset: string
    disabled: boolean
    href: string
    hreflang: string
    media: string
    rel: string
    rev: string
    readonly sheet: DOMStyleSheet
    readonly sizes: DOMDOMTokenList
    target: string
    type: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement */
    getCharset(): string
    getDisabled(): boolean
    getHref(): string
    getHreflang(): string
    getMedia(): string
    getRel(): string
    getRev(): string
    getSheet(): DOMStyleSheet
    getSizes(): DOMDOMTokenList
    getTarget(): string
    getTypeAttr(): string
    setCharset(value: string): void
    setDisabled(value: boolean): void
    setHref(value: string): void
    setHreflang(value: string): void
    setMedia(value: string): void
    setRel(value: string): void
    setRev(value: string): void
    setSizes(value: string): void
    setTarget(value: string): void
    setTypeAttr(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hreflang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hreflang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rel", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rel", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rev", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rev", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sizes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sizes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sizes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sizes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sizes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLLinkElement_ConstructProps)
    _init (config?: DOMHTMLLinkElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLMapElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement */
    name?: string
}
class DOMHTMLMapElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement */
    readonly areas: DOMHTMLCollection
    name: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement */
    getAreas(): DOMHTMLCollection
    getName(): string
    setName(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::areas", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::areas", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMapElement_ConstructProps)
    _init (config?: DOMHTMLMapElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLMarqueeElement_ConstructProps extends DOMHTMLElement_ConstructProps {
}
class DOMHTMLMarqueeElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement */
    start(): void
    stop(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMarqueeElement_ConstructProps)
    _init (config?: DOMHTMLMarqueeElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLMenuElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement */
    compact?: boolean
}
class DOMHTMLMenuElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement */
    compact: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement */
    getCompact(): boolean
    setCompact(value: boolean): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMenuElement_ConstructProps)
    _init (config?: DOMHTMLMenuElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLMetaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement */
    content?: string
    httpEquiv?: string
    name?: string
    scheme?: string
}
class DOMHTMLMetaElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement */
    content: string
    httpEquiv: string
    name: string
    scheme: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement */
    getContent(): string
    getHttpEquiv(): string
    getName(): string
    getScheme(): string
    setContent(value: string): void
    setHttpEquiv(value: string): void
    setName(value: string): void
    setScheme(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::http-equiv", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::http-equiv", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLMetaElement_ConstructProps)
    _init (config?: DOMHTMLMetaElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLModElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement */
    cite?: string
    dateTime?: string
}
class DOMHTMLModElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement */
    cite: string
    dateTime: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement */
    getCite(): string
    getDateTime(): string
    setCite(value: string): void
    setDateTime(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::cite", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cite", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::date-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-time", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLModElement_ConstructProps)
    _init (config?: DOMHTMLModElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLOListElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement */
    compact?: boolean
    start?: number
    type?: string
}
class DOMHTMLOListElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement */
    compact: boolean
    start: number
    type: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement */
    getCompact(): boolean
    getStart(): number
    getTypeAttr(): string
    setCompact(value: boolean): void
    setStart(value: number): void
    setTypeAttr(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOListElement_ConstructProps)
    _init (config?: DOMHTMLOListElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLObjectElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement */
    align?: string
    archive?: string
    border?: string
    code?: string
    codeBase?: string
    codeType?: string
    data?: string
    declare?: boolean
    height?: string
    hspace?: number
    name?: string
    standby?: string
    type?: string
    useMap?: string
    vspace?: number
    width?: string
}
class DOMHTMLObjectElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement */
    align: string
    archive: string
    border: string
    code: string
    codeBase: string
    codeType: string
    readonly contentDocument: DOMDocument
    data: string
    declare: boolean
    readonly form: DOMHTMLFormElement
    height: string
    hspace: number
    name: string
    standby: string
    type: string
    useMap: string
    vspace: number
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement */
    getAlign(): string
    getArchive(): string
    getBorder(): string
    getCode(): string
    getCodeBase(): string
    getCodeType(): string
    getContentDocument(): DOMDocument
    getData(): string
    getDeclare(): boolean
    getForm(): DOMHTMLFormElement
    getHeight(): string
    getHspace(): number
    getName(): string
    getStandby(): string
    getTypeAttr(): string
    getUseMap(): string
    getVspace(): number
    getWidth(): string
    setAlign(value: string): void
    setArchive(value: string): void
    setBorder(value: string): void
    setCode(value: string): void
    setCodeBase(value: string): void
    setCodeType(value: string): void
    setData(value: string): void
    setDeclare(value: boolean): void
    setHeight(value: string): void
    setHspace(value: number): void
    setName(value: string): void
    setStandby(value: string): void
    setTypeAttr(value: string): void
    setUseMap(value: string): void
    setVspace(value: number): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::archive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::archive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code-base", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code-base", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::code-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::code-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::declare", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::declare", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::standby", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::standby", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-map", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLObjectElement_ConstructProps)
    _init (config?: DOMHTMLObjectElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLOptGroupElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement */
    disabled?: boolean
    label?: string
}
class DOMHTMLOptGroupElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement */
    disabled: boolean
    label: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement */
    getDisabled(): boolean
    getLabel(): string
    setDisabled(value: boolean): void
    setLabel(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOptGroupElement_ConstructProps)
    _init (config?: DOMHTMLOptGroupElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLOptionElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement */
    defaultSelected?: boolean
    disabled?: boolean
    label?: string
    selected?: boolean
    value?: string
}
class DOMHTMLOptionElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement */
    defaultSelected: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    readonly index: number
    label: string
    selected: boolean
    readonly text: string
    value: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement */
    getDefaultSelected(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getIndex(): number
    getLabel(): string
    getSelected(): boolean
    getText(): string
    getValue(): string
    setDefaultSelected(value: boolean): void
    setDisabled(value: boolean): void
    setLabel(value: string): void
    setSelected(value: boolean): void
    setValue(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::default-selected", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-selected", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOptionElement_ConstructProps)
    _init (config?: DOMHTMLOptionElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLOptionsCollection_ConstructProps extends DOMHTMLCollection_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection */
    selectedIndex?: number
}
class DOMHTMLOptionsCollection {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection */
    readonly length: number
    selectedIndex: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection */
    getLength(): number
    getSelectedIndex(): number
    namedItem(name: string): DOMNode
    setSelectedIndex(value: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection */
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLOptionsCollection_ConstructProps)
    _init (config?: DOMHTMLOptionsCollection_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLParagraphElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement */
    align?: string
}
class DOMHTMLParagraphElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement */
    align: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLParagraphElement_ConstructProps)
    _init (config?: DOMHTMLParagraphElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLParamElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement */
    name?: string
    type?: string
    value?: string
    valueType?: string
}
class DOMHTMLParamElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement */
    name: string
    type: string
    value: string
    valueType: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement */
    getName(): string
    getTypeAttr(): string
    getValue(): string
    getValueType(): string
    setName(value: string): void
    setTypeAttr(value: string): void
    setValue(value: string): void
    setValueType(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLParamElement_ConstructProps)
    _init (config?: DOMHTMLParamElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLPreElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement */
    width?: number
    wrap?: boolean
}
class DOMHTMLPreElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement */
    width: number
    wrap: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement */
    getWidth(): number
    getWrap(): boolean
    setWidth(value: number): void
    setWrap(value: boolean): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLPreElement_ConstructProps)
    _init (config?: DOMHTMLPreElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLQuoteElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement */
    cite?: string
}
class DOMHTMLQuoteElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement */
    cite: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement */
    getCite(): string
    setCite(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::cite", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cite", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLQuoteElement_ConstructProps)
    _init (config?: DOMHTMLQuoteElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLScriptElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement */
    charset?: string
    defer?: boolean
    event?: string
    htmlFor?: string
    src?: string
    text?: string
    type?: string
}
class DOMHTMLScriptElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement */
    charset: string
    defer: boolean
    event: string
    htmlFor: string
    src: string
    text: string
    type: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement */
    getCharset(): string
    getDefer(): boolean
    getEvent(): string
    getHtmlFor(): string
    getSrc(): string
    getText(): string
    getTypeAttr(): string
    setCharset(value: string): void
    setDefer(value: boolean): void
    setEvent(value: string): void
    setHtmlFor(value: string): void
    setSrc(value: string): void
    setText(value: string): void
    setTypeAttr(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::charset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::defer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::defer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::html-for", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::html-for", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLScriptElement_ConstructProps)
    _init (config?: DOMHTMLScriptElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLSelectElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement */
    autofocus?: boolean
    disabled?: boolean
    length?: number
    multiple?: boolean
    name?: string
    selectedIndex?: number
    size?: number
    value?: string
}
class DOMHTMLSelectElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement */
    autofocus: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    length: number
    multiple: boolean
    name: string
    readonly options: DOMHTMLOptionsCollection
    selectedIndex: number
    size: number
    readonly type: string
    value: string
    readonly willValidate: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement */
    add(element: DOMHTMLElement, before: DOMHTMLElement): void
    getAutofocus(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getLength(): number
    getMultiple(): boolean
    getName(): string
    getOptions(): DOMHTMLOptionsCollection
    getSelectType(): string
    getSelectedIndex(): number
    getSize(): number
    getValue(): string
    getWillValidate(): boolean
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    remove(index: number): void
    setAutofocus(value: boolean): void
    setDisabled(value: boolean): void
    setLength(value: number): void
    setMultiple(value: boolean): void
    setName(value: string): void
    setSelectedIndex(value: number): void
    setSize(value: number): void
    setValue(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::multiple", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::multiple", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::options", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::options", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selected-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLSelectElement_ConstructProps)
    _init (config?: DOMHTMLSelectElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLStyleElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement */
    disabled?: boolean
    media?: string
    type?: string
}
class DOMHTMLStyleElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement */
    disabled: boolean
    media: string
    readonly sheet: DOMStyleSheet
    type: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement */
    getDisabled(): boolean
    getMedia(): string
    getSheet(): DOMStyleSheet
    getTypeAttr(): string
    setDisabled(value: boolean): void
    setMedia(value: string): void
    setTypeAttr(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLStyleElement_ConstructProps)
    _init (config?: DOMHTMLStyleElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTableCaptionElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement */
    align?: string
}
class DOMHTMLTableCaptionElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement */
    align: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement */
    getAlign(): string
    setAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableCaptionElement_ConstructProps)
    _init (config?: DOMHTMLTableCaptionElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTableCellElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement */
    abbr?: string
    align?: string
    axis?: string
    bgColor?: string
    ch?: string
    chOff?: string
    colSpan?: number
    headers?: string
    height?: string
    noWrap?: boolean
    rowSpan?: number
    scope?: string
    vAlign?: string
    width?: string
}
class DOMHTMLTableCellElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement */
    abbr: string
    align: string
    axis: string
    bgColor: string
    readonly cellIndex: number
    ch: string
    chOff: string
    colSpan: number
    headers: string
    height: string
    noWrap: boolean
    rowSpan: number
    scope: string
    vAlign: string
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement */
    getAbbr(): string
    getAlign(): string
    getAxis(): string
    getBgColor(): string
    getCellIndex(): number
    getCh(): string
    getChOff(): string
    getColSpan(): number
    getHeaders(): string
    getHeight(): string
    getNoWrap(): boolean
    getRowSpan(): number
    getScope(): string
    getVAlign(): string
    getWidth(): string
    setAbbr(value: string): void
    setAlign(value: string): void
    setAxis(value: string): void
    setBgColor(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setColSpan(value: number): void
    setHeaders(value: string): void
    setHeight(value: string): void
    setNoWrap(value: boolean): void
    setRowSpan(value: number): void
    setScope(value: string): void
    setVAlign(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abbr", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abbr", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::axis", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::axis", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cell-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cell-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::col-span", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::col-span", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::headers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::headers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::no-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::row-span", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-span", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scope", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scope", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableCellElement_ConstructProps)
    _init (config?: DOMHTMLTableCellElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTableColElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement */
    align?: string
    ch?: string
    chOff?: string
    span?: number
    vAlign?: string
    width?: string
}
class DOMHTMLTableColElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement */
    align: string
    ch: string
    chOff: string
    span: number
    vAlign: string
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement */
    getAlign(): string
    getCh(): string
    getChOff(): string
    getSpan(): number
    getVAlign(): string
    getWidth(): string
    setAlign(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setSpan(value: number): void
    setVAlign(value: string): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::span", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::span", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableColElement_ConstructProps)
    _init (config?: DOMHTMLTableColElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTableElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement */
    align?: string
    bgColor?: string
    border?: string
    cellPadding?: string
    cellSpacing?: string
    rules?: string
    summary?: string
    width?: string
}
class DOMHTMLTableElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement */
    align: string
    bgColor: string
    border: string
    readonly caption: DOMHTMLTableCaptionElement
    cellPadding: string
    cellSpacing: string
    readonly rows: DOMHTMLCollection
    rules: string
    summary: string
    readonly tBodies: DOMHTMLCollection
    readonly tFoot: DOMHTMLTableSectionElement
    readonly tHead: DOMHTMLTableSectionElement
    width: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement */
    createCaption(): DOMHTMLElement
    createTFoot(): DOMHTMLElement
    createTHead(): DOMHTMLElement
    deleteCaption(): void
    deleteRow(index: number): void
    deleteTFoot(): void
    deleteTHead(): void
    getAlign(): string
    getBgColor(): string
    getBorder(): string
    getCaption(): DOMHTMLTableCaptionElement
    getCellPadding(): string
    getCellSpacing(): string
    getRows(): DOMHTMLCollection
    getRules(): string
    getSummary(): string
    getTBodies(): DOMHTMLCollection
    getTFoot(): DOMHTMLTableSectionElement
    getTHead(): DOMHTMLTableSectionElement
    getWidth(): string
    insertRow(index: number): DOMHTMLElement
    setAlign(value: string): void
    setBgColor(value: string): void
    setBorder(value: string): void
    setCaption(value: DOMHTMLTableCaptionElement): void
    setCellPadding(value: string): void
    setCellSpacing(value: string): void
    setRules(value: string): void
    setSummary(value: string): void
    setTFoot(value: DOMHTMLTableSectionElement): void
    setTHead(value: DOMHTMLTableSectionElement): void
    setWidth(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::border", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::caption", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::caption", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cell-padding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cell-padding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cell-spacing", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cell-spacing", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rules", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rules", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::summary", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::summary", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::t-bodies", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::t-bodies", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::t-foot", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::t-foot", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::t-head", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::t-head", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableElement_ConstructProps)
    _init (config?: DOMHTMLTableElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTableRowElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement */
    align?: string
    bgColor?: string
    ch?: string
    chOff?: string
    vAlign?: string
}
class DOMHTMLTableRowElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement */
    align: string
    bgColor: string
    readonly cells: DOMHTMLCollection
    ch: string
    chOff: string
    readonly rowIndex: number
    readonly sectionRowIndex: number
    vAlign: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement */
    deleteCell(index: number): void
    getAlign(): string
    getBgColor(): string
    getCells(): DOMHTMLCollection
    getCh(): string
    getChOff(): string
    getRowIndex(): number
    getSectionRowIndex(): number
    getVAlign(): string
    insertCell(index: number): DOMHTMLElement
    setAlign(value: string): void
    setBgColor(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setVAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bg-color", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cells", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cells", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::row-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::section-row-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::section-row-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableRowElement_ConstructProps)
    _init (config?: DOMHTMLTableRowElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTableSectionElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement */
    align?: string
    ch?: string
    chOff?: string
    vAlign?: string
}
class DOMHTMLTableSectionElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement */
    align: string
    ch: string
    chOff: string
    readonly rows: DOMHTMLCollection
    vAlign: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement */
    deleteRow(index: number): void
    getAlign(): string
    getCh(): string
    getChOff(): string
    getRows(): DOMHTMLCollection
    getVAlign(): string
    insertRow(index: number): DOMHTMLElement
    setAlign(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setVAlign(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ch-off", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::v-align", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTableSectionElement_ConstructProps)
    _init (config?: DOMHTMLTableSectionElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTextAreaElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement */
    autofocus?: boolean
    cols?: number
    defaultValue?: string
    disabled?: boolean
    name?: string
    readOnly?: boolean
    rows?: number
    selectionEnd?: number
    selectionStart?: number
    value?: string
}
class DOMHTMLTextAreaElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement */
    autofocus: boolean
    cols: number
    defaultValue: string
    disabled: boolean
    readonly form: DOMHTMLFormElement
    name: string
    readOnly: boolean
    rows: number
    selectionEnd: number
    selectionStart: number
    readonly type: string
    value: string
    readonly willValidate: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement */
    getAreaType(): string
    getAutofocus(): boolean
    getCols(): number
    getDefaultValue(): string
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getName(): string
    getReadOnly(): boolean
    getRows(): number
    getSelectionEnd(): number
    getSelectionStart(): number
    getValue(): string
    getWillValidate(): boolean
    isEdited(): boolean
    select(): void
    setAutofocus(value: boolean): void
    setCols(value: number): void
    setDefaultValue(value: string): void
    setDisabled(value: boolean): void
    setName(value: string): void
    setReadOnly(value: boolean): void
    setRows(value: number): void
    setSelectionEnd(value: number): void
    setSelectionRange(start: number, end: number, direction: string): void
    setSelectionStart(value: number): void
    setValue(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::autofocus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cols", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cols", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::default-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::form", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rows", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selection-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::selection-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::will-validate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTextAreaElement_ConstructProps)
    _init (config?: DOMHTMLTextAreaElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLTitleElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement */
    text?: string
}
class DOMHTMLTitleElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement */
    text: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement */
    getText(): string
    setText(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLTitleElement_ConstructProps)
    _init (config?: DOMHTMLTitleElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMHTMLUListElement_ConstructProps extends DOMHTMLElement_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement */
    compact?: boolean
    type?: string
}
class DOMHTMLUListElement {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement */
    compact: boolean
    type: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    accessKey: string
    contentEditable: string
    dir: string
    draggable: boolean
    hidden: boolean
    innerText: string
    readonly isContentEditable: boolean
    lang: string
    outerText: string
    spellcheck: boolean
    tabIndex: number
    title: string
    translate: boolean
    webkitdropzone: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string
    innerHtml: string
    readonly lastElementChild: DOMElement
    readonly localName: string
    readonly namespaceUri: string
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string
    readonly prefix: string
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string
    readonly webkitRegionOverset: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    readonly parentInstance: DOMElement
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement */
    getCompact(): boolean
    getTypeAttr(): string
    setCompact(value: boolean): void
    setTypeAttr(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement */
    click(): void
    getAccessKey(): string
    getChildren(): DOMHTMLCollection
    getContentEditable(): string
    getDir(): string
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string
    getInnerText(): string
    getIsContentEditable(): boolean
    getLang(): string
    getOuterHtml(): string
    getOuterText(): string
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string
    getTranslate(): boolean
    getWebkitdropzone(): string
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement */
    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string
    getAttributes(): DOMNamedNodeMap
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getClassList(): DOMDOMTokenList
    getClassName(): string
    getClientHeight(): number
    getClientLeft(): number
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string
    getLastElementChild(): DOMElement
    getLocalName(): string
    getNamespaceUri(): string
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getPrefix(): string
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string
    getWebkitRegionOverset(): string
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    htmlInputElementIsUserEdited(): boolean
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compact", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::access-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dir", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draggable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-content-editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lang", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spellcheck", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-index", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translate", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkitdropzone", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-element-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::children", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-list", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::class-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-element-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::namespace-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::outer-html", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-element-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-left", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::webkit-region-overset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMHTMLUListElement_ConstructProps)
    _init (config?: DOMHTMLUListElement_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMKeyboardEvent_ConstructProps extends DOMUIEvent_ConstructProps {
}
class DOMKeyboardEvent {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent */
    readonly altGraphKey: boolean
    readonly altKey: boolean
    readonly ctrlKey: boolean
    readonly keyIdentifier: string
    readonly keyLocation: number
    readonly metaKey: boolean
    readonly shiftKey: boolean
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    readonly parentInstance: DOMEvent
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent */
    getAltGraphKey(): boolean
    getAltKey(): boolean
    getCtrlKey(): boolean
    getKeyIdentifier(): string
    getKeyLocation(): number
    getMetaKey(): boolean
    getModifierState(keyIdentifierArg: string): boolean
    getShiftKey(): boolean
    initKeyboardEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, keyIdentifier: string, location: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, altGraphKey: boolean): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getEventPhase(): number
    getEventType(): string
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopPropagation(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alt-graph-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-graph-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ctrl-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ctrl-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-identifier", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meta-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meta-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shift-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shift-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMKeyboardEvent_ConstructProps)
    _init (config?: DOMKeyboardEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMMediaList_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList */
    mediaText?: string
}
class DOMMediaList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList */
    readonly length: number
    mediaText: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList */
    appendMedium(newMedium: string): void
    deleteMedium(oldMedium: string): void
    getLength(): number
    getMediaText(): string
    item(index: number): string
    setMediaText(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMediaList_ConstructProps)
    _init (config?: DOMMediaList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMMouseEvent_ConstructProps extends DOMUIEvent_ConstructProps {
}
class DOMMouseEvent {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent */
    readonly altKey: boolean
    readonly button: number
    readonly clientX: number
    readonly clientY: number
    readonly ctrlKey: boolean
    readonly fromElement: DOMNode
    readonly metaKey: boolean
    readonly offsetX: number
    readonly offsetY: number
    readonly relatedTarget: DOMEventTarget
    readonly screenX: number
    readonly screenY: number
    readonly shiftKey: boolean
    readonly toElement: DOMNode
    readonly x: number
    readonly y: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    readonly parentInstance: DOMEvent
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent */
    getAltKey(): boolean
    getButton(): number
    getClientX(): number
    getClientY(): number
    getCtrlKey(): boolean
    getFromElement(): DOMNode
    getMetaKey(): boolean
    getOffsetX(): number
    getOffsetY(): number
    getRelatedTarget(): DOMEventTarget
    getScreenX(): number
    getScreenY(): number
    getShiftKey(): boolean
    getToElement(): DOMNode
    getX(): number
    getY(): number
    initMouseEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, button: number, relatedTarget: DOMEventTarget): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getEventPhase(): number
    getEventType(): string
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopPropagation(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alt-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::button", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::button", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ctrl-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ctrl-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::from-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meta-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meta-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::related-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::related-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shift-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shift-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::to-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMMouseEvent_ConstructProps)
    _init (config?: DOMMouseEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMNamedNodeMap_ConstructProps extends DOMObject_ConstructProps {
}
class DOMNamedNodeMap {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap */
    getLength(): number
    getNamedItem(name: string): DOMNode
    getNamedItemNs(namespaceURI: string, localName: string): DOMNode
    item(index: number): DOMNode
    removeNamedItem(name: string): DOMNode
    removeNamedItemNs(namespaceURI: string, localName: string): DOMNode
    setNamedItem(node: DOMNode): DOMNode
    setNamedItemNs(node: DOMNode): DOMNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNamedNodeMap_ConstructProps)
    _init (config?: DOMNamedNodeMap_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMNode_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    nodeValue?: string
    textContent?: string
}
class DOMNode {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNode_ConstructProps)
    _init (config?: DOMNode_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static forJsValue(value: JavaScriptCore.Value): DOMNode
    static $gtype: GObject.Type
}
interface DOMNodeIterator_ConstructProps extends DOMObject_ConstructProps {
}
class DOMNodeIterator {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator */
    readonly filter: DOMNodeFilter
    readonly pointerBeforeReferenceNode: boolean
    readonly referenceNode: DOMNode
    readonly root: DOMNode
    readonly whatToShow: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator */
    detach(): void
    getExpandEntityReferences(): boolean
    getFilter(): DOMNodeFilter
    getPointerBeforeReferenceNode(): boolean
    getReferenceNode(): DOMNode
    getRoot(): DOMNode
    getWhatToShow(): number
    nextNode(): DOMNode
    previousNode(): DOMNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pointer-before-reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pointer-before-reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reference-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNodeIterator_ConstructProps)
    _init (config?: DOMNodeIterator_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMNodeList_ConstructProps extends DOMObject_ConstructProps {
}
class DOMNodeList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList */
    getLength(): number
    item(index: number): DOMNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMNodeList_ConstructProps)
    _init (config?: DOMNodeList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMObject_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    coreObject?: object
}
class DOMObject {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMObject_ConstructProps)
    _init (config?: DOMObject_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMProcessingInstruction_ConstructProps extends DOMCharacterData_ConstructProps {
}
class DOMProcessingInstruction {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction */
    readonly sheet: DOMStyleSheet
    readonly target: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    readonly parentInstance: DOMNode
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction */
    getSheet(): DOMStyleSheet
    getTarget(): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMProcessingInstruction_ConstructProps)
    _init (config?: DOMProcessingInstruction_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMRange_ConstructProps extends DOMObject_ConstructProps {
}
class DOMRange {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange */
    readonly collapsed: boolean
    readonly commonAncestorContainer: DOMNode
    readonly endContainer: DOMNode
    readonly endOffset: number
    readonly startContainer: DOMNode
    readonly startOffset: number
    readonly text: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange */
    cloneContents(): DOMDocumentFragment
    cloneRange(): DOMRange
    collapse(toStart: boolean): void
    compareBoundaryPoints(how: number, sourceRange: DOMRange): number
    compareNode(refNode: DOMNode): number
    comparePoint(refNode: DOMNode, offset: number): number
    createContextualFragment(html: string): DOMDocumentFragment
    deleteContents(): void
    detach(): void
    expand(unit: string): void
    extractContents(): DOMDocumentFragment
    getCollapsed(): boolean
    getCommonAncestorContainer(): DOMNode
    getEndContainer(): DOMNode
    getEndOffset(): number
    getStartContainer(): DOMNode
    getStartOffset(): number
    getText(): string
    insertNode(newNode: DOMNode): void
    intersectsNode(refNode: DOMNode): boolean
    isPointInRange(refNode: DOMNode, offset: number): boolean
    selectNode(refNode: DOMNode): void
    selectNodeContents(refNode: DOMNode): void
    setEnd(refNode: DOMNode, offset: number): void
    setEndAfter(refNode: DOMNode): void
    setEndBefore(refNode: DOMNode): void
    setStart(refNode: DOMNode, offset: number): void
    setStartAfter(refNode: DOMNode): void
    setStartBefore(refNode: DOMNode): void
    surroundContents(newParent: DOMNode): void
    toString(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::collapsed", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::common-ancestor-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::common-ancestor-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::end-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::end-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-container", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::start-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::start-offset", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMRange_ConstructProps)
    _init (config?: DOMRange_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMStyleSheet_ConstructProps extends DOMObject_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet */
    disabled?: boolean
}
class DOMStyleSheet {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet */
    disabled: boolean
    readonly href: string
    readonly media: DOMMediaList
    readonly ownerNode: DOMNode
    readonly parentStyleSheet: DOMStyleSheet
    readonly title: string
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet */
    getContentType(): string
    getDisabled(): boolean
    getHref(): string
    getMedia(): DOMMediaList
    getOwnerNode(): DOMNode
    getParentStyleSheet(): DOMStyleSheet
    getTitle(): string
    setDisabled(value: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::href", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-style-sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-style-sheet", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStyleSheet_ConstructProps)
    _init (config?: DOMStyleSheet_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMStyleSheetList_ConstructProps extends DOMObject_ConstructProps {
}
class DOMStyleSheetList {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList */
    readonly length: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList */
    getLength(): number
    item(index: number): DOMStyleSheet
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMStyleSheetList_ConstructProps)
    _init (config?: DOMStyleSheetList_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMText_ConstructProps extends DOMCharacterData_ConstructProps {
}
class DOMText {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText */
    readonly wholeText: string
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    data: string
    readonly length: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    readonly baseUri: string
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string
    readonly nodeType: number
    nodeValue: string
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    readonly parentInstance: DOMNode
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText */
    getWholeText(): string
    replaceWholeText(content: string): DOMText
    splitText(offset: number): DOMText
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData */
    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string
    getLength(): number
    insertData(offset: number, data: string): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void
    substringData(offset: number, length: number): string
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode */
    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string
    getNamespaceUri(): string
    getNextSibling(): DOMNode
    getNodeName(): string
    getNodeType(): number
    getNodeValue(): string
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string
    getPreviousSibling(): DOMNode
    getTextContent(): string
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild?: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string
    lookupPrefix(namespaceURI: string): string
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget */
    addEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: Function, useCapture: boolean): boolean
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::whole-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::data", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-nodes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::next-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::owner-document", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::previous-sibling", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-content", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMText_ConstructProps)
    _init (config?: DOMText_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMTreeWalker_ConstructProps extends DOMObject_ConstructProps {
}
class DOMTreeWalker {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker */
    readonly currentNode: DOMNode
    readonly filter: DOMNodeFilter
    readonly root: DOMNode
    readonly whatToShow: number
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker */
    firstChild(): DOMNode
    getCurrentNode(): DOMNode
    getExpandEntityReferences(): boolean
    getFilter(): DOMNodeFilter
    getRoot(): DOMNode
    getWhatToShow(): number
    lastChild(): DOMNode
    nextNode(): DOMNode
    nextSibling(): DOMNode
    parentNode(): DOMNode
    previousNode(): DOMNode
    previousSibling(): DOMNode
    setCurrentNode(value: DOMNode): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::current-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-node", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::what-to-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMTreeWalker_ConstructProps)
    _init (config?: DOMTreeWalker_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMUIEvent_ConstructProps extends DOMEvent_ConstructProps {
}
class DOMUIEvent {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    readonly parentInstance: DOMObject
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getEventPhase(): number
    getEventType(): string
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopPropagation(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMUIEvent_ConstructProps)
    _init (config?: DOMUIEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMWheelEvent_ConstructProps extends DOMMouseEvent_ConstructProps {
}
class DOMWheelEvent {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent */
    readonly wheelDelta: number
    readonly wheelDeltaX: number
    readonly wheelDeltaY: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent */
    readonly altKey: boolean
    readonly button: number
    readonly clientX: number
    readonly clientY: number
    readonly ctrlKey: boolean
    readonly fromElement: DOMNode
    readonly metaKey: boolean
    readonly offsetX: number
    readonly offsetY: number
    readonly relatedTarget: DOMEventTarget
    readonly screenX: number
    readonly screenY: number
    readonly shiftKey: boolean
    readonly toElement: DOMNode
    readonly x: number
    readonly y: number
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent */
    readonly parentInstance: DOMUIEvent
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent */
    getWheelDelta(): number
    getWheelDeltaX(): number
    getWheelDeltaY(): number
    initWheelEvent(wheelDeltaX: number, wheelDeltaY: number, view: DOMDOMWindow, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent */
    getAltKey(): boolean
    getButton(): number
    getClientX(): number
    getClientY(): number
    getCtrlKey(): boolean
    getFromElement(): DOMNode
    getMetaKey(): boolean
    getOffsetX(): number
    getOffsetY(): number
    getRelatedTarget(): DOMEventTarget
    getScreenX(): number
    getScreenY(): number
    getShiftKey(): boolean
    getToElement(): DOMNode
    getX(): number
    getY(): number
    initMouseEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, button: number, relatedTarget: DOMEventTarget): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent */
    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent */
    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getEventPhase(): number
    getEventType(): string
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopPropagation(): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::wheel-delta", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wheel-delta", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wheel-delta-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wheel-delta-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wheel-delta-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wheel-delta-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alt-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alt-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::button", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::button", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::client-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ctrl-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ctrl-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::from-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::meta-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::meta-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::offset-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::related-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::related-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::screen-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::shift-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shift-key", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::to-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::char-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::detail", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layer-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-x", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-y", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bubbles", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancel-bubble", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cancelable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::event-phase", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::return-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::src-element", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time-stamp", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMWheelEvent_ConstructProps)
    _init (config?: DOMWheelEvent_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMXPathExpression_ConstructProps extends DOMObject_ConstructProps {
}
class DOMXPathExpression {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression */
    evaluate(contextNode: DOMNode, type: number, inResult: DOMXPathResult): DOMXPathResult
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMXPathExpression_ConstructProps)
    _init (config?: DOMXPathExpression_ConstructProps): void
    static $gtype: GObject.Type
}
interface DOMXPathResult_ConstructProps extends DOMObject_ConstructProps {
}
class DOMXPathResult {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult */
    readonly booleanValue: boolean
    readonly invalidIteratorState: boolean
    readonly numberValue: number
    readonly resultType: number
    readonly singleNodeValue: DOMNode
    readonly snapshotLength: number
    readonly stringValue: string
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject */
    readonly parentInstance: GObject.Object
    readonly coreObject: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult */
    getBooleanValue(): boolean
    getInvalidIteratorState(): boolean
    getNumberValue(): number
    getResultType(): number
    getSingleNodeValue(): DOMNode
    getSnapshotLength(): number
    getStringValue(): string
    iterateNext(): DOMNode
    snapshotItem(index: number): DOMNode
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::boolean-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::boolean-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::invalid-iterator-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invalid-iterator-state", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::number-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::number-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::result-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::result-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::single-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::single-node-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::snapshot-length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snapshot-length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::string-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::string-value", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: DOMXPathResult_ConstructProps)
    _init (config?: DOMXPathResult_ConstructProps): void
    static $gtype: GObject.Type
}
interface Frame_ConstructProps extends GObject.Object_ConstructProps {
}
class Frame {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame */
    getId(): number
    getJsContext(): JavaScriptCore.Context
    getJsContextForScriptWorld(world: ScriptWorld): JavaScriptCore.Context
    getJsValueForDomObject(domObject: DOMObject): JavaScriptCore.Value
    getJsValueForDomObjectInScriptWorld(domObject: DOMObject, world: ScriptWorld): JavaScriptCore.Value
    getUri(): string
    isMainFrame(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Frame_ConstructProps)
    _init (config?: Frame_ConstructProps): void
    static $gtype: GObject.Type
}
interface HitTestResult_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult */
    context?: number
    imageUri?: string
    linkLabel?: string
    linkTitle?: string
    linkUri?: string
    mediaUri?: string
}
class HitTestResult {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult */
    contextIsEditable(): boolean
    contextIsImage(): boolean
    contextIsLink(): boolean
    contextIsMedia(): boolean
    contextIsScrollbar(): boolean
    contextIsSelection(): boolean
    getContext(): number
    getImageUri(): string
    getLinkLabel(): string
    getLinkTitle(): string
    getLinkUri(): string
    getMediaUri(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HitTestResult_ConstructProps)
    _init (config?: HitTestResult_ConstructProps): void
    static $gtype: GObject.Type
}
interface ScriptWorld_ConstructProps extends GObject.Object_ConstructProps {
}
class ScriptWorld {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld */
    getName(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld */
    connect(sigName: "window-object-cleared", callback: ((page: WebPage, frame: Frame) => void)): number
    on(sigName: "window-object-cleared", callback: (page: WebPage, frame: Frame) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "window-object-cleared", callback: (page: WebPage, frame: Frame) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "window-object-cleared", callback: (page: WebPage, frame: Frame) => void): NodeJS.EventEmitter
    emit(sigName: "window-object-cleared", page: WebPage, frame: Frame): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: ScriptWorld_ConstructProps)
    _init (config?: ScriptWorld_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ScriptWorld
    static newWithName(name: string): ScriptWorld
    static getDefault(): ScriptWorld
    static $gtype: GObject.Type
}
interface URIRequest_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest */
    uri?: string
}
class URIRequest {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest */
    uri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest */
    getHttpHeaders(): Soup.MessageHeaders
    getHttpMethod(): string
    getUri(): string
    setUri(uri: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: URIRequest_ConstructProps)
    _init (config?: URIRequest_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(uri: string): URIRequest
    static $gtype: GObject.Type
}
interface URIResponse_ConstructProps extends GObject.Object_ConstructProps {
}
class URIResponse {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse */
    readonly contentLength: number
    readonly httpHeaders: Soup.MessageHeaders
    readonly mimeType: string
    readonly statusCode: number
    readonly suggestedFilename: string
    readonly uri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse */
    getContentLength(): number
    getHttpHeaders(): Soup.MessageHeaders
    getMimeType(): string
    getStatusCode(): number
    getSuggestedFilename(): string
    getUri(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content-length", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-length", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::content-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::content-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::content-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::http-headers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::http-headers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::http-headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::http-headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::http-headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::mime-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mime-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::status-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status-code", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::status-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::status-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::status-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::suggested-filename", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::suggested-filename", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: URIResponse_ConstructProps)
    _init (config?: URIResponse_ConstructProps): void
    static $gtype: GObject.Type
}
interface UserMessage_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage */
    fdList?: Gio.UnixFDList
    name?: string
    parameters?: GLib.Variant
}
class UserMessage {
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage */
    getFdList(): Gio.UnixFDList | null
    getName(): string
    getParameters(): GLib.Variant | null
    sendReply(reply: UserMessage): void
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: UserMessage_ConstructProps)
    _init (config?: UserMessage_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(name: string, parameters?: GLib.Variant | null): UserMessage
    static newWithFdList(name: string, parameters?: GLib.Variant | null, fdList?: Gio.UnixFDList | null): UserMessage
    static errorQuark(): GLib.Quark
    static $gtype: GObject.Type
}
interface WebEditor_ConstructProps extends GObject.Object_ConstructProps {
}
class WebEditor {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor */
    getPage(): WebPage
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor */
    connect(sigName: "selection-changed", callback: (() => void)): number
    on(sigName: "selection-changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "selection-changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "selection-changed", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "selection-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebEditor_ConstructProps)
    _init (config?: WebEditor_ConstructProps): void
    static $gtype: GObject.Type
}
interface WebExtension_ConstructProps extends GObject.Object_ConstructProps {
}
class WebExtension {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension */
    getPage(pageId: number): WebPage
    sendMessageToContext(message: UserMessage, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    sendMessageToContextFinish(result: Gio.AsyncResult): UserMessage
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension */
    connect(sigName: "page-created", callback: ((webPage: WebPage) => void)): number
    on(sigName: "page-created", callback: (webPage: WebPage) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "page-created", callback: (webPage: WebPage) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "page-created", callback: (webPage: WebPage) => void): NodeJS.EventEmitter
    emit(sigName: "page-created", webPage: WebPage): void
    connect(sigName: "user-message-received", callback: ((message: UserMessage) => void)): number
    on(sigName: "user-message-received", callback: (message: UserMessage) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "user-message-received", callback: (message: UserMessage) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "user-message-received", callback: (message: UserMessage) => void): NodeJS.EventEmitter
    emit(sigName: "user-message-received", message: UserMessage): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebExtension_ConstructProps)
    _init (config?: WebExtension_ConstructProps): void
    static $gtype: GObject.Type
}
interface WebHitTestResult_ConstructProps extends HitTestResult_ConstructProps {
    /* Constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult */
    node?: DOMNode
}
class WebHitTestResult {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult */
    readonly parent: GObject.Object
    readonly priv: HitTestResultPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult */
    getNode(): DOMNode
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult */
    contextIsEditable(): boolean
    contextIsImage(): boolean
    contextIsLink(): boolean
    contextIsMedia(): boolean
    contextIsScrollbar(): boolean
    contextIsSelection(): boolean
    getContext(): number
    getImageUri(): string
    getLinkLabel(): string
    getLinkTitle(): string
    getLinkUri(): string
    getMediaUri(): string
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebHitTestResult_ConstructProps)
    _init (config?: WebHitTestResult_ConstructProps): void
    static $gtype: GObject.Type
}
interface WebPage_ConstructProps extends GObject.Object_ConstructProps {
}
class WebPage {
    /* Properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage */
    readonly uri: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage */
    getDomDocument(): DOMDocument
    getEditor(): WebEditor
    getId(): number
    getMainFrame(): Frame
    getUri(): string
    sendMessageToView(message: UserMessage, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    sendMessageToViewFinish(result: Gio.AsyncResult): UserMessage
    /* Methods of GObject-2.0.GObject.Object */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    forceFloating(): void
    freezeNotify(): void
    getData(key: string): object | null
    getProperty(propertyName: string, value: any): void
    getQdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    isFloating(): boolean
    notify(propertyName: string): void
    notifyByPspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    refSink(): GObject.Object
    runDispose(): void
    setData(key: string, data?: object | null): void
    setProperty(propertyName: string, value: any): void
    stealData(key: string): object | null
    stealQdata(quark: GLib.Quark): object | null
    thawNotify(): void
    unref(): void
    watchClosure(closure: Function): void
    /* Signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage */
    connect(sigName: "console-message-sent", callback: ((consoleMessage: ConsoleMessage) => void)): number
    on(sigName: "console-message-sent", callback: (consoleMessage: ConsoleMessage) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "console-message-sent", callback: (consoleMessage: ConsoleMessage) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "console-message-sent", callback: (consoleMessage: ConsoleMessage) => void): NodeJS.EventEmitter
    emit(sigName: "console-message-sent", consoleMessage: ConsoleMessage): void
    connect(sigName: "context-menu", callback: ((contextMenu: ContextMenu, hitTestResult: WebHitTestResult) => boolean)): number
    on(sigName: "context-menu", callback: (contextMenu: ContextMenu, hitTestResult: WebHitTestResult) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "context-menu", callback: (contextMenu: ContextMenu, hitTestResult: WebHitTestResult) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "context-menu", callback: (contextMenu: ContextMenu, hitTestResult: WebHitTestResult) => void): NodeJS.EventEmitter
    emit(sigName: "context-menu", contextMenu: ContextMenu, hitTestResult: WebHitTestResult): void
    connect(sigName: "document-loaded", callback: (() => void)): number
    on(sigName: "document-loaded", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "document-loaded", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "document-loaded", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "document-loaded"): void
    connect(sigName: "form-controls-associated", callback: ((elements: DOMElement[]) => void)): number
    on(sigName: "form-controls-associated", callback: (elements: DOMElement[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "form-controls-associated", callback: (elements: DOMElement[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "form-controls-associated", callback: (elements: DOMElement[]) => void): NodeJS.EventEmitter
    emit(sigName: "form-controls-associated", elements: DOMElement[]): void
    connect(sigName: "form-controls-associated-for-frame", callback: ((elements: DOMElement[], frame: Frame) => void)): number
    on(sigName: "form-controls-associated-for-frame", callback: (elements: DOMElement[], frame: Frame) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "form-controls-associated-for-frame", callback: (elements: DOMElement[], frame: Frame) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "form-controls-associated-for-frame", callback: (elements: DOMElement[], frame: Frame) => void): NodeJS.EventEmitter
    emit(sigName: "form-controls-associated-for-frame", elements: DOMElement[], frame: Frame): void
    connect(sigName: "send-request", callback: ((request: URIRequest, redirectedResponse: URIResponse) => boolean)): number
    on(sigName: "send-request", callback: (request: URIRequest, redirectedResponse: URIResponse) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "send-request", callback: (request: URIRequest, redirectedResponse: URIResponse) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "send-request", callback: (request: URIRequest, redirectedResponse: URIResponse) => void): NodeJS.EventEmitter
    emit(sigName: "send-request", request: URIRequest, redirectedResponse: URIResponse): void
    connect(sigName: "user-message-received", callback: ((message: UserMessage) => boolean)): number
    on(sigName: "user-message-received", callback: (message: UserMessage) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "user-message-received", callback: (message: UserMessage) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "user-message-received", callback: (message: UserMessage) => void): NodeJS.EventEmitter
    emit(sigName: "user-message-received", message: UserMessage): void
    connect(sigName: "will-submit-form", callback: ((form: DOMElement, step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[]) => void)): number
    on(sigName: "will-submit-form", callback: (form: DOMElement, step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "will-submit-form", callback: (form: DOMElement, step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "will-submit-form", callback: (form: DOMElement, step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[]) => void): NodeJS.EventEmitter
    emit(sigName: "will-submit-form", form: DOMElement, step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[]): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: WebPage_ConstructProps)
    _init (config?: WebPage_ConstructProps): void
    static $gtype: GObject.Type
}
class ConsoleMessage {
    /* Methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ConsoleMessage */
    copy(): ConsoleMessage
    free(): void
    getLevel(): ConsoleMessageLevel
    getLine(): number
    getSource(): ConsoleMessageSource
    getSourceId(): string
    getText(): string
    static name: string
}
abstract class ContextMenuClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class ContextMenuItemClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItemClass */
    readonly parentClass: GObject.InitiallyUnownedClass
    static name: string
}
class ContextMenuItemPrivate {
    static name: string
}
class ContextMenuPrivate {
    static name: string
}
abstract class DOMAttrClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttrClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMBlobClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlobClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMCDATASectionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASectionClass */
    readonly parentClass: DOMTextClass
    static name: string
}
abstract class DOMCSSRuleClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMCSSRuleListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMCSSStyleDeclarationClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclarationClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMCSSStyleSheetClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheetClass */
    readonly parentClass: DOMStyleSheetClass
    static name: string
}
abstract class DOMCSSValueClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValueClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMCharacterDataClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterDataClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMClientRectClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMClientRectListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMCommentClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCommentClass */
    readonly parentClass: DOMCharacterDataClass
    static name: string
}
abstract class DOMDOMImplementationClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementationClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMDOMSelectionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelectionClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMDOMTokenListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMDOMWindowClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindowClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMDocumentClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMDocumentFragmentClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragmentClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMDocumentTypeClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentTypeClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElementClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMEntityReferenceClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReferenceClass */
    readonly parentClass: DOMNodeClass
    static name: string
}
abstract class DOMEventClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMEventTargetIface {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTargetIface */
    readonly gIface: GObject.TypeInterface
    readonly dispatchEvent: (target: DOMEventTarget, event: DOMEvent) => boolean
    readonly addEventListener: (target: DOMEventTarget, eventName: string, handler: Function, useCapture: boolean) => boolean
    readonly removeEventListener: (target: DOMEventTarget, eventName: string, handler: Function, useCapture: boolean) => boolean
    static name: string
}
abstract class DOMFileClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileClass */
    readonly parentClass: DOMBlobClass
    static name: string
}
abstract class DOMFileListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMHTMLAnchorElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLAppletElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLAreaElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLBRElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLBaseElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLBaseFontElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLBodyElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLButtonElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLCanvasElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLCollectionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollectionClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMHTMLDListElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLDirectoryElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLDivElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLDocumentClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocumentClass */
    readonly parentClass: DOMDocumentClass
    static name: string
}
abstract class DOMHTMLElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElementClass */
    readonly parentClass: DOMElementClass
    static name: string
}
abstract class DOMHTMLEmbedElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLFieldSetElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLFontElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLFormElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLFrameElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLFrameSetElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLHRElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLHeadElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLHeadingElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLHtmlElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLIFrameElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLImageElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLInputElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLLIElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLLabelElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLLegendElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLLinkElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLMapElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLMarqueeElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLMenuElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLMetaElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLModElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLOListElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLObjectElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLOptGroupElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLOptionElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLOptionsCollectionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollectionClass */
    readonly parentClass: DOMHTMLCollectionClass
    static name: string
}
abstract class DOMHTMLParagraphElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLParamElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLPreElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLQuoteElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLScriptElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLSelectElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLStyleElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTableCaptionElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTableCellElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTableColElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTableElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTableRowElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTableSectionElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTextAreaElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLTitleElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMHTMLUListElementClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElementClass */
    readonly parentClass: DOMHTMLElementClass
    static name: string
}
abstract class DOMKeyboardEventClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEventClass */
    readonly parentClass: DOMUIEventClass
    static name: string
}
abstract class DOMMediaListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMMouseEventClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEventClass */
    readonly parentClass: DOMUIEventClass
    static name: string
}
abstract class DOMNamedNodeMapClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMapClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMNodeClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMNodeFilterIface {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilterIface */
    readonly gIface: GObject.TypeInterface
    readonly acceptNode: (filter: DOMNodeFilter, node: DOMNode) => number
    static name: string
}
abstract class DOMNodeIteratorClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIteratorClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMNodeListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMObjectClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObjectClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class DOMProcessingInstructionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstructionClass */
    readonly parentClass: DOMCharacterDataClass
    static name: string
}
abstract class DOMRangeClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRangeClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMStyleSheetClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMStyleSheetListClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetListClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMTextClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTextClass */
    readonly parentClass: DOMCharacterDataClass
    static name: string
}
abstract class DOMTreeWalkerClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalkerClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMUIEventClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEventClass */
    readonly parentClass: DOMEventClass
    static name: string
}
abstract class DOMWheelEventClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEventClass */
    readonly parentClass: DOMMouseEventClass
    static name: string
}
abstract class DOMXPathExpressionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpressionClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class DOMXPathNSResolverIface {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolverIface */
    readonly gIface: GObject.TypeInterface
    readonly lookupNamespaceUri: (resolver: DOMXPathNSResolver, prefix: string) => string
    static name: string
}
abstract class DOMXPathResultClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResultClass */
    readonly parentClass: DOMObjectClass
    static name: string
}
abstract class FrameClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.FrameClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class FramePrivate {
    static name: string
}
abstract class HitTestResultClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResultClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class HitTestResultPrivate {
    static name: string
}
abstract class ScriptWorldClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorldClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class ScriptWorldPrivate {
    static name: string
}
abstract class URIRequestClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequestClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class URIRequestPrivate {
    static name: string
}
abstract class URIResponseClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponseClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class URIResponsePrivate {
    static name: string
}
abstract class UserMessageClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessageClass */
    readonly parentClass: GObject.InitiallyUnownedClass
    static name: string
}
class UserMessagePrivate {
    static name: string
}
abstract class WebEditorClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditorClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class WebEditorPrivate {
    static name: string
}
abstract class WebExtensionClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtensionClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class WebExtensionPrivate {
    static name: string
}
abstract class WebHitTestResultClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResultClass */
    readonly parentClass: HitTestResultClass
    static name: string
}
class WebHitTestResultPrivate {
    static name: string
}
abstract class WebPageClass {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPageClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class WebPagePrivate {
    static name: string
}
class _ContextMenu {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension._ContextMenu */
    readonly parent: GObject.Object
    readonly priv: ContextMenuPrivate
    static name: string
}
class _ContextMenuItem {
    /* Fields of WebKit2WebExtension-5.0.WebKit2WebExtension._ContextMenuItem */
    readonly parent: GObject.InitiallyUnowned
    readonly priv: ContextMenuItemPrivate
    static name: string
}
}
export default WebKit2WebExtension;