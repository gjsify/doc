/**
 * TelepathyGLib-0.12
 */

import type * as Gjs from './Gjs';
import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';

export namespace TelepathyGLib {

enum AccessControlType {
    WHITELIST,
    PUBLISH_LIST,
    GROUP,
    OPEN,
    SUBSCRIBE_OR_PUBLISH_LIST,
    CLOSED,
    NOT_UNDERSTOOD,
}
enum CMInfoSource {
    NONE,
    FILE,
    LIVE,
}
enum CallContentDisposition {
    NONE,
    INITIAL,
}
enum CallContentPacketizationType {
    RTP,
    RAW,
    MSN_WEBCAM,
}
enum CallState {
    UNKNOWN,
    PENDING_INITIATOR,
    INITIALISING,
    INITIALISED,
    ACCEPTED,
    ACTIVE,
    ENDED,
}
enum CallStateChangeReason {
    UNKNOWN,
    PROGRESS_MADE,
    USER_REQUESTED,
    FORWARDED,
    REJECTED,
    NO_ANSWER,
    INVALID_CONTACT,
    PERMISSION_DENIED,
    BUSY,
    INTERNAL_ERROR,
    SERVICE_ERROR,
    NETWORK_ERROR,
    MEDIA_ERROR,
    CONNECTIVITY_ERROR,
}
enum CallStreamCandidateType {
    NONE,
    HOST,
    SERVER_REFLEXIVE,
    PEER_REFLEXIVE,
    RELAY,
    MULTICAST,
}
enum CaptchaCancelReason {
    USER_CANCELLED,
    NOT_SUPPORTED,
    SERVICE_CONFUSED,
}
enum CaptchaStatus {
    LOCAL_PENDING,
    REMOTE_PENDING,
    SUCCEEDED,
    TRY_AGAIN,
    FAILED,
}
enum ChannelChatState {
    GONE,
    INACTIVE,
    ACTIVE,
    PAUSED,
    COMPOSING,
}
enum ChannelContactSearchState {
    NOT_STARTED,
    IN_PROGRESS,
    MORE_AVAILABLE,
    COMPLETED,
    FAILED,
}
enum ChannelGroupChangeReason {
    NONE,
    OFFLINE,
    KICKED,
    BUSY,
    INVITED,
    BANNED,
    ERROR,
    INVALID_CONTACT,
    NO_ANSWER,
    RENAMED,
    PERMISSION_DENIED,
    SEPARATED,
}
enum ChannelTextMessageType {
    NORMAL,
    ACTION,
    NOTICE,
    AUTO_REPLY,
    DELIVERY_REPORT,
}
enum ChannelTextSendError {
    UNKNOWN,
    OFFLINE,
    INVALID_CONTACT,
    PERMISSION_DENIED,
    TOO_LONG,
    NOT_IMPLEMENTED,
}
enum ConnectionPresenceType {
    UNSET,
    OFFLINE,
    AVAILABLE,
    AWAY,
    EXTENDED_AWAY,
    HIDDEN,
    BUSY,
    UNKNOWN,
    ERROR,
}
enum ConnectionStatus {
    CONNECTED,
    CONNECTING,
    DISCONNECTED,
}
enum ConnectionStatusReason {
    NONE_SPECIFIED,
    REQUESTED,
    NETWORK_ERROR,
    AUTHENTICATION_FAILED,
    ENCRYPTION_ERROR,
    NAME_IN_USE,
    CERT_NOT_PROVIDED,
    CERT_UNTRUSTED,
    CERT_EXPIRED,
    CERT_NOT_ACTIVATED,
    CERT_HOSTNAME_MISMATCH,
    CERT_FINGERPRINT_MISMATCH,
    CERT_SELF_SIGNED,
    CERT_OTHER_ERROR,
    CERT_REVOKED,
    CERT_INSECURE,
    CERT_LIMIT_EXCEEDED,
}
enum ContactFeature {
    ALIAS,
    AVATAR_TOKEN,
    PRESENCE,
    LOCATION,
    CAPABILITIES,
    AVATAR_DATA,
    CONTACT_INFO,
    CLIENT_TYPES,
    SUBSCRIPTION_STATES,
    CONTACT_GROUPS,
    CONTACT_BLOCKING,
}
enum ContactListState {
    NONE,
    WAITING,
    FAILURE,
    SUCCESS,
}
enum ContactMetadataStorageType {
    NONE,
    SUBSCRIBED_OR_PENDING,
    SUBSCRIBED,
    ANYONE,
}
enum DBusError {
    UNKNOWN_REMOTE_ERROR,
    PROXY_UNREFERENCED,
    NO_INTERFACE,
    NAME_OWNER_LOST,
    INVALID_BUS_NAME,
    INVALID_INTERFACE_NAME,
    INVALID_OBJECT_PATH,
    INVALID_MEMBER_NAME,
    OBJECT_REMOVED,
    CANCELLED,
    INCONSISTENT,
}
enum DTMFEvent {
    DIGIT_0,
    DIGIT_1,
    DIGIT_2,
    DIGIT_3,
    DIGIT_4,
    DIGIT_5,
    DIGIT_6,
    DIGIT_7,
    DIGIT_8,
    DIGIT_9,
    ASTERISK,
    HASH,
    LETTER_A,
    LETTER_B,
    LETTER_C,
    LETTER_D,
}
enum DebugLevel {
    ERROR,
    CRITICAL,
    WARNING,
    MESSAGE,
    INFO,
    DEBUG,
}
enum DeliveryStatus {
    UNKNOWN,
    DELIVERED,
    TEMPORARILY_FAILED,
    PERMANENTLY_FAILED,
    ACCEPTED,
    READ,
    DELETED,
}
enum Error {
    NETWORK_ERROR,
    NOT_IMPLEMENTED,
    INVALID_ARGUMENT,
    NOT_AVAILABLE,
    PERMISSION_DENIED,
    DISCONNECTED,
    INVALID_HANDLE,
    CHANNEL_BANNED,
    CHANNEL_FULL,
    CHANNEL_INVITE_ONLY,
    NOT_YOURS,
    CANCELLED,
    AUTHENTICATION_FAILED,
    ENCRYPTION_NOT_AVAILABLE,
    ENCRYPTION_ERROR,
    CERT_NOT_PROVIDED,
    CERT_UNTRUSTED,
    CERT_EXPIRED,
    CERT_NOT_ACTIVATED,
    CERT_FINGERPRINT_MISMATCH,
    CERT_HOSTNAME_MISMATCH,
    CERT_SELF_SIGNED,
    CERT_INVALID,
    NOT_CAPABLE,
    OFFLINE,
    CHANNEL_KICKED,
    BUSY,
    NO_ANSWER,
    DOES_NOT_EXIST,
    TERMINATED,
    CONNECTION_REFUSED,
    CONNECTION_FAILED,
    CONNECTION_LOST,
    ALREADY_CONNECTED,
    CONNECTION_REPLACED,
    REGISTRATION_EXISTS,
    SERVICE_BUSY,
    RESOURCE_UNAVAILABLE,
    WOULD_BREAK_ANONYMITY,
    CERT_REVOKED,
    CERT_INSECURE,
    CERT_LIMIT_EXCEEDED,
    NOT_YET,
    REJECTED,
    PICKED_UP_ELSEWHERE,
    CONFUSED,
    SERVICE_CONFUSED,
    EMERGENCY_CALLS_NOT_SUPPORTED,
    SOFTWARE_UPGRADE_REQUIRED,
    INSUFFICIENT_BALANCE,
    MEDIA_CODECS_INCOMPATIBLE,
    MEDIA_UNSUPPORTED_TYPE,
    MEDIA_STREAMING_ERROR,
    CAPTCHA_NOT_SUPPORTED,
}
enum FileHashType {
    NONE,
    MD5,
    SHA1,
    SHA256,
}
enum FileTransferState {
    NONE,
    PENDING,
    ACCEPTED,
    OPEN,
    COMPLETED,
    CANCELLED,
}
enum FileTransferStateChangeReason {
    NONE,
    REQUESTED,
    LOCAL_STOPPED,
    REMOTE_STOPPED,
    LOCAL_ERROR,
    REMOTE_ERROR,
}
enum HTTPMethod {
    GET,
    POST,
}
enum HandleType {
    NONE,
    CONTACT,
    ROOM,
    LIST,
    GROUP,
}
enum LocalHoldState {
    UNHELD,
    HELD,
    PENDING_HOLD,
    PENDING_UNHOLD,
}
enum LocalHoldStateReason {
    NONE,
    REQUESTED,
    RESOURCE_NOT_AVAILABLE,
}
enum MediaStreamBaseProto {
    UDP,
    TCP,
}
enum MediaStreamDirection {
    NONE,
    SEND,
    RECEIVE,
    BIDIRECTIONAL,
}
enum MediaStreamError {
    UNKNOWN,
    EOS,
    CODEC_NEGOTIATION_FAILED,
    CONNECTION_FAILED,
    NETWORK_ERROR,
    NO_CODECS,
    INVALID_CM_BEHAVIOR,
    MEDIA_ERROR,
}
enum MediaStreamState {
    DISCONNECTED,
    CONNECTING,
    CONNECTED,
}
enum MediaStreamTransportType {
    LOCAL,
    DERIVED,
    RELAY,
}
enum MediaStreamType {
    AUDIO,
    VIDEO,
}
enum RCPTXRRTTMode {
    ALL,
    SENDER,
}
enum RichPresenceAccessControlType {
    WHITELIST,
    PUBLISH_LIST,
    GROUP,
    OPEN,
}
enum SASLAbortReason {
    INVALID_CHALLENGE,
    USER_ABORT,
}
enum SASLStatus {
    NOT_STARTED,
    IN_PROGRESS,
    SERVER_SUCCEEDED,
    CLIENT_ACCEPTED,
    SUCCEEDED,
    SERVER_FAILED,
    CLIENT_FAILED,
}
enum SendingState {
    NONE,
    PENDING_SEND,
    SENDING,
    PENDING_STOP_SENDING,
}
enum ServicePointType {
    NONE,
    EMERGENCY,
    COUNSELING,
}
enum SocketAccessControl {
    LOCALHOST,
    PORT,
    NETMASK,
    CREDENTIALS,
}
enum SocketAddressType {
    UNIX,
    ABSTRACT_UNIX,
    IPV4,
    IPV6,
}
enum StreamComponent {
    UNKNOWN,
    DATA,
    CONTROL,
}
enum StreamEndpointState {
    CONNECTING,
    PROVISIONALLY_CONNECTED,
    FULLY_CONNECTED,
    EXHAUSTED_CANDIDATES,
    FAILED,
}
enum StreamFlowState {
    STOPPED,
    PENDING_START,
    PENDING_STOP,
    STARTED,
}
enum StreamTransportType {
    UNKNOWN,
    RAW_UDP,
    ICE,
    GTALK_P2P,
    WLM_2009,
    SHM,
    MULTICAST,
}
enum SubscriptionState {
    UNKNOWN,
    NO,
    REMOVED_REMOTELY,
    ASK,
    YES,
}
enum TLSCertificateRejectReason {
    UNKNOWN,
    UNTRUSTED,
    EXPIRED,
    NOT_ACTIVATED,
    FINGERPRINT_MISMATCH,
    HOSTNAME_MISMATCH,
    SELF_SIGNED,
    REVOKED,
    INSECURE,
    LIMIT_EXCEEDED,
}
enum TLSCertificateState {
    PENDING,
    ACCEPTED,
    REJECTED,
}
enum TubeChannelState {
    LOCAL_PENDING,
    REMOTE_PENDING,
    OPEN,
    NOT_OFFERED,
}
enum TubeState {
    LOCAL_PENDING,
    REMOTE_PENDING,
    OPEN,
}
enum TubeType {
    DBUS,
    STREAM,
}
enum AnonymityModeFlags {
    CLIENT_INFO,
    SHOW_CLIENT_INFO,
    NETWORK_INFO,
}
enum CallFlags {
    LOCALLY_HELD,
    LOCALLY_RINGING,
    LOCALLY_QUEUED,
    FORWARDED,
    CLEARING,
}
enum CallMemberFlags {
    RINGING,
    HELD,
    CONFERENCE_HOST,
}
enum CaptchaFlags {
    CAPTCHA_FLAGS_REQUIRED,
}
enum ChannelCallStateFlags {
    RINGING,
    QUEUED,
    HELD,
    FORWARDED,
    IN_PROGRESS,
    CONFERENCE_HOST,
}
enum ChannelGroupFlags {
    CAN_ADD,
    CAN_REMOVE,
    CAN_RESCIND,
    MESSAGE_ADD,
    MESSAGE_REMOVE,
    MESSAGE_ACCEPT,
    MESSAGE_REJECT,
    MESSAGE_RESCIND,
    CHANNEL_SPECIFIC_HANDLES,
    ONLY_ONE_GROUP,
    HANDLE_OWNERS_NOT_AVAILABLE,
    PROPERTIES,
    MEMBERS_CHANGED_DETAILED,
    MESSAGE_DEPART,
}
enum ChannelMediaCapabilities {
    AUDIO,
    VIDEO,
    NAT_TRAVERSAL_STUN,
    NAT_TRAVERSAL_GTALK_P2P,
    NAT_TRAVERSAL_ICE_UDP,
    IMMUTABLE_STREAMS,
}
enum ChannelPasswordFlags {
    PROVIDE,
    HINT,
}
enum ChannelTextMessageFlags {
    TRUNCATED,
    NON_TEXT_CONTENT,
    SCROLLBACK,
    RESCUED,
}
enum ConnMgrParamFlags {
    REQUIRED,
    REGISTER,
    HAS_DEFAULT,
    SECRET,
    DBUS_PROPERTY,
}
enum ConnectionAliasFlags {
    CONNECTION_ALIAS_FLAG_USER_SET,
}
enum ConnectionCapabilityFlags {
    CREATE,
    INVITE,
}
enum ContactBlockingCapabilities {
    CONTACT_BLOCKING_CAPABILITY_CAN_REPORT_ABUSIVE,
}
enum ContactInfoFieldFlags {
    PARAMETERS_EXACT,
    OVERWRITTEN_BY_NICKNAME,
}
enum ContactInfoFlags {
    CAN_SET,
    PUSH,
}
enum DBusNameType {
    UNIQUE,
    WELL_KNOWN,
    BUS_DAEMON,
    NOT_BUS_DAEMON,
    ANY,
}
enum DBusPropertiesMixinFlags {
    READ,
    WRITE,
    EMITS_CHANGED,
    EMITS_INVALIDATED,
}
enum DeliveryReportingSupportFlags {
    FAILURES,
    SUCCESSES,
    READ,
    DELETED,
}
enum LocationFeatures {
    LOCATION_FEATURE_CAN_SET,
}
enum MailNotificationFlags {
    SUPPORTS_UNREAD_MAIL_COUNT,
    SUPPORTS_UNREAD_MAILS,
    EMITS_MAILS_RECEIVED,
    SUPPORTS_REQUEST_INBOX_URL,
    SUPPORTS_REQUEST_MAIL_URL,
    THREAD_BASED,
}
enum MediaStreamPendingSend {
    LOCAL_SEND,
    REMOTE_SEND,
}
enum MessagePartSupportFlags {
    ONE_ATTACHMENT,
    MULTIPLE_ATTACHMENTS,
}
enum MessageSendingFlags {
    DELIVERY,
    READ,
    DELETED,
}
enum PropertyFlags {
    READ,
    WRITE,
}
enum RTCPXRStatisticsFlags {
    LOSS,
    DUPLICATE,
    JITTER,
    TTL,
    HL,
}
enum StorageRestrictionFlags {
    PARAMETERS,
    ENABLED,
    PRESENCE,
    SERVICE,
}
export const ACCOUNT_MANAGER_BUS_NAME: string
export const ACCOUNT_MANAGER_OBJECT_PATH: string
export const ACCOUNT_OBJECT_PATH_BASE: string
export const CHANNEL_DISPATCHER_BUS_NAME: string
export const CHANNEL_DISPATCHER_OBJECT_PATH: string
export const CLIENT_BUS_NAME_BASE: string
export const CLIENT_OBJECT_PATH_BASE: string
export const CM_BUS_NAME_BASE: string
export const CM_OBJECT_PATH_BASE: string
export const CONN_BUS_NAME_BASE: string
export const CONN_OBJECT_PATH_BASE: string
export const DEBUG_OBJECT_PATH: string
export const ERROR_PREFIX: string
export const IFACE_ACCOUNT: string
export const IFACE_ACCOUNT_INTERFACE_ADDRESSING: string
export const IFACE_ACCOUNT_INTERFACE_AVATAR: string
export const IFACE_ACCOUNT_INTERFACE_STORAGE: string
export const IFACE_ACCOUNT_MANAGER: string
export const IFACE_AUTHENTICATION_TLS_CERTIFICATE: string
export const IFACE_CALL_CONTENT: string
export const IFACE_CALL_CONTENT_INTERFACE_AUDIO_CONTROL: string
export const IFACE_CALL_CONTENT_INTERFACE_DTMF: string
export const IFACE_CALL_CONTENT_INTERFACE_MEDIA: string
export const IFACE_CALL_CONTENT_INTERFACE_VIDEO_CONTROL: string
export const IFACE_CALL_CONTENT_MEDIA_DESCRIPTION: string
export const IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS: string
export const IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK: string
export const IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS: string
export const IFACE_CALL_STREAM: string
export const IFACE_CALL_STREAM_ENDPOINT: string
export const IFACE_CALL_STREAM_INTERFACE_MEDIA: string
export const IFACE_CHANNEL: string
export const IFACE_CHANNEL_DISPATCHER: string
export const IFACE_CHANNEL_DISPATCHER_INTERFACE_MESSAGES1: string
export const IFACE_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST: string
export const IFACE_CHANNEL_DISPATCH_OPERATION: string
export const IFACE_CHANNEL_INTERFACE_ANONYMITY: string
export const IFACE_CHANNEL_INTERFACE_CALL_STATE: string
export const IFACE_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION: string
export const IFACE_CHANNEL_INTERFACE_CHAT_STATE: string
export const IFACE_CHANNEL_INTERFACE_CONFERENCE: string
export const IFACE_CHANNEL_INTERFACE_DESTROYABLE: string
export const IFACE_CHANNEL_INTERFACE_DTMF: string
export const IFACE_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA: string
export const IFACE_CHANNEL_INTERFACE_GROUP: string
export const IFACE_CHANNEL_INTERFACE_HOLD: string
export const IFACE_CHANNEL_INTERFACE_MEDIA_SIGNALLING: string
export const IFACE_CHANNEL_INTERFACE_MESSAGES: string
export const IFACE_CHANNEL_INTERFACE_PASSWORD: string
export const IFACE_CHANNEL_INTERFACE_ROOM: string
export const IFACE_CHANNEL_INTERFACE_ROOM_CONFIG: string
export const IFACE_CHANNEL_INTERFACE_SASL_AUTHENTICATION: string
export const IFACE_CHANNEL_INTERFACE_SECURABLE: string
export const IFACE_CHANNEL_INTERFACE_SERVICE_POINT: string
export const IFACE_CHANNEL_INTERFACE_SMS: string
export const IFACE_CHANNEL_INTERFACE_SUBJECT: string
export const IFACE_CHANNEL_INTERFACE_TUBE: string
export const IFACE_CHANNEL_REQUEST: string
export const IFACE_CHANNEL_TYPE_CALL: string
export const IFACE_CHANNEL_TYPE_CONTACT_LIST: string
export const IFACE_CHANNEL_TYPE_CONTACT_SEARCH: string
export const IFACE_CHANNEL_TYPE_DBUS_TUBE: string
export const IFACE_CHANNEL_TYPE_FILE_TRANSFER: string
export const IFACE_CHANNEL_TYPE_ROOM_LIST: string
export const IFACE_CHANNEL_TYPE_SERVER_AUTHENTICATION: string
export const IFACE_CHANNEL_TYPE_SERVER_TLS_CONNECTION: string
export const IFACE_CHANNEL_TYPE_STREAMED_MEDIA: string
export const IFACE_CHANNEL_TYPE_STREAM_TUBE: string
export const IFACE_CHANNEL_TYPE_TEXT: string
export const IFACE_CHANNEL_TYPE_TUBES: string
export const IFACE_CLIENT: string
export const IFACE_CLIENT_APPROVER: string
export const IFACE_CLIENT_HANDLER: string
export const IFACE_CLIENT_INTERFACE_REQUESTS: string
export const IFACE_CLIENT_OBSERVER: string
export const IFACE_CONNECTION: string
export const IFACE_CONNECTION_INTERFACE_ADDRESSING: string
export const IFACE_CONNECTION_INTERFACE_ALIASING: string
export const IFACE_CONNECTION_INTERFACE_ANONYMITY: string
export const IFACE_CONNECTION_INTERFACE_AVATARS: string
export const IFACE_CONNECTION_INTERFACE_BALANCE: string
export const IFACE_CONNECTION_INTERFACE_CAPABILITIES: string
export const IFACE_CONNECTION_INTERFACE_CELLULAR: string
export const IFACE_CONNECTION_INTERFACE_CLIENT_TYPES: string
export const IFACE_CONNECTION_INTERFACE_CONTACTS: string
export const IFACE_CONNECTION_INTERFACE_CONTACT_BLOCKING: string
export const IFACE_CONNECTION_INTERFACE_CONTACT_CAPABILITIES: string
export const IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS: string
export const IFACE_CONNECTION_INTERFACE_CONTACT_INFO: string
export const IFACE_CONNECTION_INTERFACE_CONTACT_LIST: string
export const IFACE_CONNECTION_INTERFACE_LOCATION: string
export const IFACE_CONNECTION_INTERFACE_MAIL_NOTIFICATION: string
export const IFACE_CONNECTION_INTERFACE_POWER_SAVING: string
export const IFACE_CONNECTION_INTERFACE_PRESENCE: string
export const IFACE_CONNECTION_INTERFACE_RENAMING: string
export const IFACE_CONNECTION_INTERFACE_REQUESTS: string
export const IFACE_CONNECTION_INTERFACE_SERVICE_POINT: string
export const IFACE_CONNECTION_INTERFACE_SIDECARS1: string
export const IFACE_CONNECTION_INTERFACE_SIMPLE_PRESENCE: string
export const IFACE_CONNECTION_MANAGER: string
export const IFACE_DBUS_DAEMON: string
export const IFACE_DBUS_INTROSPECTABLE: string
export const IFACE_DBUS_PEER: string
export const IFACE_DBUS_PROPERTIES: string
export const IFACE_DEBUG: string
export const IFACE_MEDIA_SESSION_HANDLER: string
export const IFACE_MEDIA_STREAM_HANDLER: string
export const IFACE_PROPERTIES_INTERFACE: string
export const IFACE_PROTOCOL: string
export const IFACE_PROTOCOL_INTERFACE_ADDRESSING: string
export const IFACE_PROTOCOL_INTERFACE_AVATARS: string
export const IFACE_PROTOCOL_INTERFACE_PRESENCE: string
export const NUM_ACCESS_CONTROL_TYPES: number
export const NUM_CALL_CONTENT_DISPOSITIONS: number
export const NUM_CALL_CONTENT_PACKETIZATION_TYPES: number
export const NUM_CALL_STATES: number
export const NUM_CALL_STATE_CHANGE_REASONS: number
export const NUM_CALL_STREAM_CANDIDATE_TYPES: number
export const NUM_CAPTCHA_CANCEL_REASONS: number
export const NUM_CAPTCHA_STATUSES: number
export const NUM_CHANNEL_CHAT_STATES: number
export const NUM_CHANNEL_CONTACT_SEARCH_STATES: number
export const NUM_CHANNEL_GROUP_CHANGE_REASONS: number
export const NUM_CHANNEL_TEXT_MESSAGE_TYPES: number
export const NUM_CHANNEL_TEXT_SEND_ERRORS: number
export const NUM_CONNECTION_PRESENCE_TYPES: number
export const NUM_CONNECTION_STATUSES: number
export const NUM_CONNECTION_STATUS_REASONS: number
export const NUM_CONTACT_FEATURES: number
export const NUM_CONTACT_LIST_STATES: number
export const NUM_CONTACT_METADATA_STORAGE_TYPES: number
export const NUM_DBUS_ERRORS: number
export const NUM_DEBUG_LEVELS: number
export const NUM_DELIVERY_STATUSES: number
export const NUM_DTMF_EVENTS: number
export const NUM_FILE_HASH_TYPES: number
export const NUM_FILE_TRANSFER_STATES: number
export const NUM_FILE_TRANSFER_STATE_CHANGE_REASONS: number
export const NUM_HANDLE_TYPES: number
export const NUM_HTTP_METHODS: number
export const NUM_LOCAL_HOLD_STATES: number
export const NUM_LOCAL_HOLD_STATE_REASONS: number
export const NUM_MEDIA_STREAM_BASE_PROTOS: number
export const NUM_MEDIA_STREAM_DIRECTIONS: number
export const NUM_MEDIA_STREAM_ERRORS: number
export const NUM_MEDIA_STREAM_STATES: number
export const NUM_MEDIA_STREAM_TRANSPORT_TYPES: number
export const NUM_MEDIA_STREAM_TYPES: number
export const NUM_RCPT_XR_RTT_MODES: number
export const NUM_RICH_PRESENCE_ACCESS_CONTROL_TYPES: number
export const NUM_SASL_ABORT_REASONS: number
export const NUM_SASL_STATUSES: number
export const NUM_SENDING_STATES: number
export const NUM_SERVICE_POINT_TYPES: number
export const NUM_SOCKET_ACCESS_CONTROLS: number
export const NUM_SOCKET_ADDRESS_TYPES: number
export const NUM_STREAM_COMPONENTS: number
export const NUM_STREAM_ENDPOINT_STATES: number
export const NUM_STREAM_FLOW_STATES: number
export const NUM_STREAM_TRANSPORT_TYPES: number
export const NUM_SUBSCRIPTION_STATES: number
export const NUM_TLS_CERTIFICATE_REJECT_REASONS: number
export const NUM_TLS_CERTIFICATE_STATES: number
export const NUM_TUBE_CHANNEL_STATES: number
export const NUM_TUBE_STATES: number
export const NUM_TUBE_TYPES: number
export const PROP_ACCOUNT_AUTOMATIC_PRESENCE: string
export const PROP_ACCOUNT_CHANGING_PRESENCE: string
export const PROP_ACCOUNT_CONNECTION: string
export const PROP_ACCOUNT_CONNECTION_ERROR: string
export const PROP_ACCOUNT_CONNECTION_ERROR_DETAILS: string
export const PROP_ACCOUNT_CONNECTION_STATUS: string
export const PROP_ACCOUNT_CONNECTION_STATUS_REASON: string
export const PROP_ACCOUNT_CONNECT_AUTOMATICALLY: string
export const PROP_ACCOUNT_CURRENT_PRESENCE: string
export const PROP_ACCOUNT_DISPLAY_NAME: string
export const PROP_ACCOUNT_ENABLED: string
export const PROP_ACCOUNT_HAS_BEEN_ONLINE: string
export const PROP_ACCOUNT_ICON: string
export const PROP_ACCOUNT_INTERFACES: string
export const PROP_ACCOUNT_INTERFACE_ADDRESSING_URI_SCHEMES: string
export const PROP_ACCOUNT_INTERFACE_AVATAR_AVATAR: string
export const PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_IDENTIFIER: string
export const PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_PROVIDER: string
export const PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_RESTRICTIONS: string
export const PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_SPECIFIC_INFORMATION: string
export const PROP_ACCOUNT_MANAGER_INTERFACES: string
export const PROP_ACCOUNT_MANAGER_INVALID_ACCOUNTS: string
export const PROP_ACCOUNT_MANAGER_SUPPORTED_ACCOUNT_PROPERTIES: string
export const PROP_ACCOUNT_MANAGER_VALID_ACCOUNTS: string
export const PROP_ACCOUNT_NICKNAME: string
export const PROP_ACCOUNT_NORMALIZED_NAME: string
export const PROP_ACCOUNT_PARAMETERS: string
export const PROP_ACCOUNT_REQUESTED_PRESENCE: string
export const PROP_ACCOUNT_SERVICE: string
export const PROP_ACCOUNT_SUPERSEDES: string
export const PROP_ACCOUNT_VALID: string
export const PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_CHAIN_DATA: string
export const PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_TYPE: string
export const PROP_AUTHENTICATION_TLS_CERTIFICATE_REJECTIONS: string
export const PROP_AUTHENTICATION_TLS_CERTIFICATE_STATE: string
export const PROP_CALL_CONTENT_DISPOSITION: string
export const PROP_CALL_CONTENT_INTERFACES: string
export const PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_INPUT_VOLUME: string
export const PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_OUTPUT_VOLUME: string
export const PROP_CALL_CONTENT_INTERFACE_DTMF_CURRENTLY_SENDING_TONES: string
export const PROP_CALL_CONTENT_INTERFACE_DTMF_DEFERRED_TONES: string
export const PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_EVENT: string
export const PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_STATE: string
export const PROP_CALL_CONTENT_INTERFACE_MEDIA_LOCAL_MEDIA_DESCRIPTIONS: string
export const PROP_CALL_CONTENT_INTERFACE_MEDIA_MEDIA_DESCRIPTION_OFFER: string
export const PROP_CALL_CONTENT_INTERFACE_MEDIA_PACKETIZATION: string
export const PROP_CALL_CONTENT_INTERFACE_MEDIA_REMOTE_MEDIA_DESCRIPTIONS: string
export const PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_BITRATE: string
export const PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_FRAMERATE: string
export const PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MANUAL_KEY_FRAMES: string
export const PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MTU: string
export const PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_VIDEO_RESOLUTION: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_CODECS: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_FURTHER_NEGOTIATION_REQUIRED: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_HAS_REMOTE_INFORMATION: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACES: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DLRR_MAX_SIZE: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DUPLICATE_RLE_MAX_SIZE: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_ENABLE_METRICS: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_LOSS_RLE_MAX_SIZE: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_PACKET_RECEIPT_TIMES_MAX_SIZE: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_RTT_MODE: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_STATISTICS_FLAGS: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_DOES_AVPF: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_FEEDBACK_MESSAGES: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS_HEADER_EXTENSIONS: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_REMOTE_CONTACT: string
export const PROP_CALL_CONTENT_MEDIA_DESCRIPTION_SSRCS: string
export const PROP_CALL_CONTENT_NAME: string
export const PROP_CALL_CONTENT_STREAMS: string
export const PROP_CALL_CONTENT_TYPE: string
export const PROP_CALL_STREAM_CAN_REQUEST_RECEIVING: string
export const PROP_CALL_STREAM_ENDPOINT_CONTROLLING: string
export const PROP_CALL_STREAM_ENDPOINT_ENDPOINT_STATE: string
export const PROP_CALL_STREAM_ENDPOINT_IS_ICE_LITE: string
export const PROP_CALL_STREAM_ENDPOINT_REMOTE_CANDIDATES: string
export const PROP_CALL_STREAM_ENDPOINT_REMOTE_CREDENTIALS: string
export const PROP_CALL_STREAM_ENDPOINT_SELECTED_CANDIDATE_PAIRS: string
export const PROP_CALL_STREAM_ENDPOINT_TRANSPORT: string
export const PROP_CALL_STREAM_INTERFACES: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_ENDPOINTS: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_HAS_SERVER_INFO: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_ICE_RESTART_PENDING: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CANDIDATES: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CREDENTIALS: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_RECEIVING_STATE: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_RELAY_INFO: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_SENDING_STATE: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_STUN_SERVERS: string
export const PROP_CALL_STREAM_INTERFACE_MEDIA_TRANSPORT: string
export const PROP_CALL_STREAM_LOCAL_SENDING_STATE: string
export const PROP_CALL_STREAM_REMOTE_MEMBERS: string
export const PROP_CALL_STREAM_REMOTE_MEMBER_IDENTIFIERS: string
export const PROP_CHANNEL_CHANNEL_TYPE: string
export const PROP_CHANNEL_DISPATCHER_INTERFACES: string
export const PROP_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST_DISPATCH_OPERATIONS: string
export const PROP_CHANNEL_DISPATCHER_SUPPORTS_REQUEST_HINTS: string
export const PROP_CHANNEL_DISPATCH_OPERATION_ACCOUNT: string
export const PROP_CHANNEL_DISPATCH_OPERATION_CHANNELS: string
export const PROP_CHANNEL_DISPATCH_OPERATION_CONNECTION: string
export const PROP_CHANNEL_DISPATCH_OPERATION_INTERFACES: string
export const PROP_CHANNEL_DISPATCH_OPERATION_POSSIBLE_HANDLERS: string
export const PROP_CHANNEL_INITIATOR_HANDLE: string
export const PROP_CHANNEL_INITIATOR_ID: string
export const PROP_CHANNEL_INTERFACES: string
export const PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY: string
export const PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MODES: string
export const PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMOUS_ID: string
export const PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAN_RETRY_CAPTCHA: string
export const PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR: string
export const PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR_DETAILS: string
export const PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_STATUS: string
export const PROP_CHANNEL_INTERFACE_CHAT_STATE_CHAT_STATES: string
export const PROP_CHANNEL_INTERFACE_CONFERENCE_CHANNELS: string
export const PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_CHANNELS: string
export const PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_HANDLES: string
export const PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_IDS: string
export const PROP_CHANNEL_INTERFACE_CONFERENCE_INVITATION_MESSAGE: string
export const PROP_CHANNEL_INTERFACE_CONFERENCE_ORIGINAL_CHANNELS: string
export const PROP_CHANNEL_INTERFACE_DTMF_CURRENTLY_SENDING_TONES: string
export const PROP_CHANNEL_INTERFACE_DTMF_DEFERRED_TONES: string
export const PROP_CHANNEL_INTERFACE_DTMF_INITIAL_TONES: string
export const PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA: string
export const PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_SERVICE_NAME: string
export const PROP_CHANNEL_INTERFACE_GROUP_GROUP_FLAGS: string
export const PROP_CHANNEL_INTERFACE_GROUP_HANDLE_OWNERS: string
export const PROP_CHANNEL_INTERFACE_GROUP_LOCAL_PENDING_MEMBERS: string
export const PROP_CHANNEL_INTERFACE_GROUP_MEMBERS: string
export const PROP_CHANNEL_INTERFACE_GROUP_MEMBER_IDENTIFIERS: string
export const PROP_CHANNEL_INTERFACE_GROUP_REMOTE_PENDING_MEMBERS: string
export const PROP_CHANNEL_INTERFACE_GROUP_SELF_HANDLE: string
export const PROP_CHANNEL_INTERFACE_MESSAGES_DELIVERY_REPORTING_SUPPORT: string
export const PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_PART_SUPPORT_FLAGS: string
export const PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_TYPES: string
export const PROP_CHANNEL_INTERFACE_MESSAGES_PENDING_MESSAGES: string
export const PROP_CHANNEL_INTERFACE_MESSAGES_SUPPORTED_CONTENT_TYPES: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_ANONYMOUS: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CAN_UPDATE_CONFIGURATION: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CONFIGURATION_RETRIEVED: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_DESCRIPTION: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_INVITEONLY: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_LIMIT: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MODERATED: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MUTABLE_PROPERTIES: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_HINT: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_PROTECTED: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PERSISTENT: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PRIVATE: string
export const PROP_CHANNEL_INTERFACE_ROOM_CONFIG_TITLE: string
export const PROP_CHANNEL_INTERFACE_ROOM_CREATION_TIMESTAMP: string
export const PROP_CHANNEL_INTERFACE_ROOM_CREATOR: string
export const PROP_CHANNEL_INTERFACE_ROOM_CREATOR_HANDLE: string
export const PROP_CHANNEL_INTERFACE_ROOM_ROOM_NAME: string
export const PROP_CHANNEL_INTERFACE_ROOM_SERVER: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AUTHORIZATION_IDENTITY: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AVAILABLE_MECHANISMS: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_CAN_TRY_AGAIN: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_REALM: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_USERNAME: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_HAS_INITIAL_DATA: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_MAY_SAVE_RESPONSE: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR_DETAILS: string
export const PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_STATUS: string
export const PROP_CHANNEL_INTERFACE_SECURABLE_ENCRYPTED: string
export const PROP_CHANNEL_INTERFACE_SECURABLE_VERIFIED: string
export const PROP_CHANNEL_INTERFACE_SERVICE_POINT_CURRENT_SERVICE_POINT: string
export const PROP_CHANNEL_INTERFACE_SERVICE_POINT_INITIAL_SERVICE_POINT: string
export const PROP_CHANNEL_INTERFACE_SMS_FLASH: string
export const PROP_CHANNEL_INTERFACE_SMS_SMS_CHANNEL: string
export const PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR: string
export const PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR_HANDLE: string
export const PROP_CHANNEL_INTERFACE_SUBJECT_CAN_SET: string
export const PROP_CHANNEL_INTERFACE_SUBJECT_SUBJECT: string
export const PROP_CHANNEL_INTERFACE_SUBJECT_TIMESTAMP: string
export const PROP_CHANNEL_INTERFACE_TUBE_PARAMETERS: string
export const PROP_CHANNEL_INTERFACE_TUBE_STATE: string
export const PROP_CHANNEL_REQUESTED: string
export const PROP_CHANNEL_REQUEST_ACCOUNT: string
export const PROP_CHANNEL_REQUEST_HINTS: string
export const PROP_CHANNEL_REQUEST_INTERFACES: string
export const PROP_CHANNEL_REQUEST_PREFERRED_HANDLER: string
export const PROP_CHANNEL_REQUEST_REQUESTS: string
export const PROP_CHANNEL_REQUEST_USER_ACTION_TIME: string
export const PROP_CHANNEL_TARGET_HANDLE: string
export const PROP_CHANNEL_TARGET_HANDLE_TYPE: string
export const PROP_CHANNEL_TARGET_ID: string
export const PROP_CHANNEL_TYPE_CALL_CALL_FLAGS: string
export const PROP_CHANNEL_TYPE_CALL_CALL_MEMBERS: string
export const PROP_CHANNEL_TYPE_CALL_CALL_STATE: string
export const PROP_CHANNEL_TYPE_CALL_CALL_STATE_DETAILS: string
export const PROP_CHANNEL_TYPE_CALL_CALL_STATE_REASON: string
export const PROP_CHANNEL_TYPE_CALL_CONTENTS: string
export const PROP_CHANNEL_TYPE_CALL_HARDWARE_STREAMING: string
export const PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO: string
export const PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO_NAME: string
export const PROP_CHANNEL_TYPE_CALL_INITIAL_TRANSPORT: string
export const PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO: string
export const PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO_NAME: string
export const PROP_CHANNEL_TYPE_CALL_MEMBER_IDENTIFIERS: string
export const PROP_CHANNEL_TYPE_CALL_MUTABLE_CONTENTS: string
export const PROP_CHANNEL_TYPE_CONTACT_SEARCH_AVAILABLE_SEARCH_KEYS: string
export const PROP_CHANNEL_TYPE_CONTACT_SEARCH_LIMIT: string
export const PROP_CHANNEL_TYPE_CONTACT_SEARCH_SEARCH_STATE: string
export const PROP_CHANNEL_TYPE_CONTACT_SEARCH_SERVER: string
export const PROP_CHANNEL_TYPE_DBUS_TUBE_DBUS_NAMES: string
export const PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME: string
export const PROP_CHANNEL_TYPE_DBUS_TUBE_SUPPORTED_ACCESS_CONTROLS: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_AVAILABLE_SOCKET_TYPES: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH_TYPE: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_FILE_COLLECTION: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_STATE: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_TRANSFERRED_BYTES: string
export const PROP_CHANNEL_TYPE_FILE_TRANSFER_URI: string
export const PROP_CHANNEL_TYPE_ROOM_LIST_SERVER: string
export const PROP_CHANNEL_TYPE_SERVER_AUTHENTICATION_AUTHENTICATION_METHOD: string
export const PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_HOSTNAME: string
export const PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_REFERENCE_IDENTITIES: string
export const PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_SERVER_CERTIFICATE: string
export const PROP_CHANNEL_TYPE_STREAMED_MEDIA_IMMUTABLE_STREAMS: string
export const PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_AUDIO: string
export const PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_VIDEO: string
export const PROP_CHANNEL_TYPE_STREAM_TUBE_SERVICE: string
export const PROP_CHANNEL_TYPE_STREAM_TUBE_SUPPORTED_SOCKET_TYPES: string
export const PROP_CLIENT_APPROVER_APPROVER_CHANNEL_FILTER: string
export const PROP_CLIENT_HANDLER_BYPASS_APPROVAL: string
export const PROP_CLIENT_HANDLER_CAPABILITIES: string
export const PROP_CLIENT_HANDLER_HANDLED_CHANNELS: string
export const PROP_CLIENT_HANDLER_HANDLER_CHANNEL_FILTER: string
export const PROP_CLIENT_INTERFACES: string
export const PROP_CLIENT_OBSERVER_DELAY_APPROVERS: string
export const PROP_CLIENT_OBSERVER_OBSERVER_CHANNEL_FILTER: string
export const PROP_CLIENT_OBSERVER_RECOVER: string
export const PROP_CONNECTION_HAS_IMMORTAL_HANDLES: string
export const PROP_CONNECTION_INTERFACES: string
export const PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY: string
export const PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MODES: string
export const PROP_CONNECTION_INTERFACE_ANONYMITY_SUPPORTED_ANONYMITY_MODES: string
export const PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES: string
export const PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT: string
export const PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH: string
export const PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT: string
export const PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH: string
export const PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT: string
export const PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH: string
export const PROP_CONNECTION_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES: string
export const PROP_CONNECTION_INTERFACE_BALANCE_ACCOUNT_BALANCE: string
export const PROP_CONNECTION_INTERFACE_BALANCE_MANAGE_CREDIT_URI: string
export const PROP_CONNECTION_INTERFACE_CELLULAR_IMSI: string
export const PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_NATIONAL_CHARACTER_SET: string
export const PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_REDUCED_CHARACTER_SET: string
export const PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_SERVICE_CENTRE: string
export const PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_VALIDITY_PERIOD: string
export const PROP_CONNECTION_INTERFACE_CELLULAR_OVERRIDE_MESSAGE_SERVICE_CENTRE: string
export const PROP_CONNECTION_INTERFACE_CONTACTS_CONTACT_ATTRIBUTE_INTERFACES: string
export const PROP_CONNECTION_INTERFACE_CONTACT_BLOCKING_CONTACT_BLOCKING_CAPABILITIES: string
export const PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_DISJOINT_GROUPS: string
export const PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS: string
export const PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUP_STORAGE: string
export const PROP_CONNECTION_INTERFACE_CONTACT_INFO_CONTACT_INFO_FLAGS: string
export const PROP_CONNECTION_INTERFACE_CONTACT_INFO_SUPPORTED_FIELDS: string
export const PROP_CONNECTION_INTERFACE_CONTACT_LIST_CAN_CHANGE_CONTACT_LIST: string
export const PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_PERSISTS: string
export const PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_STATE: string
export const PROP_CONNECTION_INTERFACE_CONTACT_LIST_DOWNLOAD_AT_CONNECTION: string
export const PROP_CONNECTION_INTERFACE_CONTACT_LIST_REQUEST_USES_MESSAGE: string
export const PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL: string
export const PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL_TYPES: string
export const PROP_CONNECTION_INTERFACE_LOCATION_SUPPORTED_LOCATION_FEATURES: string
export const PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_ADDRESS: string
export const PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_NOTIFICATION_FLAGS: string
export const PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAILS: string
export const PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAIL_COUNT: string
export const PROP_CONNECTION_INTERFACE_POWER_SAVING_POWER_SAVING_ACTIVE: string
export const PROP_CONNECTION_INTERFACE_REQUESTS_CHANNELS: string
export const PROP_CONNECTION_INTERFACE_REQUESTS_REQUESTABLE_CHANNEL_CLASSES: string
export const PROP_CONNECTION_INTERFACE_SERVICE_POINT_KNOWN_SERVICE_POINTS: string
export const PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_MAXIMUM_STATUS_MESSAGE_LENGTH: string
export const PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_STATUSES: string
export const PROP_CONNECTION_MANAGER_INTERFACES: string
export const PROP_CONNECTION_MANAGER_PROTOCOLS: string
export const PROP_CONNECTION_SELF_HANDLE: string
export const PROP_CONNECTION_SELF_ID: string
export const PROP_CONNECTION_STATUS: string
export const PROP_DEBUG_ENABLED: string
export const PROP_MEDIA_STREAM_HANDLER_CREATED_LOCALLY: string
export const PROP_MEDIA_STREAM_HANDLER_NAT_TRAVERSAL: string
export const PROP_MEDIA_STREAM_HANDLER_RELAY_INFO: string
export const PROP_MEDIA_STREAM_HANDLER_STUN_SERVERS: string
export const PROP_PROTOCOL_AUTHENTICATION_TYPES: string
export const PROP_PROTOCOL_CONNECTION_INTERFACES: string
export const PROP_PROTOCOL_ENGLISH_NAME: string
export const PROP_PROTOCOL_ICON: string
export const PROP_PROTOCOL_INTERFACES: string
export const PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_URI_SCHEMES: string
export const PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_VCARD_FIELDS: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH: string
export const PROP_PROTOCOL_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES: string
export const PROP_PROTOCOL_INTERFACE_PRESENCE_STATUSES: string
export const PROP_PROTOCOL_PARAMETERS: string
export const PROP_PROTOCOL_REQUESTABLE_CHANNEL_CLASSES: string
export const PROP_PROTOCOL_VCARD_FIELD: string
export const TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_GTALK_P2P: string
export const TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_ICE_UDP: string
export const TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_2009: string
export const TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_8_5: string
export const TOKEN_CHANNEL_TYPE_CALL_AUDIO: string
export const TOKEN_CHANNEL_TYPE_CALL_GTALK_P2P: string
export const TOKEN_CHANNEL_TYPE_CALL_ICE: string
export const TOKEN_CHANNEL_TYPE_CALL_SHM: string
export const TOKEN_CHANNEL_TYPE_CALL_VIDEO: string
export const TOKEN_CHANNEL_TYPE_CALL_WLM_2009: string
export const TOKEN_CONNECTION_CONTACT_ID: string
export const TOKEN_CONNECTION_INTERFACE_ADDRESSING_ADDRESSES: string
export const TOKEN_CONNECTION_INTERFACE_ADDRESSING_URIS: string
export const TOKEN_CONNECTION_INTERFACE_ALIASING_ALIAS: string
export const TOKEN_CONNECTION_INTERFACE_AVATARS_TOKEN: string
export const TOKEN_CONNECTION_INTERFACE_CAPABILITIES_CAPS: string
export const TOKEN_CONNECTION_INTERFACE_CLIENT_TYPES_CLIENT_TYPES: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_BLOCKING_BLOCKED: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_CAPABILITIES_CAPABILITIES: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_INFO_INFO: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH_REQUEST: string
export const TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_SUBSCRIBE: string
export const TOKEN_CONNECTION_INTERFACE_LOCATION_LOCATION: string
export const TOKEN_CONNECTION_INTERFACE_SIMPLE_PRESENCE_PRESENCE: string
export const UNKNOWN_CONNECTION_STATUS: ConnectionStatus
export const UNKNOWN_HANDLE_TYPE: HandleType
export const USER_ACTION_TIME_NOT_USER_ACTION: number
function asv_get_boolean(asv: GLib.HashTable, key: string): [ /* returnType */ boolean, /* valid */ boolean ]
function asv_get_boxed(asv: GLib.HashTable, key: string, type: GObject.Type): object | null
function asv_get_bytes(asv: GLib.HashTable, key: string): Uint8Array[] | null
function asv_get_double(asv: GLib.HashTable, key: string): [ /* returnType */ number, /* valid */ boolean ]
function asv_get_int32(asv: GLib.HashTable, key: string): [ /* returnType */ number, /* valid */ boolean ]
function asv_get_int64(asv: GLib.HashTable, key: string): [ /* returnType */ number, /* valid */ boolean ]
function asv_get_object_path(asv: GLib.HashTable, key: string): string | null
function asv_get_string(asv: GLib.HashTable, key: string): string | null
function asv_get_strv(asv: GLib.HashTable, key: string): string[] | null
function asv_get_uint32(asv: GLib.HashTable, key: string): [ /* returnType */ number, /* valid */ boolean ]
function asv_get_uint64(asv: GLib.HashTable, key: string): [ /* returnType */ number, /* valid */ boolean ]
function dbus_check_valid_bus_name(name: string, allow_types: DBusNameType): boolean
function dbus_check_valid_interface_name(name: string): boolean
function dbus_check_valid_member_name(name: string): boolean
function dbus_check_valid_object_path(path: string): boolean
function dbus_errors_quark(): GLib.Quark
function dbus_properties_mixin_class_init(cls: GObject.ObjectClass, offset: number): void
function dbus_properties_mixin_dup_all(self: GObject.Object, interface_name: string): GLib.HashTable
function dbus_properties_mixin_emit_properties_changed(object: GObject.Object, interface_name: string, properties?: string | null): void
function dbus_properties_mixin_get(self: GObject.Object, interface_name: string, property_name: string, value: any): boolean
function dbus_properties_mixin_getter_gobject_properties(object: GObject.Object, iface: GLib.Quark, name: GLib.Quark, value: any, getter_data?: object | null): void
function dbus_properties_mixin_iface_init(g_iface?: object | null, iface_data?: object | null): void
function dbus_properties_mixin_set(self: GObject.Object, interface_name: string, property_name: string, value: any): boolean
function dbus_properties_mixin_setter_gobject_properties(object: GObject.Object, iface: GLib.Quark, name: GLib.Quark, value: any, setter_data?: object | null): boolean
function debug_divert_messages(filename: string): void
function debug_set_flags(flags_string: string): void
function debug_set_persistent(persistent: boolean): void
function debug_timestamped_log_handler(log_domain: string, log_level: GLib.LogLevelFlags, message: string, ignored?: object | null): void
function error_get_dbus_name(error: Error): string
function error_quark(): GLib.Quark
function errors_disconnected_quark(): GLib.Quark
function errors_removed_from_group_quark(): GLib.Quark
function escape_as_identifier(name: string): string
function handle_ensure(self: HandleRepoIface, id: string, context?: object | null): Handle
function handle_type_is_valid(type: HandleType): boolean
function handle_type_to_string(type: HandleType): string
function iface_quark_account(): GLib.Quark
function iface_quark_account_interface_addressing(): GLib.Quark
function iface_quark_account_interface_avatar(): GLib.Quark
function iface_quark_account_interface_storage(): GLib.Quark
function iface_quark_account_manager(): GLib.Quark
function iface_quark_authentication_tls_certificate(): GLib.Quark
function iface_quark_call_content(): GLib.Quark
function iface_quark_call_content_interface_audio_control(): GLib.Quark
function iface_quark_call_content_interface_dtmf(): GLib.Quark
function iface_quark_call_content_interface_media(): GLib.Quark
function iface_quark_call_content_interface_video_control(): GLib.Quark
function iface_quark_call_content_media_description(): GLib.Quark
function iface_quark_call_content_media_description_interface_rtcp_extended_reports(): GLib.Quark
function iface_quark_call_content_media_description_interface_rtcp_feedback(): GLib.Quark
function iface_quark_call_content_media_description_interface_rtp_header_extensions(): GLib.Quark
function iface_quark_call_stream(): GLib.Quark
function iface_quark_call_stream_endpoint(): GLib.Quark
function iface_quark_call_stream_interface_media(): GLib.Quark
function iface_quark_channel(): GLib.Quark
function iface_quark_channel_dispatch_operation(): GLib.Quark
function iface_quark_channel_dispatcher(): GLib.Quark
function iface_quark_channel_dispatcher_interface_messages1(): GLib.Quark
function iface_quark_channel_dispatcher_interface_operation_list(): GLib.Quark
function iface_quark_channel_interface_anonymity(): GLib.Quark
function iface_quark_channel_interface_call_state(): GLib.Quark
function iface_quark_channel_interface_captcha_authentication(): GLib.Quark
function iface_quark_channel_interface_chat_state(): GLib.Quark
function iface_quark_channel_interface_conference(): GLib.Quark
function iface_quark_channel_interface_destroyable(): GLib.Quark
function iface_quark_channel_interface_dtmf(): GLib.Quark
function iface_quark_channel_interface_file_transfer_metadata(): GLib.Quark
function iface_quark_channel_interface_group(): GLib.Quark
function iface_quark_channel_interface_hold(): GLib.Quark
function iface_quark_channel_interface_media_signalling(): GLib.Quark
function iface_quark_channel_interface_messages(): GLib.Quark
function iface_quark_channel_interface_password(): GLib.Quark
function iface_quark_channel_interface_room(): GLib.Quark
function iface_quark_channel_interface_room_config(): GLib.Quark
function iface_quark_channel_interface_sasl_authentication(): GLib.Quark
function iface_quark_channel_interface_securable(): GLib.Quark
function iface_quark_channel_interface_service_point(): GLib.Quark
function iface_quark_channel_interface_sms(): GLib.Quark
function iface_quark_channel_interface_subject(): GLib.Quark
function iface_quark_channel_interface_tube(): GLib.Quark
function iface_quark_channel_request(): GLib.Quark
function iface_quark_channel_type_call(): GLib.Quark
function iface_quark_channel_type_contact_list(): GLib.Quark
function iface_quark_channel_type_contact_search(): GLib.Quark
function iface_quark_channel_type_dbus_tube(): GLib.Quark
function iface_quark_channel_type_file_transfer(): GLib.Quark
function iface_quark_channel_type_room_list(): GLib.Quark
function iface_quark_channel_type_server_authentication(): GLib.Quark
function iface_quark_channel_type_server_tls_connection(): GLib.Quark
function iface_quark_channel_type_stream_tube(): GLib.Quark
function iface_quark_channel_type_streamed_media(): GLib.Quark
function iface_quark_channel_type_text(): GLib.Quark
function iface_quark_channel_type_tubes(): GLib.Quark
function iface_quark_client(): GLib.Quark
function iface_quark_client_approver(): GLib.Quark
function iface_quark_client_handler(): GLib.Quark
function iface_quark_client_interface_requests(): GLib.Quark
function iface_quark_client_observer(): GLib.Quark
function iface_quark_connection(): GLib.Quark
function iface_quark_connection_interface_addressing(): GLib.Quark
function iface_quark_connection_interface_aliasing(): GLib.Quark
function iface_quark_connection_interface_anonymity(): GLib.Quark
function iface_quark_connection_interface_avatars(): GLib.Quark
function iface_quark_connection_interface_balance(): GLib.Quark
function iface_quark_connection_interface_capabilities(): GLib.Quark
function iface_quark_connection_interface_cellular(): GLib.Quark
function iface_quark_connection_interface_client_types(): GLib.Quark
function iface_quark_connection_interface_contact_blocking(): GLib.Quark
function iface_quark_connection_interface_contact_capabilities(): GLib.Quark
function iface_quark_connection_interface_contact_groups(): GLib.Quark
function iface_quark_connection_interface_contact_info(): GLib.Quark
function iface_quark_connection_interface_contact_list(): GLib.Quark
function iface_quark_connection_interface_contacts(): GLib.Quark
function iface_quark_connection_interface_location(): GLib.Quark
function iface_quark_connection_interface_mail_notification(): GLib.Quark
function iface_quark_connection_interface_power_saving(): GLib.Quark
function iface_quark_connection_interface_presence(): GLib.Quark
function iface_quark_connection_interface_renaming(): GLib.Quark
function iface_quark_connection_interface_requests(): GLib.Quark
function iface_quark_connection_interface_service_point(): GLib.Quark
function iface_quark_connection_interface_sidecars1(): GLib.Quark
function iface_quark_connection_interface_simple_presence(): GLib.Quark
function iface_quark_connection_manager(): GLib.Quark
function iface_quark_dbus_daemon(): GLib.Quark
function iface_quark_dbus_introspectable(): GLib.Quark
function iface_quark_dbus_peer(): GLib.Quark
function iface_quark_dbus_properties(): GLib.Quark
function iface_quark_debug(): GLib.Quark
function iface_quark_media_session_handler(): GLib.Quark
function iface_quark_media_stream_handler(): GLib.Quark
function iface_quark_properties_interface(): GLib.Quark
function iface_quark_protocol(): GLib.Quark
function iface_quark_protocol_interface_addressing(): GLib.Quark
function iface_quark_protocol_interface_avatars(): GLib.Quark
function iface_quark_protocol_interface_presence(): GLib.Quark
function intset_from_array(array: number[]): Intset
function list_connection_managers(bus_daemon: DBusDaemon, callback: ConnectionManagerListCb, weak_object?: GObject.Object | null): void
function list_connection_managers_async(dbus_daemon?: DBusDaemon | null, callback?: Gio.AsyncReadyCallback | null): void
function list_connection_managers_finish(result: Gio.AsyncResult): ConnectionManager[]
function list_connection_names(bus_daemon: DBusDaemon, callback: ConnectionNameListCb, weak_object?: GObject.Object | null): void
function simple_async_report_success_in_idle(source?: GObject.Object | null, callback?: Gio.AsyncReadyCallback | null, source_tag?: object | null): void
function svc_interface_set_dbus_properties_info(g_interface: GObject.Type, info: DBusPropertiesMixinIfaceInfo): void
function user_action_time_from_x11(x11_time: number): number
function user_action_time_should_present(user_action_time: number): [ /* returnType */ boolean, /* x11_time */ number | null ]
function utf8_make_valid(name: string): string
function value_array_free(va: GObject.ValueArray): void
interface AccountChannelRequestDelegatedChannelCb {
    (request: AccountChannelRequest, channel: Channel): void
}
interface BaseClientClassAddDispatchOperationImpl {
    (client: BaseClient, account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation, context: AddDispatchOperationContext): void
}
interface BaseClientClassHandleChannelsImpl {
    (client: BaseClient, account: Account, connection: Connection, channels: Channel[], requests_satisfied: ChannelRequest[], user_action_time: number, context: HandleChannelsContext): void
}
interface BaseClientClassObserveChannelsImpl {
    (client: BaseClient, account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, requests: ChannelRequest[], context: ObserveChannelsContext): void
}
interface BaseClientDelegatedChannelsCb {
    (client: BaseClient, channels: Channel[]): void
}
interface BaseConnectionGetUniqueConnectionNameImpl {
    (self: BaseConnection): string
}
interface BaseConnectionProc {
    (self: BaseConnection): void
}
interface BaseConnectionStartConnectingImpl {
    (self: BaseConnection): boolean
}
interface ChannelWhenReadyCb {
    (channel: Channel, error: GLib.Error): void
}
interface ConnectionContactsByHandleCb {
    (connection: Connection, contacts: Contact[], failed: Handle[], error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionContactsByIdCb {
    (connection: Connection, contacts: Contact[], requested_ids: string[], failed_id_errors: GLib.HashTable, error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionHoldHandlesCb {
    (connection: Connection, handle_type: HandleType, n_handles: number, handles: Handle, error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionManagerListCb {
    (cms: ConnectionManager[], n_cms: number, error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionManagerWhenReadyCb {
    (cm: ConnectionManager, error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionNameListCb {
    (names: string[], n: number, cms: string[], protocols: string[], error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionRequestHandlesCb {
    (connection: Connection, handle_type: HandleType, handles: number[], ids: string[], error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionUpgradeContactsCb {
    (connection: Connection, contacts: Contact[], error: GLib.Error, weak_object: GObject.Object): void
}
interface ConnectionWhenReadyCb {
    (connection: Connection, error: GLib.Error): void
}
interface DBusDaemonListNamesCb {
    (bus_daemon: DBusDaemon, names: string, error: GLib.Error, weak_object: GObject.Object): void
}
interface DBusDaemonNameOwnerChangedCb {
    (bus_daemon: DBusDaemon, name: string, new_owner: string): void
}
interface DBusPropertiesMixinGetter {
    (object: GObject.Object, iface: GLib.Quark, name: GLib.Quark, value: any, getter_data?: object | null): void
}
interface DBusPropertiesMixinSetter {
    (object: GObject.Object, iface: GLib.Quark, name: GLib.Quark, value: any, setter_data?: object | null): boolean
}
interface GroupMixinAddMemberFunc {
    (obj: GObject.Object, handle: Handle, message: string): boolean
}
interface GroupMixinRemMemberFunc {
    (obj: GObject.Object, handle: Handle, message: string): boolean
}
interface GroupMixinRemMemberWithReasonFunc {
    (obj: GObject.Object, handle: Handle, message: string, reason: number): boolean
}
interface IntFunc {
    (i: number, userdata?: object | null): void
}
interface PresenceMixinGetMaximumStatusMessageLengthFunc {
    (obj: GObject.Object): number
}
interface PresenceMixinSetOwnStatusFunc {
    (obj: GObject.Object, status: PresenceStatus): boolean
}
interface PresenceMixinStatusAvailableFunc {
    (obj: GObject.Object, which: number): boolean
}
interface ProxyPrepareAsync {
    (proxy: Proxy, feature: ProxyFeature, callback?: Gio.AsyncReadyCallback | null): void
}
interface SimpleApproverAddDispatchOperationImpl {
    (approver: SimpleApprover, account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, context: AddDispatchOperationContext): void
}
interface SimpleHandlerHandleChannelsImpl {
    (handler: SimpleHandler, account: Account, connection: Connection, channels: Channel[], requests_satisfied: ChannelRequest[], user_action_time: number, context: HandleChannelsContext): void
}
interface SimpleObserverObserveChannelsImpl {
    (observer: SimpleObserver, account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, requests: ChannelRequest[], context: ObserveChannelsContext): void
}
class ClientChannelFactory {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ClientChannelFactory */
    create_channel(conn: Connection, path: string, properties: GLib.HashTable): Channel
    dup_channel_features(channel: Channel): GLib.Quark[]
    static name: string
}
class HandleRepoIface {
    static name: string
}
export interface Account_ConstructProps extends Proxy_ConstructProps {
}
class Account {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Account */
    readonly automatic_presence_type: number
    readonly automatic_status: string
    readonly automatic_status_message: string
    readonly changing_presence: boolean
    readonly cm_name: string
    readonly connect_automatically: boolean
    readonly connection: Connection
    readonly connection_error: string
    readonly connection_error_details: GLib.HashTable
    readonly connection_manager: string
    readonly connection_status: number
    readonly connection_status_reason: number
    readonly current_presence_type: number
    readonly current_status: string
    readonly current_status_message: string
    readonly display_name: string
    readonly enabled: boolean
    readonly has_been_online: boolean
    readonly icon_name: string
    readonly nickname: string
    readonly normalized_name: string
    readonly protocol: string
    readonly protocol_name: string
    readonly requested_presence_type: number
    readonly requested_status: string
    readonly requested_status_message: string
    readonly service: string
    readonly storage_identifier: any
    readonly storage_identifier_variant: GLib.Variant
    readonly storage_provider: string
    readonly storage_restrictions: number
    readonly supersedes: string[]
    readonly uri_schemes: string[]
    readonly valid: boolean
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Account */
    associated_with_uri_scheme(scheme: string): boolean
    bind_connection_status_to_property(target: object | null, target_property: string, invert: boolean): GObject.Binding
    dup_detailed_error_vardict(): [ /* returnType */ string | null, /* details */ GLib.Variant | null ]
    dup_parameters_vardict(): GLib.Variant
    dup_storage_identifier_variant(): GLib.Variant
    dup_storage_specific_information_vardict_async(callback?: Gio.AsyncReadyCallback | null): void
    dup_storage_specific_information_vardict_finish(result: Gio.AsyncResult): GLib.Variant
    ensure_connection(path: string): Connection
    get_automatic_presence(): [ /* returnType */ ConnectionPresenceType, /* status */ string, /* status_message */ string ]
    get_avatar_async(callback?: Gio.AsyncReadyCallback | null): void
    get_avatar_finish(result: Gio.AsyncResult): Uint8Array[]
    get_changing_presence(): boolean
    get_cm_name(): string
    get_connect_automatically(): boolean
    get_connection(): Connection
    get_connection_manager(): string
    get_connection_status(): [ /* returnType */ ConnectionStatus, /* reason */ ConnectionStatusReason ]
    get_current_presence(): [ /* returnType */ ConnectionPresenceType, /* status */ string, /* status_message */ string ]
    get_display_name(): string
    get_has_been_online(): boolean
    get_icon_name(): string
    get_nickname(): string
    get_normalized_name(): string
    get_parameters(): GLib.HashTable
    get_path_suffix(): string
    get_protocol(): string
    get_protocol_name(): string
    get_requested_presence(): [ /* returnType */ ConnectionPresenceType, /* status */ string, /* status_message */ string ]
    get_service(): string
    get_storage_identifier(): any
    get_storage_provider(): string
    get_storage_restrictions(): StorageRestrictionFlags
    get_storage_specific_information_async(callback?: Gio.AsyncReadyCallback | null): void
    get_storage_specific_information_finish(result: Gio.AsyncResult): GLib.HashTable
    get_supersedes(): string[]
    get_uri_schemes(): string[]
    is_enabled(): boolean
    is_valid(): boolean
    reconnect_async(callback?: Gio.AsyncReadyCallback | null): void
    reconnect_finish(result: Gio.AsyncResult): boolean
    remove_async(callback?: Gio.AsyncReadyCallback | null): void
    remove_finish(result: Gio.AsyncResult): boolean
    request_presence_async(type: ConnectionPresenceType, status: string, message: string, callback?: Gio.AsyncReadyCallback | null): void
    request_presence_finish(result: Gio.AsyncResult): boolean
    set_automatic_presence_async(type: ConnectionPresenceType, status: string, message: string, callback?: Gio.AsyncReadyCallback | null): void
    set_automatic_presence_finish(result: Gio.AsyncResult): boolean
    set_avatar_async(avatar: Uint8Array[] | null, mime_type?: string | null, callback?: Gio.AsyncReadyCallback | null): void
    set_avatar_finish(result: Gio.AsyncResult): boolean
    set_connect_automatically_async(connect_automatically: boolean, callback?: Gio.AsyncReadyCallback | null): void
    set_connect_automatically_finish(result: Gio.AsyncResult): boolean
    set_display_name_async(display_name: string, callback?: Gio.AsyncReadyCallback | null): void
    set_display_name_finish(result: Gio.AsyncResult): boolean
    set_enabled_async(enabled: boolean, callback?: Gio.AsyncReadyCallback | null): void
    set_enabled_finish(result: Gio.AsyncResult): boolean
    set_icon_name_async(icon_name: string, callback?: Gio.AsyncReadyCallback | null): void
    set_icon_name_finish(result: Gio.AsyncResult): boolean
    set_nickname_async(nickname: string, callback?: Gio.AsyncReadyCallback | null): void
    set_nickname_finish(result: Gio.AsyncResult): boolean
    set_service_async(service: string, callback?: Gio.AsyncReadyCallback | null): void
    set_service_finish(result: Gio.AsyncResult): boolean
    set_uri_scheme_association_async(scheme: string, associate: boolean, callback?: Gio.AsyncReadyCallback | null): void
    set_uri_scheme_association_finish(result: Gio.AsyncResult): boolean
    update_parameters_async(parameters: GLib.HashTable, unset_parameters: string, callback?: Gio.AsyncReadyCallback | null): void
    update_parameters_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* reconnect_required */ string[] ]
    update_parameters_vardict_async(parameters: GLib.Variant, unset_parameters: string[], callback?: Gio.AsyncReadyCallback | null): void
    update_parameters_vardict_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* reconnect_required */ string[] ]
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Account */
    connect(sigName: "avatar-changed", callback: (($obj: Account) => void)): number
    connect_after(sigName: "avatar-changed", callback: (($obj: Account) => void)): number
    emit(sigName: "avatar-changed"): void
    connect(sigName: "presence-changed", callback: (($obj: Account, presence: number, status: string, status_message: string) => void)): number
    connect_after(sigName: "presence-changed", callback: (($obj: Account, presence: number, status: string, status_message: string) => void)): number
    emit(sigName: "presence-changed", presence: number, status: string, status_message: string): void
    connect(sigName: "status-changed", callback: (($obj: Account, old_status: number, new_status: number, reason: number, dbus_error_name: string | null, details: GLib.HashTable) => void)): number
    connect_after(sigName: "status-changed", callback: (($obj: Account, old_status: number, new_status: number, reason: number, dbus_error_name: string | null, details: GLib.HashTable) => void)): number
    emit(sigName: "status-changed", old_status: number, new_status: number, reason: number, dbus_error_name: string | null, details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: Account, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: Account, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: Account, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: Account, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::automatic-presence-type", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::automatic-presence-type", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::automatic-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::automatic-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::automatic-status-message", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::automatic-status-message", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::changing-presence", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::changing-presence", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cm-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cm-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connect-automatically", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connect-automatically", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-error", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-error", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-error-details", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-error-details", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-manager", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-manager", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-status-reason", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status-reason", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-presence-type", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-presence-type", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::current-status-message", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-status-message", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-been-online", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-been-online", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::icon-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nickname", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nickname", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::normalized-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::normalized-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::protocol", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::protocol-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol-name", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested-presence-type", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested-presence-type", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested-status", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested-status-message", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested-status-message", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::storage-identifier", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage-identifier", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::storage-identifier-variant", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage-identifier-variant", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::storage-provider", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage-provider", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::storage-restrictions", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage-restrictions", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::supersedes", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supersedes", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uri-schemes", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri-schemes", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::valid", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valid", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: Account, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Account_ConstructProps)
    _init (config?: Account_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bus_daemon: DBusDaemon, object_path: string): Account
    static get_feature_quark_addressing(): GLib.Quark
    static get_feature_quark_connection(): GLib.Quark
    static get_feature_quark_core(): GLib.Quark
    static get_feature_quark_storage(): GLib.Quark
    static init_known_interfaces(): void
    static parse_object_path(object_path: string): [ /* returnType */ boolean, /* cm */ string, /* protocol */ string, /* account_id */ string ]
    static $gtype: GObject.Type
}
export interface AccountChannelRequest_ConstructProps extends GObject.Object_ConstructProps {
    account?: Account
    request_vardict?: GLib.Variant
    user_action_time?: number
}
class AccountChannelRequest {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.AccountChannelRequest */
    readonly channel_request: ChannelRequest
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.AccountChannelRequest */
    create_and_handle_channel_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    create_and_handle_channel_finish(result: Gio.AsyncResult): [ /* returnType */ Channel | null, /* context */ HandleChannelsContext | null ]
    create_and_observe_channel_async(preferred_handler: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    create_and_observe_channel_finish(result: Gio.AsyncResult): Channel
    create_channel_async(preferred_handler: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    create_channel_finish(result: Gio.AsyncResult): boolean
    dup_request(): GLib.Variant
    ensure_and_handle_channel_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    ensure_and_handle_channel_finish(result: Gio.AsyncResult): [ /* returnType */ Channel | null, /* context */ HandleChannelsContext | null ]
    ensure_and_observe_channel_async(preferred_handler: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    ensure_and_observe_channel_finish(result: Gio.AsyncResult): Channel
    ensure_channel_async(preferred_handler: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    ensure_channel_finish(result: Gio.AsyncResult): boolean
    get_account(): Account
    get_channel_request(): ChannelRequest
    get_request(): GLib.HashTable
    get_user_action_time(): number
    set_channel_factory(factory: ClientChannelFactory): void
    set_conference_initial_channels(channels: string): void
    set_delegate_to_preferred_handler(delegate: boolean): void
    set_delegated_channel_callback(callback: AccountChannelRequestDelegatedChannelCb): void
    set_file_transfer_description(description: string): void
    set_file_transfer_hash(hash_type: FileHashType, hash: string): void
    set_file_transfer_initial_offset(offset: number): void
    set_file_transfer_timestamp(timestamp: number): void
    set_file_transfer_uri(uri: string): void
    set_hint(key: string, value: GLib.Variant): void
    set_hints(hints: GLib.HashTable): void
    set_initial_invitee_ids(ids: string): void
    set_initial_invitees(contacts: Contact[]): void
    set_request_property(name: string, value: GLib.Variant): void
    set_sms_channel(is_sms_channel: boolean): void
    set_target_contact(contact: Contact): void
    set_target_id(handle_type: HandleType, identifier: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.AccountChannelRequest */
    connect(sigName: "re-handled", callback: (($obj: AccountChannelRequest, channel: Channel, user_action_time: number, context: HandleChannelsContext) => void)): number
    connect_after(sigName: "re-handled", callback: (($obj: AccountChannelRequest, channel: Channel, user_action_time: number, context: HandleChannelsContext) => void)): number
    emit(sigName: "re-handled", channel: Channel, user_action_time: number, context: HandleChannelsContext): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AccountChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AccountChannelRequest, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::channel-request", callback: (($obj: AccountChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-request", callback: (($obj: AccountChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AccountChannelRequest_ConstructProps)
    _init (config?: AccountChannelRequest_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(account: Account, request: GLib.HashTable, user_action_time: number): AccountChannelRequest
    static new_audio_call(account: Account, user_action_time: number): AccountChannelRequest
    static new_audio_video_call(account: Account, user_action_time: number): AccountChannelRequest
    static new_dbus_tube(account: Account, service_name: string, user_action_time: number): AccountChannelRequest
    static new_file_transfer(account: Account, filename: string, mime_type: string | null, size: number, user_action_time: number): AccountChannelRequest
    static new_stream_tube(account: Account, service: string, user_action_time: number): AccountChannelRequest
    static new_text(account: Account, user_action_time: number): AccountChannelRequest
    static new_vardict(account: Account, request: GLib.Variant, user_action_time: number): AccountChannelRequest
    static $gtype: GObject.Type
}
export interface AccountManager_ConstructProps extends Proxy_ConstructProps {
}
class AccountManager {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.AccountManager */
    create_account_async(connection_manager: string, protocol: string, display_name: string, parameters: GLib.HashTable, properties: GLib.HashTable, callback?: Gio.AsyncReadyCallback | null): void
    create_account_finish(result: Gio.AsyncResult): Account
    dup_valid_accounts(): Account[]
    enable_restart(): void
    ensure_account(path: string): Account
    get_most_available_presence(): [ /* returnType */ ConnectionPresenceType, /* status */ string, /* message */ string ]
    get_valid_accounts(): Account[]
    set_all_requested_presences(type: ConnectionPresenceType, status: string, message: string): void
    set_default(): void
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.AccountManager */
    connect(sigName: "account-disabled", callback: (($obj: AccountManager, account: Account) => void)): number
    connect_after(sigName: "account-disabled", callback: (($obj: AccountManager, account: Account) => void)): number
    emit(sigName: "account-disabled", account: Account): void
    connect(sigName: "account-enabled", callback: (($obj: AccountManager, account: Account) => void)): number
    connect_after(sigName: "account-enabled", callback: (($obj: AccountManager, account: Account) => void)): number
    emit(sigName: "account-enabled", account: Account): void
    connect(sigName: "account-removed", callback: (($obj: AccountManager, account: Account) => void)): number
    connect_after(sigName: "account-removed", callback: (($obj: AccountManager, account: Account) => void)): number
    emit(sigName: "account-removed", account: Account): void
    connect(sigName: "account-validity-changed", callback: (($obj: AccountManager, account: Account, valid: boolean) => void)): number
    connect_after(sigName: "account-validity-changed", callback: (($obj: AccountManager, account: Account, valid: boolean) => void)): number
    emit(sigName: "account-validity-changed", account: Account, valid: boolean): void
    connect(sigName: "most-available-presence-changed", callback: (($obj: AccountManager, presence: number, status: string, message: string) => void)): number
    connect_after(sigName: "most-available-presence-changed", callback: (($obj: AccountManager, presence: number, status: string, message: string) => void)): number
    emit(sigName: "most-available-presence-changed", presence: number, status: string, message: string): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: AccountManager, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: AccountManager, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: AccountManager, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: AccountManager, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AccountManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AccountManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::interfaces", callback: (($obj: AccountManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: AccountManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AccountManager_ConstructProps)
    _init (config?: AccountManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bus_daemon: DBusDaemon): AccountManager
    static new_with_factory(factory: SimpleClientFactory): AccountManager
    static can_set_default(): boolean
    static dup(): AccountManager
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface AccountRequest_ConstructProps extends GObject.Object_ConstructProps {
    account_manager?: AccountManager
    connection_manager?: string
    display_name?: string
    protocol?: string
}
class AccountRequest {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.AccountRequest */
    readonly automatic_presence_type: number
    readonly automatic_status: string
    readonly automatic_status_message: string
    readonly avatar: object[]
    readonly avatar_mime_type: string
    readonly connect_automatically: boolean
    readonly enabled: boolean
    readonly icon_name: string
    readonly nickname: string
    readonly parameters: GLib.Variant
    readonly properties: GLib.Variant
    readonly requested_presence_type: number
    readonly requested_status: string
    readonly requested_status_message: string
    readonly service: string
    readonly storage_provider: string
    readonly supersedes: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.AccountRequest */
    add_supersedes(superseded_path: string): void
    create_account_async(callback?: Gio.AsyncReadyCallback | null): void
    create_account_finish(result: Gio.AsyncResult): Account
    set_automatic_presence(presence: ConnectionPresenceType, status: string, message: string): void
    set_avatar(avatar: Uint8Array[] | null, mime_type?: string | null): void
    set_connect_automatically(connect_automatically: boolean): void
    set_display_name(name: string): void
    set_enabled(enabled: boolean): void
    set_icon_name(icon: string): void
    set_nickname(nickname: string): void
    set_parameter(key: string, value: GLib.Variant): void
    set_requested_presence(presence: ConnectionPresenceType, status: string, message: string): void
    set_service(service: string): void
    set_storage_provider(provider: string): void
    unset_parameter(key: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::automatic-presence-type", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::automatic-presence-type", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::automatic-status", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::automatic-status", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::automatic-status-message", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::automatic-status-message", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::avatar", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avatar", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::avatar-mime-type", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avatar-mime-type", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connect-automatically", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connect-automatically", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::icon-name", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::nickname", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::nickname", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::parameters", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parameters", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::properties", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::properties", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested-presence-type", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested-presence-type", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested-status", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested-status", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested-status-message", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested-status-message", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::storage-provider", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::storage-provider", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::supersedes", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supersedes", callback: (($obj: AccountRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AccountRequest_ConstructProps)
    _init (config?: AccountRequest_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(account_manager: AccountManager, manager: string, protocol: string, display_name: string): AccountRequest
    static new_from_protocol(account_manager: AccountManager, protocol: Protocol, display_name: string): AccountRequest
    static $gtype: GObject.Type
}
export interface AddDispatchOperationContext_ConstructProps extends GObject.Object_ConstructProps {
    account?: Account
    channels?: object[]
    connection?: Connection
    dispatch_operation?: ChannelDispatchOperation
}
class AddDispatchOperationContext {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.AddDispatchOperationContext */
    accept(): void
    delay(): void
    fail(error: GLib.Error): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AddDispatchOperationContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AddDispatchOperationContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AddDispatchOperationContext_ConstructProps)
    _init (config?: AddDispatchOperationContext_ConstructProps): void
    static $gtype: GObject.Type
}
export interface AutomaticClientFactory_ConstructProps extends SimpleClientFactory_ConstructProps {
}
class AutomaticClientFactory {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.SimpleClientFactory */
    add_account_features(features?: GLib.Quark[] | null): void
    add_channel_features(features?: GLib.Quark[] | null): void
    add_connection_features(features?: GLib.Quark[] | null): void
    add_contact_features(features?: ContactFeature[] | null): void
    dup_account_features(account: Account): GLib.Quark[]
    dup_channel_features(channel: Channel): GLib.Quark[]
    dup_connection_features(connection: Connection): GLib.Quark[]
    dup_contact_features(connection: Connection): ContactFeature[]
    ensure_account(object_path: string, immutable_properties: GLib.HashTable): Account
    ensure_channel(connection: Connection, object_path: string, immutable_properties: GLib.HashTable): Channel
    ensure_connection(object_path: string, immutable_properties: GLib.HashTable): Connection
    ensure_contact(connection: Connection, handle: Handle, identifier: string): Contact
    ensure_contact_by_id_async(connection: Connection, identifier: string, callback?: Gio.AsyncReadyCallback | null): void
    ensure_contact_by_id_finish(result: Gio.AsyncResult): Contact
    get_dbus_daemon(): DBusDaemon
    upgrade_contacts_async(connection: Connection, contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    upgrade_contacts_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* contacts */ Contact[] | null ]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.SimpleClientFactory */
    vfunc_dup_account_features(account: Account): GLib.Quark[]
    vfunc_dup_channel_features(channel: Channel): GLib.Quark[]
    vfunc_dup_connection_features(connection: Connection): GLib.Quark[]
    vfunc_dup_contact_features(connection: Connection): ContactFeature[]
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AutomaticClientFactory, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AutomaticClientFactory, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AutomaticClientFactory_ConstructProps)
    _init (config?: AutomaticClientFactory_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus?: DBusDaemon | null): AutomaticClientFactory
    static $gtype: GObject.Type
}
export interface AutomaticProxyFactory_ConstructProps extends GObject.Object_ConstructProps {
}
class AutomaticProxyFactory {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ClientChannelFactory */
    create_channel(conn: Connection, path: string, properties: GLib.HashTable): Channel
    dup_channel_features(channel: Channel): GLib.Quark[]
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AutomaticProxyFactory, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AutomaticProxyFactory, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AutomaticProxyFactory_ConstructProps)
    _init (config?: AutomaticProxyFactory_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): AutomaticProxyFactory
    static dup(): AutomaticProxyFactory
    static $gtype: GObject.Type
}
export interface BaseClient_ConstructProps extends GObject.Object_ConstructProps {
    account_manager?: AccountManager
    channel_factory?: GObject.Object
    dbus_daemon?: DBusDaemon
    factory?: SimpleClientFactory
    name?: string
    uniquify_name?: boolean
}
class BaseClient {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    add_account_features(features: GLib.Quark[]): void
    add_approver_filter(filter: GLib.HashTable): void
    add_approver_filter_vardict(filter: GLib.Variant): void
    add_channel_features(features: GLib.Quark[]): void
    add_connection_features(features: GLib.Quark[]): void
    add_handler_capabilities(tokens: string[]): void
    add_handler_capability(token: string): void
    add_handler_filter(filter: GLib.HashTable): void
    add_handler_filter_vardict(filter: GLib.Variant): void
    add_observer_filter(filter: GLib.HashTable): void
    add_observer_filter_vardict(filter: GLib.Variant): void
    be_a_handler(): void
    delegate_channels_async(channels: Channel[], user_action_time: number, preferred_handler: string, callback?: Gio.AsyncReadyCallback | null): void
    delegate_channels_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* delegated */ Channel[], /* not_delegated */ GLib.HashTable ]
    dup_handled_channels(): Channel[]
    dup_pending_requests(): ChannelRequest[]
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_handled_channels(): Channel[]
    get_name(): string
    get_object_path(): string
    get_pending_requests(): ChannelRequest[]
    get_uniquify_name(): boolean
    is_handling_channel(channel: Channel): boolean
    register(): boolean
    set_channel_factory(factory: ClientChannelFactory): void
    set_delegated_channels_callback(callback: BaseClientDelegatedChannelsCb): void
    set_handler_bypass_approval(bypass_approval: boolean): void
    set_handler_request_notification(): void
    set_observer_delay_approvers(delay: boolean): void
    set_observer_recover(recover: boolean): void
    unregister(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    vfunc_add_dispatch_operation(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation, context: AddDispatchOperationContext): void
    vfunc_handle_channels(account: Account, connection: Connection, channels: Channel[], requests_satisfied: ChannelRequest[], user_action_time: number, context: HandleChannelsContext): void
    vfunc_observe_channels(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, requests: ChannelRequest[], context: ObserveChannelsContext): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    connect(sigName: "request-added", callback: (($obj: BaseClient, account: Account, request: ChannelRequest) => void)): number
    connect_after(sigName: "request-added", callback: (($obj: BaseClient, account: Account, request: ChannelRequest) => void)): number
    emit(sigName: "request-added", account: Account, request: ChannelRequest): void
    connect(sigName: "request-removed", callback: (($obj: BaseClient, request: ChannelRequest, error: string, message: string) => void)): number
    connect_after(sigName: "request-removed", callback: (($obj: BaseClient, request: ChannelRequest, error: string, message: string) => void)): number
    emit(sigName: "request-removed", request: ChannelRequest, error: string, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BaseClient, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BaseClient_ConstructProps)
    _init (config?: BaseClient_ConstructProps): void
    static $gtype: GObject.Type
}
export interface BaseConnection_ConstructProps extends GObject.Object_ConstructProps {
    account_path_suffix?: string
}
class BaseConnection {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.BaseConnection */
    readonly has_immortal_handles: boolean
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.BaseConnection */
    add_client_interest(unique_name: string, token: string, only_if_uninterested: boolean): void
    add_possible_client_interest(token: GLib.Quark): void
    change_status(status: ConnectionStatus, reason: ConnectionStatusReason): void
    check_connected(): boolean
    get_account_path_suffix(): string
    get_bus_name(): string | null
    get_handles(handle_type: HandleType): HandleRepoIface
    get_object_path(): string | null
    get_status(): ConnectionStatus
    is_destroyed(): boolean
    register(cm_name: string): [ /* returnType */ boolean, /* bus_name */ string, /* object_path */ string ]
    set_self_handle(self_handle: Handle): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.BaseConnection */
    vfunc_connected(): void
    vfunc_connecting(): void
    vfunc_disconnected(): void
    vfunc_get_unique_connection_name(): string
    vfunc_shut_down(): void
    vfunc_start_connecting(): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.BaseConnection */
    connect(sigName: "clients-interested", callback: (($obj: BaseConnection, token: string) => void)): number
    connect_after(sigName: "clients-interested", callback: (($obj: BaseConnection, token: string) => void)): number
    emit(sigName: "clients-interested", token: string): void
    connect(sigName: "clients-uninterested", callback: (($obj: BaseConnection, token: string) => void)): number
    connect_after(sigName: "clients-uninterested", callback: (($obj: BaseConnection, token: string) => void)): number
    emit(sigName: "clients-uninterested", token: string): void
    connect(sigName: "shutdown-finished", callback: (($obj: BaseConnection) => void)): number
    connect_after(sigName: "shutdown-finished", callback: (($obj: BaseConnection) => void)): number
    emit(sigName: "shutdown-finished"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BaseConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BaseConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::has-immortal-handles", callback: (($obj: BaseConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-immortal-handles", callback: (($obj: BaseConnection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BaseConnection_ConstructProps)
    _init (config?: BaseConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface BasicProxyFactory_ConstructProps extends GObject.Object_ConstructProps {
}
class BasicProxyFactory {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ClientChannelFactory */
    create_channel(conn: Connection, path: string, properties: GLib.HashTable): Channel
    dup_channel_features(channel: Channel): GLib.Quark[]
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BasicProxyFactory, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BasicProxyFactory, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BasicProxyFactory_ConstructProps)
    _init (config?: BasicProxyFactory_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): BasicProxyFactory
    static dup(): BasicProxyFactory
    static $gtype: GObject.Type
}
export interface CallChannel_ConstructProps extends Channel_ConstructProps {
}
class CallChannel {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.CallChannel */
    readonly contents: object[]
    readonly flags: number
    readonly hardware_streaming: boolean
    readonly hold_state: number
    readonly hold_state_reason: number
    readonly initial_audio: boolean
    readonly initial_audio_name: string
    readonly initial_video: boolean
    readonly initial_video_name: string
    readonly mutable_contents: boolean
    readonly state: number
    readonly state_details: GLib.HashTable
    readonly state_reason: CallStateReason
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Channel */
    readonly channel_ready: boolean
    readonly group_flags: number
    readonly group_self_contact: Contact
    readonly group_self_handle: number
    readonly identifier: string
    readonly initiator_contact: Contact
    readonly initiator_handle: number
    readonly initiator_identifier: string
    readonly password_needed: boolean
    readonly requested: boolean
    readonly target_contact: Contact
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.CallChannel */
    accept_async(callback?: Gio.AsyncReadyCallback | null): void
    accept_finish(result: Gio.AsyncResult): boolean
    add_content_async(name: string, type: MediaStreamType, initial_direction: MediaStreamDirection, callback?: Gio.AsyncReadyCallback | null): void
    add_content_finish(result: Gio.AsyncResult): CallContent
    get_contents(): CallContent[]
    get_members(): GLib.HashTable
    get_state(): [ /* returnType */ CallState, /* flags */ CallFlags | null, /* details */ GLib.HashTable | null, /* reason */ CallStateReason | null ]
    hangup_async(reason: CallStateChangeReason, detailed_reason: string, message: string, callback?: Gio.AsyncReadyCallback | null): void
    hangup_finish(result: Gio.AsyncResult): boolean
    has_dtmf(): boolean
    has_hardware_streaming(): boolean
    has_hold(): boolean
    has_initial_audio(): [ /* returnType */ boolean, /* initial_audio_name */ string | null ]
    has_initial_video(): [ /* returnType */ boolean, /* initial_video_name */ string | null ]
    has_mutable_contents(): boolean
    request_hold_async(hold: boolean, callback?: Gio.AsyncReadyCallback | null): void
    request_hold_finish(result: Gio.AsyncResult): boolean
    send_tones_async(tones: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    send_tones_finish(result: Gio.AsyncResult): boolean
    set_queued_async(callback?: Gio.AsyncReadyCallback | null): void
    set_queued_finish(result: Gio.AsyncResult): boolean
    set_ringing_async(callback?: Gio.AsyncReadyCallback | null): void
    set_ringing_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Channel */
    borrow_connection(): Connection
    borrow_immutable_properties(): GLib.HashTable
    close_async(callback?: Gio.AsyncReadyCallback | null): void
    close_finish(result: Gio.AsyncResult): boolean
    destroy_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_finish(result: Gio.AsyncResult): boolean
    dup_immutable_properties(): GLib.Variant
    get_channel_type(): string
    get_channel_type_id(): GLib.Quark
    get_chat_state(contact: Handle): ChannelChatState
    get_connection(): Connection
    get_handle(): [ /* returnType */ Handle, /* handle_type */ HandleType ]
    get_identifier(): string
    get_initiator_contact(): Contact
    get_requested(): boolean
    get_target_contact(): Contact
    group_dup_local_pending_contacts(): Contact[]
    group_dup_members_contacts(): Contact[]
    group_dup_remote_pending_contacts(): Contact[]
    group_get_contact_owner(contact: Contact): Contact
    group_get_flags(): ChannelGroupFlags
    group_get_handle_owner(handle: Handle): Handle
    group_get_local_pending(): Intset
    group_get_local_pending_contact_info(local_pending: Contact): [ /* returnType */ boolean, /* actor */ Contact | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_local_pending_info(local_pending: Handle): [ /* returnType */ boolean, /* actor */ Handle | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_members(): Intset
    group_get_remote_pending(): Intset
    group_get_self_contact(): Contact
    group_get_self_handle(): Handle
    join_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    join_finish(result: Gio.AsyncResult): boolean
    leave_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_finish(result: Gio.AsyncResult): boolean
    provide_password_async(password: string, callback?: Gio.AsyncReadyCallback | null): void
    provide_password_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.CallChannel */
    connect(sigName: "content-added", callback: (($obj: CallChannel, content: GObject.Object) => void)): number
    connect_after(sigName: "content-added", callback: (($obj: CallChannel, content: GObject.Object) => void)): number
    emit(sigName: "content-added", content: GObject.Object): void
    connect(sigName: "content-removed", callback: (($obj: CallChannel, content: GObject.Object, reason: CallStateReason) => void)): number
    connect_after(sigName: "content-removed", callback: (($obj: CallChannel, content: GObject.Object, reason: CallStateReason) => void)): number
    emit(sigName: "content-removed", content: GObject.Object, reason: CallStateReason): void
    connect(sigName: "members-changed", callback: (($obj: CallChannel, updates: GLib.HashTable, removed: Contact[], reason: CallStateReason) => void)): number
    connect_after(sigName: "members-changed", callback: (($obj: CallChannel, updates: GLib.HashTable, removed: Contact[], reason: CallStateReason) => void)): number
    emit(sigName: "members-changed", updates: GLib.HashTable, removed: Contact[], reason: CallStateReason): void
    connect(sigName: "state-changed", callback: (($obj: CallChannel, state: number, flags: number, reason: CallStateReason, details: GLib.HashTable) => void)): number
    connect_after(sigName: "state-changed", callback: (($obj: CallChannel, state: number, flags: number, reason: CallStateReason, details: GLib.HashTable) => void)): number
    emit(sigName: "state-changed", state: number, flags: number, reason: CallStateReason, details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Channel */
    connect(sigName: "chat-state-changed", callback: (($obj: CallChannel, contact: number, state: number) => void)): number
    connect_after(sigName: "chat-state-changed", callback: (($obj: CallChannel, contact: number, state: number) => void)): number
    emit(sigName: "chat-state-changed", contact: number, state: number): void
    connect(sigName: "group-contacts-changed", callback: (($obj: CallChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-contacts-changed", callback: (($obj: CallChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    emit(sigName: "group-contacts-changed", added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable): void
    connect(sigName: "group-flags-changed", callback: (($obj: CallChannel, added: number, removed: number) => void)): number
    connect_after(sigName: "group-flags-changed", callback: (($obj: CallChannel, added: number, removed: number) => void)): number
    emit(sigName: "group-flags-changed", added: number, removed: number): void
    connect(sigName: "group-members-changed", callback: (($obj: CallChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    connect_after(sigName: "group-members-changed", callback: (($obj: CallChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    emit(sigName: "group-members-changed", message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number): void
    connect(sigName: "group-members-changed-detailed", callback: (($obj: CallChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-members-changed-detailed", callback: (($obj: CallChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    emit(sigName: "group-members-changed-detailed", added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: CallChannel, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: CallChannel, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: CallChannel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: CallChannel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::contents", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contents", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hardware-streaming", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hardware-streaming", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hold-state", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hold-state", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hold-state-reason", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hold-state-reason", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initial-audio", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-audio", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initial-audio-name", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-audio-name", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initial-video", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-video", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initial-video-name", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-video-name", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mutable-contents", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mutable-contents", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-details", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-details", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-reason", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-reason", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel-ready", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-ready", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-flags", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-flags", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-contact", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-contact", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-handle", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-handle", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-contact", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-contact", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-handle", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-handle", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-identifier", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-identifier", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-needed", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-needed", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-contact", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-contact", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: CallChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CallChannel_ConstructProps)
    _init (config?: CallChannel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_feature_quark_core(): GLib.Quark
    static $gtype: GObject.Type
}
export interface CallContent_ConstructProps extends Proxy_ConstructProps {
    channel?: CallChannel
    connection?: Connection
}
class CallContent {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.CallContent */
    readonly disposition: number
    readonly media_type: number
    readonly name: string
    readonly streams: object[]
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.CallContent */
    get_disposition(): CallContentDisposition
    get_media_type(): MediaStreamType
    get_name(): string
    get_streams(): CallStream[]
    remove_async(callback?: Gio.AsyncReadyCallback | null): void
    remove_finish(result: Gio.AsyncResult): boolean
    send_tones_async(tones: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    send_tones_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.CallContent */
    connect(sigName: "removed", callback: (($obj: CallContent) => void)): number
    connect_after(sigName: "removed", callback: (($obj: CallContent) => void)): number
    emit(sigName: "removed"): void
    connect(sigName: "streams-added", callback: (($obj: CallContent, streams: CallStream[]) => void)): number
    connect_after(sigName: "streams-added", callback: (($obj: CallContent, streams: CallStream[]) => void)): number
    emit(sigName: "streams-added", streams: CallStream[]): void
    connect(sigName: "streams-removed", callback: (($obj: CallContent, streams: CallStream[], reason: CallStateReason) => void)): number
    connect_after(sigName: "streams-removed", callback: (($obj: CallContent, streams: CallStream[], reason: CallStateReason) => void)): number
    emit(sigName: "streams-removed", streams: CallStream[], reason: CallStateReason): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: CallContent, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: CallContent, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: CallContent, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: CallContent, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::disposition", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disposition", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::media-type", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::media-type", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::streams", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::streams", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: CallContent, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CallContent_ConstructProps)
    _init (config?: CallContent_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface CallStream_ConstructProps extends Proxy_ConstructProps {
    connection?: Connection
    content?: CallContent
}
class CallStream {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.CallStream */
    readonly can_request_receiving: boolean
    readonly local_sending_state: number
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.CallStream */
    get_local_sending_state(): SendingState
    get_remote_members(): GLib.HashTable
    request_receiving_async(contact: Contact, receive: boolean, callback?: Gio.AsyncReadyCallback | null): void
    request_receiving_finish(result: Gio.AsyncResult): boolean
    set_sending_async(send: boolean, callback?: Gio.AsyncReadyCallback | null): void
    set_sending_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.CallStream */
    connect(sigName: "local-sending-state-changed", callback: (($obj: CallStream, state: number, reason: CallStateReason) => void)): number
    connect_after(sigName: "local-sending-state-changed", callback: (($obj: CallStream, state: number, reason: CallStateReason) => void)): number
    emit(sigName: "local-sending-state-changed", state: number, reason: CallStateReason): void
    connect(sigName: "remote-members-changed", callback: (($obj: CallStream, updates: GLib.HashTable, removed: Contact[], reason: CallStateReason) => void)): number
    connect_after(sigName: "remote-members-changed", callback: (($obj: CallStream, updates: GLib.HashTable, removed: Contact[], reason: CallStateReason) => void)): number
    emit(sigName: "remote-members-changed", updates: GLib.HashTable, removed: Contact[], reason: CallStateReason): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: CallStream, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: CallStream, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: CallStream, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: CallStream, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::can-request-receiving", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-request-receiving", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::local-sending-state", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::local-sending-state", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: CallStream, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CallStream_ConstructProps)
    _init (config?: CallStream_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface Capabilities_ConstructProps extends GObject.Object_ConstructProps {
    contact_specific?: boolean
}
class Capabilities {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Capabilities */
    readonly channel_classes_variant: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Capabilities */
    dup_channel_classes_variant(): GLib.Variant
    get_channel_classes(): GLib.HashTable[]
    is_specific_to_contact(): boolean
    supports_audio_call(handle_type: HandleType): boolean
    supports_audio_video_call(handle_type: HandleType): boolean
    supports_contact_search(): [ /* returnType */ boolean, /* with_limit */ boolean, /* with_server */ boolean ]
    supports_dbus_tubes(handle_type: HandleType, service_name: string): boolean
    supports_file_transfer(): boolean
    supports_file_transfer_description(): boolean
    supports_file_transfer_initial_offset(): boolean
    supports_file_transfer_timestamp(): boolean
    supports_file_transfer_uri(): boolean
    supports_room_list(): [ /* returnType */ boolean, /* with_server */ boolean ]
    supports_sms(): boolean
    supports_stream_tubes(handle_type: HandleType, service: string): boolean
    supports_text_chatrooms(): boolean
    supports_text_chats(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Capabilities, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Capabilities, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::channel-classes-variant", callback: (($obj: Capabilities, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-classes-variant", callback: (($obj: Capabilities, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Capabilities_ConstructProps)
    _init (config?: Capabilities_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Channel_ConstructProps extends Proxy_ConstructProps {
    connection?: Connection
}
class Channel {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Channel */
    readonly channel_ready: boolean
    readonly group_flags: number
    readonly group_self_contact: Contact
    readonly group_self_handle: number
    readonly identifier: string
    readonly initiator_contact: Contact
    readonly initiator_handle: number
    readonly initiator_identifier: string
    readonly password_needed: boolean
    readonly requested: boolean
    readonly target_contact: Contact
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Channel */
    borrow_connection(): Connection
    borrow_immutable_properties(): GLib.HashTable
    close_async(callback?: Gio.AsyncReadyCallback | null): void
    close_finish(result: Gio.AsyncResult): boolean
    destroy_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_finish(result: Gio.AsyncResult): boolean
    dup_immutable_properties(): GLib.Variant
    get_channel_type(): string
    get_channel_type_id(): GLib.Quark
    get_chat_state(contact: Handle): ChannelChatState
    get_connection(): Connection
    get_handle(): [ /* returnType */ Handle, /* handle_type */ HandleType ]
    get_identifier(): string
    get_initiator_contact(): Contact
    get_requested(): boolean
    get_target_contact(): Contact
    group_dup_local_pending_contacts(): Contact[]
    group_dup_members_contacts(): Contact[]
    group_dup_remote_pending_contacts(): Contact[]
    group_get_contact_owner(contact: Contact): Contact
    group_get_flags(): ChannelGroupFlags
    group_get_handle_owner(handle: Handle): Handle
    group_get_local_pending(): Intset
    group_get_local_pending_contact_info(local_pending: Contact): [ /* returnType */ boolean, /* actor */ Contact | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_local_pending_info(local_pending: Handle): [ /* returnType */ boolean, /* actor */ Handle | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_members(): Intset
    group_get_remote_pending(): Intset
    group_get_self_contact(): Contact
    group_get_self_handle(): Handle
    join_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    join_finish(result: Gio.AsyncResult): boolean
    leave_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_finish(result: Gio.AsyncResult): boolean
    provide_password_async(password: string, callback?: Gio.AsyncReadyCallback | null): void
    provide_password_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Channel */
    connect(sigName: "chat-state-changed", callback: (($obj: Channel, contact: number, state: number) => void)): number
    connect_after(sigName: "chat-state-changed", callback: (($obj: Channel, contact: number, state: number) => void)): number
    emit(sigName: "chat-state-changed", contact: number, state: number): void
    connect(sigName: "group-contacts-changed", callback: (($obj: Channel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-contacts-changed", callback: (($obj: Channel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    emit(sigName: "group-contacts-changed", added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable): void
    connect(sigName: "group-flags-changed", callback: (($obj: Channel, added: number, removed: number) => void)): number
    connect_after(sigName: "group-flags-changed", callback: (($obj: Channel, added: number, removed: number) => void)): number
    emit(sigName: "group-flags-changed", added: number, removed: number): void
    connect(sigName: "group-members-changed", callback: (($obj: Channel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    connect_after(sigName: "group-members-changed", callback: (($obj: Channel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    emit(sigName: "group-members-changed", message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number): void
    connect(sigName: "group-members-changed-detailed", callback: (($obj: Channel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-members-changed-detailed", callback: (($obj: Channel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    emit(sigName: "group-members-changed-detailed", added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: Channel, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: Channel, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: Channel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: Channel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::channel-ready", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-ready", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-flags", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-flags", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-contact", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-contact", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-handle", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-handle", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-contact", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-contact", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-handle", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-handle", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-identifier", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-identifier", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-needed", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-needed", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-contact", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-contact", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: Channel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Channel_ConstructProps)
    _init (config?: Channel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(conn: Connection, object_path: string, optional_channel_type: string, optional_handle_type: HandleType, optional_handle: Handle): Channel
    static new_from_properties(conn: Connection, object_path: string, immutable_properties: GLib.HashTable): Channel
    static get_feature_quark_chat_states(): GLib.Quark
    static get_feature_quark_contacts(): GLib.Quark
    static get_feature_quark_core(): GLib.Quark
    static get_feature_quark_group(): GLib.Quark
    static get_feature_quark_password(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface ChannelDispatchOperation_ConstructProps extends Proxy_ConstructProps {
    account?: Account
    channels?: object[]
    connection?: Connection
}
class ChannelDispatchOperation {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.ChannelDispatchOperation */
    readonly possible_handlers: string[]
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ChannelDispatchOperation */
    claim_async(callback?: Gio.AsyncReadyCallback | null): void
    claim_finish(result: Gio.AsyncResult): boolean
    claim_with_async(client: BaseClient, callback?: Gio.AsyncReadyCallback | null): void
    claim_with_finish(result: Gio.AsyncResult): boolean
    close_channels_async(callback?: Gio.AsyncReadyCallback | null): void
    close_channels_finish(result: Gio.AsyncResult): boolean
    destroy_channels_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_channels_finish(result: Gio.AsyncResult): boolean
    get_channels(): Channel[]
    handle_with_async(handler?: string | null, callback?: Gio.AsyncReadyCallback | null): void
    handle_with_finish(result: Gio.AsyncResult): boolean
    handle_with_time_async(handler: string | null, user_action_time: number, callback?: Gio.AsyncReadyCallback | null): void
    handle_with_time_finish(result: Gio.AsyncResult): boolean
    leave_channels_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_channels_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.ChannelDispatchOperation */
    connect(sigName: "channel-lost", callback: (($obj: ChannelDispatchOperation, channel: Channel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "channel-lost", callback: (($obj: ChannelDispatchOperation, channel: Channel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "channel-lost", channel: Channel, domain: number, code: number, message: string): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: ChannelDispatchOperation, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ChannelDispatchOperation, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: ChannelDispatchOperation, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: ChannelDispatchOperation, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ChannelDispatchOperation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ChannelDispatchOperation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::possible-handlers", callback: (($obj: ChannelDispatchOperation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::possible-handlers", callback: (($obj: ChannelDispatchOperation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: ChannelDispatchOperation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: ChannelDispatchOperation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ChannelDispatchOperation_ConstructProps)
    _init (config?: ChannelDispatchOperation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bus_daemon: DBusDaemon, object_path: string, immutable_properties: GLib.HashTable): ChannelDispatchOperation
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface ChannelDispatcher_ConstructProps extends Proxy_ConstructProps {
}
class ChannelDispatcher {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ChannelDispatcher */
    present_channel_async(channel: Channel, user_action_time: number, callback?: Gio.AsyncReadyCallback | null): void
    present_channel_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: ChannelDispatcher, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ChannelDispatcher, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: ChannelDispatcher, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: ChannelDispatcher, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ChannelDispatcher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ChannelDispatcher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::interfaces", callback: (($obj: ChannelDispatcher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: ChannelDispatcher, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ChannelDispatcher_ConstructProps)
    _init (config?: ChannelDispatcher_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bus_daemon: DBusDaemon): ChannelDispatcher
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface ChannelRequest_ConstructProps extends Proxy_ConstructProps {
    channel_factory?: GObject.Object
}
class ChannelRequest {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.ChannelRequest */
    readonly account: Account
    channel_factory: GObject.Object
    readonly hints_vardict: GLib.Variant
    readonly immutable_properties_vardict: GLib.Variant
    readonly preferred_handler: string
    readonly user_action_time: number
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ChannelRequest */
    dup_hints(): GLib.Variant
    dup_immutable_properties(): GLib.Variant
    get_account(): Account
    get_hints(): GLib.HashTable
    get_immutable_properties(): GLib.HashTable
    get_preferred_handler(): string
    get_user_action_time(): number
    set_channel_factory(factory: ClientChannelFactory): void
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.ChannelRequest */
    connect(sigName: "succeeded", callback: (($obj: ChannelRequest) => void)): number
    connect_after(sigName: "succeeded", callback: (($obj: ChannelRequest) => void)): number
    emit(sigName: "succeeded"): void
    connect(sigName: "succeeded-with-channel", callback: (($obj: ChannelRequest, connection: Connection, channel: Channel) => void)): number
    connect_after(sigName: "succeeded-with-channel", callback: (($obj: ChannelRequest, connection: Connection, channel: Channel) => void)): number
    emit(sigName: "succeeded-with-channel", connection: Connection, channel: Channel): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: ChannelRequest, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ChannelRequest, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: ChannelRequest, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: ChannelRequest, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::account", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::account", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel-factory", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-factory", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::hints-vardict", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hints-vardict", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::immutable-properties-vardict", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::immutable-properties-vardict", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::preferred-handler", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preferred-handler", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-action-time", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-action-time", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: ChannelRequest, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ChannelRequest_ConstructProps)
    _init (config?: ChannelRequest_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bus_daemon: DBusDaemon, object_path: string, immutable_properties: GLib.HashTable): ChannelRequest
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface ClientMessage_ConstructProps extends Message_ConstructProps {
}
class ClientMessage {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Message */
    append_part(): number
    count_parts(): number
    delete_key(part: number, key: string): boolean
    delete_part(part: number): void
    destroy(): void
    dup_part(part: number): GLib.Variant
    get_message_type(): ChannelTextMessageType
    get_pending_message_id(): [ /* returnType */ number, /* valid */ boolean ]
    get_received_timestamp(): number
    get_sent_timestamp(): number
    get_specific_to_interface(): string
    get_supersedes(): string
    get_token(): string
    is_delivery_report(): boolean
    is_mutable(): boolean
    is_rescued(): boolean
    is_scrollback(): boolean
    peek(part: number): GLib.HashTable
    ref_handle(handle_type: HandleType, handle: Handle): void
    set(part: number, key: string, source: any): void
    set_boolean(part: number, key: string, b: boolean): void
    set_bytes(part: number, key: string, len: number, bytes?: object | null): void
    set_handle(part: number, key: string, handle_type: HandleType, handle_or_0: Handle): void
    set_int32(part: number, key: string, i: number): void
    set_int64(part: number, key: string, i: number): void
    set_string(part: number, key: string, s: string): void
    set_uint32(part: number, key: string, u: number): void
    set_uint64(part: number, key: string, u: number): void
    set_variant(part: number, key: string, value: GLib.Variant): void
    take_message(part: number, key: string, message: Message): void
    to_text(): [ /* returnType */ string, /* out_flags */ ChannelTextMessageFlags ]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ClientMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ClientMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ClientMessage_ConstructProps)
    _init (config?: ClientMessage_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ClientMessage
    static new_text(type: ChannelTextMessageType, text: string): ClientMessage
    static $gtype: GObject.Type
}
export interface Connection_ConstructProps extends Proxy_ConstructProps {
}
class Connection {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Connection */
    readonly balance: number
    readonly balance_currency: string
    readonly balance_scale: number
    readonly balance_uri: string
    readonly blocked_contacts: object[]
    readonly can_change_contact_list: boolean
    readonly can_report_abusive: boolean
    readonly capabilities: Capabilities
    readonly cm_name: string
    readonly connection_manager_name: string
    readonly connection_ready: boolean
    readonly contact_groups: string[]
    readonly contact_list_persists: boolean
    readonly contact_list_state: number
    readonly disjoint_groups: boolean
    readonly group_storage: number
    readonly protocol_name: string
    readonly request_uses_message: boolean
    readonly self_contact: Contact
    readonly self_handle: number
    readonly status: number
    readonly status_reason: number
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Connection */
    add_client_interest(interested_in: string): void
    add_to_group_async(group: string, contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    add_to_group_finish(result: Gio.AsyncResult): boolean
    authorize_publication_async(contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    authorize_publication_finish(result: Gio.AsyncResult): boolean
    bind_connection_status_to_property(target: object | null, target_property: string, invert: boolean): GObject.Binding
    block_contacts_async(contacts: Contact[], report_abusive: boolean, callback?: Gio.AsyncReadyCallback | null): void
    block_contacts_finish(result: Gio.AsyncResult): boolean
    can_set_contact_alias(): boolean
    disconnect_async(callback?: Gio.AsyncReadyCallback | null): void
    disconnect_finish(result: Gio.AsyncResult): boolean
    dup_contact_by_id_async(id: string, features?: ContactFeature[] | null, callback?: Gio.AsyncReadyCallback | null): void
    dup_contact_by_id_finish(result: Gio.AsyncResult): Contact
    dup_contact_if_possible(handle: Handle, identifier: string): Contact
    dup_contact_info_supported_fields(): ContactInfoFieldSpec[]
    dup_contact_list(): Contact[]
    dup_detailed_error_vardict(): [ /* returnType */ string | null, /* details */ GLib.Variant | null ]
    get_account(): Account
    get_avatar_requirements(): AvatarRequirements
    get_balance(): [ /* returnType */ boolean, /* balance */ number, /* scale */ number, /* currency */ string ]
    get_balance_uri(): string
    get_blocked_contacts(): Contact[]
    get_can_change_contact_list(): boolean
    get_capabilities(): Capabilities
    get_cm_name(): string
    get_connection_manager_name(): string
    get_contact_attributes(timeout_ms: number, handles: Handle[], interfaces: string, hold: boolean, callback: GObject.Callback, weak_object: GObject.Object): void
    get_contact_groups(): string[]
    get_contact_info_flags(): ContactInfoFlags
    get_contact_info_supported_fields(): ContactInfoFieldSpec[]
    get_contact_list_attributes(timeout_ms: number, interfaces: string, hold: boolean, callback: GObject.Callback, weak_object: GObject.Object): void
    get_contact_list_persists(): boolean
    get_contact_list_state(): ContactListState
    get_contacts_by_handle(handles: number[], features: number[] | null, callback: ConnectionContactsByHandleCb, weak_object?: GObject.Object | null): void
    get_contacts_by_id(ids: string[], features: ContactFeature[] | null, callback: ConnectionContactsByIdCb, weak_object?: GObject.Object | null): void
    get_detailed_error(): [ /* returnType */ string | null, /* details */ GLib.HashTable | null ]
    get_disjoint_groups(): boolean
    get_group_storage(): ContactMetadataStorageType
    get_protocol_name(): string
    get_request_uses_message(): boolean
    get_self_contact(): Contact
    get_self_handle(): Handle
    get_status(): [ /* returnType */ ConnectionStatus, /* reason */ ConnectionStatusReason ]
    has_immortal_handles(): boolean
    hold_handles(timeout_ms: number, handle_type: HandleType, handles: Handle[], callback: ConnectionHoldHandlesCb, weak_object: GObject.Object): void
    parse_object_path(): [ /* returnType */ boolean, /* protocol */ string, /* cm_name */ string ]
    refresh_contact_info(contacts: Contact[]): void
    remove_contacts_async(contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    remove_contacts_finish(result: Gio.AsyncResult): boolean
    remove_from_group_async(group: string, contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    remove_from_group_finish(result: Gio.AsyncResult): boolean
    remove_group_async(group: string, callback?: Gio.AsyncReadyCallback | null): void
    remove_group_finish(result: Gio.AsyncResult): boolean
    rename_group_async(old_name: string, new_name: string, callback?: Gio.AsyncReadyCallback | null): void
    rename_group_finish(result: Gio.AsyncResult): boolean
    request_handles(timeout_ms: number, handle_type: HandleType, ids: string[], callback: ConnectionRequestHandlesCb, weak_object: GObject.Object): void
    request_subscription_async(contacts: Contact[], message: string, callback?: Gio.AsyncReadyCallback | null): void
    request_subscription_finish(result: Gio.AsyncResult): boolean
    set_contact_info_async(info: ContactInfoField[], callback?: Gio.AsyncReadyCallback | null): void
    set_contact_info_finish(result: Gio.AsyncResult): boolean
    set_group_members_async(group: string, contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    set_group_members_finish(result: Gio.AsyncResult): boolean
    unblock_contacts_async(contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    unblock_contacts_finish(result: Gio.AsyncResult): boolean
    unpublish_async(contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    unpublish_finish(result: Gio.AsyncResult): boolean
    unref_handles(handle_type: HandleType, handles: Handle[]): void
    unsubscribe_async(contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    unsubscribe_finish(result: Gio.AsyncResult): boolean
    upgrade_contacts(contacts: Contact[], features: ContactFeature[], callback: ConnectionUpgradeContactsCb, weak_object?: GObject.Object | null): void
    upgrade_contacts_async(contacts: Contact[], features: ContactFeature[], callback?: Gio.AsyncReadyCallback | null): void
    upgrade_contacts_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* contacts */ Contact[] | null ]
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Connection */
    connect(sigName: "balance-changed", callback: (($obj: Connection, balance: number, balance_scale: number, balance_currency: string) => void)): number
    connect_after(sigName: "balance-changed", callback: (($obj: Connection, balance: number, balance_scale: number, balance_currency: string) => void)): number
    emit(sigName: "balance-changed", balance: number, balance_scale: number, balance_currency: string): void
    connect(sigName: "blocked-contacts-changed", callback: (($obj: Connection, added: Contact[], removed: Contact[]) => void)): number
    connect_after(sigName: "blocked-contacts-changed", callback: (($obj: Connection, added: Contact[], removed: Contact[]) => void)): number
    emit(sigName: "blocked-contacts-changed", added: Contact[], removed: Contact[]): void
    connect(sigName: "contact-list-changed", callback: (($obj: Connection, added: Contact[], removed: Contact[]) => void)): number
    connect_after(sigName: "contact-list-changed", callback: (($obj: Connection, added: Contact[], removed: Contact[]) => void)): number
    emit(sigName: "contact-list-changed", added: Contact[], removed: Contact[]): void
    connect(sigName: "group-renamed", callback: (($obj: Connection, old_name: string, new_name: string) => void)): number
    connect_after(sigName: "group-renamed", callback: (($obj: Connection, old_name: string, new_name: string) => void)): number
    emit(sigName: "group-renamed", old_name: string, new_name: string): void
    connect(sigName: "groups-created", callback: (($obj: Connection, added: string[]) => void)): number
    connect_after(sigName: "groups-created", callback: (($obj: Connection, added: string[]) => void)): number
    emit(sigName: "groups-created", added: string[]): void
    connect(sigName: "groups-removed", callback: (($obj: Connection, added: string[]) => void)): number
    connect_after(sigName: "groups-removed", callback: (($obj: Connection, added: string[]) => void)): number
    emit(sigName: "groups-removed", added: string[]): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: Connection, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: Connection, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: Connection, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: Connection, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::balance", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::balance", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::balance-currency", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::balance-currency", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::balance-scale", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::balance-scale", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::balance-uri", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::balance-uri", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::blocked-contacts", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::blocked-contacts", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::can-change-contact-list", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-change-contact-list", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::can-report-abusive", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-report-abusive", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cm-name", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cm-name", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-manager-name", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-manager-name", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-ready", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-ready", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::contact-groups", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contact-groups", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::contact-list-persists", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contact-list-persists", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::contact-list-state", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contact-list-state", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::disjoint-groups", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disjoint-groups", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-storage", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-storage", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::protocol-name", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol-name", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-uses-message", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-uses-message", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::self-contact", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::self-contact", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::self-handle", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::self-handle", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::status", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::status-reason", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status-reason", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: Connection, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Connection_ConstructProps)
    _init (config?: Connection_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, bus_name?: string | null, object_path?: string | null): Connection
    static get_feature_quark_aliasing(): GLib.Quark
    static get_feature_quark_avatar_requirements(): GLib.Quark
    static get_feature_quark_balance(): GLib.Quark
    static get_feature_quark_capabilities(): GLib.Quark
    static get_feature_quark_connected(): GLib.Quark
    static get_feature_quark_contact_blocking(): GLib.Quark
    static get_feature_quark_contact_groups(): GLib.Quark
    static get_feature_quark_contact_info(): GLib.Quark
    static get_feature_quark_contact_list(): GLib.Quark
    static get_feature_quark_contact_list_properties(): GLib.Quark
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static presence_type_cmp_availability(p1: ConnectionPresenceType, p2: ConnectionPresenceType): number
    static $gtype: GObject.Type
}
export interface ConnectionManager_ConstructProps extends Proxy_ConstructProps {
    always_introspect?: boolean
    manager_file?: string
}
class ConnectionManager {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.ConnectionManager */
    always_introspect: boolean
    readonly cm_name: string
    readonly connection_manager: string
    readonly info_source: number
    manager_file: string
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ConnectionManager */
    dup_protocol_names(): string[]
    dup_protocols(): Protocol[]
    get_info_source(): CMInfoSource
    get_name(): string
    get_protocol(protocol: string): ConnectionManagerProtocol
    get_protocol_object(protocol: string): Protocol
    has_protocol(protocol: string): boolean
    is_running(): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.ConnectionManager */
    connect(sigName: "activated", callback: (($obj: ConnectionManager) => void)): number
    connect_after(sigName: "activated", callback: (($obj: ConnectionManager) => void)): number
    emit(sigName: "activated"): void
    connect(sigName: "exited", callback: (($obj: ConnectionManager) => void)): number
    connect_after(sigName: "exited", callback: (($obj: ConnectionManager) => void)): number
    emit(sigName: "exited"): void
    connect(sigName: "got-info", callback: (($obj: ConnectionManager, source: number) => void)): number
    connect_after(sigName: "got-info", callback: (($obj: ConnectionManager, source: number) => void)): number
    emit(sigName: "got-info", source: number): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: ConnectionManager, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: ConnectionManager, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: ConnectionManager, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: ConnectionManager, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::always-introspect", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::always-introspect", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cm-name", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cm-name", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-manager", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-manager", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::info-source", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::info-source", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::manager-file", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager-file", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: ConnectionManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ConnectionManager_ConstructProps)
    _init (config?: ConnectionManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, name: string, manager_filename?: string | null): ConnectionManager
    static check_valid_name(name: string): boolean
    static check_valid_protocol_name(name: string): boolean
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface Contact_ConstructProps extends GObject.Object_ConstructProps {
}
class Contact {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Contact */
    readonly alias: string
    readonly avatar_file: Gio.File
    readonly avatar_mime_type: string
    readonly avatar_token: string
    readonly capabilities: Capabilities
    readonly client_types: string[]
    readonly connection: Connection
    readonly contact_groups: string[]
    readonly contact_info: any
    readonly handle: number
    readonly identifier: string
    readonly is_blocked: boolean
    readonly location_vardict: GLib.Variant
    readonly presence_message: string
    readonly presence_status: string
    readonly presence_type: number
    readonly publish_request: string
    readonly publish_state: number
    readonly subscribe_state: number
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Contact */
    add_to_group_async(group: string, callback?: Gio.AsyncReadyCallback | null): void
    add_to_group_finish(result: Gio.AsyncResult): boolean
    authorize_publication_async(callback?: Gio.AsyncReadyCallback | null): void
    authorize_publication_finish(result: Gio.AsyncResult): boolean
    block_async(report_abusive: boolean, callback?: Gio.AsyncReadyCallback | null): void
    block_finish(result: Gio.AsyncResult): boolean
    dup_contact_info(): ContactInfoField[]
    dup_location(): GLib.Variant
    get_account(): Account
    get_alias(): string
    get_avatar_file(): Gio.File
    get_avatar_mime_type(): string
    get_avatar_token(): string
    get_capabilities(): Capabilities
    get_client_types(): string[]
    get_connection(): Connection
    get_contact_groups(): string[]
    get_contact_info(): ContactInfoField[]
    get_handle(): Handle
    get_identifier(): string
    get_location(): GLib.HashTable
    get_presence_message(): string
    get_presence_status(): string
    get_presence_type(): ConnectionPresenceType
    get_publish_request(): string
    get_publish_state(): SubscriptionState
    get_subscribe_state(): SubscriptionState
    has_feature(feature: ContactFeature): boolean
    remove_async(callback?: Gio.AsyncReadyCallback | null): void
    remove_finish(result: Gio.AsyncResult): boolean
    remove_from_group_async(group: string, callback?: Gio.AsyncReadyCallback | null): void
    remove_from_group_finish(result: Gio.AsyncResult): boolean
    request_contact_info_async(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    request_contact_info_finish(result: Gio.AsyncResult): boolean
    request_subscription_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    request_subscription_finish(result: Gio.AsyncResult): boolean
    set_contact_groups_async(groups?: string[] | null, callback?: Gio.AsyncReadyCallback | null): void
    set_contact_groups_finish(result: Gio.AsyncResult): boolean
    unblock_async(callback?: Gio.AsyncReadyCallback | null): void
    unblock_finish(result: Gio.AsyncResult): boolean
    unpublish_async(callback?: Gio.AsyncReadyCallback | null): void
    unpublish_finish(result: Gio.AsyncResult): boolean
    unsubscribe_async(callback?: Gio.AsyncReadyCallback | null): void
    unsubscribe_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Contact */
    connect(sigName: "contact-groups-changed", callback: (($obj: Contact, added: string[], removed: string[]) => void)): number
    connect_after(sigName: "contact-groups-changed", callback: (($obj: Contact, added: string[], removed: string[]) => void)): number
    emit(sigName: "contact-groups-changed", added: string[], removed: string[]): void
    connect(sigName: "presence-changed", callback: (($obj: Contact, type: number, status: string, message: string) => void)): number
    connect_after(sigName: "presence-changed", callback: (($obj: Contact, type: number, status: string, message: string) => void)): number
    emit(sigName: "presence-changed", type: number, status: string, message: string): void
    connect(sigName: "subscription-states-changed", callback: (($obj: Contact, subscribe: number, publish: number, publish_request: string) => void)): number
    connect_after(sigName: "subscription-states-changed", callback: (($obj: Contact, subscribe: number, publish: number, publish_request: string) => void)): number
    emit(sigName: "subscription-states-changed", subscribe: number, publish: number, publish_request: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alias", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alias", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::avatar-file", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avatar-file", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::avatar-mime-type", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avatar-mime-type", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::avatar-token", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avatar-token", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::client-types", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client-types", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::contact-groups", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contact-groups", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::contact-info", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contact-info", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::handle", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::handle", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-blocked", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-blocked", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::location-vardict", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::location-vardict", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::presence-message", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::presence-message", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::presence-status", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::presence-status", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::presence-type", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::presence-type", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::publish-request", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::publish-request", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::publish-state", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::publish-state", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::subscribe-state", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subscribe-state", callback: (($obj: Contact, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Contact_ConstructProps)
    _init (config?: Contact_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ContactSearch_ConstructProps extends GObject.Object_ConstructProps {
    account?: Account
    limit?: number
    server?: string
}
class ContactSearch {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.ContactSearch */
    limit: number
    readonly state: number
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ContactSearch */
    get_account(): Account
    get_limit(): number
    get_search_keys(): string[]
    get_server(): string
    reset_async(server: string, limit: number, callback?: Gio.AsyncReadyCallback | null): void
    reset_finish(result: Gio.AsyncResult): string[]
    start(criteria: GLib.HashTable): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    init_finish(res: Gio.AsyncResult): boolean
    new_finish(res: Gio.AsyncResult): GObject.Object
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.ContactSearch */
    vfunc_init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    vfunc_init_finish(res: Gio.AsyncResult): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.ContactSearch */
    connect(sigName: "search-results-received", callback: (($obj: ContactSearch, results: ContactSearchResult[]) => void)): number
    connect_after(sigName: "search-results-received", callback: (($obj: ContactSearch, results: ContactSearchResult[]) => void)): number
    emit(sigName: "search-results-received", results: ContactSearchResult[]): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ContactSearch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ContactSearch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::limit", callback: (($obj: ContactSearch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit", callback: (($obj: ContactSearch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: ContactSearch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: ContactSearch, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ContactSearch_ConstructProps)
    _init (config?: ContactSearch_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new_finish(result: Gio.AsyncResult): ContactSearch
    static new_async(account: Account, server: string, limit: number, callback?: Gio.AsyncReadyCallback | null): void
    static newv_async(object_type: GObject.Type, n_parameters: number, parameters: GObject.Parameter, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface ContactSearchResult_ConstructProps extends GObject.Object_ConstructProps {
    identifier?: string
}
class ContactSearchResult {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ContactSearchResult */
    dup_fields(): ContactInfoField[]
    get_field(field: string): ContactInfoField
    get_fields(): ContactInfoField[]
    get_identifier(): string
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ContactSearchResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ContactSearchResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ContactSearchResult_ConstructProps)
    _init (config?: ContactSearchResult_ConstructProps): void
    static $gtype: GObject.Type
}
export interface DBusDaemon_ConstructProps extends Proxy_ConstructProps {
}
class DBusDaemon {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.DBusDaemon */
    get_unique_name(): string
    list_activatable_names(timeout_ms: number, callback: DBusDaemonListNamesCb, weak_object: GObject.Object): void
    list_names(timeout_ms: number, callback: DBusDaemonListNamesCb, weak_object: GObject.Object): void
    register_object(object_path: string, object: GObject.Object): void
    release_name(well_known_name: string): boolean
    request_name(well_known_name: string, idempotent: boolean): boolean
    unregister_object(object: GObject.Object): void
    watch_name_owner(name: string, callback: DBusDaemonNameOwnerChangedCb): void
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: DBusDaemon, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: DBusDaemon, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: DBusDaemon, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: DBusDaemon, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DBusDaemon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DBusDaemon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::interfaces", callback: (($obj: DBusDaemon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: DBusDaemon, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DBusDaemon_ConstructProps)
    _init (config?: DBusDaemon_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static dup(): DBusDaemon
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface DBusTubeChannel_ConstructProps extends Channel_ConstructProps {
}
class DBusTubeChannel {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.DBusTubeChannel */
    readonly parameters_vardict: GLib.Variant
    readonly service_name: string
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Channel */
    readonly channel_ready: boolean
    readonly group_flags: number
    readonly group_self_contact: Contact
    readonly group_self_handle: number
    readonly identifier: string
    readonly initiator_contact: Contact
    readonly initiator_handle: number
    readonly initiator_identifier: string
    readonly password_needed: boolean
    readonly requested: boolean
    readonly target_contact: Contact
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.DBusTubeChannel */
    accept_async(callback?: Gio.AsyncReadyCallback | null): void
    accept_finish(result: Gio.AsyncResult): Gio.DBusConnection
    dup_parameters_vardict(): GLib.Variant
    get_service_name(): string
    offer_async(params?: GLib.HashTable | null, callback?: Gio.AsyncReadyCallback | null): void
    offer_finish(result: Gio.AsyncResult): Gio.DBusConnection
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Channel */
    borrow_connection(): Connection
    borrow_immutable_properties(): GLib.HashTable
    close_async(callback?: Gio.AsyncReadyCallback | null): void
    close_finish(result: Gio.AsyncResult): boolean
    destroy_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_finish(result: Gio.AsyncResult): boolean
    dup_immutable_properties(): GLib.Variant
    get_channel_type(): string
    get_channel_type_id(): GLib.Quark
    get_chat_state(contact: Handle): ChannelChatState
    get_connection(): Connection
    get_handle(): [ /* returnType */ Handle, /* handle_type */ HandleType ]
    get_identifier(): string
    get_initiator_contact(): Contact
    get_requested(): boolean
    get_target_contact(): Contact
    group_dup_local_pending_contacts(): Contact[]
    group_dup_members_contacts(): Contact[]
    group_dup_remote_pending_contacts(): Contact[]
    group_get_contact_owner(contact: Contact): Contact
    group_get_flags(): ChannelGroupFlags
    group_get_handle_owner(handle: Handle): Handle
    group_get_local_pending(): Intset
    group_get_local_pending_contact_info(local_pending: Contact): [ /* returnType */ boolean, /* actor */ Contact | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_local_pending_info(local_pending: Handle): [ /* returnType */ boolean, /* actor */ Handle | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_members(): Intset
    group_get_remote_pending(): Intset
    group_get_self_contact(): Contact
    group_get_self_handle(): Handle
    join_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    join_finish(result: Gio.AsyncResult): boolean
    leave_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_finish(result: Gio.AsyncResult): boolean
    provide_password_async(password: string, callback?: Gio.AsyncReadyCallback | null): void
    provide_password_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Channel */
    connect(sigName: "chat-state-changed", callback: (($obj: DBusTubeChannel, contact: number, state: number) => void)): number
    connect_after(sigName: "chat-state-changed", callback: (($obj: DBusTubeChannel, contact: number, state: number) => void)): number
    emit(sigName: "chat-state-changed", contact: number, state: number): void
    connect(sigName: "group-contacts-changed", callback: (($obj: DBusTubeChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-contacts-changed", callback: (($obj: DBusTubeChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    emit(sigName: "group-contacts-changed", added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable): void
    connect(sigName: "group-flags-changed", callback: (($obj: DBusTubeChannel, added: number, removed: number) => void)): number
    connect_after(sigName: "group-flags-changed", callback: (($obj: DBusTubeChannel, added: number, removed: number) => void)): number
    emit(sigName: "group-flags-changed", added: number, removed: number): void
    connect(sigName: "group-members-changed", callback: (($obj: DBusTubeChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    connect_after(sigName: "group-members-changed", callback: (($obj: DBusTubeChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    emit(sigName: "group-members-changed", message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number): void
    connect(sigName: "group-members-changed-detailed", callback: (($obj: DBusTubeChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-members-changed-detailed", callback: (($obj: DBusTubeChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    emit(sigName: "group-members-changed-detailed", added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: DBusTubeChannel, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: DBusTubeChannel, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: DBusTubeChannel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: DBusTubeChannel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parameters-vardict", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parameters-vardict", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service-name", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-name", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel-ready", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-ready", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-flags", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-flags", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-contact", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-contact", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-handle", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-handle", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-contact", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-contact", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-handle", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-handle", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-identifier", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-identifier", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-needed", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-needed", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-contact", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-contact", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: DBusTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DBusTubeChannel_ConstructProps)
    _init (config?: DBusTubeChannel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static feature_quark_core(): GLib.Quark
    static $gtype: GObject.Type
}
export interface DebugClient_ConstructProps extends Proxy_ConstructProps {
}
class DebugClient {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.DebugClient */
    readonly enabled: boolean
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.DebugClient */
    get_messages_async(callback?: Gio.AsyncReadyCallback | null): void
    get_messages_finish(result: Gio.AsyncResult): DebugMessage[]
    is_enabled(): boolean
    set_enabled_async(enabled: boolean, callback?: Gio.AsyncReadyCallback | null): void
    set_enabled_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.DebugClient */
    connect(sigName: "new-debug-message", callback: (($obj: DebugClient, message: DebugMessage) => void)): number
    connect_after(sigName: "new-debug-message", callback: (($obj: DebugClient, message: DebugMessage) => void)): number
    emit(sigName: "new-debug-message", message: DebugMessage): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: DebugClient, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: DebugClient, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: DebugClient, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: DebugClient, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DebugClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DebugClient, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::enabled", callback: (($obj: DebugClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: DebugClient, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: DebugClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: DebugClient, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DebugClient_ConstructProps)
    _init (config?: DebugClient_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, unique_name: string): DebugClient
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface DebugMessage_ConstructProps extends GObject.Object_ConstructProps {
}
class DebugMessage {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.DebugMessage */
    readonly category: string
    readonly domain: string
    readonly level: number
    readonly message: string
    readonly time: GLib.DateTime
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.DebugMessage */
    get_category(): string
    get_domain(): string
    get_level(): GLib.LogLevelFlags
    get_message(): string
    get_time(): GLib.DateTime
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::category", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::category", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::domain", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::domain", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::level", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::level", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::message", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::time", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::time", callback: (($obj: DebugMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DebugMessage_ConstructProps)
    _init (config?: DebugMessage_ConstructProps): void
    static $gtype: GObject.Type
}
export interface FileTransferChannel_ConstructProps extends Channel_ConstructProps {
}
class FileTransferChannel {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.FileTransferChannel */
    readonly date: GLib.DateTime
    readonly description: string
    readonly file: Gio.File
    readonly filename: string
    readonly initial_offset: number
    readonly mime_type: string
    readonly service_name: string
    readonly size: number
    readonly state: number
    readonly transferred_bytes: number
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Channel */
    readonly channel_ready: boolean
    readonly group_flags: number
    readonly group_self_contact: Contact
    readonly group_self_handle: number
    readonly identifier: string
    readonly initiator_contact: Contact
    readonly initiator_handle: number
    readonly initiator_identifier: string
    readonly password_needed: boolean
    readonly requested: boolean
    readonly target_contact: Contact
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.FileTransferChannel */
    accept_file_async(file: Gio.File, offset: number, callback?: Gio.AsyncReadyCallback | null): void
    accept_file_finish(result: Gio.AsyncResult): boolean
    get_date(): GLib.DateTime
    get_description(): string
    get_filename(): string
    get_metadata(): GLib.HashTable
    get_mime_type(): string
    get_service_name(): string
    get_size(): number
    get_state(): [ /* returnType */ FileTransferState, /* reason */ FileTransferStateChangeReason ]
    get_transferred_bytes(): number
    provide_file_async(file: Gio.File, callback?: Gio.AsyncReadyCallback | null): void
    provide_file_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Channel */
    borrow_connection(): Connection
    borrow_immutable_properties(): GLib.HashTable
    close_async(callback?: Gio.AsyncReadyCallback | null): void
    close_finish(result: Gio.AsyncResult): boolean
    destroy_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_finish(result: Gio.AsyncResult): boolean
    dup_immutable_properties(): GLib.Variant
    get_channel_type(): string
    get_channel_type_id(): GLib.Quark
    get_chat_state(contact: Handle): ChannelChatState
    get_connection(): Connection
    get_handle(): [ /* returnType */ Handle, /* handle_type */ HandleType ]
    get_identifier(): string
    get_initiator_contact(): Contact
    get_requested(): boolean
    get_target_contact(): Contact
    group_dup_local_pending_contacts(): Contact[]
    group_dup_members_contacts(): Contact[]
    group_dup_remote_pending_contacts(): Contact[]
    group_get_contact_owner(contact: Contact): Contact
    group_get_flags(): ChannelGroupFlags
    group_get_handle_owner(handle: Handle): Handle
    group_get_local_pending(): Intset
    group_get_local_pending_contact_info(local_pending: Contact): [ /* returnType */ boolean, /* actor */ Contact | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_local_pending_info(local_pending: Handle): [ /* returnType */ boolean, /* actor */ Handle | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_members(): Intset
    group_get_remote_pending(): Intset
    group_get_self_contact(): Contact
    group_get_self_handle(): Handle
    join_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    join_finish(result: Gio.AsyncResult): boolean
    leave_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_finish(result: Gio.AsyncResult): boolean
    provide_password_async(password: string, callback?: Gio.AsyncReadyCallback | null): void
    provide_password_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Channel */
    connect(sigName: "chat-state-changed", callback: (($obj: FileTransferChannel, contact: number, state: number) => void)): number
    connect_after(sigName: "chat-state-changed", callback: (($obj: FileTransferChannel, contact: number, state: number) => void)): number
    emit(sigName: "chat-state-changed", contact: number, state: number): void
    connect(sigName: "group-contacts-changed", callback: (($obj: FileTransferChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-contacts-changed", callback: (($obj: FileTransferChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    emit(sigName: "group-contacts-changed", added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable): void
    connect(sigName: "group-flags-changed", callback: (($obj: FileTransferChannel, added: number, removed: number) => void)): number
    connect_after(sigName: "group-flags-changed", callback: (($obj: FileTransferChannel, added: number, removed: number) => void)): number
    emit(sigName: "group-flags-changed", added: number, removed: number): void
    connect(sigName: "group-members-changed", callback: (($obj: FileTransferChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    connect_after(sigName: "group-members-changed", callback: (($obj: FileTransferChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    emit(sigName: "group-members-changed", message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number): void
    connect(sigName: "group-members-changed-detailed", callback: (($obj: FileTransferChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-members-changed-detailed", callback: (($obj: FileTransferChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    emit(sigName: "group-members-changed-detailed", added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: FileTransferChannel, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: FileTransferChannel, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: FileTransferChannel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: FileTransferChannel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::date", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::description", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::file", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filename", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initial-offset", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial-offset", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mime-type", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mime-type", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service-name", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service-name", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transferred-bytes", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transferred-bytes", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel-ready", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-ready", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-flags", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-flags", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-contact", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-contact", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-handle", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-handle", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-contact", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-contact", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-handle", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-handle", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-identifier", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-identifier", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-needed", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-needed", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-contact", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-contact", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: FileTransferChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FileTransferChannel_ConstructProps)
    _init (config?: FileTransferChannel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(conn: Connection, object_path: string, immutable_properties: GLib.HashTable): FileTransferChannel
    static new(conn: Connection, object_path: string, optional_channel_type: string, optional_handle_type: HandleType, optional_handle: Handle): FileTransferChannel
    static get_feature_quark_core(): GLib.Quark
    static $gtype: GObject.Type
}
export interface HandleChannelsContext_ConstructProps extends GObject.Object_ConstructProps {
    account?: Account
    channels?: object[]
    connection?: Connection
    requests_satisfied?: object[]
    user_action_time?: number
}
class HandleChannelsContext {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.HandleChannelsContext */
    accept(): void
    delay(): void
    fail(error: GLib.Error): void
    get_handler_info(): GLib.HashTable
    get_requests(): ChannelRequest[]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.HandleChannelsContext */
    connect(sigName: "done", callback: (($obj: HandleChannelsContext) => void)): number
    connect_after(sigName: "done", callback: (($obj: HandleChannelsContext) => void)): number
    emit(sigName: "done"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: HandleChannelsContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HandleChannelsContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HandleChannelsContext_ConstructProps)
    _init (config?: HandleChannelsContext_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Message_ConstructProps extends GObject.Object_ConstructProps {
}
class Message {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Message */
    append_part(): number
    count_parts(): number
    delete_key(part: number, key: string): boolean
    delete_part(part: number): void
    destroy(): void
    dup_part(part: number): GLib.Variant
    get_message_type(): ChannelTextMessageType
    get_pending_message_id(): [ /* returnType */ number, /* valid */ boolean ]
    get_received_timestamp(): number
    get_sent_timestamp(): number
    get_specific_to_interface(): string
    get_supersedes(): string
    get_token(): string
    is_delivery_report(): boolean
    is_mutable(): boolean
    is_rescued(): boolean
    is_scrollback(): boolean
    peek(part: number): GLib.HashTable
    ref_handle(handle_type: HandleType, handle: Handle): void
    set(part: number, key: string, source: any): void
    set_boolean(part: number, key: string, b: boolean): void
    set_bytes(part: number, key: string, len: number, bytes?: object | null): void
    set_handle(part: number, key: string, handle_type: HandleType, handle_or_0: Handle): void
    set_int32(part: number, key: string, i: number): void
    set_int64(part: number, key: string, i: number): void
    set_string(part: number, key: string, s: string): void
    set_uint32(part: number, key: string, u: number): void
    set_uint64(part: number, key: string, u: number): void
    set_variant(part: number, key: string, value: GLib.Variant): void
    take_message(part: number, key: string, message: Message): void
    to_text(): [ /* returnType */ string, /* out_flags */ ChannelTextMessageFlags ]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Message, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Message, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Message_ConstructProps)
    _init (config?: Message_ConstructProps): void
    static $gtype: GObject.Type
}
export interface ObserveChannelsContext_ConstructProps extends GObject.Object_ConstructProps {
    account?: Account
    channels?: object[]
    connection?: Connection
    dispatch_operation?: ChannelDispatchOperation
    requests?: object[]
}
class ObserveChannelsContext {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ObserveChannelsContext */
    accept(): void
    delay(): void
    fail(error: GLib.Error): void
    get_requests(): ChannelRequest[]
    is_recovering(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ObserveChannelsContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ObserveChannelsContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ObserveChannelsContext_ConstructProps)
    _init (config?: ObserveChannelsContext_ConstructProps): void
    static $gtype: GObject.Type
}
export interface Protocol_ConstructProps extends Proxy_ConstructProps {
    cm_name?: string
    protocol_name?: string
}
class Protocol {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Protocol */
    readonly addressable_uri_schemes: string[]
    readonly addressable_vcard_fields: string[]
    readonly authentication_types: string[]
    readonly avatar_requirements: object
    readonly capabilities: Capabilities
    readonly english_name: string
    readonly icon_name: string
    readonly param_names: string[]
    readonly protocol_properties_vardict: GLib.Variant
    readonly vcard_field: string
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Protocol */
    can_register(): boolean
    dup_immutable_properties(): GLib.Variant
    dup_param(param: string): ConnectionManagerParam
    dup_param_names(): string[]
    dup_params(): ConnectionManagerParam[]
    dup_presence_statuses(): PresenceStatusSpec[]
    get_addressable_uri_schemes(): string[]
    get_addressable_vcard_fields(): string[]
    get_authentication_types(): string[]
    get_avatar_requirements(): AvatarRequirements
    get_capabilities(): Capabilities
    get_cm_name(): string
    get_english_name(): string
    get_icon_name(): string
    get_name(): string
    get_param(param: string): ConnectionManagerParam
    get_vcard_field(): string
    has_param(param: string): boolean
    identify_account_async(vardict: GLib.Variant, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    identify_account_finish(result: Gio.AsyncResult): string
    normalize_contact_async(contact: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    normalize_contact_finish(result: Gio.AsyncResult): string
    normalize_contact_uri_async(uri: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    normalize_contact_uri_finish(result: Gio.AsyncResult): string
    normalize_vcard_address_async(field: string, value: string, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    normalize_vcard_address_finish(result: Gio.AsyncResult): string
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: Protocol, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: Protocol, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: Protocol, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: Protocol, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::addressable-uri-schemes", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addressable-uri-schemes", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::addressable-vcard-fields", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::addressable-vcard-fields", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::authentication-types", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authentication-types", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::avatar-requirements", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::avatar-requirements", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::capabilities", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::capabilities", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::english-name", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::english-name", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::icon-name", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::param-names", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::param-names", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::protocol-properties-vardict", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::protocol-properties-vardict", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vcard-field", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vcard-field", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: Protocol, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Protocol_ConstructProps)
    _init (config?: Protocol_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, cm_name: string, protocol_name: string, immutable_properties: GLib.HashTable): Protocol
    static new_vardict(dbus: DBusDaemon, cm_name: string, protocol_name: string, immutable_properties: GLib.Variant): Protocol
    static get_feature_quark_core(): GLib.Quark
    static get_feature_quark_parameters(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface Proxy_ConstructProps extends GObject.Object_ConstructProps {
    bus_name?: string
    dbus_daemon?: DBusDaemon
    factory?: SimpleClientFactory
    object_path?: string
}
class Proxy {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: Proxy, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: Proxy, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: Proxy, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: Proxy, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Proxy, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::interfaces", callback: (($obj: Proxy, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: Proxy, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Proxy_ConstructProps)
    _init (config?: Proxy_ConstructProps): void
    static $gtype: GObject.Type
}
export interface RoomInfo_ConstructProps extends GObject.Object_ConstructProps {
}
class RoomInfo {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.RoomInfo */
    get_channel_type(): string
    get_description(): string
    get_handle(): Handle
    get_handle_name(): string
    get_invite_only(known: boolean): boolean
    get_members_count(known: boolean): number
    get_name(): string
    get_requires_password(known: boolean): boolean
    get_room_id(): string
    get_server(): string
    get_subject(): string
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: RoomInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: RoomInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: RoomInfo_ConstructProps)
    _init (config?: RoomInfo_ConstructProps): void
    static $gtype: GObject.Type
}
export interface RoomList_ConstructProps extends GObject.Object_ConstructProps {
    account?: Account
    server?: string
}
class RoomList {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.RoomList */
    readonly listing: boolean
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.RoomList */
    get_account(): Account
    get_server(): string
    is_listing(): boolean
    start(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.AsyncInitable */
    init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    init_finish(res: Gio.AsyncResult): boolean
    new_finish(res: Gio.AsyncResult): GObject.Object
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.RoomList */
    vfunc_init_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    vfunc_init_finish(res: Gio.AsyncResult): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.RoomList */
    connect(sigName: "failed", callback: (($obj: RoomList, error: GLib.Error) => void)): number
    connect_after(sigName: "failed", callback: (($obj: RoomList, error: GLib.Error) => void)): number
    emit(sigName: "failed", error: GLib.Error): void
    connect(sigName: "got-room", callback: (($obj: RoomList, room: RoomInfo) => void)): number
    connect_after(sigName: "got-room", callback: (($obj: RoomList, room: RoomInfo) => void)): number
    emit(sigName: "got-room", room: RoomInfo): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: RoomList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: RoomList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::listing", callback: (($obj: RoomList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::listing", callback: (($obj: RoomList, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: RoomList_ConstructProps)
    _init (config?: RoomList_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new_finish(result: Gio.AsyncResult): RoomList
    static new_async(account: Account, server: string, callback?: Gio.AsyncReadyCallback | null): void
    static newv_async(object_type: GObject.Type, n_parameters: number, parameters: GObject.Parameter, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    static $gtype: GObject.Type
}
export interface SignalledMessage_ConstructProps extends Message_ConstructProps {
    sender?: Contact
}
class SignalledMessage {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Message */
    append_part(): number
    count_parts(): number
    delete_key(part: number, key: string): boolean
    delete_part(part: number): void
    destroy(): void
    dup_part(part: number): GLib.Variant
    get_message_type(): ChannelTextMessageType
    get_pending_message_id(): [ /* returnType */ number, /* valid */ boolean ]
    get_received_timestamp(): number
    get_sent_timestamp(): number
    get_specific_to_interface(): string
    get_supersedes(): string
    get_token(): string
    is_delivery_report(): boolean
    is_mutable(): boolean
    is_rescued(): boolean
    is_scrollback(): boolean
    peek(part: number): GLib.HashTable
    ref_handle(handle_type: HandleType, handle: Handle): void
    set(part: number, key: string, source: any): void
    set_boolean(part: number, key: string, b: boolean): void
    set_bytes(part: number, key: string, len: number, bytes?: object | null): void
    set_handle(part: number, key: string, handle_type: HandleType, handle_or_0: Handle): void
    set_int32(part: number, key: string, i: number): void
    set_int64(part: number, key: string, i: number): void
    set_string(part: number, key: string, s: string): void
    set_uint32(part: number, key: string, u: number): void
    set_uint64(part: number, key: string, u: number): void
    set_variant(part: number, key: string, value: GLib.Variant): void
    take_message(part: number, key: string, message: Message): void
    to_text(): [ /* returnType */ string, /* out_flags */ ChannelTextMessageFlags ]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SignalledMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SignalledMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SignalledMessage_ConstructProps)
    _init (config?: SignalledMessage_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_sender(message: Message): Contact
    static $gtype: GObject.Type
}
export interface SimpleApprover_ConstructProps extends BaseClient_ConstructProps {
    callback?: object
    destroy?: object
    user_data?: object
}
class SimpleApprover {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    add_account_features(features: GLib.Quark[]): void
    add_approver_filter(filter: GLib.HashTable): void
    add_approver_filter_vardict(filter: GLib.Variant): void
    add_channel_features(features: GLib.Quark[]): void
    add_connection_features(features: GLib.Quark[]): void
    add_handler_capabilities(tokens: string[]): void
    add_handler_capability(token: string): void
    add_handler_filter(filter: GLib.HashTable): void
    add_handler_filter_vardict(filter: GLib.Variant): void
    add_observer_filter(filter: GLib.HashTable): void
    add_observer_filter_vardict(filter: GLib.Variant): void
    be_a_handler(): void
    delegate_channels_async(channels: Channel[], user_action_time: number, preferred_handler: string, callback?: Gio.AsyncReadyCallback | null): void
    delegate_channels_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* delegated */ Channel[], /* not_delegated */ GLib.HashTable ]
    dup_handled_channels(): Channel[]
    dup_pending_requests(): ChannelRequest[]
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_handled_channels(): Channel[]
    get_name(): string
    get_object_path(): string
    get_pending_requests(): ChannelRequest[]
    get_uniquify_name(): boolean
    is_handling_channel(channel: Channel): boolean
    register(): boolean
    set_channel_factory(factory: ClientChannelFactory): void
    set_delegated_channels_callback(callback: BaseClientDelegatedChannelsCb): void
    set_handler_bypass_approval(bypass_approval: boolean): void
    set_handler_request_notification(): void
    set_observer_delay_approvers(delay: boolean): void
    set_observer_recover(recover: boolean): void
    unregister(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    vfunc_add_dispatch_operation(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation, context: AddDispatchOperationContext): void
    vfunc_handle_channels(account: Account, connection: Connection, channels: Channel[], requests_satisfied: ChannelRequest[], user_action_time: number, context: HandleChannelsContext): void
    vfunc_observe_channels(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, requests: ChannelRequest[], context: ObserveChannelsContext): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    connect(sigName: "request-added", callback: (($obj: SimpleApprover, account: Account, request: ChannelRequest) => void)): number
    connect_after(sigName: "request-added", callback: (($obj: SimpleApprover, account: Account, request: ChannelRequest) => void)): number
    emit(sigName: "request-added", account: Account, request: ChannelRequest): void
    connect(sigName: "request-removed", callback: (($obj: SimpleApprover, request: ChannelRequest, error: string, message: string) => void)): number
    connect_after(sigName: "request-removed", callback: (($obj: SimpleApprover, request: ChannelRequest, error: string, message: string) => void)): number
    emit(sigName: "request-removed", request: ChannelRequest, error: string, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SimpleApprover, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SimpleApprover, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SimpleApprover_ConstructProps)
    _init (config?: SimpleApprover_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, name: string, uniquify: boolean, callback: SimpleApproverAddDispatchOperationImpl): SimpleApprover
    static new_with_am(account_manager: AccountManager, name: string, uniquify: boolean, callback: SimpleApproverAddDispatchOperationImpl): SimpleApprover
    static new_with_factory(factory: SimpleClientFactory, name: string, uniquify: boolean, callback: SimpleApproverAddDispatchOperationImpl): SimpleApprover
    static $gtype: GObject.Type
}
export interface SimpleClientFactory_ConstructProps extends GObject.Object_ConstructProps {
    dbus_daemon?: DBusDaemon
}
class SimpleClientFactory {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.SimpleClientFactory */
    add_account_features(features?: GLib.Quark[] | null): void
    add_channel_features(features?: GLib.Quark[] | null): void
    add_connection_features(features?: GLib.Quark[] | null): void
    add_contact_features(features?: ContactFeature[] | null): void
    dup_account_features(account: Account): GLib.Quark[]
    dup_channel_features(channel: Channel): GLib.Quark[]
    dup_connection_features(connection: Connection): GLib.Quark[]
    dup_contact_features(connection: Connection): ContactFeature[]
    ensure_account(object_path: string, immutable_properties: GLib.HashTable): Account
    ensure_channel(connection: Connection, object_path: string, immutable_properties: GLib.HashTable): Channel
    ensure_connection(object_path: string, immutable_properties: GLib.HashTable): Connection
    ensure_contact(connection: Connection, handle: Handle, identifier: string): Contact
    ensure_contact_by_id_async(connection: Connection, identifier: string, callback?: Gio.AsyncReadyCallback | null): void
    ensure_contact_by_id_finish(result: Gio.AsyncResult): Contact
    get_dbus_daemon(): DBusDaemon
    upgrade_contacts_async(connection: Connection, contacts: Contact[], callback?: Gio.AsyncReadyCallback | null): void
    upgrade_contacts_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* contacts */ Contact[] | null ]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.SimpleClientFactory */
    vfunc_dup_account_features(account: Account): GLib.Quark[]
    vfunc_dup_channel_features(channel: Channel): GLib.Quark[]
    vfunc_dup_connection_features(connection: Connection): GLib.Quark[]
    vfunc_dup_contact_features(connection: Connection): ContactFeature[]
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SimpleClientFactory, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SimpleClientFactory, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SimpleClientFactory_ConstructProps)
    _init (config?: SimpleClientFactory_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus?: DBusDaemon | null): SimpleClientFactory
    static $gtype: GObject.Type
}
export interface SimpleHandler_ConstructProps extends BaseClient_ConstructProps {
    bypass_approval?: boolean
    callback?: object
    destroy?: object
    requests?: boolean
    user_data?: object
}
class SimpleHandler {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    add_account_features(features: GLib.Quark[]): void
    add_approver_filter(filter: GLib.HashTable): void
    add_approver_filter_vardict(filter: GLib.Variant): void
    add_channel_features(features: GLib.Quark[]): void
    add_connection_features(features: GLib.Quark[]): void
    add_handler_capabilities(tokens: string[]): void
    add_handler_capability(token: string): void
    add_handler_filter(filter: GLib.HashTable): void
    add_handler_filter_vardict(filter: GLib.Variant): void
    add_observer_filter(filter: GLib.HashTable): void
    add_observer_filter_vardict(filter: GLib.Variant): void
    be_a_handler(): void
    delegate_channels_async(channels: Channel[], user_action_time: number, preferred_handler: string, callback?: Gio.AsyncReadyCallback | null): void
    delegate_channels_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* delegated */ Channel[], /* not_delegated */ GLib.HashTable ]
    dup_handled_channels(): Channel[]
    dup_pending_requests(): ChannelRequest[]
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_handled_channels(): Channel[]
    get_name(): string
    get_object_path(): string
    get_pending_requests(): ChannelRequest[]
    get_uniquify_name(): boolean
    is_handling_channel(channel: Channel): boolean
    register(): boolean
    set_channel_factory(factory: ClientChannelFactory): void
    set_delegated_channels_callback(callback: BaseClientDelegatedChannelsCb): void
    set_handler_bypass_approval(bypass_approval: boolean): void
    set_handler_request_notification(): void
    set_observer_delay_approvers(delay: boolean): void
    set_observer_recover(recover: boolean): void
    unregister(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    vfunc_add_dispatch_operation(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation, context: AddDispatchOperationContext): void
    vfunc_handle_channels(account: Account, connection: Connection, channels: Channel[], requests_satisfied: ChannelRequest[], user_action_time: number, context: HandleChannelsContext): void
    vfunc_observe_channels(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, requests: ChannelRequest[], context: ObserveChannelsContext): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    connect(sigName: "request-added", callback: (($obj: SimpleHandler, account: Account, request: ChannelRequest) => void)): number
    connect_after(sigName: "request-added", callback: (($obj: SimpleHandler, account: Account, request: ChannelRequest) => void)): number
    emit(sigName: "request-added", account: Account, request: ChannelRequest): void
    connect(sigName: "request-removed", callback: (($obj: SimpleHandler, request: ChannelRequest, error: string, message: string) => void)): number
    connect_after(sigName: "request-removed", callback: (($obj: SimpleHandler, request: ChannelRequest, error: string, message: string) => void)): number
    emit(sigName: "request-removed", request: ChannelRequest, error: string, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SimpleHandler, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SimpleHandler, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SimpleHandler_ConstructProps)
    _init (config?: SimpleHandler_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, bypass_approval: boolean, requests: boolean, name: string, uniquify: boolean, callback: SimpleHandlerHandleChannelsImpl): SimpleHandler
    static new_with_am(account_manager: AccountManager, bypass_approval: boolean, requests: boolean, name: string, uniquify: boolean, callback: SimpleHandlerHandleChannelsImpl): SimpleHandler
    static new_with_factory(factory: SimpleClientFactory, bypass_approval: boolean, requests: boolean, name: string, uniquify: boolean, callback: SimpleHandlerHandleChannelsImpl): SimpleHandler
    static $gtype: GObject.Type
}
export interface SimpleObserver_ConstructProps extends BaseClient_ConstructProps {
    callback?: object
    destroy?: object
    recover?: boolean
    user_data?: object
}
class SimpleObserver {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    add_account_features(features: GLib.Quark[]): void
    add_approver_filter(filter: GLib.HashTable): void
    add_approver_filter_vardict(filter: GLib.Variant): void
    add_channel_features(features: GLib.Quark[]): void
    add_connection_features(features: GLib.Quark[]): void
    add_handler_capabilities(tokens: string[]): void
    add_handler_capability(token: string): void
    add_handler_filter(filter: GLib.HashTable): void
    add_handler_filter_vardict(filter: GLib.Variant): void
    add_observer_filter(filter: GLib.HashTable): void
    add_observer_filter_vardict(filter: GLib.Variant): void
    be_a_handler(): void
    delegate_channels_async(channels: Channel[], user_action_time: number, preferred_handler: string, callback?: Gio.AsyncReadyCallback | null): void
    delegate_channels_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* delegated */ Channel[], /* not_delegated */ GLib.HashTable ]
    dup_handled_channels(): Channel[]
    dup_pending_requests(): ChannelRequest[]
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_handled_channels(): Channel[]
    get_name(): string
    get_object_path(): string
    get_pending_requests(): ChannelRequest[]
    get_uniquify_name(): boolean
    is_handling_channel(channel: Channel): boolean
    register(): boolean
    set_channel_factory(factory: ClientChannelFactory): void
    set_delegated_channels_callback(callback: BaseClientDelegatedChannelsCb): void
    set_handler_bypass_approval(bypass_approval: boolean): void
    set_handler_request_notification(): void
    set_observer_delay_approvers(delay: boolean): void
    set_observer_recover(recover: boolean): void
    unregister(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    vfunc_add_dispatch_operation(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation, context: AddDispatchOperationContext): void
    vfunc_handle_channels(account: Account, connection: Connection, channels: Channel[], requests_satisfied: ChannelRequest[], user_action_time: number, context: HandleChannelsContext): void
    vfunc_observe_channels(account: Account, connection: Connection, channels: Channel[], dispatch_operation: ChannelDispatchOperation | null, requests: ChannelRequest[], context: ObserveChannelsContext): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.BaseClient */
    connect(sigName: "request-added", callback: (($obj: SimpleObserver, account: Account, request: ChannelRequest) => void)): number
    connect_after(sigName: "request-added", callback: (($obj: SimpleObserver, account: Account, request: ChannelRequest) => void)): number
    emit(sigName: "request-added", account: Account, request: ChannelRequest): void
    connect(sigName: "request-removed", callback: (($obj: SimpleObserver, request: ChannelRequest, error: string, message: string) => void)): number
    connect_after(sigName: "request-removed", callback: (($obj: SimpleObserver, request: ChannelRequest, error: string, message: string) => void)): number
    emit(sigName: "request-removed", request: ChannelRequest, error: string, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SimpleObserver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SimpleObserver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SimpleObserver_ConstructProps)
    _init (config?: SimpleObserver_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(dbus: DBusDaemon, recover: boolean, name: string, uniquify: boolean, callback: SimpleObserverObserveChannelsImpl): SimpleObserver
    static new_with_am(account_manager: AccountManager, recover: boolean, name: string, uniquify: boolean, callback: SimpleObserverObserveChannelsImpl): SimpleObserver
    static new_with_factory(factory: SimpleClientFactory, recover: boolean, name: string, uniquify: boolean, callback: SimpleObserverObserveChannelsImpl): SimpleObserver
    static $gtype: GObject.Type
}
export interface StreamTubeChannel_ConstructProps extends Channel_ConstructProps {
}
class StreamTubeChannel {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.StreamTubeChannel */
    readonly parameters_vardict: GLib.Variant
    readonly service: string
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Channel */
    readonly channel_ready: boolean
    readonly group_flags: number
    readonly group_self_contact: Contact
    readonly group_self_handle: number
    readonly identifier: string
    readonly initiator_contact: Contact
    readonly initiator_handle: number
    readonly initiator_identifier: string
    readonly password_needed: boolean
    readonly requested: boolean
    readonly target_contact: Contact
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.StreamTubeChannel */
    accept_async(callback?: Gio.AsyncReadyCallback | null): void
    accept_finish(result: Gio.AsyncResult): StreamTubeConnection
    dup_parameters_vardict(): GLib.Variant
    get_service(): string
    offer_async(params?: GLib.HashTable | null, callback?: Gio.AsyncReadyCallback | null): void
    offer_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Channel */
    borrow_connection(): Connection
    borrow_immutable_properties(): GLib.HashTable
    close_async(callback?: Gio.AsyncReadyCallback | null): void
    close_finish(result: Gio.AsyncResult): boolean
    destroy_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_finish(result: Gio.AsyncResult): boolean
    dup_immutable_properties(): GLib.Variant
    get_channel_type(): string
    get_channel_type_id(): GLib.Quark
    get_chat_state(contact: Handle): ChannelChatState
    get_connection(): Connection
    get_handle(): [ /* returnType */ Handle, /* handle_type */ HandleType ]
    get_identifier(): string
    get_initiator_contact(): Contact
    get_requested(): boolean
    get_target_contact(): Contact
    group_dup_local_pending_contacts(): Contact[]
    group_dup_members_contacts(): Contact[]
    group_dup_remote_pending_contacts(): Contact[]
    group_get_contact_owner(contact: Contact): Contact
    group_get_flags(): ChannelGroupFlags
    group_get_handle_owner(handle: Handle): Handle
    group_get_local_pending(): Intset
    group_get_local_pending_contact_info(local_pending: Contact): [ /* returnType */ boolean, /* actor */ Contact | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_local_pending_info(local_pending: Handle): [ /* returnType */ boolean, /* actor */ Handle | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_members(): Intset
    group_get_remote_pending(): Intset
    group_get_self_contact(): Contact
    group_get_self_handle(): Handle
    join_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    join_finish(result: Gio.AsyncResult): boolean
    leave_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_finish(result: Gio.AsyncResult): boolean
    provide_password_async(password: string, callback?: Gio.AsyncReadyCallback | null): void
    provide_password_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.StreamTubeChannel */
    connect(sigName: "incoming", callback: (($obj: StreamTubeChannel, tube_connection: StreamTubeConnection) => void)): number
    connect_after(sigName: "incoming", callback: (($obj: StreamTubeChannel, tube_connection: StreamTubeConnection) => void)): number
    emit(sigName: "incoming", tube_connection: StreamTubeConnection): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Channel */
    connect(sigName: "chat-state-changed", callback: (($obj: StreamTubeChannel, contact: number, state: number) => void)): number
    connect_after(sigName: "chat-state-changed", callback: (($obj: StreamTubeChannel, contact: number, state: number) => void)): number
    emit(sigName: "chat-state-changed", contact: number, state: number): void
    connect(sigName: "group-contacts-changed", callback: (($obj: StreamTubeChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-contacts-changed", callback: (($obj: StreamTubeChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    emit(sigName: "group-contacts-changed", added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable): void
    connect(sigName: "group-flags-changed", callback: (($obj: StreamTubeChannel, added: number, removed: number) => void)): number
    connect_after(sigName: "group-flags-changed", callback: (($obj: StreamTubeChannel, added: number, removed: number) => void)): number
    emit(sigName: "group-flags-changed", added: number, removed: number): void
    connect(sigName: "group-members-changed", callback: (($obj: StreamTubeChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    connect_after(sigName: "group-members-changed", callback: (($obj: StreamTubeChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    emit(sigName: "group-members-changed", message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number): void
    connect(sigName: "group-members-changed-detailed", callback: (($obj: StreamTubeChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-members-changed-detailed", callback: (($obj: StreamTubeChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    emit(sigName: "group-members-changed-detailed", added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: StreamTubeChannel, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: StreamTubeChannel, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: StreamTubeChannel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: StreamTubeChannel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::parameters-vardict", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parameters-vardict", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::service", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::service", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel-ready", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-ready", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-flags", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-flags", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-contact", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-contact", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-handle", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-handle", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-contact", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-contact", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-handle", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-handle", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-identifier", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-identifier", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-needed", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-needed", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-contact", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-contact", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: StreamTubeChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamTubeChannel_ConstructProps)
    _init (config?: StreamTubeChannel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(conn: Connection, object_path: string, immutable_properties: GLib.HashTable): StreamTubeChannel
    static new(conn: Connection, object_path: string, optional_channel_type: string, optional_handle_type: HandleType, optional_handle: Handle): StreamTubeChannel
    static $gtype: GObject.Type
}
export interface StreamTubeConnection_ConstructProps extends GObject.Object_ConstructProps {
    channel?: StreamTubeChannel
    contact?: Contact
    socket_connection?: Gio.SocketConnection
}
class StreamTubeConnection {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.StreamTubeConnection */
    get_channel(): StreamTubeChannel
    get_contact(): Contact
    get_socket_connection(): Gio.SocketConnection
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.StreamTubeConnection */
    connect(sigName: "closed", callback: (($obj: StreamTubeConnection, error: GLib.Error) => void)): number
    connect_after(sigName: "closed", callback: (($obj: StreamTubeConnection, error: GLib.Error) => void)): number
    emit(sigName: "closed", error: GLib.Error): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: StreamTubeConnection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamTubeConnection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamTubeConnection_ConstructProps)
    _init (config?: StreamTubeConnection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface TLSCertificate_ConstructProps extends Proxy_ConstructProps {
    parent?: Proxy
}
class TLSCertificate {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.TLSCertificate */
    readonly cert_data: object[]
    readonly cert_type: string
    readonly state: number
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.TLSCertificate */
    accept_async(callback?: Gio.AsyncReadyCallback | null): void
    accept_finish(result: Gio.AsyncResult): boolean
    add_rejection(reason: TLSCertificateRejectReason, dbus_error: string, details?: GLib.Variant | null): void
    get_cert_data(): GLib.Bytes[]
    get_cert_type(): string
    get_nth_rejection(n: number): TLSCertificateRejection | null
    get_rejection(): TLSCertificateRejection | null
    get_state(): TLSCertificateState
    reject_async(callback?: Gio.AsyncReadyCallback | null): void
    reject_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: TLSCertificate, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: TLSCertificate, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: TLSCertificate, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: TLSCertificate, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::cert-data", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cert-data", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cert-type", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cert-type", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: TLSCertificate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TLSCertificate_ConstructProps)
    _init (config?: TLSCertificate_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(conn_or_chan: Proxy, object_path: string): TLSCertificate
    static get_feature_quark_core(): GLib.Quark
    static init_known_interfaces(): void
    static $gtype: GObject.Type
}
export interface TLSCertificateRejection_ConstructProps extends GObject.Object_ConstructProps {
    dbus_error?: string
    details?: GLib.Variant
    error?: GLib.Error
    reason?: number
}
class TLSCertificateRejection {
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.TLSCertificateRejection */
    get_dbus_error(): string
    get_details(): GLib.Variant
    get_error(): GLib.Error
    get_reason(): TLSCertificateRejectReason
    raise_error(): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TLSCertificateRejection, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TLSCertificateRejection, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TLSCertificateRejection_ConstructProps)
    _init (config?: TLSCertificateRejection_ConstructProps): void
    static $gtype: GObject.Type
}
export interface TextChannel_ConstructProps extends Channel_ConstructProps {
}
class TextChannel {
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.TextChannel */
    readonly delivery_reporting_support: number
    readonly is_sms_channel: boolean
    readonly message_part_support_flags: number
    readonly sms_flash: boolean
    readonly supported_content_types: string[]
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Channel */
    readonly channel_ready: boolean
    readonly group_flags: number
    readonly group_self_contact: Contact
    readonly group_self_handle: number
    readonly identifier: string
    readonly initiator_contact: Contact
    readonly initiator_handle: number
    readonly initiator_identifier: string
    readonly password_needed: boolean
    readonly requested: boolean
    readonly target_contact: Contact
    /* Properties of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    readonly interfaces: string[]
    /* Fields of GObject-2.0.GObject.Object */
    g_type_instance: GObject.TypeInstance
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.TextChannel */
    ack_all_pending_messages_async(callback?: Gio.AsyncReadyCallback | null): void
    ack_all_pending_messages_finish(result: Gio.AsyncResult): boolean
    ack_message_async(message: Message, callback?: Gio.AsyncReadyCallback | null): void
    ack_message_finish(result: Gio.AsyncResult): boolean
    ack_messages_async(messages: SignalledMessage[], callback?: Gio.AsyncReadyCallback | null): void
    ack_messages_finish(result: Gio.AsyncResult): boolean
    dup_pending_messages(): SignalledMessage[]
    get_chat_state(contact: Contact): ChannelChatState
    get_delivery_reporting_support(): DeliveryReportingSupportFlags
    get_message_part_support_flags(): MessagePartSupportFlags
    get_message_types(): ChannelTextMessageType[]
    get_pending_messages(): SignalledMessage[]
    get_sms_flash(): boolean
    get_sms_length_async(message: Message, callback?: Gio.AsyncReadyCallback | null): void
    get_sms_length_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* chunks_required */ number, /* remaining_characters */ number, /* estimated_cost */ number ]
    get_supported_content_types(): string[]
    send_message_async(message: Message, flags: MessageSendingFlags, callback?: Gio.AsyncReadyCallback | null): void
    send_message_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* token */ string ]
    set_chat_state_async(state: ChannelChatState, callback?: Gio.AsyncReadyCallback | null): void
    set_chat_state_finish(result: Gio.AsyncResult): boolean
    supports_message_type(message_type: ChannelTextMessageType): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Channel */
    borrow_connection(): Connection
    borrow_immutable_properties(): GLib.HashTable
    close_async(callback?: Gio.AsyncReadyCallback | null): void
    close_finish(result: Gio.AsyncResult): boolean
    destroy_async(callback?: Gio.AsyncReadyCallback | null): void
    destroy_finish(result: Gio.AsyncResult): boolean
    dup_immutable_properties(): GLib.Variant
    get_channel_type(): string
    get_channel_type_id(): GLib.Quark
    get_chat_state(contact: Handle): ChannelChatState
    get_connection(): Connection
    get_handle(): [ /* returnType */ Handle, /* handle_type */ HandleType ]
    get_identifier(): string
    get_initiator_contact(): Contact
    get_requested(): boolean
    get_target_contact(): Contact
    group_dup_local_pending_contacts(): Contact[]
    group_dup_members_contacts(): Contact[]
    group_dup_remote_pending_contacts(): Contact[]
    group_get_contact_owner(contact: Contact): Contact
    group_get_flags(): ChannelGroupFlags
    group_get_handle_owner(handle: Handle): Handle
    group_get_local_pending(): Intset
    group_get_local_pending_contact_info(local_pending: Contact): [ /* returnType */ boolean, /* actor */ Contact | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_local_pending_info(local_pending: Handle): [ /* returnType */ boolean, /* actor */ Handle | null, /* reason */ ChannelGroupChangeReason | null, /* message */ string | null ]
    group_get_members(): Intset
    group_get_remote_pending(): Intset
    group_get_self_contact(): Contact
    group_get_self_handle(): Handle
    join_async(message: string, callback?: Gio.AsyncReadyCallback | null): void
    join_finish(result: Gio.AsyncResult): boolean
    leave_async(reason: ChannelGroupChangeReason, message: string, callback?: Gio.AsyncReadyCallback | null): void
    leave_finish(result: Gio.AsyncResult): boolean
    provide_password_async(password: string, callback?: Gio.AsyncReadyCallback | null): void
    provide_password_finish(result: Gio.AsyncResult): boolean
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    dbus_error_to_gerror(dbus_error: string, debug_message: string): void
    get_bus_name(): string
    get_dbus_daemon(): DBusDaemon
    get_factory(): SimpleClientFactory
    get_invalidated(): GLib.Error
    get_object_path(): string
    has_interface(iface: string): boolean
    has_interface_by_id(iface: GLib.Quark): boolean
    is_prepared(feature: GLib.Quark): boolean
    prepare_async(features?: GLib.Quark[] | null, callback?: Gio.AsyncReadyCallback | null): void
    prepare_finish(result: Gio.AsyncResult): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.TextChannel */
    connect(sigName: "contact-chat-state-changed", callback: (($obj: TextChannel, contact: Contact, state: number) => void)): number
    connect_after(sigName: "contact-chat-state-changed", callback: (($obj: TextChannel, contact: Contact, state: number) => void)): number
    emit(sigName: "contact-chat-state-changed", contact: Contact, state: number): void
    connect(sigName: "message-received", callback: (($obj: TextChannel, message: SignalledMessage) => void)): number
    connect_after(sigName: "message-received", callback: (($obj: TextChannel, message: SignalledMessage) => void)): number
    emit(sigName: "message-received", message: SignalledMessage): void
    connect(sigName: "message-sent", callback: (($obj: TextChannel, message: SignalledMessage, flags: number, token: string) => void)): number
    connect_after(sigName: "message-sent", callback: (($obj: TextChannel, message: SignalledMessage, flags: number, token: string) => void)): number
    emit(sigName: "message-sent", message: SignalledMessage, flags: number, token: string): void
    connect(sigName: "pending-message-removed", callback: (($obj: TextChannel, message: SignalledMessage) => void)): number
    connect_after(sigName: "pending-message-removed", callback: (($obj: TextChannel, message: SignalledMessage) => void)): number
    emit(sigName: "pending-message-removed", message: SignalledMessage): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Channel */
    connect(sigName: "chat-state-changed", callback: (($obj: TextChannel, contact: number, state: number) => void)): number
    connect_after(sigName: "chat-state-changed", callback: (($obj: TextChannel, contact: number, state: number) => void)): number
    emit(sigName: "chat-state-changed", contact: number, state: number): void
    connect(sigName: "group-contacts-changed", callback: (($obj: TextChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-contacts-changed", callback: (($obj: TextChannel, added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable) => void)): number
    emit(sigName: "group-contacts-changed", added: Contact[], removed: Contact[], local_pending: Contact[], remote_pending: Contact[], actor: Contact, details: GLib.HashTable): void
    connect(sigName: "group-flags-changed", callback: (($obj: TextChannel, added: number, removed: number) => void)): number
    connect_after(sigName: "group-flags-changed", callback: (($obj: TextChannel, added: number, removed: number) => void)): number
    emit(sigName: "group-flags-changed", added: number, removed: number): void
    connect(sigName: "group-members-changed", callback: (($obj: TextChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    connect_after(sigName: "group-members-changed", callback: (($obj: TextChannel, message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number) => void)): number
    emit(sigName: "group-members-changed", message: string, added: any, removed: any, local_pending: any, remote_pending: any, actor: number, reason: number): void
    connect(sigName: "group-members-changed-detailed", callback: (($obj: TextChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    connect_after(sigName: "group-members-changed-detailed", callback: (($obj: TextChannel, added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable) => void)): number
    emit(sigName: "group-members-changed-detailed", added: number[], removed: number[], local_pending: number[], remote_pending: number[], details: GLib.HashTable): void
    /* Signals of TelepathyGLib-0.12.TelepathyGLib.Proxy */
    connect(sigName: "interface-added", callback: (($obj: TextChannel, id: number, proxy: any) => void)): number
    connect_after(sigName: "interface-added", callback: (($obj: TextChannel, id: number, proxy: any) => void)): number
    emit(sigName: "interface-added", id: number, proxy: any): void
    connect(sigName: "invalidated", callback: (($obj: TextChannel, domain: number, code: number, message: string) => void)): number
    connect_after(sigName: "invalidated", callback: (($obj: TextChannel, domain: number, code: number, message: string) => void)): number
    emit(sigName: "invalidated", domain: number, code: number, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::delivery-reporting-support", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delivery-reporting-support", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::is-sms-channel", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-sms-channel", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::message-part-support-flags", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-part-support-flags", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sms-flash", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sms-flash", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::supported-content-types", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::supported-content-types", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::channel-ready", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::channel-ready", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-flags", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-flags", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-contact", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-contact", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::group-self-handle", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::group-self-handle", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::identifier", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::identifier", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-contact", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-contact", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-handle", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-handle", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initiator-identifier", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initiator-identifier", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-needed", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-needed", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::requested", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::requested", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::target-contact", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::target-contact", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interfaces", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interfaces", callback: (($obj: TextChannel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TextChannel_ConstructProps)
    _init (config?: TextChannel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(conn: Connection, object_path: string, immutable_properties: GLib.HashTable): TextChannel
    static new(conn: Connection, object_path: string, optional_channel_type: string, optional_handle_type: HandleType, optional_handle: Handle): TextChannel
    static get_feature_quark_chat_states(): GLib.Quark
    static get_feature_quark_incoming_messages(): GLib.Quark
    static get_feature_quark_sms(): GLib.Quark
    static $gtype: GObject.Type
}
abstract class AccountChannelRequestClass {
    static name: string
}
class AccountChannelRequestPrivate {
    static name: string
}
abstract class AccountClass {
    static name: string
}
class AccountClassPrivate {
    static name: string
}
abstract class AccountManagerClass {
    static name: string
}
class AccountManagerClassPrivate {
    static name: string
}
class AccountManagerPrivate {
    static name: string
}
class AccountPrivate {
    static name: string
}
abstract class AccountRequestClass {
    static name: string
}
class AccountRequestPrivate {
    static name: string
}
abstract class AddDispatchOperationContextClass {
    static name: string
}
class AddDispatchOperationContextPrivate {
    static name: string
}
abstract class AutomaticClientFactoryClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.AutomaticClientFactoryClass */
    parent_class: SimpleClientFactoryClass
    static name: string
}
abstract class AutomaticProxyFactoryClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.AutomaticProxyFactoryClass */
    parent_class: GObject.ObjectClass
    static name: string
}
class AvatarRequirements {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.AvatarRequirements */
    supported_mime_types: string[]
    minimum_width: number
    minimum_height: number
    recommended_width: number
    recommended_height: number
    maximum_width: number
    maximum_height: number
    maximum_bytes: number
    static name: string
    static new(supported_mime_types: string[], minimum_width: number, minimum_height: number, recommended_width: number, recommended_height: number, maximum_width: number, maximum_height: number, maximum_bytes: number): AvatarRequirements
    constructor(supported_mime_types: string[], minimum_width: number, minimum_height: number, recommended_width: number, recommended_height: number, maximum_width: number, maximum_height: number, maximum_bytes: number)
    /* Static methods and pseudo-constructors */
    static new(supported_mime_types: string[], minimum_width: number, minimum_height: number, recommended_width: number, recommended_height: number, maximum_width: number, maximum_height: number, maximum_bytes: number): AvatarRequirements
}
abstract class BaseClientClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.BaseClientClass */
    parent_class: GObject.ObjectClass
    observe_channels: BaseClientClassObserveChannelsImpl
    add_dispatch_operation: BaseClientClassAddDispatchOperationImpl
    handle_channels: BaseClientClassHandleChannelsImpl
    static name: string
}
class BaseClientClassPrivate {
    static name: string
}
class BaseClientPrivate {
    static name: string
}
abstract class BaseConnectionClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.BaseConnectionClass */
    parent_class: GObject.ObjectClass
    get_unique_connection_name: BaseConnectionGetUniqueConnectionNameImpl
    connecting: BaseConnectionProc
    connected: BaseConnectionProc
    disconnected: BaseConnectionProc
    shut_down: BaseConnectionProc
    start_connecting: BaseConnectionStartConnectingImpl
    static name: string
}
class BaseConnectionPrivate {
    static name: string
}
abstract class BasicProxyFactoryClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.BasicProxyFactoryClass */
    parent_class: GObject.ObjectClass
    static name: string
}
abstract class CallChannelClass {
    static name: string
}
class CallChannelPrivate {
    static name: string
}
abstract class CallContentClass {
    static name: string
}
class CallContentPrivate {
    static name: string
}
class CallStateReason {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.CallStateReason */
    actor: Handle
    reason: CallStateChangeReason
    dbus_reason: string
    message: string
    static name: string
}
abstract class CallStreamClass {
    static name: string
}
class CallStreamPrivate {
    static name: string
}
abstract class CapabilitiesClass {
    static name: string
}
class CapabilitiesPrivate {
    static name: string
}
abstract class ChannelClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ChannelClass */
    parent_class: ProxyClass
    static name: string
}
abstract class ChannelDispatchOperationClass {
    static name: string
}
class ChannelDispatchOperationClassPrivate {
    static name: string
}
class ChannelDispatchOperationPrivate {
    static name: string
}
abstract class ChannelDispatcherClass {
    static name: string
}
class ChannelDispatcherClassPrivate {
    static name: string
}
class ChannelDispatcherPrivate {
    static name: string
}
class ChannelManagerIter {
    static name: string
}
class ChannelPrivate {
    static name: string
}
abstract class ChannelRequestClass {
    static name: string
}
class ChannelRequestClassPrivate {
    static name: string
}
class ChannelRequestPrivate {
    static name: string
}
abstract class ClientChannelFactoryInterface {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ClientChannelFactoryInterface */
    parent: GObject.TypeInterface
    static name: string
}
abstract class ClientMessageClass {
    static name: string
}
abstract class ConnectionClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ConnectionClass */
    parent_class: ProxyClass
    static name: string
}
abstract class ConnectionManagerClass {
    static name: string
}
class ConnectionManagerParam {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ConnectionManagerParam */
    copy(): ConnectionManagerParam
    dup_default_variant(): GLib.Variant
    dup_variant_type(): GLib.VariantType
    free(): void
    get_dbus_signature(): string
    get_default(value: any): boolean
    get_name(): string
    is_dbus_property(): boolean
    is_required(): boolean
    is_required_for_registration(): boolean
    is_secret(): boolean
    static name: string
}
class ConnectionManagerPrivate {
    static name: string
}
class ConnectionManagerProtocol {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ConnectionManagerProtocol */
    name: string
    params: ConnectionManagerParam
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ConnectionManagerProtocol */
    can_register(): boolean
    copy(): ConnectionManagerProtocol
    dup_param_names(): string[]
    free(): void
    get_param(param: string): ConnectionManagerParam
    has_param(param: string): boolean
    static name: string
}
class ConnectionPrivate {
    static name: string
}
abstract class ContactClass {
    static name: string
}
class ContactInfoField {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ContactInfoField */
    field_name: string
    parameters: string[]
    field_value: string[]
    static name: string
    static new(field_name: string, parameters: string[], field_value: string[]): ContactInfoField
    constructor(field_name: string, parameters: string[], field_value: string[])
    /* Static methods and pseudo-constructors */
    static new(field_name: string, parameters: string[], field_value: string[]): ContactInfoField
}
class ContactInfoFieldSpec {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ContactInfoFieldSpec */
    name: string
    parameters: string[]
    flags: ContactInfoFieldFlags
    max: number
    static name: string
}
class ContactPrivate {
    static name: string
}
abstract class ContactSearchClass {
    static name: string
}
class ContactSearchPrivate {
    static name: string
}
abstract class ContactSearchResultClass {
    static name: string
}
class ContactSearchResultPrivate {
    static name: string
}
class ContactsMixin {
    static name: string
}
class ContactsMixinClass {
    static name: string
}
class ContactsMixinClassPrivate {
    static name: string
}
class ContactsMixinPrivate {
    static name: string
}
abstract class DBusDaemonClass {
    static name: string
}
class DBusDaemonPrivate {
    static name: string
}
class DBusPropertiesMixinClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.DBusPropertiesMixinClass */
    interfaces: DBusPropertiesMixinIfaceImpl
    static name: string
    /* Static methods and pseudo-constructors */
    static init(cls: GObject.ObjectClass, offset: number): void
}
class DBusPropertiesMixinIfaceImpl {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.DBusPropertiesMixinIfaceImpl */
    name: string
    getter: DBusPropertiesMixinGetter
    setter: DBusPropertiesMixinSetter
    props: DBusPropertiesMixinPropImpl
    static name: string
}
class DBusPropertiesMixinIfaceInfo {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.DBusPropertiesMixinIfaceInfo */
    dbus_interface: GLib.Quark
    props: DBusPropertiesMixinPropInfo
    static name: string
}
class DBusPropertiesMixinPropImpl {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.DBusPropertiesMixinPropImpl */
    name: string
    getter_data: object
    setter_data: object
    static name: string
}
class DBusPropertiesMixinPropInfo {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.DBusPropertiesMixinPropInfo */
    name: GLib.Quark
    flags: DBusPropertiesMixinFlags
    dbus_signature: string
    type: GObject.Type
    static name: string
}
abstract class DBusTubeChannelClass {
    static name: string
}
class DBusTubeChannelPrivate {
    static name: string
}
abstract class DebugClientClass {
    static name: string
}
class DebugClientPrivate {
    static name: string
}
abstract class DebugMessageClass {
    static name: string
}
class DebugMessagePriv {
    static name: string
}
abstract class FileTransferChannelClass {
    static name: string
}
class FileTransferChannelPrivate {
    static name: string
}
class GroupMixin {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.GroupMixin */
    handle_repo: HandleRepoIface
    self_handle: Handle
    group_flags: ChannelGroupFlags
    members: HandleSet
    local_pending: HandleSet
    remote_pending: HandleSet
    priv: GroupMixinPrivate
    static name: string
}
class GroupMixinClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.GroupMixinClass */
    add_member: GroupMixinAddMemberFunc
    remove_member: GroupMixinRemMemberFunc
    priv: GroupMixinClassPrivate
    static name: string
}
class GroupMixinClassPrivate {
    static name: string
}
class GroupMixinPrivate {
    static name: string
}
abstract class HandleChannelsContextClass {
    static name: string
}
class HandleChannelsContextPrivate {
    static name: string
}
class HandleRepoIfaceClass {
    static name: string
}
class HandleSet {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.HandleSet */
    dump(): string
    to_identifier_map(): GLib.HashTable
    static name: string
}
class Intset {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.Intset */
    add(element: number): void
    clear(): void
    copy(): Intset
    destroy(): void
    difference(right: Intset): Intset
    difference_update(other: Intset): void
    dump(): string
    foreach(func: IntFunc): void
    intersection(right: Intset): Intset
    is_empty(): boolean
    is_equal(right: Intset): boolean
    is_member(element: number): boolean
    remove(element: number): boolean
    size(): number
    symmetric_difference(right: Intset): Intset
    to_array(): number[]
    union(right: Intset): Intset
    union_update(other: Intset): void
    static name: string
    static new(): Intset
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Intset
    static new_containing(element: number): Intset
    static sized_new(size: number): Intset
    static from_array(array: number[]): Intset
}
class IntsetFastIter {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.IntsetFastIter */
    init(set: Intset): void
    next(output: number): boolean
    static name: string
}
class IntsetIter {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.IntsetIter */
    set: Intset
    element: number
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.IntsetIter */
    init(set: Intset): void
    next(): boolean
    reset(): void
    static name: string
}
abstract class MessageClass {
    static name: string
}
abstract class ObserveChannelsContextClass {
    static name: string
}
class ObserveChannelsContextPrivate {
    static name: string
}
class PresenceMixin {
    static name: string
}
class PresenceMixinClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.PresenceMixinClass */
    status_available: PresenceMixinStatusAvailableFunc
    set_own_status: PresenceMixinSetOwnStatusFunc
    statuses: PresenceStatusSpec
    get_maximum_status_message_length: PresenceMixinGetMaximumStatusMessageLengthFunc
    static name: string
}
class PresenceMixinClassPrivate {
    static name: string
}
class PresenceMixinPrivate {
    static name: string
}
class PresenceStatus {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.PresenceStatus */
    index: number
    optional_arguments: GLib.HashTable
    static name: string
}
class PresenceStatusOptionalArgumentSpec {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.PresenceStatusOptionalArgumentSpec */
    name: string
    dtype: string
    static name: string
}
class PresenceStatusSpec {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.PresenceStatusSpec */
    name: string
    presence_type: ConnectionPresenceType
    self: boolean
    optional_arguments: PresenceStatusOptionalArgumentSpec
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.PresenceStatusSpec */
    can_set_on_self(): boolean
    copy(): PresenceStatusSpec
    free(): void
    get_name(): string
    get_presence_type(): ConnectionPresenceType
    has_message(): boolean
    static name: string
    static new(name: string, type: ConnectionPresenceType, can_set_on_self: boolean, has_message: boolean): PresenceStatusSpec
    constructor(name: string, type: ConnectionPresenceType, can_set_on_self: boolean, has_message: boolean)
    /* Static methods and pseudo-constructors */
    static new(name: string, type: ConnectionPresenceType, can_set_on_self: boolean, has_message: boolean): PresenceStatusSpec
}
class PresenceStatusSpecPrivate {
    static name: string
}
abstract class ProtocolClass {
    static name: string
}
class ProtocolClassPrivate {
    static name: string
}
class ProtocolPrivate {
    static name: string
}
abstract class ProxyClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ProxyClass */
    parent_class: GObject.ObjectClass
    interface: GLib.Quark
    must_have_unique_name: number
    static name: string
}
class ProxyFeature {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.ProxyFeature */
    name: GLib.Quark
    core: boolean
    prepare_async: ProxyPrepareAsync
    prepare_before_signalling_connected_async: ProxyPrepareAsync
    interfaces_needed: GLib.Quark
    depends_on: GLib.Quark
    can_retry: boolean
    static name: string
}
class ProxyFeaturePrivate {
    static name: string
}
class ProxyPendingCall {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ProxyPendingCall */
    cancel(): void
    static name: string
}
class ProxyPrivate {
    static name: string
}
class ProxySignalConnection {
    /* Methods of TelepathyGLib-0.12.TelepathyGLib.ProxySignalConnection */
    disconnect(): void
    static name: string
}
abstract class RoomInfoClass {
    static name: string
}
class RoomInfoPriv {
    static name: string
}
abstract class RoomListClass {
    static name: string
}
class RoomListPrivate {
    static name: string
}
abstract class SignalledMessageClass {
    static name: string
}
abstract class SimpleApproverClass {
    static name: string
}
class SimpleApproverPrivate {
    static name: string
}
abstract class SimpleClientFactoryClass {
    /* Fields of TelepathyGLib-0.12.TelepathyGLib.SimpleClientFactoryClass */
    parent_class: GObject.ObjectClass
    dup_account_features: (self: SimpleClientFactory, account: Account) => GLib.Quark[]
    dup_connection_features: (self: SimpleClientFactory, connection: Connection) => GLib.Quark[]
    dup_channel_features: (self: SimpleClientFactory, channel: Channel) => GLib.Quark[]
    dup_contact_features: (self: SimpleClientFactory, connection: Connection) => ContactFeature[]
    static name: string
}
class SimpleClientFactoryPrivate {
    static name: string
}
abstract class SimpleHandlerClass {
    static name: string
}
class SimpleHandlerPrivate {
    static name: string
}
abstract class SimpleObserverClass {
    static name: string
}
class SimpleObserverPrivate {
    static name: string
}
abstract class StreamTubeChannelClass {
    static name: string
}
class StreamTubeChannelPrivate {
    static name: string
}
abstract class StreamTubeConnectionClass {
    static name: string
}
class StreamTubeConnectionPrivate {
    static name: string
}
abstract class TLSCertificateClass {
    static name: string
}
class TLSCertificateClassPrivate {
    static name: string
}
class TLSCertificatePrivate {
    static name: string
}
abstract class TLSCertificateRejectionClass {
    static name: string
}
class TLSCertificateRejectionPriv {
    static name: string
}
abstract class TextChannelClass {
    static name: string
}
class TextChannelPrivate {
    static name: string
}
class WeakRef {
    static name: string
}
type Handle = number
}
export default TelepathyGLib;