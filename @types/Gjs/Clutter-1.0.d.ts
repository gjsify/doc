/*
 * Type Definitions for Gjs (https://gjs.guide/)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * Clutter-1.0
 */

import type * as Gjs from './Gjs';
import type cairo from './cairo-1.0';
import type Json from './Json-1.0';
import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';
import type GL from './GL-1.0';
import type CoglPango from './CoglPango-1.0';
import type PangoCairo from './PangoCairo-1.0';
import type Pango from './Pango-1.0';
import type HarfBuzz from './HarfBuzz-0.0';
import type Cogl from './Cogl-1.0';
import type Atk from './Atk-1.0';

export namespace Clutter {

enum ActorAlign {
    FILL,
    START,
    CENTER,
    END,
}
enum AlignAxis {
    X_AXIS,
    Y_AXIS,
    BOTH,
}
enum AnimationMode {
    CUSTOM_MODE,
    LINEAR,
    EASE_IN_QUAD,
    EASE_OUT_QUAD,
    EASE_IN_OUT_QUAD,
    EASE_IN_CUBIC,
    EASE_OUT_CUBIC,
    EASE_IN_OUT_CUBIC,
    EASE_IN_QUART,
    EASE_OUT_QUART,
    EASE_IN_OUT_QUART,
    EASE_IN_QUINT,
    EASE_OUT_QUINT,
    EASE_IN_OUT_QUINT,
    EASE_IN_SINE,
    EASE_OUT_SINE,
    EASE_IN_OUT_SINE,
    EASE_IN_EXPO,
    EASE_OUT_EXPO,
    EASE_IN_OUT_EXPO,
    EASE_IN_CIRC,
    EASE_OUT_CIRC,
    EASE_IN_OUT_CIRC,
    EASE_IN_ELASTIC,
    EASE_OUT_ELASTIC,
    EASE_IN_OUT_ELASTIC,
    EASE_IN_BACK,
    EASE_OUT_BACK,
    EASE_IN_OUT_BACK,
    EASE_IN_BOUNCE,
    EASE_OUT_BOUNCE,
    EASE_IN_OUT_BOUNCE,
    STEPS,
    STEP_START,
    STEP_END,
    CUBIC_BEZIER,
    EASE,
    EASE_IN,
    EASE_OUT,
    EASE_IN_OUT,
    ANIMATION_LAST,
}
enum BinAlignment {
    FIXED,
    FILL,
    START,
    END,
    CENTER,
}
enum BindCoordinate {
    X,
    Y,
    WIDTH,
    HEIGHT,
    POSITION,
    SIZE,
    ALL,
}
enum BoxAlignment {
    START,
    END,
    CENTER,
}
enum ContentGravity {
    TOP_LEFT,
    TOP,
    TOP_RIGHT,
    LEFT,
    CENTER,
    RIGHT,
    BOTTOM_LEFT,
    BOTTOM,
    BOTTOM_RIGHT,
    RESIZE_FILL,
    RESIZE_ASPECT,
}
enum DragAxis {
    AXIS_NONE,
    X_AXIS,
    Y_AXIS,
}
enum EventType {
    NOTHING,
    KEY_PRESS,
    KEY_RELEASE,
    MOTION,
    ENTER,
    LEAVE,
    BUTTON_PRESS,
    BUTTON_RELEASE,
    SCROLL,
    STAGE_STATE,
    DESTROY_NOTIFY,
    CLIENT_MESSAGE,
    DELETE,
    TOUCH_BEGIN,
    TOUCH_UPDATE,
    TOUCH_END,
    TOUCH_CANCEL,
    TOUCHPAD_PINCH,
    TOUCHPAD_SWIPE,
    EVENT_LAST,
}
enum FlowOrientation {
    HORIZONTAL,
    VERTICAL,
}
enum GestureTriggerEdge {
    NONE,
    AFTER,
    BEFORE,
}
enum Gravity {
    NONE,
    NORTH,
    NORTH_EAST,
    EAST,
    SOUTH_EAST,
    SOUTH,
    SOUTH_WEST,
    WEST,
    NORTH_WEST,
    CENTER,
}
enum GridPosition {
    LEFT,
    RIGHT,
    TOP,
    BOTTOM,
}
enum ImageError {
    DATA,
}
enum InitError {
    SUCCESS,
    ERROR_UNKNOWN,
    ERROR_THREADS,
    ERROR_BACKEND,
    ERROR_INTERNAL,
}
enum InputAxis {
    IGNORE,
    X,
    Y,
    PRESSURE,
    XTILT,
    YTILT,
    WHEEL,
    DISTANCE,
    LAST,
}
enum InputDeviceType {
    POINTER_DEVICE,
    KEYBOARD_DEVICE,
    EXTENSION_DEVICE,
    JOYSTICK_DEVICE,
    TABLET_DEVICE,
    TOUCHPAD_DEVICE,
    TOUCHSCREEN_DEVICE,
    PEN_DEVICE,
    ERASER_DEVICE,
    CURSOR_DEVICE,
    N_DEVICE_TYPES,
}
enum InputMode {
    MASTER,
    SLAVE,
    FLOATING,
}
enum Interpolation {
    LINEAR,
    CUBIC,
}
enum LongPressState {
    QUERY,
    ACTIVATE,
    CANCEL,
}
enum Orientation {
    HORIZONTAL,
    VERTICAL,
}
enum PanAxis {
    AXIS_NONE,
    X_AXIS,
    Y_AXIS,
    AXIS_AUTO,
}
enum PathNodeType {
    MOVE_TO,
    LINE_TO,
    CURVE_TO,
    CLOSE,
    REL_MOVE_TO,
    REL_LINE_TO,
    REL_CURVE_TO,
}
enum PickMode {
    NONE,
    REACTIVE,
    ALL,
}
enum RequestMode {
    HEIGHT_FOR_WIDTH,
    WIDTH_FOR_HEIGHT,
    CONTENT_SIZE,
}
enum RotateAxis {
    X_AXIS,
    Y_AXIS,
    Z_AXIS,
}
enum RotateDirection {
    CW,
    CCW,
}
enum ScalingFilter {
    LINEAR,
    NEAREST,
    TRILINEAR,
}
enum ScriptError {
    TYPE_FUNCTION,
    PROPERTY,
    VALUE,
}
enum ScrollDirection {
    UP,
    DOWN,
    LEFT,
    RIGHT,
    SMOOTH,
}
enum ScrollSource {
    UNKNOWN,
    WHEEL,
    FINGER,
    CONTINUOUS,
}
enum ShaderError {
    NO_ASM,
    NO_GLSL,
    COMPILE,
}
enum ShaderType {
    VERTEX_SHADER,
    FRAGMENT_SHADER,
}
enum SnapEdge {
    TOP,
    RIGHT,
    BOTTOM,
    LEFT,
}
enum StaticColor {
    WHITE,
    BLACK,
    RED,
    DARK_RED,
    GREEN,
    DARK_GREEN,
    BLUE,
    DARK_BLUE,
    CYAN,
    DARK_CYAN,
    MAGENTA,
    DARK_MAGENTA,
    YELLOW,
    DARK_YELLOW,
    GRAY,
    DARK_GRAY,
    LIGHT_GRAY,
    BUTTER,
    BUTTER_LIGHT,
    BUTTER_DARK,
    ORANGE,
    ORANGE_LIGHT,
    ORANGE_DARK,
    CHOCOLATE,
    CHOCOLATE_LIGHT,
    CHOCOLATE_DARK,
    CHAMELEON,
    CHAMELEON_LIGHT,
    CHAMELEON_DARK,
    SKY_BLUE,
    SKY_BLUE_LIGHT,
    SKY_BLUE_DARK,
    PLUM,
    PLUM_LIGHT,
    PLUM_DARK,
    SCARLET_RED,
    SCARLET_RED_LIGHT,
    SCARLET_RED_DARK,
    ALUMINIUM_1,
    ALUMINIUM_2,
    ALUMINIUM_3,
    ALUMINIUM_4,
    ALUMINIUM_5,
    ALUMINIUM_6,
    TRANSPARENT,
}
enum StepMode {
    START,
    END,
}
enum TableAlignment {
    START,
    CENTER,
    END,
}
enum TextDirection {
    DEFAULT,
    LTR,
    RTL,
}
enum TextureError {
    OUT_OF_MEMORY,
    NO_YUV,
    BAD_FORMAT,
}
enum TextureQuality {
    LOW,
    MEDIUM,
    HIGH,
}
enum TimelineDirection {
    FORWARD,
    BACKWARD,
}
enum TouchpadGesturePhase {
    BEGIN,
    UPDATE,
    END,
    CANCEL,
}
enum UnitType {
    PIXEL,
    EM,
    MM,
    POINT,
    CM,
}
enum ZoomAxis {
    X_AXIS,
    Y_AXIS,
    BOTH,
}
enum ActorFlags {
    MAPPED,
    REALIZED,
    REACTIVE,
    VISIBLE,
    NO_LAYOUT,
}
enum AllocationFlags {
    ALLOCATION_NONE,
    ABSOLUTE_ORIGIN_CHANGED,
    DELEGATE_LAYOUT,
}
enum ContentRepeat {
    NONE,
    X_AXIS,
    Y_AXIS,
    BOTH,
}
enum EffectPaintFlags {
    ACTOR_DIRTY,
}
enum EventFlags {
    NONE,
    FLAG_SYNTHETIC,
}
enum FeatureFlags {
    TEXTURE_NPOT,
    SYNC_TO_VBLANK,
    TEXTURE_YUV,
    TEXTURE_READ_PIXELS,
    STAGE_STATIC,
    STAGE_USER_RESIZE,
    STAGE_CURSOR,
    SHADERS_GLSL,
    OFFSCREEN,
    STAGE_MULTIPLE,
    SWAP_EVENTS,
}
enum FontFlags {
    MIPMAPPING,
    HINTING,
}
enum ModifierType {
    SHIFT_MASK,
    LOCK_MASK,
    CONTROL_MASK,
    MOD1_MASK,
    MOD2_MASK,
    MOD3_MASK,
    MOD4_MASK,
    MOD5_MASK,
    BUTTON1_MASK,
    BUTTON2_MASK,
    BUTTON3_MASK,
    BUTTON4_MASK,
    BUTTON5_MASK,
    MODIFIER_RESERVED_13_MASK,
    MODIFIER_RESERVED_14_MASK,
    MODIFIER_RESERVED_15_MASK,
    MODIFIER_RESERVED_16_MASK,
    MODIFIER_RESERVED_17_MASK,
    MODIFIER_RESERVED_18_MASK,
    MODIFIER_RESERVED_19_MASK,
    MODIFIER_RESERVED_20_MASK,
    MODIFIER_RESERVED_21_MASK,
    MODIFIER_RESERVED_22_MASK,
    MODIFIER_RESERVED_23_MASK,
    MODIFIER_RESERVED_24_MASK,
    MODIFIER_RESERVED_25_MASK,
    SUPER_MASK,
    HYPER_MASK,
    META_MASK,
    MODIFIER_RESERVED_29_MASK,
    RELEASE_MASK,
    MODIFIER_MASK,
}
enum OffscreenRedirect {
    AUTOMATIC_FOR_OPACITY,
    ALWAYS,
}
enum RepaintFlags {
    PRE_PAINT,
    POST_PAINT,
    QUEUE_REDRAW_ON_ADD,
}
enum ScrollFinishFlags {
    NONE,
    HORIZONTAL,
    VERTICAL,
}
enum ScrollMode {
    NONE,
    HORIZONTALLY,
    VERTICALLY,
    BOTH,
}
enum StageState {
    FULLSCREEN,
    OFFSCREEN,
    ACTIVATED,
}
enum SwipeDirection {
    UP,
    DOWN,
    LEFT,
    RIGHT,
}
enum TextureFlags {
    NONE,
    RGB_FLAG_BGR,
    RGB_FLAG_PREMULT,
    YUV_FLAG_YUV2,
}
const TODO_0: number
const TODO_1: number
const TODO_2: number
const TODO_3: number
const TODO_3270_AltCursor: number
const TODO_3270_Attn: number
const TODO_3270_BackTab: number
const TODO_3270_ChangeScreen: number
const TODO_3270_Copy: number
const TODO_3270_CursorBlink: number
const TODO_3270_CursorSelect: number
const TODO_3270_DeleteWord: number
const TODO_3270_Duplicate: number
const TODO_3270_Enter: number
const TODO_3270_EraseEOF: number
const TODO_3270_EraseInput: number
const TODO_3270_ExSelect: number
const TODO_3270_FieldMark: number
const TODO_3270_Ident: number
const TODO_3270_Jump: number
const TODO_3270_KeyClick: number
const TODO_3270_Left2: number
const TODO_3270_PA1: number
const TODO_3270_PA2: number
const TODO_3270_PA3: number
const TODO_3270_Play: number
const TODO_3270_PrintScreen: number
const TODO_3270_Quit: number
const TODO_3270_Record: number
const TODO_3270_Reset: number
const TODO_3270_Right2: number
const TODO_3270_Rule: number
const TODO_3270_Setup: number
const TODO_3270_Test: number
const TODO_4: number
const TODO_5: number
const TODO_6: number
const TODO_7: number
const TODO_8: number
const TODO_9: number
const A: number
const AE: number
const Aacute: number
const Abelowdot: number
const Abreve: number
const Abreveacute: number
const Abrevebelowdot: number
const Abrevegrave: number
const Abrevehook: number
const Abrevetilde: number
const AccessX_Enable: number
const AccessX_Feedback_Enable: number
const Acircumflex: number
const Acircumflexacute: number
const Acircumflexbelowdot: number
const Acircumflexgrave: number
const Acircumflexhook: number
const Acircumflextilde: number
const AddFavorite: number
const Adiaeresis: number
const Agrave: number
const Ahook: number
const Alt_L: number
const Alt_R: number
const Amacron: number
const Aogonek: number
const ApplicationLeft: number
const ApplicationRight: number
const Arabic_0: number
const Arabic_1: number
const Arabic_2: number
const Arabic_3: number
const Arabic_4: number
const Arabic_5: number
const Arabic_6: number
const Arabic_7: number
const Arabic_8: number
const Arabic_9: number
const Arabic_ain: number
const Arabic_alef: number
const Arabic_alefmaksura: number
const Arabic_beh: number
const Arabic_comma: number
const Arabic_dad: number
const Arabic_dal: number
const Arabic_damma: number
const Arabic_dammatan: number
const Arabic_ddal: number
const Arabic_farsi_yeh: number
const Arabic_fatha: number
const Arabic_fathatan: number
const Arabic_feh: number
const Arabic_fullstop: number
const Arabic_gaf: number
const Arabic_ghain: number
const Arabic_ha: number
const Arabic_hah: number
const Arabic_hamza: number
const Arabic_hamza_above: number
const Arabic_hamza_below: number
const Arabic_hamzaonalef: number
const Arabic_hamzaonwaw: number
const Arabic_hamzaonyeh: number
const Arabic_hamzaunderalef: number
const Arabic_heh: number
const Arabic_heh_doachashmee: number
const Arabic_heh_goal: number
const Arabic_jeem: number
const Arabic_jeh: number
const Arabic_kaf: number
const Arabic_kasra: number
const Arabic_kasratan: number
const Arabic_keheh: number
const Arabic_khah: number
const Arabic_lam: number
const Arabic_madda_above: number
const Arabic_maddaonalef: number
const Arabic_meem: number
const Arabic_noon: number
const Arabic_noon_ghunna: number
const Arabic_peh: number
const Arabic_percent: number
const Arabic_qaf: number
const Arabic_question_mark: number
const Arabic_ra: number
const Arabic_rreh: number
const Arabic_sad: number
const Arabic_seen: number
const Arabic_semicolon: number
const Arabic_shadda: number
const Arabic_sheen: number
const Arabic_sukun: number
const Arabic_superscript_alef: number
const Arabic_switch: number
const Arabic_tah: number
const Arabic_tatweel: number
const Arabic_tcheh: number
const Arabic_teh: number
const Arabic_tehmarbuta: number
const Arabic_thal: number
const Arabic_theh: number
const Arabic_tteh: number
const Arabic_veh: number
const Arabic_waw: number
const Arabic_yeh: number
const Arabic_yeh_baree: number
const Arabic_zah: number
const Arabic_zain: number
const Aring: number
const Armenian_AT: number
const Armenian_AYB: number
const Armenian_BEN: number
const Armenian_CHA: number
const Armenian_DA: number
const Armenian_DZA: number
const Armenian_E: number
const Armenian_FE: number
const Armenian_GHAT: number
const Armenian_GIM: number
const Armenian_HI: number
const Armenian_HO: number
const Armenian_INI: number
const Armenian_JE: number
const Armenian_KE: number
const Armenian_KEN: number
const Armenian_KHE: number
const Armenian_LYUN: number
const Armenian_MEN: number
const Armenian_NU: number
const Armenian_O: number
const Armenian_PE: number
const Armenian_PYUR: number
const Armenian_RA: number
const Armenian_RE: number
const Armenian_SE: number
const Armenian_SHA: number
const Armenian_TCHE: number
const Armenian_TO: number
const Armenian_TSA: number
const Armenian_TSO: number
const Armenian_TYUN: number
const Armenian_VEV: number
const Armenian_VO: number
const Armenian_VYUN: number
const Armenian_YECH: number
const Armenian_ZA: number
const Armenian_ZHE: number
const Armenian_accent: number
const Armenian_amanak: number
const Armenian_apostrophe: number
const Armenian_at: number
const Armenian_ayb: number
const Armenian_ben: number
const Armenian_but: number
const Armenian_cha: number
const Armenian_da: number
const Armenian_dza: number
const Armenian_e: number
const Armenian_exclam: number
const Armenian_fe: number
const Armenian_full_stop: number
const Armenian_ghat: number
const Armenian_gim: number
const Armenian_hi: number
const Armenian_ho: number
const Armenian_hyphen: number
const Armenian_ini: number
const Armenian_je: number
const Armenian_ke: number
const Armenian_ken: number
const Armenian_khe: number
const Armenian_ligature_ew: number
const Armenian_lyun: number
const Armenian_men: number
const Armenian_nu: number
const Armenian_o: number
const Armenian_paruyk: number
const Armenian_pe: number
const Armenian_pyur: number
const Armenian_question: number
const Armenian_ra: number
const Armenian_re: number
const Armenian_se: number
const Armenian_separation_mark: number
const Armenian_sha: number
const Armenian_shesht: number
const Armenian_tche: number
const Armenian_to: number
const Armenian_tsa: number
const Armenian_tso: number
const Armenian_tyun: number
const Armenian_verjaket: number
const Armenian_vev: number
const Armenian_vo: number
const Armenian_vyun: number
const Armenian_yech: number
const Armenian_yentamna: number
const Armenian_za: number
const Armenian_zhe: number
const Atilde: number
const AudibleBell_Enable: number
const AudioCycleTrack: number
const AudioForward: number
const AudioLowerVolume: number
const AudioMedia: number
const AudioMicMute: number
const AudioMute: number
const AudioNext: number
const AudioPause: number
const AudioPlay: number
const AudioPrev: number
const AudioRaiseVolume: number
const AudioRandomPlay: number
const AudioRecord: number
const AudioRepeat: number
const AudioRewind: number
const AudioStop: number
const Away: number
const B: number
const BUTTON_MIDDLE: number
const BUTTON_PRIMARY: number
const BUTTON_SECONDARY: number
const Babovedot: number
const Back: number
const BackForward: number
const BackSpace: number
const Battery: number
const Begin: number
const Blue: number
const Bluetooth: number
const Book: number
const BounceKeys_Enable: number
const Break: number
const BrightnessAdjust: number
const Byelorussian_SHORTU: number
const Byelorussian_shortu: number
const C: number
const CD: number
const CH: number
const COGL: string
const CURRENT_TIME: number
const C_H: number
const C_h: number
const Cabovedot: number
const Cacute: number
const Calculator: number
const Calendar: number
const Cancel: number
const Caps_Lock: number
const Ccaron: number
const Ccedilla: number
const Ccircumflex: number
const Ch: number
const Clear: number
const ClearGrab: number
const Close: number
const Codeinput: number
const ColonSign: number
const Community: number
const ContrastAdjust: number
const Control_L: number
const Control_R: number
const Copy: number
const CruzeiroSign: number
const Cut: number
const CycleAngle: number
const Cyrillic_A: number
const Cyrillic_BE: number
const Cyrillic_CHE: number
const Cyrillic_CHE_descender: number
const Cyrillic_CHE_vertstroke: number
const Cyrillic_DE: number
const Cyrillic_DZHE: number
const Cyrillic_E: number
const Cyrillic_EF: number
const Cyrillic_EL: number
const Cyrillic_EM: number
const Cyrillic_EN: number
const Cyrillic_EN_descender: number
const Cyrillic_ER: number
const Cyrillic_ES: number
const Cyrillic_GHE: number
const Cyrillic_GHE_bar: number
const Cyrillic_HA: number
const Cyrillic_HARDSIGN: number
const Cyrillic_HA_descender: number
const Cyrillic_I: number
const Cyrillic_IE: number
const Cyrillic_IO: number
const Cyrillic_I_macron: number
const Cyrillic_JE: number
const Cyrillic_KA: number
const Cyrillic_KA_descender: number
const Cyrillic_KA_vertstroke: number
const Cyrillic_LJE: number
const Cyrillic_NJE: number
const Cyrillic_O: number
const Cyrillic_O_bar: number
const Cyrillic_PE: number
const Cyrillic_SCHWA: number
const Cyrillic_SHA: number
const Cyrillic_SHCHA: number
const Cyrillic_SHHA: number
const Cyrillic_SHORTI: number
const Cyrillic_SOFTSIGN: number
const Cyrillic_TE: number
const Cyrillic_TSE: number
const Cyrillic_U: number
const Cyrillic_U_macron: number
const Cyrillic_U_straight: number
const Cyrillic_U_straight_bar: number
const Cyrillic_VE: number
const Cyrillic_YA: number
const Cyrillic_YERU: number
const Cyrillic_YU: number
const Cyrillic_ZE: number
const Cyrillic_ZHE: number
const Cyrillic_ZHE_descender: number
const Cyrillic_a: number
const Cyrillic_be: number
const Cyrillic_che: number
const Cyrillic_che_descender: number
const Cyrillic_che_vertstroke: number
const Cyrillic_de: number
const Cyrillic_dzhe: number
const Cyrillic_e: number
const Cyrillic_ef: number
const Cyrillic_el: number
const Cyrillic_em: number
const Cyrillic_en: number
const Cyrillic_en_descender: number
const Cyrillic_er: number
const Cyrillic_es: number
const Cyrillic_ghe: number
const Cyrillic_ghe_bar: number
const Cyrillic_ha: number
const Cyrillic_ha_descender: number
const Cyrillic_hardsign: number
const Cyrillic_i: number
const Cyrillic_i_macron: number
const Cyrillic_ie: number
const Cyrillic_io: number
const Cyrillic_je: number
const Cyrillic_ka: number
const Cyrillic_ka_descender: number
const Cyrillic_ka_vertstroke: number
const Cyrillic_lje: number
const Cyrillic_nje: number
const Cyrillic_o: number
const Cyrillic_o_bar: number
const Cyrillic_pe: number
const Cyrillic_schwa: number
const Cyrillic_sha: number
const Cyrillic_shcha: number
const Cyrillic_shha: number
const Cyrillic_shorti: number
const Cyrillic_softsign: number
const Cyrillic_te: number
const Cyrillic_tse: number
const Cyrillic_u: number
const Cyrillic_u_macron: number
const Cyrillic_u_straight: number
const Cyrillic_u_straight_bar: number
const Cyrillic_ve: number
const Cyrillic_ya: number
const Cyrillic_yeru: number
const Cyrillic_yu: number
const Cyrillic_ze: number
const Cyrillic_zhe: number
const Cyrillic_zhe_descender: number
const D: number
const DOS: number
const Dabovedot: number
const Dcaron: number
const Delete: number
const Display: number
const Documents: number
const DongSign: number
const Down: number
const Dstroke: number
const E: number
const ENG: number
const ETH: number
const EVENT_PROPAGATE: boolean
const EVENT_STOP: boolean
const EZH: number
const Eabovedot: number
const Eacute: number
const Ebelowdot: number
const Ecaron: number
const Ecircumflex: number
const Ecircumflexacute: number
const Ecircumflexbelowdot: number
const Ecircumflexgrave: number
const Ecircumflexhook: number
const Ecircumflextilde: number
const EcuSign: number
const Ediaeresis: number
const Egrave: number
const Ehook: number
const Eisu_Shift: number
const Eisu_toggle: number
const Eject: number
const Emacron: number
const End: number
const Eogonek: number
const Escape: number
const Eth: number
const Etilde: number
const EuroSign: number
const Excel: number
const Execute: number
const Explorer: number
const F: number
const F1: number
const F10: number
const F11: number
const F12: number
const F13: number
const F14: number
const F15: number
const F16: number
const F17: number
const F18: number
const F19: number
const F2: number
const F20: number
const F21: number
const F22: number
const F23: number
const F24: number
const F25: number
const F26: number
const F27: number
const F28: number
const F29: number
const F3: number
const F30: number
const F31: number
const F32: number
const F33: number
const F34: number
const F35: number
const F4: number
const F5: number
const F6: number
const F7: number
const F8: number
const F9: number
const FFrancSign: number
const FLAVOUR: string
const Fabovedot: number
const Farsi_0: number
const Farsi_1: number
const Farsi_2: number
const Farsi_3: number
const Farsi_4: number
const Farsi_5: number
const Farsi_6: number
const Farsi_7: number
const Farsi_8: number
const Farsi_9: number
const Farsi_yeh: number
const Favorites: number
const Finance: number
const Find: number
const First_Virtual_Screen: number
const Forward: number
const FrameBack: number
const FrameForward: number
const G: number
const Gabovedot: number
const Game: number
const Gbreve: number
const Gcaron: number
const Gcedilla: number
const Gcircumflex: number
const Georgian_an: number
const Georgian_ban: number
const Georgian_can: number
const Georgian_char: number
const Georgian_chin: number
const Georgian_cil: number
const Georgian_don: number
const Georgian_en: number
const Georgian_fi: number
const Georgian_gan: number
const Georgian_ghan: number
const Georgian_hae: number
const Georgian_har: number
const Georgian_he: number
const Georgian_hie: number
const Georgian_hoe: number
const Georgian_in: number
const Georgian_jhan: number
const Georgian_jil: number
const Georgian_kan: number
const Georgian_khar: number
const Georgian_las: number
const Georgian_man: number
const Georgian_nar: number
const Georgian_on: number
const Georgian_par: number
const Georgian_phar: number
const Georgian_qar: number
const Georgian_rae: number
const Georgian_san: number
const Georgian_shin: number
const Georgian_tan: number
const Georgian_tar: number
const Georgian_un: number
const Georgian_vin: number
const Georgian_we: number
const Georgian_xan: number
const Georgian_zen: number
const Georgian_zhar: number
const Go: number
const Greek_ALPHA: number
const Greek_ALPHAaccent: number
const Greek_BETA: number
const Greek_CHI: number
const Greek_DELTA: number
const Greek_EPSILON: number
const Greek_EPSILONaccent: number
const Greek_ETA: number
const Greek_ETAaccent: number
const Greek_GAMMA: number
const Greek_IOTA: number
const Greek_IOTAaccent: number
const Greek_IOTAdiaeresis: number
const Greek_IOTAdieresis: number
const Greek_KAPPA: number
const Greek_LAMBDA: number
const Greek_LAMDA: number
const Greek_MU: number
const Greek_NU: number
const Greek_OMEGA: number
const Greek_OMEGAaccent: number
const Greek_OMICRON: number
const Greek_OMICRONaccent: number
const Greek_PHI: number
const Greek_PI: number
const Greek_PSI: number
const Greek_RHO: number
const Greek_SIGMA: number
const Greek_TAU: number
const Greek_THETA: number
const Greek_UPSILON: number
const Greek_UPSILONaccent: number
const Greek_UPSILONdieresis: number
const Greek_XI: number
const Greek_ZETA: number
const Greek_accentdieresis: number
const Greek_alpha: number
const Greek_alphaaccent: number
const Greek_beta: number
const Greek_chi: number
const Greek_delta: number
const Greek_epsilon: number
const Greek_epsilonaccent: number
const Greek_eta: number
const Greek_etaaccent: number
const Greek_finalsmallsigma: number
const Greek_gamma: number
const Greek_horizbar: number
const Greek_iota: number
const Greek_iotaaccent: number
const Greek_iotaaccentdieresis: number
const Greek_iotadieresis: number
const Greek_kappa: number
const Greek_lambda: number
const Greek_lamda: number
const Greek_mu: number
const Greek_nu: number
const Greek_omega: number
const Greek_omegaaccent: number
const Greek_omicron: number
const Greek_omicronaccent: number
const Greek_phi: number
const Greek_pi: number
const Greek_psi: number
const Greek_rho: number
const Greek_sigma: number
const Greek_switch: number
const Greek_tau: number
const Greek_theta: number
const Greek_upsilon: number
const Greek_upsilonaccent: number
const Greek_upsilonaccentdieresis: number
const Greek_upsilondieresis: number
const Greek_xi: number
const Greek_zeta: number
const Green: number
const H: number
const HAS_WAYLAND_COMPOSITOR_SUPPORT: number
const Hangul: number
const Hangul_A: number
const Hangul_AE: number
const Hangul_AraeA: number
const Hangul_AraeAE: number
const Hangul_Banja: number
const Hangul_Cieuc: number
const Hangul_Codeinput: number
const Hangul_Dikeud: number
const Hangul_E: number
const Hangul_EO: number
const Hangul_EU: number
const Hangul_End: number
const Hangul_Hanja: number
const Hangul_Hieuh: number
const Hangul_I: number
const Hangul_Ieung: number
const Hangul_J_Cieuc: number
const Hangul_J_Dikeud: number
const Hangul_J_Hieuh: number
const Hangul_J_Ieung: number
const Hangul_J_Jieuj: number
const Hangul_J_Khieuq: number
const Hangul_J_Kiyeog: number
const Hangul_J_KiyeogSios: number
const Hangul_J_KkogjiDalrinIeung: number
const Hangul_J_Mieum: number
const Hangul_J_Nieun: number
const Hangul_J_NieunHieuh: number
const Hangul_J_NieunJieuj: number
const Hangul_J_PanSios: number
const Hangul_J_Phieuf: number
const Hangul_J_Pieub: number
const Hangul_J_PieubSios: number
const Hangul_J_Rieul: number
const Hangul_J_RieulHieuh: number
const Hangul_J_RieulKiyeog: number
const Hangul_J_RieulMieum: number
const Hangul_J_RieulPhieuf: number
const Hangul_J_RieulPieub: number
const Hangul_J_RieulSios: number
const Hangul_J_RieulTieut: number
const Hangul_J_Sios: number
const Hangul_J_SsangKiyeog: number
const Hangul_J_SsangSios: number
const Hangul_J_Tieut: number
const Hangul_J_YeorinHieuh: number
const Hangul_Jamo: number
const Hangul_Jeonja: number
const Hangul_Jieuj: number
const Hangul_Khieuq: number
const Hangul_Kiyeog: number
const Hangul_KiyeogSios: number
const Hangul_KkogjiDalrinIeung: number
const Hangul_Mieum: number
const Hangul_MultipleCandidate: number
const Hangul_Nieun: number
const Hangul_NieunHieuh: number
const Hangul_NieunJieuj: number
const Hangul_O: number
const Hangul_OE: number
const Hangul_PanSios: number
const Hangul_Phieuf: number
const Hangul_Pieub: number
const Hangul_PieubSios: number
const Hangul_PostHanja: number
const Hangul_PreHanja: number
const Hangul_PreviousCandidate: number
const Hangul_Rieul: number
const Hangul_RieulHieuh: number
const Hangul_RieulKiyeog: number
const Hangul_RieulMieum: number
const Hangul_RieulPhieuf: number
const Hangul_RieulPieub: number
const Hangul_RieulSios: number
const Hangul_RieulTieut: number
const Hangul_RieulYeorinHieuh: number
const Hangul_Romaja: number
const Hangul_SingleCandidate: number
const Hangul_Sios: number
const Hangul_Special: number
const Hangul_SsangDikeud: number
const Hangul_SsangJieuj: number
const Hangul_SsangKiyeog: number
const Hangul_SsangPieub: number
const Hangul_SsangSios: number
const Hangul_Start: number
const Hangul_SunkyeongeumMieum: number
const Hangul_SunkyeongeumPhieuf: number
const Hangul_SunkyeongeumPieub: number
const Hangul_Tieut: number
const Hangul_U: number
const Hangul_WA: number
const Hangul_WAE: number
const Hangul_WE: number
const Hangul_WEO: number
const Hangul_WI: number
const Hangul_YA: number
const Hangul_YAE: number
const Hangul_YE: number
const Hangul_YEO: number
const Hangul_YI: number
const Hangul_YO: number
const Hangul_YU: number
const Hangul_YeorinHieuh: number
const Hangul_switch: number
const Hankaku: number
const Hcircumflex: number
const Hebrew_switch: number
const Help: number
const Henkan: number
const Henkan_Mode: number
const Hibernate: number
const Hiragana: number
const Hiragana_Katakana: number
const History: number
const Home: number
const HomePage: number
const HotLinks: number
const Hstroke: number
const Hyper_L: number
const Hyper_R: number
const I: number
const INPUT_EVDEV: string
const INPUT_GDK: string
const INPUT_NULL: string
const INPUT_WAYLAND: string
const INPUT_X11: string
const ISO_Center_Object: number
const ISO_Continuous_Underline: number
const ISO_Discontinuous_Underline: number
const ISO_Emphasize: number
const ISO_Enter: number
const ISO_Fast_Cursor_Down: number
const ISO_Fast_Cursor_Left: number
const ISO_Fast_Cursor_Right: number
const ISO_Fast_Cursor_Up: number
const ISO_First_Group: number
const ISO_First_Group_Lock: number
const ISO_Group_Latch: number
const ISO_Group_Lock: number
const ISO_Group_Shift: number
const ISO_Last_Group: number
const ISO_Last_Group_Lock: number
const ISO_Left_Tab: number
const ISO_Level2_Latch: number
const ISO_Level3_Latch: number
const ISO_Level3_Lock: number
const ISO_Level3_Shift: number
const ISO_Level5_Latch: number
const ISO_Level5_Lock: number
const ISO_Level5_Shift: number
const ISO_Lock: number
const ISO_Move_Line_Down: number
const ISO_Move_Line_Up: number
const ISO_Next_Group: number
const ISO_Next_Group_Lock: number
const ISO_Partial_Line_Down: number
const ISO_Partial_Line_Up: number
const ISO_Partial_Space_Left: number
const ISO_Partial_Space_Right: number
const ISO_Prev_Group: number
const ISO_Prev_Group_Lock: number
const ISO_Release_Both_Margins: number
const ISO_Release_Margin_Left: number
const ISO_Release_Margin_Right: number
const ISO_Set_Margin_Left: number
const ISO_Set_Margin_Right: number
const Iabovedot: number
const Iacute: number
const Ibelowdot: number
const Ibreve: number
const Icircumflex: number
const Idiaeresis: number
const Igrave: number
const Ihook: number
const Imacron: number
const Insert: number
const Iogonek: number
const Itilde: number
const J: number
const Jcircumflex: number
const K: number
const KEY_0: number
const KEY_1: number
const KEY_2: number
const KEY_3: number
const KEY_3270_AltCursor: number
const KEY_3270_Attn: number
const KEY_3270_BackTab: number
const KEY_3270_ChangeScreen: number
const KEY_3270_Copy: number
const KEY_3270_CursorBlink: number
const KEY_3270_CursorSelect: number
const KEY_3270_DeleteWord: number
const KEY_3270_Duplicate: number
const KEY_3270_Enter: number
const KEY_3270_EraseEOF: number
const KEY_3270_EraseInput: number
const KEY_3270_ExSelect: number
const KEY_3270_FieldMark: number
const KEY_3270_Ident: number
const KEY_3270_Jump: number
const KEY_3270_KeyClick: number
const KEY_3270_Left2: number
const KEY_3270_PA1: number
const KEY_3270_PA2: number
const KEY_3270_PA3: number
const KEY_3270_Play: number
const KEY_3270_PrintScreen: number
const KEY_3270_Quit: number
const KEY_3270_Record: number
const KEY_3270_Reset: number
const KEY_3270_Right2: number
const KEY_3270_Rule: number
const KEY_3270_Setup: number
const KEY_3270_Test: number
const KEY_4: number
const KEY_5: number
const KEY_6: number
const KEY_7: number
const KEY_8: number
const KEY_9: number
const KEY_A: number
const KEY_AE: number
const KEY_Aacute: number
const KEY_Abelowdot: number
const KEY_Abreve: number
const KEY_Abreveacute: number
const KEY_Abrevebelowdot: number
const KEY_Abrevegrave: number
const KEY_Abrevehook: number
const KEY_Abrevetilde: number
const KEY_AccessX_Enable: number
const KEY_AccessX_Feedback_Enable: number
const KEY_Acircumflex: number
const KEY_Acircumflexacute: number
const KEY_Acircumflexbelowdot: number
const KEY_Acircumflexgrave: number
const KEY_Acircumflexhook: number
const KEY_Acircumflextilde: number
const KEY_AddFavorite: number
const KEY_Adiaeresis: number
const KEY_Agrave: number
const KEY_Ahook: number
const KEY_Alt_L: number
const KEY_Alt_R: number
const KEY_Amacron: number
const KEY_Aogonek: number
const KEY_ApplicationLeft: number
const KEY_ApplicationRight: number
const KEY_Arabic_0: number
const KEY_Arabic_1: number
const KEY_Arabic_2: number
const KEY_Arabic_3: number
const KEY_Arabic_4: number
const KEY_Arabic_5: number
const KEY_Arabic_6: number
const KEY_Arabic_7: number
const KEY_Arabic_8: number
const KEY_Arabic_9: number
const KEY_Arabic_ain: number
const KEY_Arabic_alef: number
const KEY_Arabic_alefmaksura: number
const KEY_Arabic_beh: number
const KEY_Arabic_comma: number
const KEY_Arabic_dad: number
const KEY_Arabic_dal: number
const KEY_Arabic_damma: number
const KEY_Arabic_dammatan: number
const KEY_Arabic_ddal: number
const KEY_Arabic_farsi_yeh: number
const KEY_Arabic_fatha: number
const KEY_Arabic_fathatan: number
const KEY_Arabic_feh: number
const KEY_Arabic_fullstop: number
const KEY_Arabic_gaf: number
const KEY_Arabic_ghain: number
const KEY_Arabic_ha: number
const KEY_Arabic_hah: number
const KEY_Arabic_hamza: number
const KEY_Arabic_hamza_above: number
const KEY_Arabic_hamza_below: number
const KEY_Arabic_hamzaonalef: number
const KEY_Arabic_hamzaonwaw: number
const KEY_Arabic_hamzaonyeh: number
const KEY_Arabic_hamzaunderalef: number
const KEY_Arabic_heh: number
const KEY_Arabic_heh_doachashmee: number
const KEY_Arabic_heh_goal: number
const KEY_Arabic_jeem: number
const KEY_Arabic_jeh: number
const KEY_Arabic_kaf: number
const KEY_Arabic_kasra: number
const KEY_Arabic_kasratan: number
const KEY_Arabic_keheh: number
const KEY_Arabic_khah: number
const KEY_Arabic_lam: number
const KEY_Arabic_madda_above: number
const KEY_Arabic_maddaonalef: number
const KEY_Arabic_meem: number
const KEY_Arabic_noon: number
const KEY_Arabic_noon_ghunna: number
const KEY_Arabic_peh: number
const KEY_Arabic_percent: number
const KEY_Arabic_qaf: number
const KEY_Arabic_question_mark: number
const KEY_Arabic_ra: number
const KEY_Arabic_rreh: number
const KEY_Arabic_sad: number
const KEY_Arabic_seen: number
const KEY_Arabic_semicolon: number
const KEY_Arabic_shadda: number
const KEY_Arabic_sheen: number
const KEY_Arabic_sukun: number
const KEY_Arabic_superscript_alef: number
const KEY_Arabic_switch: number
const KEY_Arabic_tah: number
const KEY_Arabic_tatweel: number
const KEY_Arabic_tcheh: number
const KEY_Arabic_teh: number
const KEY_Arabic_tehmarbuta: number
const KEY_Arabic_thal: number
const KEY_Arabic_theh: number
const KEY_Arabic_tteh: number
const KEY_Arabic_veh: number
const KEY_Arabic_waw: number
const KEY_Arabic_yeh: number
const KEY_Arabic_yeh_baree: number
const KEY_Arabic_zah: number
const KEY_Arabic_zain: number
const KEY_Aring: number
const KEY_Armenian_AT: number
const KEY_Armenian_AYB: number
const KEY_Armenian_BEN: number
const KEY_Armenian_CHA: number
const KEY_Armenian_DA: number
const KEY_Armenian_DZA: number
const KEY_Armenian_E: number
const KEY_Armenian_FE: number
const KEY_Armenian_GHAT: number
const KEY_Armenian_GIM: number
const KEY_Armenian_HI: number
const KEY_Armenian_HO: number
const KEY_Armenian_INI: number
const KEY_Armenian_JE: number
const KEY_Armenian_KE: number
const KEY_Armenian_KEN: number
const KEY_Armenian_KHE: number
const KEY_Armenian_LYUN: number
const KEY_Armenian_MEN: number
const KEY_Armenian_NU: number
const KEY_Armenian_O: number
const KEY_Armenian_PE: number
const KEY_Armenian_PYUR: number
const KEY_Armenian_RA: number
const KEY_Armenian_RE: number
const KEY_Armenian_SE: number
const KEY_Armenian_SHA: number
const KEY_Armenian_TCHE: number
const KEY_Armenian_TO: number
const KEY_Armenian_TSA: number
const KEY_Armenian_TSO: number
const KEY_Armenian_TYUN: number
const KEY_Armenian_VEV: number
const KEY_Armenian_VO: number
const KEY_Armenian_VYUN: number
const KEY_Armenian_YECH: number
const KEY_Armenian_ZA: number
const KEY_Armenian_ZHE: number
const KEY_Armenian_accent: number
const KEY_Armenian_amanak: number
const KEY_Armenian_apostrophe: number
const KEY_Armenian_at: number
const KEY_Armenian_ayb: number
const KEY_Armenian_ben: number
const KEY_Armenian_but: number
const KEY_Armenian_cha: number
const KEY_Armenian_da: number
const KEY_Armenian_dza: number
const KEY_Armenian_e: number
const KEY_Armenian_exclam: number
const KEY_Armenian_fe: number
const KEY_Armenian_full_stop: number
const KEY_Armenian_ghat: number
const KEY_Armenian_gim: number
const KEY_Armenian_hi: number
const KEY_Armenian_ho: number
const KEY_Armenian_hyphen: number
const KEY_Armenian_ini: number
const KEY_Armenian_je: number
const KEY_Armenian_ke: number
const KEY_Armenian_ken: number
const KEY_Armenian_khe: number
const KEY_Armenian_ligature_ew: number
const KEY_Armenian_lyun: number
const KEY_Armenian_men: number
const KEY_Armenian_nu: number
const KEY_Armenian_o: number
const KEY_Armenian_paruyk: number
const KEY_Armenian_pe: number
const KEY_Armenian_pyur: number
const KEY_Armenian_question: number
const KEY_Armenian_ra: number
const KEY_Armenian_re: number
const KEY_Armenian_se: number
const KEY_Armenian_separation_mark: number
const KEY_Armenian_sha: number
const KEY_Armenian_shesht: number
const KEY_Armenian_tche: number
const KEY_Armenian_to: number
const KEY_Armenian_tsa: number
const KEY_Armenian_tso: number
const KEY_Armenian_tyun: number
const KEY_Armenian_verjaket: number
const KEY_Armenian_vev: number
const KEY_Armenian_vo: number
const KEY_Armenian_vyun: number
const KEY_Armenian_yech: number
const KEY_Armenian_yentamna: number
const KEY_Armenian_za: number
const KEY_Armenian_zhe: number
const KEY_Atilde: number
const KEY_AudibleBell_Enable: number
const KEY_AudioCycleTrack: number
const KEY_AudioForward: number
const KEY_AudioLowerVolume: number
const KEY_AudioMedia: number
const KEY_AudioMicMute: number
const KEY_AudioMute: number
const KEY_AudioNext: number
const KEY_AudioPause: number
const KEY_AudioPlay: number
const KEY_AudioPrev: number
const KEY_AudioRaiseVolume: number
const KEY_AudioRandomPlay: number
const KEY_AudioRecord: number
const KEY_AudioRepeat: number
const KEY_AudioRewind: number
const KEY_AudioStop: number
const KEY_Away: number
const KEY_B: number
const KEY_Babovedot: number
const KEY_Back: number
const KEY_BackForward: number
const KEY_BackSpace: number
const KEY_Battery: number
const KEY_Begin: number
const KEY_Blue: number
const KEY_Bluetooth: number
const KEY_Book: number
const KEY_BounceKeys_Enable: number
const KEY_Break: number
const KEY_BrightnessAdjust: number
const KEY_Byelorussian_SHORTU: number
const KEY_Byelorussian_shortu: number
const KEY_C: number
const KEY_CD: number
const KEY_CH: number
const KEY_C_H: number
const KEY_C_h: number
const KEY_Cabovedot: number
const KEY_Cacute: number
const KEY_Calculator: number
const KEY_Calendar: number
const KEY_Cancel: number
const KEY_Caps_Lock: number
const KEY_Ccaron: number
const KEY_Ccedilla: number
const KEY_Ccircumflex: number
const KEY_Ch: number
const KEY_Clear: number
const KEY_ClearGrab: number
const KEY_Close: number
const KEY_Codeinput: number
const KEY_ColonSign: number
const KEY_Community: number
const KEY_ContrastAdjust: number
const KEY_Control_L: number
const KEY_Control_R: number
const KEY_Copy: number
const KEY_CruzeiroSign: number
const KEY_Cut: number
const KEY_CycleAngle: number
const KEY_Cyrillic_A: number
const KEY_Cyrillic_BE: number
const KEY_Cyrillic_CHE: number
const KEY_Cyrillic_CHE_descender: number
const KEY_Cyrillic_CHE_vertstroke: number
const KEY_Cyrillic_DE: number
const KEY_Cyrillic_DZHE: number
const KEY_Cyrillic_E: number
const KEY_Cyrillic_EF: number
const KEY_Cyrillic_EL: number
const KEY_Cyrillic_EM: number
const KEY_Cyrillic_EN: number
const KEY_Cyrillic_EN_descender: number
const KEY_Cyrillic_ER: number
const KEY_Cyrillic_ES: number
const KEY_Cyrillic_GHE: number
const KEY_Cyrillic_GHE_bar: number
const KEY_Cyrillic_HA: number
const KEY_Cyrillic_HARDSIGN: number
const KEY_Cyrillic_HA_descender: number
const KEY_Cyrillic_I: number
const KEY_Cyrillic_IE: number
const KEY_Cyrillic_IO: number
const KEY_Cyrillic_I_macron: number
const KEY_Cyrillic_JE: number
const KEY_Cyrillic_KA: number
const KEY_Cyrillic_KA_descender: number
const KEY_Cyrillic_KA_vertstroke: number
const KEY_Cyrillic_LJE: number
const KEY_Cyrillic_NJE: number
const KEY_Cyrillic_O: number
const KEY_Cyrillic_O_bar: number
const KEY_Cyrillic_PE: number
const KEY_Cyrillic_SCHWA: number
const KEY_Cyrillic_SHA: number
const KEY_Cyrillic_SHCHA: number
const KEY_Cyrillic_SHHA: number
const KEY_Cyrillic_SHORTI: number
const KEY_Cyrillic_SOFTSIGN: number
const KEY_Cyrillic_TE: number
const KEY_Cyrillic_TSE: number
const KEY_Cyrillic_U: number
const KEY_Cyrillic_U_macron: number
const KEY_Cyrillic_U_straight: number
const KEY_Cyrillic_U_straight_bar: number
const KEY_Cyrillic_VE: number
const KEY_Cyrillic_YA: number
const KEY_Cyrillic_YERU: number
const KEY_Cyrillic_YU: number
const KEY_Cyrillic_ZE: number
const KEY_Cyrillic_ZHE: number
const KEY_Cyrillic_ZHE_descender: number
const KEY_Cyrillic_a: number
const KEY_Cyrillic_be: number
const KEY_Cyrillic_che: number
const KEY_Cyrillic_che_descender: number
const KEY_Cyrillic_che_vertstroke: number
const KEY_Cyrillic_de: number
const KEY_Cyrillic_dzhe: number
const KEY_Cyrillic_e: number
const KEY_Cyrillic_ef: number
const KEY_Cyrillic_el: number
const KEY_Cyrillic_em: number
const KEY_Cyrillic_en: number
const KEY_Cyrillic_en_descender: number
const KEY_Cyrillic_er: number
const KEY_Cyrillic_es: number
const KEY_Cyrillic_ghe: number
const KEY_Cyrillic_ghe_bar: number
const KEY_Cyrillic_ha: number
const KEY_Cyrillic_ha_descender: number
const KEY_Cyrillic_hardsign: number
const KEY_Cyrillic_i: number
const KEY_Cyrillic_i_macron: number
const KEY_Cyrillic_ie: number
const KEY_Cyrillic_io: number
const KEY_Cyrillic_je: number
const KEY_Cyrillic_ka: number
const KEY_Cyrillic_ka_descender: number
const KEY_Cyrillic_ka_vertstroke: number
const KEY_Cyrillic_lje: number
const KEY_Cyrillic_nje: number
const KEY_Cyrillic_o: number
const KEY_Cyrillic_o_bar: number
const KEY_Cyrillic_pe: number
const KEY_Cyrillic_schwa: number
const KEY_Cyrillic_sha: number
const KEY_Cyrillic_shcha: number
const KEY_Cyrillic_shha: number
const KEY_Cyrillic_shorti: number
const KEY_Cyrillic_softsign: number
const KEY_Cyrillic_te: number
const KEY_Cyrillic_tse: number
const KEY_Cyrillic_u: number
const KEY_Cyrillic_u_macron: number
const KEY_Cyrillic_u_straight: number
const KEY_Cyrillic_u_straight_bar: number
const KEY_Cyrillic_ve: number
const KEY_Cyrillic_ya: number
const KEY_Cyrillic_yeru: number
const KEY_Cyrillic_yu: number
const KEY_Cyrillic_ze: number
const KEY_Cyrillic_zhe: number
const KEY_Cyrillic_zhe_descender: number
const KEY_D: number
const KEY_DOS: number
const KEY_Dabovedot: number
const KEY_Dcaron: number
const KEY_Delete: number
const KEY_Display: number
const KEY_Documents: number
const KEY_DongSign: number
const KEY_Down: number
const KEY_Dstroke: number
const KEY_E: number
const KEY_ENG: number
const KEY_ETH: number
const KEY_EZH: number
const KEY_Eabovedot: number
const KEY_Eacute: number
const KEY_Ebelowdot: number
const KEY_Ecaron: number
const KEY_Ecircumflex: number
const KEY_Ecircumflexacute: number
const KEY_Ecircumflexbelowdot: number
const KEY_Ecircumflexgrave: number
const KEY_Ecircumflexhook: number
const KEY_Ecircumflextilde: number
const KEY_EcuSign: number
const KEY_Ediaeresis: number
const KEY_Egrave: number
const KEY_Ehook: number
const KEY_Eisu_Shift: number
const KEY_Eisu_toggle: number
const KEY_Eject: number
const KEY_Emacron: number
const KEY_End: number
const KEY_Eogonek: number
const KEY_Escape: number
const KEY_Eth: number
const KEY_Etilde: number
const KEY_EuroSign: number
const KEY_Excel: number
const KEY_Execute: number
const KEY_Explorer: number
const KEY_F: number
const KEY_F1: number
const KEY_F10: number
const KEY_F11: number
const KEY_F12: number
const KEY_F13: number
const KEY_F14: number
const KEY_F15: number
const KEY_F16: number
const KEY_F17: number
const KEY_F18: number
const KEY_F19: number
const KEY_F2: number
const KEY_F20: number
const KEY_F21: number
const KEY_F22: number
const KEY_F23: number
const KEY_F24: number
const KEY_F25: number
const KEY_F26: number
const KEY_F27: number
const KEY_F28: number
const KEY_F29: number
const KEY_F3: number
const KEY_F30: number
const KEY_F31: number
const KEY_F32: number
const KEY_F33: number
const KEY_F34: number
const KEY_F35: number
const KEY_F4: number
const KEY_F5: number
const KEY_F6: number
const KEY_F7: number
const KEY_F8: number
const KEY_F9: number
const KEY_FFrancSign: number
const KEY_Fabovedot: number
const KEY_Farsi_0: number
const KEY_Farsi_1: number
const KEY_Farsi_2: number
const KEY_Farsi_3: number
const KEY_Farsi_4: number
const KEY_Farsi_5: number
const KEY_Farsi_6: number
const KEY_Farsi_7: number
const KEY_Farsi_8: number
const KEY_Farsi_9: number
const KEY_Farsi_yeh: number
const KEY_Favorites: number
const KEY_Finance: number
const KEY_Find: number
const KEY_First_Virtual_Screen: number
const KEY_Forward: number
const KEY_FrameBack: number
const KEY_FrameForward: number
const KEY_G: number
const KEY_Gabovedot: number
const KEY_Game: number
const KEY_Gbreve: number
const KEY_Gcaron: number
const KEY_Gcedilla: number
const KEY_Gcircumflex: number
const KEY_Georgian_an: number
const KEY_Georgian_ban: number
const KEY_Georgian_can: number
const KEY_Georgian_char: number
const KEY_Georgian_chin: number
const KEY_Georgian_cil: number
const KEY_Georgian_don: number
const KEY_Georgian_en: number
const KEY_Georgian_fi: number
const KEY_Georgian_gan: number
const KEY_Georgian_ghan: number
const KEY_Georgian_hae: number
const KEY_Georgian_har: number
const KEY_Georgian_he: number
const KEY_Georgian_hie: number
const KEY_Georgian_hoe: number
const KEY_Georgian_in: number
const KEY_Georgian_jhan: number
const KEY_Georgian_jil: number
const KEY_Georgian_kan: number
const KEY_Georgian_khar: number
const KEY_Georgian_las: number
const KEY_Georgian_man: number
const KEY_Georgian_nar: number
const KEY_Georgian_on: number
const KEY_Georgian_par: number
const KEY_Georgian_phar: number
const KEY_Georgian_qar: number
const KEY_Georgian_rae: number
const KEY_Georgian_san: number
const KEY_Georgian_shin: number
const KEY_Georgian_tan: number
const KEY_Georgian_tar: number
const KEY_Georgian_un: number
const KEY_Georgian_vin: number
const KEY_Georgian_we: number
const KEY_Georgian_xan: number
const KEY_Georgian_zen: number
const KEY_Georgian_zhar: number
const KEY_Go: number
const KEY_Greek_ALPHA: number
const KEY_Greek_ALPHAaccent: number
const KEY_Greek_BETA: number
const KEY_Greek_CHI: number
const KEY_Greek_DELTA: number
const KEY_Greek_EPSILON: number
const KEY_Greek_EPSILONaccent: number
const KEY_Greek_ETA: number
const KEY_Greek_ETAaccent: number
const KEY_Greek_GAMMA: number
const KEY_Greek_IOTA: number
const KEY_Greek_IOTAaccent: number
const KEY_Greek_IOTAdiaeresis: number
const KEY_Greek_IOTAdieresis: number
const KEY_Greek_KAPPA: number
const KEY_Greek_LAMBDA: number
const KEY_Greek_LAMDA: number
const KEY_Greek_MU: number
const KEY_Greek_NU: number
const KEY_Greek_OMEGA: number
const KEY_Greek_OMEGAaccent: number
const KEY_Greek_OMICRON: number
const KEY_Greek_OMICRONaccent: number
const KEY_Greek_PHI: number
const KEY_Greek_PI: number
const KEY_Greek_PSI: number
const KEY_Greek_RHO: number
const KEY_Greek_SIGMA: number
const KEY_Greek_TAU: number
const KEY_Greek_THETA: number
const KEY_Greek_UPSILON: number
const KEY_Greek_UPSILONaccent: number
const KEY_Greek_UPSILONdieresis: number
const KEY_Greek_XI: number
const KEY_Greek_ZETA: number
const KEY_Greek_accentdieresis: number
const KEY_Greek_alpha: number
const KEY_Greek_alphaaccent: number
const KEY_Greek_beta: number
const KEY_Greek_chi: number
const KEY_Greek_delta: number
const KEY_Greek_epsilon: number
const KEY_Greek_epsilonaccent: number
const KEY_Greek_eta: number
const KEY_Greek_etaaccent: number
const KEY_Greek_finalsmallsigma: number
const KEY_Greek_gamma: number
const KEY_Greek_horizbar: number
const KEY_Greek_iota: number
const KEY_Greek_iotaaccent: number
const KEY_Greek_iotaaccentdieresis: number
const KEY_Greek_iotadieresis: number
const KEY_Greek_kappa: number
const KEY_Greek_lambda: number
const KEY_Greek_lamda: number
const KEY_Greek_mu: number
const KEY_Greek_nu: number
const KEY_Greek_omega: number
const KEY_Greek_omegaaccent: number
const KEY_Greek_omicron: number
const KEY_Greek_omicronaccent: number
const KEY_Greek_phi: number
const KEY_Greek_pi: number
const KEY_Greek_psi: number
const KEY_Greek_rho: number
const KEY_Greek_sigma: number
const KEY_Greek_switch: number
const KEY_Greek_tau: number
const KEY_Greek_theta: number
const KEY_Greek_upsilon: number
const KEY_Greek_upsilonaccent: number
const KEY_Greek_upsilonaccentdieresis: number
const KEY_Greek_upsilondieresis: number
const KEY_Greek_xi: number
const KEY_Greek_zeta: number
const KEY_Green: number
const KEY_H: number
const KEY_Hangul: number
const KEY_Hangul_A: number
const KEY_Hangul_AE: number
const KEY_Hangul_AraeA: number
const KEY_Hangul_AraeAE: number
const KEY_Hangul_Banja: number
const KEY_Hangul_Cieuc: number
const KEY_Hangul_Codeinput: number
const KEY_Hangul_Dikeud: number
const KEY_Hangul_E: number
const KEY_Hangul_EO: number
const KEY_Hangul_EU: number
const KEY_Hangul_End: number
const KEY_Hangul_Hanja: number
const KEY_Hangul_Hieuh: number
const KEY_Hangul_I: number
const KEY_Hangul_Ieung: number
const KEY_Hangul_J_Cieuc: number
const KEY_Hangul_J_Dikeud: number
const KEY_Hangul_J_Hieuh: number
const KEY_Hangul_J_Ieung: number
const KEY_Hangul_J_Jieuj: number
const KEY_Hangul_J_Khieuq: number
const KEY_Hangul_J_Kiyeog: number
const KEY_Hangul_J_KiyeogSios: number
const KEY_Hangul_J_KkogjiDalrinIeung: number
const KEY_Hangul_J_Mieum: number
const KEY_Hangul_J_Nieun: number
const KEY_Hangul_J_NieunHieuh: number
const KEY_Hangul_J_NieunJieuj: number
const KEY_Hangul_J_PanSios: number
const KEY_Hangul_J_Phieuf: number
const KEY_Hangul_J_Pieub: number
const KEY_Hangul_J_PieubSios: number
const KEY_Hangul_J_Rieul: number
const KEY_Hangul_J_RieulHieuh: number
const KEY_Hangul_J_RieulKiyeog: number
const KEY_Hangul_J_RieulMieum: number
const KEY_Hangul_J_RieulPhieuf: number
const KEY_Hangul_J_RieulPieub: number
const KEY_Hangul_J_RieulSios: number
const KEY_Hangul_J_RieulTieut: number
const KEY_Hangul_J_Sios: number
const KEY_Hangul_J_SsangKiyeog: number
const KEY_Hangul_J_SsangSios: number
const KEY_Hangul_J_Tieut: number
const KEY_Hangul_J_YeorinHieuh: number
const KEY_Hangul_Jamo: number
const KEY_Hangul_Jeonja: number
const KEY_Hangul_Jieuj: number
const KEY_Hangul_Khieuq: number
const KEY_Hangul_Kiyeog: number
const KEY_Hangul_KiyeogSios: number
const KEY_Hangul_KkogjiDalrinIeung: number
const KEY_Hangul_Mieum: number
const KEY_Hangul_MultipleCandidate: number
const KEY_Hangul_Nieun: number
const KEY_Hangul_NieunHieuh: number
const KEY_Hangul_NieunJieuj: number
const KEY_Hangul_O: number
const KEY_Hangul_OE: number
const KEY_Hangul_PanSios: number
const KEY_Hangul_Phieuf: number
const KEY_Hangul_Pieub: number
const KEY_Hangul_PieubSios: number
const KEY_Hangul_PostHanja: number
const KEY_Hangul_PreHanja: number
const KEY_Hangul_PreviousCandidate: number
const KEY_Hangul_Rieul: number
const KEY_Hangul_RieulHieuh: number
const KEY_Hangul_RieulKiyeog: number
const KEY_Hangul_RieulMieum: number
const KEY_Hangul_RieulPhieuf: number
const KEY_Hangul_RieulPieub: number
const KEY_Hangul_RieulSios: number
const KEY_Hangul_RieulTieut: number
const KEY_Hangul_RieulYeorinHieuh: number
const KEY_Hangul_Romaja: number
const KEY_Hangul_SingleCandidate: number
const KEY_Hangul_Sios: number
const KEY_Hangul_Special: number
const KEY_Hangul_SsangDikeud: number
const KEY_Hangul_SsangJieuj: number
const KEY_Hangul_SsangKiyeog: number
const KEY_Hangul_SsangPieub: number
const KEY_Hangul_SsangSios: number
const KEY_Hangul_Start: number
const KEY_Hangul_SunkyeongeumMieum: number
const KEY_Hangul_SunkyeongeumPhieuf: number
const KEY_Hangul_SunkyeongeumPieub: number
const KEY_Hangul_Tieut: number
const KEY_Hangul_U: number
const KEY_Hangul_WA: number
const KEY_Hangul_WAE: number
const KEY_Hangul_WE: number
const KEY_Hangul_WEO: number
const KEY_Hangul_WI: number
const KEY_Hangul_YA: number
const KEY_Hangul_YAE: number
const KEY_Hangul_YE: number
const KEY_Hangul_YEO: number
const KEY_Hangul_YI: number
const KEY_Hangul_YO: number
const KEY_Hangul_YU: number
const KEY_Hangul_YeorinHieuh: number
const KEY_Hangul_switch: number
const KEY_Hankaku: number
const KEY_Hcircumflex: number
const KEY_Hebrew_switch: number
const KEY_Help: number
const KEY_Henkan: number
const KEY_Henkan_Mode: number
const KEY_Hibernate: number
const KEY_Hiragana: number
const KEY_Hiragana_Katakana: number
const KEY_History: number
const KEY_Home: number
const KEY_HomePage: number
const KEY_HotLinks: number
const KEY_Hstroke: number
const KEY_Hyper_L: number
const KEY_Hyper_R: number
const KEY_I: number
const KEY_ISO_Center_Object: number
const KEY_ISO_Continuous_Underline: number
const KEY_ISO_Discontinuous_Underline: number
const KEY_ISO_Emphasize: number
const KEY_ISO_Enter: number
const KEY_ISO_Fast_Cursor_Down: number
const KEY_ISO_Fast_Cursor_Left: number
const KEY_ISO_Fast_Cursor_Right: number
const KEY_ISO_Fast_Cursor_Up: number
const KEY_ISO_First_Group: number
const KEY_ISO_First_Group_Lock: number
const KEY_ISO_Group_Latch: number
const KEY_ISO_Group_Lock: number
const KEY_ISO_Group_Shift: number
const KEY_ISO_Last_Group: number
const KEY_ISO_Last_Group_Lock: number
const KEY_ISO_Left_Tab: number
const KEY_ISO_Level2_Latch: number
const KEY_ISO_Level3_Latch: number
const KEY_ISO_Level3_Lock: number
const KEY_ISO_Level3_Shift: number
const KEY_ISO_Level5_Latch: number
const KEY_ISO_Level5_Lock: number
const KEY_ISO_Level5_Shift: number
const KEY_ISO_Lock: number
const KEY_ISO_Move_Line_Down: number
const KEY_ISO_Move_Line_Up: number
const KEY_ISO_Next_Group: number
const KEY_ISO_Next_Group_Lock: number
const KEY_ISO_Partial_Line_Down: number
const KEY_ISO_Partial_Line_Up: number
const KEY_ISO_Partial_Space_Left: number
const KEY_ISO_Partial_Space_Right: number
const KEY_ISO_Prev_Group: number
const KEY_ISO_Prev_Group_Lock: number
const KEY_ISO_Release_Both_Margins: number
const KEY_ISO_Release_Margin_Left: number
const KEY_ISO_Release_Margin_Right: number
const KEY_ISO_Set_Margin_Left: number
const KEY_ISO_Set_Margin_Right: number
const KEY_Iabovedot: number
const KEY_Iacute: number
const KEY_Ibelowdot: number
const KEY_Ibreve: number
const KEY_Icircumflex: number
const KEY_Idiaeresis: number
const KEY_Igrave: number
const KEY_Ihook: number
const KEY_Imacron: number
const KEY_Insert: number
const KEY_Iogonek: number
const KEY_Itilde: number
const KEY_J: number
const KEY_Jcircumflex: number
const KEY_K: number
const KEY_KP_0: number
const KEY_KP_1: number
const KEY_KP_2: number
const KEY_KP_3: number
const KEY_KP_4: number
const KEY_KP_5: number
const KEY_KP_6: number
const KEY_KP_7: number
const KEY_KP_8: number
const KEY_KP_9: number
const KEY_KP_Add: number
const KEY_KP_Begin: number
const KEY_KP_Decimal: number
const KEY_KP_Delete: number
const KEY_KP_Divide: number
const KEY_KP_Down: number
const KEY_KP_End: number
const KEY_KP_Enter: number
const KEY_KP_Equal: number
const KEY_KP_F1: number
const KEY_KP_F2: number
const KEY_KP_F3: number
const KEY_KP_F4: number
const KEY_KP_Home: number
const KEY_KP_Insert: number
const KEY_KP_Left: number
const KEY_KP_Multiply: number
const KEY_KP_Next: number
const KEY_KP_Page_Down: number
const KEY_KP_Page_Up: number
const KEY_KP_Prior: number
const KEY_KP_Right: number
const KEY_KP_Separator: number
const KEY_KP_Space: number
const KEY_KP_Subtract: number
const KEY_KP_Tab: number
const KEY_KP_Up: number
const KEY_Kana_Lock: number
const KEY_Kana_Shift: number
const KEY_Kanji: number
const KEY_Kanji_Bangou: number
const KEY_Katakana: number
const KEY_KbdBrightnessDown: number
const KEY_KbdBrightnessUp: number
const KEY_KbdLightOnOff: number
const KEY_Kcedilla: number
const KEY_Korean_Won: number
const KEY_L: number
const KEY_L1: number
const KEY_L10: number
const KEY_L2: number
const KEY_L3: number
const KEY_L4: number
const KEY_L5: number
const KEY_L6: number
const KEY_L7: number
const KEY_L8: number
const KEY_L9: number
const KEY_Lacute: number
const KEY_Last_Virtual_Screen: number
const KEY_Launch0: number
const KEY_Launch1: number
const KEY_Launch2: number
const KEY_Launch3: number
const KEY_Launch4: number
const KEY_Launch5: number
const KEY_Launch6: number
const KEY_Launch7: number
const KEY_Launch8: number
const KEY_Launch9: number
const KEY_LaunchA: number
const KEY_LaunchB: number
const KEY_LaunchC: number
const KEY_LaunchD: number
const KEY_LaunchE: number
const KEY_LaunchF: number
const KEY_Lbelowdot: number
const KEY_Lcaron: number
const KEY_Lcedilla: number
const KEY_Left: number
const KEY_LightBulb: number
const KEY_Linefeed: number
const KEY_LiraSign: number
const KEY_LogGrabInfo: number
const KEY_LogOff: number
const KEY_LogWindowTree: number
const KEY_Lstroke: number
const KEY_M: number
const KEY_Mabovedot: number
const KEY_Macedonia_DSE: number
const KEY_Macedonia_GJE: number
const KEY_Macedonia_KJE: number
const KEY_Macedonia_dse: number
const KEY_Macedonia_gje: number
const KEY_Macedonia_kje: number
const KEY_Mae_Koho: number
const KEY_Mail: number
const KEY_MailForward: number
const KEY_Market: number
const KEY_Massyo: number
const KEY_Meeting: number
const KEY_Memo: number
const KEY_Menu: number
const KEY_MenuKB: number
const KEY_MenuPB: number
const KEY_Messenger: number
const KEY_Meta_L: number
const KEY_Meta_R: number
const KEY_MillSign: number
const KEY_ModeLock: number
const KEY_Mode_switch: number
const KEY_MonBrightnessDown: number
const KEY_MonBrightnessUp: number
const KEY_MouseKeys_Accel_Enable: number
const KEY_MouseKeys_Enable: number
const KEY_Muhenkan: number
const KEY_Multi_key: number
const KEY_MultipleCandidate: number
const KEY_Music: number
const KEY_MyComputer: number
const KEY_MySites: number
const KEY_N: number
const KEY_Nacute: number
const KEY_NairaSign: number
const KEY_Ncaron: number
const KEY_Ncedilla: number
const KEY_New: number
const KEY_NewSheqelSign: number
const KEY_News: number
const KEY_Next: number
const KEY_Next_VMode: number
const KEY_Next_Virtual_Screen: number
const KEY_Ntilde: number
const KEY_Num_Lock: number
const KEY_O: number
const KEY_OE: number
const KEY_Oacute: number
const KEY_Obarred: number
const KEY_Obelowdot: number
const KEY_Ocaron: number
const KEY_Ocircumflex: number
const KEY_Ocircumflexacute: number
const KEY_Ocircumflexbelowdot: number
const KEY_Ocircumflexgrave: number
const KEY_Ocircumflexhook: number
const KEY_Ocircumflextilde: number
const KEY_Odiaeresis: number
const KEY_Odoubleacute: number
const KEY_OfficeHome: number
const KEY_Ograve: number
const KEY_Ohook: number
const KEY_Ohorn: number
const KEY_Ohornacute: number
const KEY_Ohornbelowdot: number
const KEY_Ohorngrave: number
const KEY_Ohornhook: number
const KEY_Ohorntilde: number
const KEY_Omacron: number
const KEY_Ooblique: number
const KEY_Open: number
const KEY_OpenURL: number
const KEY_Option: number
const KEY_Oslash: number
const KEY_Otilde: number
const KEY_Overlay1_Enable: number
const KEY_Overlay2_Enable: number
const KEY_P: number
const KEY_Pabovedot: number
const KEY_Page_Down: number
const KEY_Page_Up: number
const KEY_Paste: number
const KEY_Pause: number
const KEY_PesetaSign: number
const KEY_Phone: number
const KEY_Pictures: number
const KEY_Pointer_Accelerate: number
const KEY_Pointer_Button1: number
const KEY_Pointer_Button2: number
const KEY_Pointer_Button3: number
const KEY_Pointer_Button4: number
const KEY_Pointer_Button5: number
const KEY_Pointer_Button_Dflt: number
const KEY_Pointer_DblClick1: number
const KEY_Pointer_DblClick2: number
const KEY_Pointer_DblClick3: number
const KEY_Pointer_DblClick4: number
const KEY_Pointer_DblClick5: number
const KEY_Pointer_DblClick_Dflt: number
const KEY_Pointer_DfltBtnNext: number
const KEY_Pointer_DfltBtnPrev: number
const KEY_Pointer_Down: number
const KEY_Pointer_DownLeft: number
const KEY_Pointer_DownRight: number
const KEY_Pointer_Drag1: number
const KEY_Pointer_Drag2: number
const KEY_Pointer_Drag3: number
const KEY_Pointer_Drag4: number
const KEY_Pointer_Drag5: number
const KEY_Pointer_Drag_Dflt: number
const KEY_Pointer_EnableKeys: number
const KEY_Pointer_Left: number
const KEY_Pointer_Right: number
const KEY_Pointer_Up: number
const KEY_Pointer_UpLeft: number
const KEY_Pointer_UpRight: number
const KEY_PowerDown: number
const KEY_PowerOff: number
const KEY_Prev_VMode: number
const KEY_Prev_Virtual_Screen: number
const KEY_PreviousCandidate: number
const KEY_Print: number
const KEY_Prior: number
const KEY_Q: number
const KEY_R: number
const KEY_R1: number
const KEY_R10: number
const KEY_R11: number
const KEY_R12: number
const KEY_R13: number
const KEY_R14: number
const KEY_R15: number
const KEY_R2: number
const KEY_R3: number
const KEY_R4: number
const KEY_R5: number
const KEY_R6: number
const KEY_R7: number
const KEY_R8: number
const KEY_R9: number
const KEY_Racute: number
const KEY_Rcaron: number
const KEY_Rcedilla: number
const KEY_Red: number
const KEY_Redo: number
const KEY_Refresh: number
const KEY_Reload: number
const KEY_RepeatKeys_Enable: number
const KEY_Reply: number
const KEY_Return: number
const KEY_Right: number
const KEY_RockerDown: number
const KEY_RockerEnter: number
const KEY_RockerUp: number
const KEY_Romaji: number
const KEY_RotateWindows: number
const KEY_RotationKB: number
const KEY_RotationPB: number
const KEY_RupeeSign: number
const KEY_S: number
const KEY_SCHWA: number
const KEY_Sabovedot: number
const KEY_Sacute: number
const KEY_Save: number
const KEY_Scaron: number
const KEY_Scedilla: number
const KEY_Scircumflex: number
const KEY_ScreenSaver: number
const KEY_ScrollClick: number
const KEY_ScrollDown: number
const KEY_ScrollUp: number
const KEY_Scroll_Lock: number
const KEY_Search: number
const KEY_Select: number
const KEY_SelectButton: number
const KEY_Send: number
const KEY_Serbian_DJE: number
const KEY_Serbian_DZE: number
const KEY_Serbian_JE: number
const KEY_Serbian_LJE: number
const KEY_Serbian_NJE: number
const KEY_Serbian_TSHE: number
const KEY_Serbian_dje: number
const KEY_Serbian_dze: number
const KEY_Serbian_je: number
const KEY_Serbian_lje: number
const KEY_Serbian_nje: number
const KEY_Serbian_tshe: number
const KEY_Shift_L: number
const KEY_Shift_Lock: number
const KEY_Shift_R: number
const KEY_Shop: number
const KEY_SingleCandidate: number
const KEY_Sinh_a: number
const KEY_Sinh_aa: number
const KEY_Sinh_aa2: number
const KEY_Sinh_ae: number
const KEY_Sinh_ae2: number
const KEY_Sinh_aee: number
const KEY_Sinh_aee2: number
const KEY_Sinh_ai: number
const KEY_Sinh_ai2: number
const KEY_Sinh_al: number
const KEY_Sinh_au: number
const KEY_Sinh_au2: number
const KEY_Sinh_ba: number
const KEY_Sinh_bha: number
const KEY_Sinh_ca: number
const KEY_Sinh_cha: number
const KEY_Sinh_dda: number
const KEY_Sinh_ddha: number
const KEY_Sinh_dha: number
const KEY_Sinh_dhha: number
const KEY_Sinh_e: number
const KEY_Sinh_e2: number
const KEY_Sinh_ee: number
const KEY_Sinh_ee2: number
const KEY_Sinh_fa: number
const KEY_Sinh_ga: number
const KEY_Sinh_gha: number
const KEY_Sinh_h2: number
const KEY_Sinh_ha: number
const KEY_Sinh_i: number
const KEY_Sinh_i2: number
const KEY_Sinh_ii: number
const KEY_Sinh_ii2: number
const KEY_Sinh_ja: number
const KEY_Sinh_jha: number
const KEY_Sinh_jnya: number
const KEY_Sinh_ka: number
const KEY_Sinh_kha: number
const KEY_Sinh_kunddaliya: number
const KEY_Sinh_la: number
const KEY_Sinh_lla: number
const KEY_Sinh_lu: number
const KEY_Sinh_lu2: number
const KEY_Sinh_luu: number
const KEY_Sinh_luu2: number
const KEY_Sinh_ma: number
const KEY_Sinh_mba: number
const KEY_Sinh_na: number
const KEY_Sinh_ndda: number
const KEY_Sinh_ndha: number
const KEY_Sinh_ng: number
const KEY_Sinh_ng2: number
const KEY_Sinh_nga: number
const KEY_Sinh_nja: number
const KEY_Sinh_nna: number
const KEY_Sinh_nya: number
const KEY_Sinh_o: number
const KEY_Sinh_o2: number
const KEY_Sinh_oo: number
const KEY_Sinh_oo2: number
const KEY_Sinh_pa: number
const KEY_Sinh_pha: number
const KEY_Sinh_ra: number
const KEY_Sinh_ri: number
const KEY_Sinh_rii: number
const KEY_Sinh_ru2: number
const KEY_Sinh_ruu2: number
const KEY_Sinh_sa: number
const KEY_Sinh_sha: number
const KEY_Sinh_ssha: number
const KEY_Sinh_tha: number
const KEY_Sinh_thha: number
const KEY_Sinh_tta: number
const KEY_Sinh_ttha: number
const KEY_Sinh_u: number
const KEY_Sinh_u2: number
const KEY_Sinh_uu: number
const KEY_Sinh_uu2: number
const KEY_Sinh_va: number
const KEY_Sinh_ya: number
const KEY_Sleep: number
const KEY_SlowKeys_Enable: number
const KEY_Spell: number
const KEY_SplitScreen: number
const KEY_Standby: number
const KEY_Start: number
const KEY_StickyKeys_Enable: number
const KEY_Stop: number
const KEY_Subtitle: number
const KEY_Super_L: number
const KEY_Super_R: number
const KEY_Support: number
const KEY_Suspend: number
const KEY_Switch_VT_1: number
const KEY_Switch_VT_10: number
const KEY_Switch_VT_11: number
const KEY_Switch_VT_12: number
const KEY_Switch_VT_2: number
const KEY_Switch_VT_3: number
const KEY_Switch_VT_4: number
const KEY_Switch_VT_5: number
const KEY_Switch_VT_6: number
const KEY_Switch_VT_7: number
const KEY_Switch_VT_8: number
const KEY_Switch_VT_9: number
const KEY_Sys_Req: number
const KEY_T: number
const KEY_THORN: number
const KEY_Tab: number
const KEY_Tabovedot: number
const KEY_TaskPane: number
const KEY_Tcaron: number
const KEY_Tcedilla: number
const KEY_Terminal: number
const KEY_Terminate_Server: number
const KEY_Thai_baht: number
const KEY_Thai_bobaimai: number
const KEY_Thai_chochan: number
const KEY_Thai_chochang: number
const KEY_Thai_choching: number
const KEY_Thai_chochoe: number
const KEY_Thai_dochada: number
const KEY_Thai_dodek: number
const KEY_Thai_fofa: number
const KEY_Thai_fofan: number
const KEY_Thai_hohip: number
const KEY_Thai_honokhuk: number
const KEY_Thai_khokhai: number
const KEY_Thai_khokhon: number
const KEY_Thai_khokhuat: number
const KEY_Thai_khokhwai: number
const KEY_Thai_khorakhang: number
const KEY_Thai_kokai: number
const KEY_Thai_lakkhangyao: number
const KEY_Thai_lekchet: number
const KEY_Thai_lekha: number
const KEY_Thai_lekhok: number
const KEY_Thai_lekkao: number
const KEY_Thai_leknung: number
const KEY_Thai_lekpaet: number
const KEY_Thai_leksam: number
const KEY_Thai_leksi: number
const KEY_Thai_leksong: number
const KEY_Thai_leksun: number
const KEY_Thai_lochula: number
const KEY_Thai_loling: number
const KEY_Thai_lu: number
const KEY_Thai_maichattawa: number
const KEY_Thai_maiek: number
const KEY_Thai_maihanakat: number
const KEY_Thai_maihanakat_maitho: number
const KEY_Thai_maitaikhu: number
const KEY_Thai_maitho: number
const KEY_Thai_maitri: number
const KEY_Thai_maiyamok: number
const KEY_Thai_moma: number
const KEY_Thai_ngongu: number
const KEY_Thai_nikhahit: number
const KEY_Thai_nonen: number
const KEY_Thai_nonu: number
const KEY_Thai_oang: number
const KEY_Thai_paiyannoi: number
const KEY_Thai_phinthu: number
const KEY_Thai_phophan: number
const KEY_Thai_phophung: number
const KEY_Thai_phosamphao: number
const KEY_Thai_popla: number
const KEY_Thai_rorua: number
const KEY_Thai_ru: number
const KEY_Thai_saraa: number
const KEY_Thai_saraaa: number
const KEY_Thai_saraae: number
const KEY_Thai_saraaimaimalai: number
const KEY_Thai_saraaimaimuan: number
const KEY_Thai_saraam: number
const KEY_Thai_sarae: number
const KEY_Thai_sarai: number
const KEY_Thai_saraii: number
const KEY_Thai_sarao: number
const KEY_Thai_sarau: number
const KEY_Thai_saraue: number
const KEY_Thai_sarauee: number
const KEY_Thai_sarauu: number
const KEY_Thai_sorusi: number
const KEY_Thai_sosala: number
const KEY_Thai_soso: number
const KEY_Thai_sosua: number
const KEY_Thai_thanthakhat: number
const KEY_Thai_thonangmontho: number
const KEY_Thai_thophuthao: number
const KEY_Thai_thothahan: number
const KEY_Thai_thothan: number
const KEY_Thai_thothong: number
const KEY_Thai_thothung: number
const KEY_Thai_topatak: number
const KEY_Thai_totao: number
const KEY_Thai_wowaen: number
const KEY_Thai_yoyak: number
const KEY_Thai_yoying: number
const KEY_Thorn: number
const KEY_Time: number
const KEY_ToDoList: number
const KEY_Tools: number
const KEY_TopMenu: number
const KEY_TouchpadOff: number
const KEY_TouchpadOn: number
const KEY_TouchpadToggle: number
const KEY_Touroku: number
const KEY_Travel: number
const KEY_Tslash: number
const KEY_U: number
const KEY_UWB: number
const KEY_Uacute: number
const KEY_Ubelowdot: number
const KEY_Ubreve: number
const KEY_Ucircumflex: number
const KEY_Udiaeresis: number
const KEY_Udoubleacute: number
const KEY_Ugrave: number
const KEY_Uhook: number
const KEY_Uhorn: number
const KEY_Uhornacute: number
const KEY_Uhornbelowdot: number
const KEY_Uhorngrave: number
const KEY_Uhornhook: number
const KEY_Uhorntilde: number
const KEY_Ukrainian_GHE_WITH_UPTURN: number
const KEY_Ukrainian_I: number
const KEY_Ukrainian_IE: number
const KEY_Ukrainian_YI: number
const KEY_Ukrainian_ghe_with_upturn: number
const KEY_Ukrainian_i: number
const KEY_Ukrainian_ie: number
const KEY_Ukrainian_yi: number
const KEY_Ukranian_I: number
const KEY_Ukranian_JE: number
const KEY_Ukranian_YI: number
const KEY_Ukranian_i: number
const KEY_Ukranian_je: number
const KEY_Ukranian_yi: number
const KEY_Umacron: number
const KEY_Undo: number
const KEY_Ungrab: number
const KEY_Uogonek: number
const KEY_Up: number
const KEY_Uring: number
const KEY_User1KB: number
const KEY_User2KB: number
const KEY_UserPB: number
const KEY_Utilde: number
const KEY_V: number
const KEY_VendorHome: number
const KEY_Video: number
const KEY_View: number
const KEY_VoidSymbol: number
const KEY_W: number
const KEY_WLAN: number
const KEY_WWW: number
const KEY_Wacute: number
const KEY_WakeUp: number
const KEY_Wcircumflex: number
const KEY_Wdiaeresis: number
const KEY_WebCam: number
const KEY_Wgrave: number
const KEY_WheelButton: number
const KEY_WindowClear: number
const KEY_WonSign: number
const KEY_Word: number
const KEY_X: number
const KEY_Xabovedot: number
const KEY_Xfer: number
const KEY_Y: number
const KEY_Yacute: number
const KEY_Ybelowdot: number
const KEY_Ycircumflex: number
const KEY_Ydiaeresis: number
const KEY_Yellow: number
const KEY_Ygrave: number
const KEY_Yhook: number
const KEY_Ytilde: number
const KEY_Z: number
const KEY_Zabovedot: number
const KEY_Zacute: number
const KEY_Zcaron: number
const KEY_Zen_Koho: number
const KEY_Zenkaku: number
const KEY_Zenkaku_Hankaku: number
const KEY_ZoomIn: number
const KEY_ZoomOut: number
const KEY_Zstroke: number
const KEY_a: number
const KEY_aacute: number
const KEY_abelowdot: number
const KEY_abovedot: number
const KEY_abreve: number
const KEY_abreveacute: number
const KEY_abrevebelowdot: number
const KEY_abrevegrave: number
const KEY_abrevehook: number
const KEY_abrevetilde: number
const KEY_acircumflex: number
const KEY_acircumflexacute: number
const KEY_acircumflexbelowdot: number
const KEY_acircumflexgrave: number
const KEY_acircumflexhook: number
const KEY_acircumflextilde: number
const KEY_acute: number
const KEY_adiaeresis: number
const KEY_ae: number
const KEY_agrave: number
const KEY_ahook: number
const KEY_amacron: number
const KEY_ampersand: number
const KEY_aogonek: number
const KEY_apostrophe: number
const KEY_approxeq: number
const KEY_approximate: number
const KEY_aring: number
const KEY_asciicircum: number
const KEY_asciitilde: number
const KEY_asterisk: number
const KEY_at: number
const KEY_atilde: number
const KEY_b: number
const KEY_babovedot: number
const KEY_backslash: number
const KEY_ballotcross: number
const KEY_bar: number
const KEY_because: number
const KEY_blank: number
const KEY_botintegral: number
const KEY_botleftparens: number
const KEY_botleftsqbracket: number
const KEY_botleftsummation: number
const KEY_botrightparens: number
const KEY_botrightsqbracket: number
const KEY_botrightsummation: number
const KEY_bott: number
const KEY_botvertsummationconnector: number
const KEY_braceleft: number
const KEY_braceright: number
const KEY_bracketleft: number
const KEY_bracketright: number
const KEY_braille_blank: number
const KEY_braille_dot_1: number
const KEY_braille_dot_10: number
const KEY_braille_dot_2: number
const KEY_braille_dot_3: number
const KEY_braille_dot_4: number
const KEY_braille_dot_5: number
const KEY_braille_dot_6: number
const KEY_braille_dot_7: number
const KEY_braille_dot_8: number
const KEY_braille_dot_9: number
const KEY_braille_dots_1: number
const KEY_braille_dots_12: number
const KEY_braille_dots_123: number
const KEY_braille_dots_1234: number
const KEY_braille_dots_12345: number
const KEY_braille_dots_123456: number
const KEY_braille_dots_1234567: number
const KEY_braille_dots_12345678: number
const KEY_braille_dots_1234568: number
const KEY_braille_dots_123457: number
const KEY_braille_dots_1234578: number
const KEY_braille_dots_123458: number
const KEY_braille_dots_12346: number
const KEY_braille_dots_123467: number
const KEY_braille_dots_1234678: number
const KEY_braille_dots_123468: number
const KEY_braille_dots_12347: number
const KEY_braille_dots_123478: number
const KEY_braille_dots_12348: number
const KEY_braille_dots_1235: number
const KEY_braille_dots_12356: number
const KEY_braille_dots_123567: number
const KEY_braille_dots_1235678: number
const KEY_braille_dots_123568: number
const KEY_braille_dots_12357: number
const KEY_braille_dots_123578: number
const KEY_braille_dots_12358: number
const KEY_braille_dots_1236: number
const KEY_braille_dots_12367: number
const KEY_braille_dots_123678: number
const KEY_braille_dots_12368: number
const KEY_braille_dots_1237: number
const KEY_braille_dots_12378: number
const KEY_braille_dots_1238: number
const KEY_braille_dots_124: number
const KEY_braille_dots_1245: number
const KEY_braille_dots_12456: number
const KEY_braille_dots_124567: number
const KEY_braille_dots_1245678: number
const KEY_braille_dots_124568: number
const KEY_braille_dots_12457: number
const KEY_braille_dots_124578: number
const KEY_braille_dots_12458: number
const KEY_braille_dots_1246: number
const KEY_braille_dots_12467: number
const KEY_braille_dots_124678: number
const KEY_braille_dots_12468: number
const KEY_braille_dots_1247: number
const KEY_braille_dots_12478: number
const KEY_braille_dots_1248: number
const KEY_braille_dots_125: number
const KEY_braille_dots_1256: number
const KEY_braille_dots_12567: number
const KEY_braille_dots_125678: number
const KEY_braille_dots_12568: number
const KEY_braille_dots_1257: number
const KEY_braille_dots_12578: number
const KEY_braille_dots_1258: number
const KEY_braille_dots_126: number
const KEY_braille_dots_1267: number
const KEY_braille_dots_12678: number
const KEY_braille_dots_1268: number
const KEY_braille_dots_127: number
const KEY_braille_dots_1278: number
const KEY_braille_dots_128: number
const KEY_braille_dots_13: number
const KEY_braille_dots_134: number
const KEY_braille_dots_1345: number
const KEY_braille_dots_13456: number
const KEY_braille_dots_134567: number
const KEY_braille_dots_1345678: number
const KEY_braille_dots_134568: number
const KEY_braille_dots_13457: number
const KEY_braille_dots_134578: number
const KEY_braille_dots_13458: number
const KEY_braille_dots_1346: number
const KEY_braille_dots_13467: number
const KEY_braille_dots_134678: number
const KEY_braille_dots_13468: number
const KEY_braille_dots_1347: number
const KEY_braille_dots_13478: number
const KEY_braille_dots_1348: number
const KEY_braille_dots_135: number
const KEY_braille_dots_1356: number
const KEY_braille_dots_13567: number
const KEY_braille_dots_135678: number
const KEY_braille_dots_13568: number
const KEY_braille_dots_1357: number
const KEY_braille_dots_13578: number
const KEY_braille_dots_1358: number
const KEY_braille_dots_136: number
const KEY_braille_dots_1367: number
const KEY_braille_dots_13678: number
const KEY_braille_dots_1368: number
const KEY_braille_dots_137: number
const KEY_braille_dots_1378: number
const KEY_braille_dots_138: number
const KEY_braille_dots_14: number
const KEY_braille_dots_145: number
const KEY_braille_dots_1456: number
const KEY_braille_dots_14567: number
const KEY_braille_dots_145678: number
const KEY_braille_dots_14568: number
const KEY_braille_dots_1457: number
const KEY_braille_dots_14578: number
const KEY_braille_dots_1458: number
const KEY_braille_dots_146: number
const KEY_braille_dots_1467: number
const KEY_braille_dots_14678: number
const KEY_braille_dots_1468: number
const KEY_braille_dots_147: number
const KEY_braille_dots_1478: number
const KEY_braille_dots_148: number
const KEY_braille_dots_15: number
const KEY_braille_dots_156: number
const KEY_braille_dots_1567: number
const KEY_braille_dots_15678: number
const KEY_braille_dots_1568: number
const KEY_braille_dots_157: number
const KEY_braille_dots_1578: number
const KEY_braille_dots_158: number
const KEY_braille_dots_16: number
const KEY_braille_dots_167: number
const KEY_braille_dots_1678: number
const KEY_braille_dots_168: number
const KEY_braille_dots_17: number
const KEY_braille_dots_178: number
const KEY_braille_dots_18: number
const KEY_braille_dots_2: number
const KEY_braille_dots_23: number
const KEY_braille_dots_234: number
const KEY_braille_dots_2345: number
const KEY_braille_dots_23456: number
const KEY_braille_dots_234567: number
const KEY_braille_dots_2345678: number
const KEY_braille_dots_234568: number
const KEY_braille_dots_23457: number
const KEY_braille_dots_234578: number
const KEY_braille_dots_23458: number
const KEY_braille_dots_2346: number
const KEY_braille_dots_23467: number
const KEY_braille_dots_234678: number
const KEY_braille_dots_23468: number
const KEY_braille_dots_2347: number
const KEY_braille_dots_23478: number
const KEY_braille_dots_2348: number
const KEY_braille_dots_235: number
const KEY_braille_dots_2356: number
const KEY_braille_dots_23567: number
const KEY_braille_dots_235678: number
const KEY_braille_dots_23568: number
const KEY_braille_dots_2357: number
const KEY_braille_dots_23578: number
const KEY_braille_dots_2358: number
const KEY_braille_dots_236: number
const KEY_braille_dots_2367: number
const KEY_braille_dots_23678: number
const KEY_braille_dots_2368: number
const KEY_braille_dots_237: number
const KEY_braille_dots_2378: number
const KEY_braille_dots_238: number
const KEY_braille_dots_24: number
const KEY_braille_dots_245: number
const KEY_braille_dots_2456: number
const KEY_braille_dots_24567: number
const KEY_braille_dots_245678: number
const KEY_braille_dots_24568: number
const KEY_braille_dots_2457: number
const KEY_braille_dots_24578: number
const KEY_braille_dots_2458: number
const KEY_braille_dots_246: number
const KEY_braille_dots_2467: number
const KEY_braille_dots_24678: number
const KEY_braille_dots_2468: number
const KEY_braille_dots_247: number
const KEY_braille_dots_2478: number
const KEY_braille_dots_248: number
const KEY_braille_dots_25: number
const KEY_braille_dots_256: number
const KEY_braille_dots_2567: number
const KEY_braille_dots_25678: number
const KEY_braille_dots_2568: number
const KEY_braille_dots_257: number
const KEY_braille_dots_2578: number
const KEY_braille_dots_258: number
const KEY_braille_dots_26: number
const KEY_braille_dots_267: number
const KEY_braille_dots_2678: number
const KEY_braille_dots_268: number
const KEY_braille_dots_27: number
const KEY_braille_dots_278: number
const KEY_braille_dots_28: number
const KEY_braille_dots_3: number
const KEY_braille_dots_34: number
const KEY_braille_dots_345: number
const KEY_braille_dots_3456: number
const KEY_braille_dots_34567: number
const KEY_braille_dots_345678: number
const KEY_braille_dots_34568: number
const KEY_braille_dots_3457: number
const KEY_braille_dots_34578: number
const KEY_braille_dots_3458: number
const KEY_braille_dots_346: number
const KEY_braille_dots_3467: number
const KEY_braille_dots_34678: number
const KEY_braille_dots_3468: number
const KEY_braille_dots_347: number
const KEY_braille_dots_3478: number
const KEY_braille_dots_348: number
const KEY_braille_dots_35: number
const KEY_braille_dots_356: number
const KEY_braille_dots_3567: number
const KEY_braille_dots_35678: number
const KEY_braille_dots_3568: number
const KEY_braille_dots_357: number
const KEY_braille_dots_3578: number
const KEY_braille_dots_358: number
const KEY_braille_dots_36: number
const KEY_braille_dots_367: number
const KEY_braille_dots_3678: number
const KEY_braille_dots_368: number
const KEY_braille_dots_37: number
const KEY_braille_dots_378: number
const KEY_braille_dots_38: number
const KEY_braille_dots_4: number
const KEY_braille_dots_45: number
const KEY_braille_dots_456: number
const KEY_braille_dots_4567: number
const KEY_braille_dots_45678: number
const KEY_braille_dots_4568: number
const KEY_braille_dots_457: number
const KEY_braille_dots_4578: number
const KEY_braille_dots_458: number
const KEY_braille_dots_46: number
const KEY_braille_dots_467: number
const KEY_braille_dots_4678: number
const KEY_braille_dots_468: number
const KEY_braille_dots_47: number
const KEY_braille_dots_478: number
const KEY_braille_dots_48: number
const KEY_braille_dots_5: number
const KEY_braille_dots_56: number
const KEY_braille_dots_567: number
const KEY_braille_dots_5678: number
const KEY_braille_dots_568: number
const KEY_braille_dots_57: number
const KEY_braille_dots_578: number
const KEY_braille_dots_58: number
const KEY_braille_dots_6: number
const KEY_braille_dots_67: number
const KEY_braille_dots_678: number
const KEY_braille_dots_68: number
const KEY_braille_dots_7: number
const KEY_braille_dots_78: number
const KEY_braille_dots_8: number
const KEY_breve: number
const KEY_brokenbar: number
const KEY_c: number
const KEY_c_h: number
const KEY_cabovedot: number
const KEY_cacute: number
const KEY_careof: number
const KEY_caret: number
const KEY_caron: number
const KEY_ccaron: number
const KEY_ccedilla: number
const KEY_ccircumflex: number
const KEY_cedilla: number
const KEY_cent: number
const KEY_ch: number
const KEY_checkerboard: number
const KEY_checkmark: number
const KEY_circle: number
const KEY_club: number
const KEY_colon: number
const KEY_comma: number
const KEY_containsas: number
const KEY_copyright: number
const KEY_cr: number
const KEY_crossinglines: number
const KEY_cuberoot: number
const KEY_currency: number
const KEY_cursor: number
const KEY_d: number
const KEY_dabovedot: number
const KEY_dagger: number
const KEY_dcaron: number
const KEY_dead_A: number
const KEY_dead_E: number
const KEY_dead_I: number
const KEY_dead_O: number
const KEY_dead_U: number
const KEY_dead_a: number
const KEY_dead_abovecomma: number
const KEY_dead_abovedot: number
const KEY_dead_abovereversedcomma: number
const KEY_dead_abovering: number
const KEY_dead_aboveverticalline: number
const KEY_dead_acute: number
const KEY_dead_belowbreve: number
const KEY_dead_belowcircumflex: number
const KEY_dead_belowcomma: number
const KEY_dead_belowdiaeresis: number
const KEY_dead_belowdot: number
const KEY_dead_belowmacron: number
const KEY_dead_belowring: number
const KEY_dead_belowtilde: number
const KEY_dead_belowverticalline: number
const KEY_dead_breve: number
const KEY_dead_capital_schwa: number
const KEY_dead_caron: number
const KEY_dead_cedilla: number
const KEY_dead_circumflex: number
const KEY_dead_currency: number
const KEY_dead_dasia: number
const KEY_dead_diaeresis: number
const KEY_dead_doubleacute: number
const KEY_dead_doublegrave: number
const KEY_dead_e: number
const KEY_dead_grave: number
const KEY_dead_greek: number
const KEY_dead_hook: number
const KEY_dead_horn: number
const KEY_dead_i: number
const KEY_dead_invertedbreve: number
const KEY_dead_iota: number
const KEY_dead_longsolidusoverlay: number
const KEY_dead_lowline: number
const KEY_dead_macron: number
const KEY_dead_o: number
const KEY_dead_ogonek: number
const KEY_dead_perispomeni: number
const KEY_dead_psili: number
const KEY_dead_semivoiced_sound: number
const KEY_dead_small_schwa: number
const KEY_dead_stroke: number
const KEY_dead_tilde: number
const KEY_dead_u: number
const KEY_dead_voiced_sound: number
const KEY_decimalpoint: number
const KEY_degree: number
const KEY_diaeresis: number
const KEY_diamond: number
const KEY_digitspace: number
const KEY_dintegral: number
const KEY_division: number
const KEY_dollar: number
const KEY_doubbaselinedot: number
const KEY_doubleacute: number
const KEY_doubledagger: number
const KEY_doublelowquotemark: number
const KEY_downarrow: number
const KEY_downcaret: number
const KEY_downshoe: number
const KEY_downstile: number
const KEY_downtack: number
const KEY_dstroke: number
const KEY_e: number
const KEY_eabovedot: number
const KEY_eacute: number
const KEY_ebelowdot: number
const KEY_ecaron: number
const KEY_ecircumflex: number
const KEY_ecircumflexacute: number
const KEY_ecircumflexbelowdot: number
const KEY_ecircumflexgrave: number
const KEY_ecircumflexhook: number
const KEY_ecircumflextilde: number
const KEY_ediaeresis: number
const KEY_egrave: number
const KEY_ehook: number
const KEY_eightsubscript: number
const KEY_eightsuperior: number
const KEY_elementof: number
const KEY_ellipsis: number
const KEY_em3space: number
const KEY_em4space: number
const KEY_emacron: number
const KEY_emdash: number
const KEY_emfilledcircle: number
const KEY_emfilledrect: number
const KEY_emopencircle: number
const KEY_emopenrectangle: number
const KEY_emptyset: number
const KEY_emspace: number
const KEY_endash: number
const KEY_enfilledcircbullet: number
const KEY_enfilledsqbullet: number
const KEY_eng: number
const KEY_enopencircbullet: number
const KEY_enopensquarebullet: number
const KEY_enspace: number
const KEY_eogonek: number
const KEY_equal: number
const KEY_eth: number
const KEY_etilde: number
const KEY_exclam: number
const KEY_exclamdown: number
const KEY_ezh: number
const KEY_f: number
const KEY_fabovedot: number
const KEY_femalesymbol: number
const KEY_ff: number
const KEY_figdash: number
const KEY_filledlefttribullet: number
const KEY_filledrectbullet: number
const KEY_filledrighttribullet: number
const KEY_filledtribulletdown: number
const KEY_filledtribulletup: number
const KEY_fiveeighths: number
const KEY_fivesixths: number
const KEY_fivesubscript: number
const KEY_fivesuperior: number
const KEY_fourfifths: number
const KEY_foursubscript: number
const KEY_foursuperior: number
const KEY_fourthroot: number
const KEY_function: number
const KEY_g: number
const KEY_gabovedot: number
const KEY_gbreve: number
const KEY_gcaron: number
const KEY_gcedilla: number
const KEY_gcircumflex: number
const KEY_grave: number
const KEY_greater: number
const KEY_greaterthanequal: number
const KEY_guillemotleft: number
const KEY_guillemotright: number
const KEY_h: number
const KEY_hairspace: number
const KEY_hcircumflex: number
const KEY_heart: number
const KEY_hebrew_aleph: number
const KEY_hebrew_ayin: number
const KEY_hebrew_bet: number
const KEY_hebrew_beth: number
const KEY_hebrew_chet: number
const KEY_hebrew_dalet: number
const KEY_hebrew_daleth: number
const KEY_hebrew_doublelowline: number
const KEY_hebrew_finalkaph: number
const KEY_hebrew_finalmem: number
const KEY_hebrew_finalnun: number
const KEY_hebrew_finalpe: number
const KEY_hebrew_finalzade: number
const KEY_hebrew_finalzadi: number
const KEY_hebrew_gimel: number
const KEY_hebrew_gimmel: number
const KEY_hebrew_he: number
const KEY_hebrew_het: number
const KEY_hebrew_kaph: number
const KEY_hebrew_kuf: number
const KEY_hebrew_lamed: number
const KEY_hebrew_mem: number
const KEY_hebrew_nun: number
const KEY_hebrew_pe: number
const KEY_hebrew_qoph: number
const KEY_hebrew_resh: number
const KEY_hebrew_samech: number
const KEY_hebrew_samekh: number
const KEY_hebrew_shin: number
const KEY_hebrew_taf: number
const KEY_hebrew_taw: number
const KEY_hebrew_tet: number
const KEY_hebrew_teth: number
const KEY_hebrew_waw: number
const KEY_hebrew_yod: number
const KEY_hebrew_zade: number
const KEY_hebrew_zadi: number
const KEY_hebrew_zain: number
const KEY_hebrew_zayin: number
const KEY_hexagram: number
const KEY_horizconnector: number
const KEY_horizlinescan1: number
const KEY_horizlinescan3: number
const KEY_horizlinescan5: number
const KEY_horizlinescan7: number
const KEY_horizlinescan9: number
const KEY_hstroke: number
const KEY_ht: number
const KEY_hyphen: number
const KEY_i: number
const KEY_iTouch: number
const KEY_iacute: number
const KEY_ibelowdot: number
const KEY_ibreve: number
const KEY_icircumflex: number
const KEY_identical: number
const KEY_idiaeresis: number
const KEY_idotless: number
const KEY_ifonlyif: number
const KEY_igrave: number
const KEY_ihook: number
const KEY_imacron: number
const KEY_implies: number
const KEY_includedin: number
const KEY_includes: number
const KEY_infinity: number
const KEY_integral: number
const KEY_intersection: number
const KEY_iogonek: number
const KEY_itilde: number
const KEY_j: number
const KEY_jcircumflex: number
const KEY_jot: number
const KEY_k: number
const KEY_kana_A: number
const KEY_kana_CHI: number
const KEY_kana_E: number
const KEY_kana_FU: number
const KEY_kana_HA: number
const KEY_kana_HE: number
const KEY_kana_HI: number
const KEY_kana_HO: number
const KEY_kana_HU: number
const KEY_kana_I: number
const KEY_kana_KA: number
const KEY_kana_KE: number
const KEY_kana_KI: number
const KEY_kana_KO: number
const KEY_kana_KU: number
const KEY_kana_MA: number
const KEY_kana_ME: number
const KEY_kana_MI: number
const KEY_kana_MO: number
const KEY_kana_MU: number
const KEY_kana_N: number
const KEY_kana_NA: number
const KEY_kana_NE: number
const KEY_kana_NI: number
const KEY_kana_NO: number
const KEY_kana_NU: number
const KEY_kana_O: number
const KEY_kana_RA: number
const KEY_kana_RE: number
const KEY_kana_RI: number
const KEY_kana_RO: number
const KEY_kana_RU: number
const KEY_kana_SA: number
const KEY_kana_SE: number
const KEY_kana_SHI: number
const KEY_kana_SO: number
const KEY_kana_SU: number
const KEY_kana_TA: number
const KEY_kana_TE: number
const KEY_kana_TI: number
const KEY_kana_TO: number
const KEY_kana_TSU: number
const KEY_kana_TU: number
const KEY_kana_U: number
const KEY_kana_WA: number
const KEY_kana_WO: number
const KEY_kana_YA: number
const KEY_kana_YO: number
const KEY_kana_YU: number
const KEY_kana_a: number
const KEY_kana_closingbracket: number
const KEY_kana_comma: number
const KEY_kana_conjunctive: number
const KEY_kana_e: number
const KEY_kana_fullstop: number
const KEY_kana_i: number
const KEY_kana_middledot: number
const KEY_kana_o: number
const KEY_kana_openingbracket: number
const KEY_kana_switch: number
const KEY_kana_tsu: number
const KEY_kana_tu: number
const KEY_kana_u: number
const KEY_kana_ya: number
const KEY_kana_yo: number
const KEY_kana_yu: number
const KEY_kappa: number
const KEY_kcedilla: number
const KEY_kra: number
const KEY_l: number
const KEY_lacute: number
const KEY_latincross: number
const KEY_lbelowdot: number
const KEY_lcaron: number
const KEY_lcedilla: number
const KEY_leftanglebracket: number
const KEY_leftarrow: number
const KEY_leftcaret: number
const KEY_leftdoublequotemark: number
const KEY_leftmiddlecurlybrace: number
const KEY_leftopentriangle: number
const KEY_leftpointer: number
const KEY_leftradical: number
const KEY_leftshoe: number
const KEY_leftsinglequotemark: number
const KEY_leftt: number
const KEY_lefttack: number
const KEY_less: number
const KEY_lessthanequal: number
const KEY_lf: number
const KEY_logicaland: number
const KEY_logicalor: number
const KEY_lowleftcorner: number
const KEY_lowrightcorner: number
const KEY_lstroke: number
const KEY_m: number
const KEY_mabovedot: number
const KEY_macron: number
const KEY_malesymbol: number
const KEY_maltesecross: number
const KEY_marker: number
const KEY_masculine: number
const KEY_minus: number
const KEY_minutes: number
const KEY_mu: number
const KEY_multiply: number
const KEY_musicalflat: number
const KEY_musicalsharp: number
const KEY_n: number
const KEY_nabla: number
const KEY_nacute: number
const KEY_ncaron: number
const KEY_ncedilla: number
const KEY_ninesubscript: number
const KEY_ninesuperior: number
const KEY_nl: number
const KEY_nobreakspace: number
const KEY_notapproxeq: number
const KEY_notelementof: number
const KEY_notequal: number
const KEY_notidentical: number
const KEY_notsign: number
const KEY_ntilde: number
const KEY_numbersign: number
const KEY_numerosign: number
const KEY_o: number
const KEY_oacute: number
const KEY_obarred: number
const KEY_obelowdot: number
const KEY_ocaron: number
const KEY_ocircumflex: number
const KEY_ocircumflexacute: number
const KEY_ocircumflexbelowdot: number
const KEY_ocircumflexgrave: number
const KEY_ocircumflexhook: number
const KEY_ocircumflextilde: number
const KEY_odiaeresis: number
const KEY_odoubleacute: number
const KEY_oe: number
const KEY_ogonek: number
const KEY_ograve: number
const KEY_ohook: number
const KEY_ohorn: number
const KEY_ohornacute: number
const KEY_ohornbelowdot: number
const KEY_ohorngrave: number
const KEY_ohornhook: number
const KEY_ohorntilde: number
const KEY_omacron: number
const KEY_oneeighth: number
const KEY_onefifth: number
const KEY_onehalf: number
const KEY_onequarter: number
const KEY_onesixth: number
const KEY_onesubscript: number
const KEY_onesuperior: number
const KEY_onethird: number
const KEY_ooblique: number
const KEY_openrectbullet: number
const KEY_openstar: number
const KEY_opentribulletdown: number
const KEY_opentribulletup: number
const KEY_ordfeminine: number
const KEY_oslash: number
const KEY_otilde: number
const KEY_overbar: number
const KEY_overline: number
const KEY_p: number
const KEY_pabovedot: number
const KEY_paragraph: number
const KEY_parenleft: number
const KEY_parenright: number
const KEY_partdifferential: number
const KEY_partialderivative: number
const KEY_percent: number
const KEY_period: number
const KEY_periodcentered: number
const KEY_permille: number
const KEY_phonographcopyright: number
const KEY_plus: number
const KEY_plusminus: number
const KEY_prescription: number
const KEY_prolongedsound: number
const KEY_punctspace: number
const KEY_q: number
const KEY_quad: number
const KEY_question: number
const KEY_questiondown: number
const KEY_quotedbl: number
const KEY_quoteleft: number
const KEY_quoteright: number
const KEY_r: number
const KEY_racute: number
const KEY_radical: number
const KEY_rcaron: number
const KEY_rcedilla: number
const KEY_registered: number
const KEY_rightanglebracket: number
const KEY_rightarrow: number
const KEY_rightcaret: number
const KEY_rightdoublequotemark: number
const KEY_rightmiddlecurlybrace: number
const KEY_rightmiddlesummation: number
const KEY_rightopentriangle: number
const KEY_rightpointer: number
const KEY_rightshoe: number
const KEY_rightsinglequotemark: number
const KEY_rightt: number
const KEY_righttack: number
const KEY_s: number
const KEY_sabovedot: number
const KEY_sacute: number
const KEY_scaron: number
const KEY_scedilla: number
const KEY_schwa: number
const KEY_scircumflex: number
const KEY_script_switch: number
const KEY_seconds: number
const KEY_section: number
const KEY_semicolon: number
const KEY_semivoicedsound: number
const KEY_seveneighths: number
const KEY_sevensubscript: number
const KEY_sevensuperior: number
const KEY_signaturemark: number
const KEY_signifblank: number
const KEY_similarequal: number
const KEY_singlelowquotemark: number
const KEY_sixsubscript: number
const KEY_sixsuperior: number
const KEY_slash: number
const KEY_soliddiamond: number
const KEY_space: number
const KEY_squareroot: number
const KEY_ssharp: number
const KEY_sterling: number
const KEY_stricteq: number
const KEY_t: number
const KEY_tabovedot: number
const KEY_tcaron: number
const KEY_tcedilla: number
const KEY_telephone: number
const KEY_telephonerecorder: number
const KEY_therefore: number
const KEY_thinspace: number
const KEY_thorn: number
const KEY_threeeighths: number
const KEY_threefifths: number
const KEY_threequarters: number
const KEY_threesubscript: number
const KEY_threesuperior: number
const KEY_tintegral: number
const KEY_topintegral: number
const KEY_topleftparens: number
const KEY_topleftradical: number
const KEY_topleftsqbracket: number
const KEY_topleftsummation: number
const KEY_toprightparens: number
const KEY_toprightsqbracket: number
const KEY_toprightsummation: number
const KEY_topt: number
const KEY_topvertsummationconnector: number
const KEY_trademark: number
const KEY_trademarkincircle: number
const KEY_tslash: number
const KEY_twofifths: number
const KEY_twosubscript: number
const KEY_twosuperior: number
const KEY_twothirds: number
const KEY_u: number
const KEY_uacute: number
const KEY_ubelowdot: number
const KEY_ubreve: number
const KEY_ucircumflex: number
const KEY_udiaeresis: number
const KEY_udoubleacute: number
const KEY_ugrave: number
const KEY_uhook: number
const KEY_uhorn: number
const KEY_uhornacute: number
const KEY_uhornbelowdot: number
const KEY_uhorngrave: number
const KEY_uhornhook: number
const KEY_uhorntilde: number
const KEY_umacron: number
const KEY_underbar: number
const KEY_underscore: number
const KEY_union: number
const KEY_uogonek: number
const KEY_uparrow: number
const KEY_upcaret: number
const KEY_upleftcorner: number
const KEY_uprightcorner: number
const KEY_upshoe: number
const KEY_upstile: number
const KEY_uptack: number
const KEY_uring: number
const KEY_utilde: number
const KEY_v: number
const KEY_variation: number
const KEY_vertbar: number
const KEY_vertconnector: number
const KEY_voicedsound: number
const KEY_vt: number
const KEY_w: number
const KEY_wacute: number
const KEY_wcircumflex: number
const KEY_wdiaeresis: number
const KEY_wgrave: number
const KEY_x: number
const KEY_xabovedot: number
const KEY_y: number
const KEY_yacute: number
const KEY_ybelowdot: number
const KEY_ycircumflex: number
const KEY_ydiaeresis: number
const KEY_yen: number
const KEY_ygrave: number
const KEY_yhook: number
const KEY_ytilde: number
const KEY_z: number
const KEY_zabovedot: number
const KEY_zacute: number
const KEY_zcaron: number
const KEY_zerosubscript: number
const KEY_zerosuperior: number
const KEY_zstroke: number
const KP_0: number
const KP_1: number
const KP_2: number
const KP_3: number
const KP_4: number
const KP_5: number
const KP_6: number
const KP_7: number
const KP_8: number
const KP_9: number
const KP_Add: number
const KP_Begin: number
const KP_Decimal: number
const KP_Delete: number
const KP_Divide: number
const KP_Down: number
const KP_End: number
const KP_Enter: number
const KP_Equal: number
const KP_F1: number
const KP_F2: number
const KP_F3: number
const KP_F4: number
const KP_Home: number
const KP_Insert: number
const KP_Left: number
const KP_Multiply: number
const KP_Next: number
const KP_Page_Down: number
const KP_Page_Up: number
const KP_Prior: number
const KP_Right: number
const KP_Separator: number
const KP_Space: number
const KP_Subtract: number
const KP_Tab: number
const KP_Up: number
const Kana_Lock: number
const Kana_Shift: number
const Kanji: number
const Kanji_Bangou: number
const Katakana: number
const KbdBrightnessDown: number
const KbdBrightnessUp: number
const KbdLightOnOff: number
const Kcedilla: number
const Korean_Won: number
const L: number
const L1: number
const L10: number
const L2: number
const L3: number
const L4: number
const L5: number
const L6: number
const L7: number
const L8: number
const L9: number
const Lacute: number
const Last_Virtual_Screen: number
const Launch0: number
const Launch1: number
const Launch2: number
const Launch3: number
const Launch4: number
const Launch5: number
const Launch6: number
const Launch7: number
const Launch8: number
const Launch9: number
const LaunchA: number
const LaunchB: number
const LaunchC: number
const LaunchD: number
const LaunchE: number
const LaunchF: number
const Lbelowdot: number
const Lcaron: number
const Lcedilla: number
const Left: number
const LightBulb: number
const Linefeed: number
const LiraSign: number
const LogGrabInfo: number
const LogOff: number
const LogWindowTree: number
const Lstroke: number
const M: number
const MAJOR_VERSION: number
const MICRO_VERSION: number
const MINOR_VERSION: number
const Mabovedot: number
const Macedonia_DSE: number
const Macedonia_GJE: number
const Macedonia_KJE: number
const Macedonia_dse: number
const Macedonia_gje: number
const Macedonia_kje: number
const Mae_Koho: number
const Mail: number
const MailForward: number
const Market: number
const Massyo: number
const Meeting: number
const Memo: number
const Menu: number
const MenuKB: number
const MenuPB: number
const Messenger: number
const Meta_L: number
const Meta_R: number
const MillSign: number
const ModeLock: number
const Mode_switch: number
const MonBrightnessDown: number
const MonBrightnessUp: number
const MouseKeys_Accel_Enable: number
const MouseKeys_Enable: number
const Muhenkan: number
const Multi_key: number
const MultipleCandidate: number
const Music: number
const MyComputer: number
const MySites: number
const N: number
const NO_FPU: number
const Nacute: number
const NairaSign: number
const Ncaron: number
const Ncedilla: number
const New: number
const NewSheqelSign: number
const News: number
const Next: number
const Next_VMode: number
const Next_Virtual_Screen: number
const Ntilde: number
const Num_Lock: number
const O: number
const OE: number
const Oacute: number
const Obarred: number
const Obelowdot: number
const Ocaron: number
const Ocircumflex: number
const Ocircumflexacute: number
const Ocircumflexbelowdot: number
const Ocircumflexgrave: number
const Ocircumflexhook: number
const Ocircumflextilde: number
const Odiaeresis: number
const Odoubleacute: number
const OfficeHome: number
const Ograve: number
const Ohook: number
const Ohorn: number
const Ohornacute: number
const Ohornbelowdot: number
const Ohorngrave: number
const Ohornhook: number
const Ohorntilde: number
const Omacron: number
const Ooblique: number
const Open: number
const OpenURL: number
const Option: number
const Oslash: number
const Otilde: number
const Overlay1_Enable: number
const Overlay2_Enable: number
const P: number
const PATH_RELATIVE: number
const PRIORITY_REDRAW: number
const Pabovedot: number
const Page_Down: number
const Page_Up: number
const Paste: number
const Pause: number
const PesetaSign: number
const Phone: number
const Pictures: number
const Pointer_Accelerate: number
const Pointer_Button1: number
const Pointer_Button2: number
const Pointer_Button3: number
const Pointer_Button4: number
const Pointer_Button5: number
const Pointer_Button_Dflt: number
const Pointer_DblClick1: number
const Pointer_DblClick2: number
const Pointer_DblClick3: number
const Pointer_DblClick4: number
const Pointer_DblClick5: number
const Pointer_DblClick_Dflt: number
const Pointer_DfltBtnNext: number
const Pointer_DfltBtnPrev: number
const Pointer_Down: number
const Pointer_DownLeft: number
const Pointer_DownRight: number
const Pointer_Drag1: number
const Pointer_Drag2: number
const Pointer_Drag3: number
const Pointer_Drag4: number
const Pointer_Drag5: number
const Pointer_Drag_Dflt: number
const Pointer_EnableKeys: number
const Pointer_Left: number
const Pointer_Right: number
const Pointer_Up: number
const Pointer_UpLeft: number
const Pointer_UpRight: number
const PowerDown: number
const PowerOff: number
const Prev_VMode: number
const Prev_Virtual_Screen: number
const PreviousCandidate: number
const Print: number
const Prior: number
const Q: number
const R: number
const R1: number
const R10: number
const R11: number
const R12: number
const R13: number
const R14: number
const R15: number
const R2: number
const R3: number
const R4: number
const R5: number
const R6: number
const R7: number
const R8: number
const R9: number
const Racute: number
const Rcaron: number
const Rcedilla: number
const Red: number
const Redo: number
const Refresh: number
const Reload: number
const RepeatKeys_Enable: number
const Reply: number
const Return: number
const Right: number
const RockerDown: number
const RockerEnter: number
const RockerUp: number
const Romaji: number
const RotateWindows: number
const RotationKB: number
const RotationPB: number
const RupeeSign: number
const S: number
const SCHWA: number
const STAGE_TYPE: string
const Sabovedot: number
const Sacute: number
const Save: number
const Scaron: number
const Scedilla: number
const Scircumflex: number
const ScreenSaver: number
const ScrollClick: number
const ScrollDown: number
const ScrollUp: number
const Scroll_Lock: number
const Search: number
const Select: number
const SelectButton: number
const Send: number
const Serbian_DJE: number
const Serbian_DZE: number
const Serbian_JE: number
const Serbian_LJE: number
const Serbian_NJE: number
const Serbian_TSHE: number
const Serbian_dje: number
const Serbian_dze: number
const Serbian_je: number
const Serbian_lje: number
const Serbian_nje: number
const Serbian_tshe: number
const Shift_L: number
const Shift_Lock: number
const Shift_R: number
const Shop: number
const SingleCandidate: number
const Sinh_a: number
const Sinh_aa: number
const Sinh_aa2: number
const Sinh_ae: number
const Sinh_ae2: number
const Sinh_aee: number
const Sinh_aee2: number
const Sinh_ai: number
const Sinh_ai2: number
const Sinh_al: number
const Sinh_au: number
const Sinh_au2: number
const Sinh_ba: number
const Sinh_bha: number
const Sinh_ca: number
const Sinh_cha: number
const Sinh_dda: number
const Sinh_ddha: number
const Sinh_dha: number
const Sinh_dhha: number
const Sinh_e: number
const Sinh_e2: number
const Sinh_ee: number
const Sinh_ee2: number
const Sinh_fa: number
const Sinh_ga: number
const Sinh_gha: number
const Sinh_h2: number
const Sinh_ha: number
const Sinh_i: number
const Sinh_i2: number
const Sinh_ii: number
const Sinh_ii2: number
const Sinh_ja: number
const Sinh_jha: number
const Sinh_jnya: number
const Sinh_ka: number
const Sinh_kha: number
const Sinh_kunddaliya: number
const Sinh_la: number
const Sinh_lla: number
const Sinh_lu: number
const Sinh_lu2: number
const Sinh_luu: number
const Sinh_luu2: number
const Sinh_ma: number
const Sinh_mba: number
const Sinh_na: number
const Sinh_ndda: number
const Sinh_ndha: number
const Sinh_ng: number
const Sinh_ng2: number
const Sinh_nga: number
const Sinh_nja: number
const Sinh_nna: number
const Sinh_nya: number
const Sinh_o: number
const Sinh_o2: number
const Sinh_oo: number
const Sinh_oo2: number
const Sinh_pa: number
const Sinh_pha: number
const Sinh_ra: number
const Sinh_ri: number
const Sinh_rii: number
const Sinh_ru2: number
const Sinh_ruu2: number
const Sinh_sa: number
const Sinh_sha: number
const Sinh_ssha: number
const Sinh_tha: number
const Sinh_thha: number
const Sinh_tta: number
const Sinh_ttha: number
const Sinh_u: number
const Sinh_u2: number
const Sinh_uu: number
const Sinh_uu2: number
const Sinh_va: number
const Sinh_ya: number
const Sleep: number
const SlowKeys_Enable: number
const Spell: number
const SplitScreen: number
const Standby: number
const Start: number
const StickyKeys_Enable: number
const Stop: number
const Subtitle: number
const Super_L: number
const Super_R: number
const Support: number
const Suspend: number
const Switch_VT_1: number
const Switch_VT_10: number
const Switch_VT_11: number
const Switch_VT_12: number
const Switch_VT_2: number
const Switch_VT_3: number
const Switch_VT_4: number
const Switch_VT_5: number
const Switch_VT_6: number
const Switch_VT_7: number
const Switch_VT_8: number
const Switch_VT_9: number
const Sys_Req: number
const T: number
const THORN: number
const Tab: number
const Tabovedot: number
const TaskPane: number
const Tcaron: number
const Tcedilla: number
const Terminal: number
const Terminate_Server: number
const Thai_baht: number
const Thai_bobaimai: number
const Thai_chochan: number
const Thai_chochang: number
const Thai_choching: number
const Thai_chochoe: number
const Thai_dochada: number
const Thai_dodek: number
const Thai_fofa: number
const Thai_fofan: number
const Thai_hohip: number
const Thai_honokhuk: number
const Thai_khokhai: number
const Thai_khokhon: number
const Thai_khokhuat: number
const Thai_khokhwai: number
const Thai_khorakhang: number
const Thai_kokai: number
const Thai_lakkhangyao: number
const Thai_lekchet: number
const Thai_lekha: number
const Thai_lekhok: number
const Thai_lekkao: number
const Thai_leknung: number
const Thai_lekpaet: number
const Thai_leksam: number
const Thai_leksi: number
const Thai_leksong: number
const Thai_leksun: number
const Thai_lochula: number
const Thai_loling: number
const Thai_lu: number
const Thai_maichattawa: number
const Thai_maiek: number
const Thai_maihanakat: number
const Thai_maihanakat_maitho: number
const Thai_maitaikhu: number
const Thai_maitho: number
const Thai_maitri: number
const Thai_maiyamok: number
const Thai_moma: number
const Thai_ngongu: number
const Thai_nikhahit: number
const Thai_nonen: number
const Thai_nonu: number
const Thai_oang: number
const Thai_paiyannoi: number
const Thai_phinthu: number
const Thai_phophan: number
const Thai_phophung: number
const Thai_phosamphao: number
const Thai_popla: number
const Thai_rorua: number
const Thai_ru: number
const Thai_saraa: number
const Thai_saraaa: number
const Thai_saraae: number
const Thai_saraaimaimalai: number
const Thai_saraaimaimuan: number
const Thai_saraam: number
const Thai_sarae: number
const Thai_sarai: number
const Thai_saraii: number
const Thai_sarao: number
const Thai_sarau: number
const Thai_saraue: number
const Thai_sarauee: number
const Thai_sarauu: number
const Thai_sorusi: number
const Thai_sosala: number
const Thai_soso: number
const Thai_sosua: number
const Thai_thanthakhat: number
const Thai_thonangmontho: number
const Thai_thophuthao: number
const Thai_thothahan: number
const Thai_thothan: number
const Thai_thothong: number
const Thai_thothung: number
const Thai_topatak: number
const Thai_totao: number
const Thai_wowaen: number
const Thai_yoyak: number
const Thai_yoying: number
const Thorn: number
const Time: number
const ToDoList: number
const Tools: number
const TopMenu: number
const TouchpadOff: number
const TouchpadOn: number
const TouchpadToggle: number
const Touroku: number
const Travel: number
const Tslash: number
const U: number
const UWB: number
const Uacute: number
const Ubelowdot: number
const Ubreve: number
const Ucircumflex: number
const Udiaeresis: number
const Udoubleacute: number
const Ugrave: number
const Uhook: number
const Uhorn: number
const Uhornacute: number
const Uhornbelowdot: number
const Uhorngrave: number
const Uhornhook: number
const Uhorntilde: number
const Ukrainian_GHE_WITH_UPTURN: number
const Ukrainian_I: number
const Ukrainian_IE: number
const Ukrainian_YI: number
const Ukrainian_ghe_with_upturn: number
const Ukrainian_i: number
const Ukrainian_ie: number
const Ukrainian_yi: number
const Ukranian_I: number
const Ukranian_JE: number
const Ukranian_YI: number
const Ukranian_i: number
const Ukranian_je: number
const Ukranian_yi: number
const Umacron: number
const Undo: number
const Ungrab: number
const Uogonek: number
const Up: number
const Uring: number
const User1KB: number
const User2KB: number
const UserPB: number
const Utilde: number
const V: number
const VERSION: number
const VERSION_HEX: number
const VERSION_S: string
const VendorHome: number
const Video: number
const View: number
const VoidSymbol: number
const W: number
const WINDOWING_EGL: string
const WINDOWING_GDK: string
const WINDOWING_GLX: string
const WINDOWING_WAYLAND: string
const WINDOWING_X11: string
const WLAN: number
const WWW: number
const Wacute: number
const WakeUp: number
const Wcircumflex: number
const Wdiaeresis: number
const WebCam: number
const Wgrave: number
const WheelButton: number
const WindowClear: number
const WonSign: number
const Word: number
const X: number
const Xabovedot: number
const Xfer: number
const Y: number
const Yacute: number
const Ybelowdot: number
const Ycircumflex: number
const Ydiaeresis: number
const Yellow: number
const Ygrave: number
const Yhook: number
const Ytilde: number
const Z: number
const Zabovedot: number
const Zacute: number
const Zcaron: number
const Zen_Koho: number
const Zenkaku: number
const Zenkaku_Hankaku: number
const ZoomIn: number
const ZoomOut: number
const Zstroke: number
const a: number
const aacute: number
const abelowdot: number
const abovedot: number
const abreve: number
const abreveacute: number
const abrevebelowdot: number
const abrevegrave: number
const abrevehook: number
const abrevetilde: number
const acircumflex: number
const acircumflexacute: number
const acircumflexbelowdot: number
const acircumflexgrave: number
const acircumflexhook: number
const acircumflextilde: number
const acute: number
const adiaeresis: number
const ae: number
const agrave: number
const ahook: number
const amacron: number
const ampersand: number
const aogonek: number
const apostrophe: number
const approxeq: number
const approximate: number
const aring: number
const asciicircum: number
const asciitilde: number
const asterisk: number
const at: number
const atilde: number
const b: number
const babovedot: number
const backslash: number
const ballotcross: number
const bar: number
const because: number
const blank: number
const botintegral: number
const botleftparens: number
const botleftsqbracket: number
const botleftsummation: number
const botrightparens: number
const botrightsqbracket: number
const botrightsummation: number
const bott: number
const botvertsummationconnector: number
const braceleft: number
const braceright: number
const bracketleft: number
const bracketright: number
const braille_blank: number
const braille_dot_1: number
const braille_dot_10: number
const braille_dot_2: number
const braille_dot_3: number
const braille_dot_4: number
const braille_dot_5: number
const braille_dot_6: number
const braille_dot_7: number
const braille_dot_8: number
const braille_dot_9: number
const braille_dots_1: number
const braille_dots_12: number
const braille_dots_123: number
const braille_dots_1234: number
const braille_dots_12345: number
const braille_dots_123456: number
const braille_dots_1234567: number
const braille_dots_12345678: number
const braille_dots_1234568: number
const braille_dots_123457: number
const braille_dots_1234578: number
const braille_dots_123458: number
const braille_dots_12346: number
const braille_dots_123467: number
const braille_dots_1234678: number
const braille_dots_123468: number
const braille_dots_12347: number
const braille_dots_123478: number
const braille_dots_12348: number
const braille_dots_1235: number
const braille_dots_12356: number
const braille_dots_123567: number
const braille_dots_1235678: number
const braille_dots_123568: number
const braille_dots_12357: number
const braille_dots_123578: number
const braille_dots_12358: number
const braille_dots_1236: number
const braille_dots_12367: number
const braille_dots_123678: number
const braille_dots_12368: number
const braille_dots_1237: number
const braille_dots_12378: number
const braille_dots_1238: number
const braille_dots_124: number
const braille_dots_1245: number
const braille_dots_12456: number
const braille_dots_124567: number
const braille_dots_1245678: number
const braille_dots_124568: number
const braille_dots_12457: number
const braille_dots_124578: number
const braille_dots_12458: number
const braille_dots_1246: number
const braille_dots_12467: number
const braille_dots_124678: number
const braille_dots_12468: number
const braille_dots_1247: number
const braille_dots_12478: number
const braille_dots_1248: number
const braille_dots_125: number
const braille_dots_1256: number
const braille_dots_12567: number
const braille_dots_125678: number
const braille_dots_12568: number
const braille_dots_1257: number
const braille_dots_12578: number
const braille_dots_1258: number
const braille_dots_126: number
const braille_dots_1267: number
const braille_dots_12678: number
const braille_dots_1268: number
const braille_dots_127: number
const braille_dots_1278: number
const braille_dots_128: number
const braille_dots_13: number
const braille_dots_134: number
const braille_dots_1345: number
const braille_dots_13456: number
const braille_dots_134567: number
const braille_dots_1345678: number
const braille_dots_134568: number
const braille_dots_13457: number
const braille_dots_134578: number
const braille_dots_13458: number
const braille_dots_1346: number
const braille_dots_13467: number
const braille_dots_134678: number
const braille_dots_13468: number
const braille_dots_1347: number
const braille_dots_13478: number
const braille_dots_1348: number
const braille_dots_135: number
const braille_dots_1356: number
const braille_dots_13567: number
const braille_dots_135678: number
const braille_dots_13568: number
const braille_dots_1357: number
const braille_dots_13578: number
const braille_dots_1358: number
const braille_dots_136: number
const braille_dots_1367: number
const braille_dots_13678: number
const braille_dots_1368: number
const braille_dots_137: number
const braille_dots_1378: number
const braille_dots_138: number
const braille_dots_14: number
const braille_dots_145: number
const braille_dots_1456: number
const braille_dots_14567: number
const braille_dots_145678: number
const braille_dots_14568: number
const braille_dots_1457: number
const braille_dots_14578: number
const braille_dots_1458: number
const braille_dots_146: number
const braille_dots_1467: number
const braille_dots_14678: number
const braille_dots_1468: number
const braille_dots_147: number
const braille_dots_1478: number
const braille_dots_148: number
const braille_dots_15: number
const braille_dots_156: number
const braille_dots_1567: number
const braille_dots_15678: number
const braille_dots_1568: number
const braille_dots_157: number
const braille_dots_1578: number
const braille_dots_158: number
const braille_dots_16: number
const braille_dots_167: number
const braille_dots_1678: number
const braille_dots_168: number
const braille_dots_17: number
const braille_dots_178: number
const braille_dots_18: number
const braille_dots_2: number
const braille_dots_23: number
const braille_dots_234: number
const braille_dots_2345: number
const braille_dots_23456: number
const braille_dots_234567: number
const braille_dots_2345678: number
const braille_dots_234568: number
const braille_dots_23457: number
const braille_dots_234578: number
const braille_dots_23458: number
const braille_dots_2346: number
const braille_dots_23467: number
const braille_dots_234678: number
const braille_dots_23468: number
const braille_dots_2347: number
const braille_dots_23478: number
const braille_dots_2348: number
const braille_dots_235: number
const braille_dots_2356: number
const braille_dots_23567: number
const braille_dots_235678: number
const braille_dots_23568: number
const braille_dots_2357: number
const braille_dots_23578: number
const braille_dots_2358: number
const braille_dots_236: number
const braille_dots_2367: number
const braille_dots_23678: number
const braille_dots_2368: number
const braille_dots_237: number
const braille_dots_2378: number
const braille_dots_238: number
const braille_dots_24: number
const braille_dots_245: number
const braille_dots_2456: number
const braille_dots_24567: number
const braille_dots_245678: number
const braille_dots_24568: number
const braille_dots_2457: number
const braille_dots_24578: number
const braille_dots_2458: number
const braille_dots_246: number
const braille_dots_2467: number
const braille_dots_24678: number
const braille_dots_2468: number
const braille_dots_247: number
const braille_dots_2478: number
const braille_dots_248: number
const braille_dots_25: number
const braille_dots_256: number
const braille_dots_2567: number
const braille_dots_25678: number
const braille_dots_2568: number
const braille_dots_257: number
const braille_dots_2578: number
const braille_dots_258: number
const braille_dots_26: number
const braille_dots_267: number
const braille_dots_2678: number
const braille_dots_268: number
const braille_dots_27: number
const braille_dots_278: number
const braille_dots_28: number
const braille_dots_3: number
const braille_dots_34: number
const braille_dots_345: number
const braille_dots_3456: number
const braille_dots_34567: number
const braille_dots_345678: number
const braille_dots_34568: number
const braille_dots_3457: number
const braille_dots_34578: number
const braille_dots_3458: number
const braille_dots_346: number
const braille_dots_3467: number
const braille_dots_34678: number
const braille_dots_3468: number
const braille_dots_347: number
const braille_dots_3478: number
const braille_dots_348: number
const braille_dots_35: number
const braille_dots_356: number
const braille_dots_3567: number
const braille_dots_35678: number
const braille_dots_3568: number
const braille_dots_357: number
const braille_dots_3578: number
const braille_dots_358: number
const braille_dots_36: number
const braille_dots_367: number
const braille_dots_3678: number
const braille_dots_368: number
const braille_dots_37: number
const braille_dots_378: number
const braille_dots_38: number
const braille_dots_4: number
const braille_dots_45: number
const braille_dots_456: number
const braille_dots_4567: number
const braille_dots_45678: number
const braille_dots_4568: number
const braille_dots_457: number
const braille_dots_4578: number
const braille_dots_458: number
const braille_dots_46: number
const braille_dots_467: number
const braille_dots_4678: number
const braille_dots_468: number
const braille_dots_47: number
const braille_dots_478: number
const braille_dots_48: number
const braille_dots_5: number
const braille_dots_56: number
const braille_dots_567: number
const braille_dots_5678: number
const braille_dots_568: number
const braille_dots_57: number
const braille_dots_578: number
const braille_dots_58: number
const braille_dots_6: number
const braille_dots_67: number
const braille_dots_678: number
const braille_dots_68: number
const braille_dots_7: number
const braille_dots_78: number
const braille_dots_8: number
const breve: number
const brokenbar: number
const c: number
const c_h: number
const cabovedot: number
const cacute: number
const careof: number
const caret: number
const caron: number
const ccaron: number
const ccedilla: number
const ccircumflex: number
const cedilla: number
const cent: number
const ch: number
const checkerboard: number
const checkmark: number
const circle: number
const club: number
const colon: number
const comma: number
const containsas: number
const copyright: number
const cr: number
const crossinglines: number
const cuberoot: number
const currency: number
const cursor: number
const d: number
const dabovedot: number
const dagger: number
const dcaron: number
const dead_A: number
const dead_E: number
const dead_I: number
const dead_O: number
const dead_U: number
const dead_a: number
const dead_abovecomma: number
const dead_abovedot: number
const dead_abovereversedcomma: number
const dead_abovering: number
const dead_aboveverticalline: number
const dead_acute: number
const dead_belowbreve: number
const dead_belowcircumflex: number
const dead_belowcomma: number
const dead_belowdiaeresis: number
const dead_belowdot: number
const dead_belowmacron: number
const dead_belowring: number
const dead_belowtilde: number
const dead_belowverticalline: number
const dead_breve: number
const dead_capital_schwa: number
const dead_caron: number
const dead_cedilla: number
const dead_circumflex: number
const dead_currency: number
const dead_dasia: number
const dead_diaeresis: number
const dead_doubleacute: number
const dead_doublegrave: number
const dead_e: number
const dead_grave: number
const dead_greek: number
const dead_hook: number
const dead_horn: number
const dead_i: number
const dead_invertedbreve: number
const dead_iota: number
const dead_longsolidusoverlay: number
const dead_lowline: number
const dead_macron: number
const dead_o: number
const dead_ogonek: number
const dead_perispomeni: number
const dead_psili: number
const dead_semivoiced_sound: number
const dead_small_schwa: number
const dead_stroke: number
const dead_tilde: number
const dead_u: number
const dead_voiced_sound: number
const decimalpoint: number
const degree: number
const diaeresis: number
const diamond: number
const digitspace: number
const dintegral: number
const division: number
const dollar: number
const doubbaselinedot: number
const doubleacute: number
const doubledagger: number
const doublelowquotemark: number
const downarrow: number
const downcaret: number
const downshoe: number
const downstile: number
const downtack: number
const dstroke: number
const e: number
const eabovedot: number
const eacute: number
const ebelowdot: number
const ecaron: number
const ecircumflex: number
const ecircumflexacute: number
const ecircumflexbelowdot: number
const ecircumflexgrave: number
const ecircumflexhook: number
const ecircumflextilde: number
const ediaeresis: number
const egrave: number
const ehook: number
const eightsubscript: number
const eightsuperior: number
const elementof: number
const ellipsis: number
const em3space: number
const em4space: number
const emacron: number
const emdash: number
const emfilledcircle: number
const emfilledrect: number
const emopencircle: number
const emopenrectangle: number
const emptyset: number
const emspace: number
const endash: number
const enfilledcircbullet: number
const enfilledsqbullet: number
const eng: number
const enopencircbullet: number
const enopensquarebullet: number
const enspace: number
const eogonek: number
const equal: number
const eth: number
const etilde: number
const exclam: number
const exclamdown: number
const ezh: number
const f: number
const fabovedot: number
const femalesymbol: number
const ff: number
const figdash: number
const filledlefttribullet: number
const filledrectbullet: number
const filledrighttribullet: number
const filledtribulletdown: number
const filledtribulletup: number
const fiveeighths: number
const fivesixths: number
const fivesubscript: number
const fivesuperior: number
const fourfifths: number
const foursubscript: number
const foursuperior: number
const fourthroot: number
const function_: number
const g: number
const gabovedot: number
const gbreve: number
const gcaron: number
const gcedilla: number
const gcircumflex: number
const grave: number
const greater: number
const greaterthanequal: number
const guillemotleft: number
const guillemotright: number
const h: number
const hairspace: number
const hcircumflex: number
const heart: number
const hebrew_aleph: number
const hebrew_ayin: number
const hebrew_bet: number
const hebrew_beth: number
const hebrew_chet: number
const hebrew_dalet: number
const hebrew_daleth: number
const hebrew_doublelowline: number
const hebrew_finalkaph: number
const hebrew_finalmem: number
const hebrew_finalnun: number
const hebrew_finalpe: number
const hebrew_finalzade: number
const hebrew_finalzadi: number
const hebrew_gimel: number
const hebrew_gimmel: number
const hebrew_he: number
const hebrew_het: number
const hebrew_kaph: number
const hebrew_kuf: number
const hebrew_lamed: number
const hebrew_mem: number
const hebrew_nun: number
const hebrew_pe: number
const hebrew_qoph: number
const hebrew_resh: number
const hebrew_samech: number
const hebrew_samekh: number
const hebrew_shin: number
const hebrew_taf: number
const hebrew_taw: number
const hebrew_tet: number
const hebrew_teth: number
const hebrew_waw: number
const hebrew_yod: number
const hebrew_zade: number
const hebrew_zadi: number
const hebrew_zain: number
const hebrew_zayin: number
const hexagram: number
const horizconnector: number
const horizlinescan1: number
const horizlinescan3: number
const horizlinescan5: number
const horizlinescan7: number
const horizlinescan9: number
const hstroke: number
const ht: number
const hyphen: number
const i: number
const iTouch: number
const iacute: number
const ibelowdot: number
const ibreve: number
const icircumflex: number
const identical: number
const idiaeresis: number
const idotless: number
const ifonlyif: number
const igrave: number
const ihook: number
const imacron: number
const implies: number
const includedin: number
const includes: number
const infinity: number
const integral: number
const intersection: number
const iogonek: number
const itilde: number
const j: number
const jcircumflex: number
const jot: number
const k: number
const kana_A: number
const kana_CHI: number
const kana_E: number
const kana_FU: number
const kana_HA: number
const kana_HE: number
const kana_HI: number
const kana_HO: number
const kana_HU: number
const kana_I: number
const kana_KA: number
const kana_KE: number
const kana_KI: number
const kana_KO: number
const kana_KU: number
const kana_MA: number
const kana_ME: number
const kana_MI: number
const kana_MO: number
const kana_MU: number
const kana_N: number
const kana_NA: number
const kana_NE: number
const kana_NI: number
const kana_NO: number
const kana_NU: number
const kana_O: number
const kana_RA: number
const kana_RE: number
const kana_RI: number
const kana_RO: number
const kana_RU: number
const kana_SA: number
const kana_SE: number
const kana_SHI: number
const kana_SO: number
const kana_SU: number
const kana_TA: number
const kana_TE: number
const kana_TI: number
const kana_TO: number
const kana_TSU: number
const kana_TU: number
const kana_U: number
const kana_WA: number
const kana_WO: number
const kana_YA: number
const kana_YO: number
const kana_YU: number
const kana_a: number
const kana_closingbracket: number
const kana_comma: number
const kana_conjunctive: number
const kana_e: number
const kana_fullstop: number
const kana_i: number
const kana_middledot: number
const kana_o: number
const kana_openingbracket: number
const kana_switch: number
const kana_tsu: number
const kana_tu: number
const kana_u: number
const kana_ya: number
const kana_yo: number
const kana_yu: number
const kappa: number
const kcedilla: number
const kra: number
const l: number
const lacute: number
const latincross: number
const lbelowdot: number
const lcaron: number
const lcedilla: number
const leftanglebracket: number
const leftarrow: number
const leftcaret: number
const leftdoublequotemark: number
const leftmiddlecurlybrace: number
const leftopentriangle: number
const leftpointer: number
const leftradical: number
const leftshoe: number
const leftsinglequotemark: number
const leftt: number
const lefttack: number
const less: number
const lessthanequal: number
const lf: number
const logicaland: number
const logicalor: number
const lowleftcorner: number
const lowrightcorner: number
const lstroke: number
const m: number
const mabovedot: number
const macron: number
const malesymbol: number
const maltesecross: number
const marker: number
const masculine: number
const minus: number
const minutes: number
const mu: number
const multiply: number
const musicalflat: number
const musicalsharp: number
const n: number
const nabla: number
const nacute: number
const ncaron: number
const ncedilla: number
const ninesubscript: number
const ninesuperior: number
const nl: number
const nobreakspace: number
const notapproxeq: number
const notelementof: number
const notequal: number
const notidentical: number
const notsign: number
const ntilde: number
const numbersign: number
const numerosign: number
const o: number
const oacute: number
const obarred: number
const obelowdot: number
const ocaron: number
const ocircumflex: number
const ocircumflexacute: number
const ocircumflexbelowdot: number
const ocircumflexgrave: number
const ocircumflexhook: number
const ocircumflextilde: number
const odiaeresis: number
const odoubleacute: number
const oe: number
const ogonek: number
const ograve: number
const ohook: number
const ohorn: number
const ohornacute: number
const ohornbelowdot: number
const ohorngrave: number
const ohornhook: number
const ohorntilde: number
const omacron: number
const oneeighth: number
const onefifth: number
const onehalf: number
const onequarter: number
const onesixth: number
const onesubscript: number
const onesuperior: number
const onethird: number
const ooblique: number
const openrectbullet: number
const openstar: number
const opentribulletdown: number
const opentribulletup: number
const ordfeminine: number
const oslash: number
const otilde: number
const overbar: number
const overline: number
const p: number
const pabovedot: number
const paragraph: number
const parenleft: number
const parenright: number
const partdifferential: number
const partialderivative: number
const percent: number
const period: number
const periodcentered: number
const permille: number
const phonographcopyright: number
const plus: number
const plusminus: number
const prescription: number
const prolongedsound: number
const punctspace: number
const q: number
const quad: number
const question: number
const questiondown: number
const quotedbl: number
const quoteleft: number
const quoteright: number
const r: number
const racute: number
const radical: number
const rcaron: number
const rcedilla: number
const registered: number
const rightanglebracket: number
const rightarrow: number
const rightcaret: number
const rightdoublequotemark: number
const rightmiddlecurlybrace: number
const rightmiddlesummation: number
const rightopentriangle: number
const rightpointer: number
const rightshoe: number
const rightsinglequotemark: number
const rightt: number
const righttack: number
const s: number
const sabovedot: number
const sacute: number
const scaron: number
const scedilla: number
const schwa: number
const scircumflex: number
const script_switch: number
const seconds: number
const section: number
const semicolon: number
const semivoicedsound: number
const seveneighths: number
const sevensubscript: number
const sevensuperior: number
const signaturemark: number
const signifblank: number
const similarequal: number
const singlelowquotemark: number
const sixsubscript: number
const sixsuperior: number
const slash: number
const soliddiamond: number
const space: number
const squareroot: number
const ssharp: number
const sterling: number
const stricteq: number
const t: number
const tabovedot: number
const tcaron: number
const tcedilla: number
const telephone: number
const telephonerecorder: number
const therefore: number
const thinspace: number
const thorn: number
const threeeighths: number
const threefifths: number
const threequarters: number
const threesubscript: number
const threesuperior: number
const tintegral: number
const topintegral: number
const topleftparens: number
const topleftradical: number
const topleftsqbracket: number
const topleftsummation: number
const toprightparens: number
const toprightsqbracket: number
const toprightsummation: number
const topt: number
const topvertsummationconnector: number
const trademark: number
const trademarkincircle: number
const tslash: number
const twofifths: number
const twosubscript: number
const twosuperior: number
const twothirds: number
const u: number
const uacute: number
const ubelowdot: number
const ubreve: number
const ucircumflex: number
const udiaeresis: number
const udoubleacute: number
const ugrave: number
const uhook: number
const uhorn: number
const uhornacute: number
const uhornbelowdot: number
const uhorngrave: number
const uhornhook: number
const uhorntilde: number
const umacron: number
const underbar: number
const underscore: number
const union: number
const uogonek: number
const uparrow: number
const upcaret: number
const upleftcorner: number
const uprightcorner: number
const upshoe: number
const upstile: number
const uptack: number
const uring: number
const utilde: number
const v: number
const variation: number
const vertbar: number
const vertconnector: number
const voicedsound: number
const vt: number
const w: number
const wacute: number
const wcircumflex: number
const wdiaeresis: number
const wgrave: number
const x: number
const xabovedot: number
const y: number
const yacute: number
const ybelowdot: number
const ycircumflex: number
const ydiaeresis: number
const yen: number
const ygrave: number
const yhook: number
const ytilde: number
const z: number
const zabovedot: number
const zacute: number
const zcaron: number
const zerosubscript: number
const zerosuperior: number
const zstroke: number
function actor_box_alloc(): ActorBox
function base_init(): void
function cairo_clear(cr: cairo.Context): void
function cairo_set_source_color(cr: cairo.Context, color: Color): void
function check_version(major: number, minor: number, micro: number): boolean
function check_windowing_backend(backend_type: string): boolean
function clear_glyph_cache(): void
function color_from_hls(hue: number, luminance: number, saturation: number): /* color */ Color
function color_from_pixel(pixel: number): /* color */ Color
function color_from_string(str: string): [ /* returnType */ boolean, /* color */ Color ]
function color_get_static(color: StaticColor): Color
function container_class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
function container_class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
function disable_accessibility(): void
function do_event(event: Event): void
function event_add_filter(stage: Stage | null, func: EventFilterFunc): number
function event_get(): Event
function event_peek(): Event
function event_remove_filter(id: number): void
function events_pending(): boolean
function feature_available(feature: FeatureFlags): boolean
function feature_get_all(): FeatureFlags
function frame_source_add(priority: number, fps: number, func: GLib.SourceFunc): number
function get_accessibility_enabled(): boolean
function get_actor_by_gid(id_: number): Actor
function get_current_event(): Event
function get_current_event_time(): number
function get_debug_enabled(): boolean
function get_default_backend(): Backend
function get_default_frame_rate(): number
function get_default_text_direction(): TextDirection
function get_font_flags(): FontFlags
function get_font_map(): Pango.FontMap
function get_input_device_for_id(id_: number): InputDevice
function get_keyboard_grab(): Actor
function get_motion_events_enabled(): boolean
function get_pointer_grab(): Actor
function get_script_id(gobject: GObject.Object): string
function get_show_fps(): boolean
function get_timestamp(): number
function grab_keyboard(actor: Actor): void
function grab_pointer(actor: Actor): void
function grab_pointer_for_device(actor: Actor, id_: number): void
function image_error_quark(): GLib.Quark
function init(argv?: string[] | null): [ /* returnType */ InitError, /* argv */ string[] | null ]
function init_error_quark(): GLib.Quark
function init_with_args(argv?: string[] | null, parameter_string?: string | null, entries?: GLib.OptionEntry[] | null, translation_domain?: string | null): [ /* returnType */ InitError, /* argv */ string[] | null ]
function keysym_to_unicode(keyval: number): number
function main(): void
function main_level(): number
function main_quit(): void
function matrix_alloc(): Matrix
function point_zero(): Point
function rect_zero(): Rect
function redraw(stage: Stage): void
function script_error_quark(): GLib.Quark
function set_default_frame_rate(frames_per_sec: number): void
function set_font_flags(flags: FontFlags): void
function set_motion_events_enabled(enable: boolean): void
function set_windowing_backend(backend_type: string): void
function shader_error_quark(): GLib.Quark
function test_add_data_full(test_path: string, test_func: GLib.TestDataFunc): void
function test_check_actor_at_point(stage: Actor, point: Point, actor: Actor): [ /* returnType */ boolean, /* result */ Actor | null ]
function test_check_color_at_point(stage: Actor, point: Point, color: Color): [ /* returnType */ boolean, /* result */ Color ]
function test_get_stage(): Actor
function test_init(argc: number, argv: string): void
function test_run(): number
function texture_error_quark(): GLib.Quark
function threads_add_frame_source(priority: number, fps: number, func: GLib.SourceFunc): number
function threads_add_idle(priority: number, func: GLib.SourceFunc): number
function threads_add_repaint_func(func: GLib.SourceFunc): number
function threads_add_repaint_func_full(flags: RepaintFlags, func: GLib.SourceFunc): number
function threads_add_timeout(priority: number, interval: number, func: GLib.SourceFunc): number
function threads_enter(): void
function threads_init(): void
function threads_leave(): void
function threads_remove_repaint_func(handle_id: number): void
function ungrab_keyboard(): void
function ungrab_pointer(): void
function ungrab_pointer_for_device(id_: number): void
function unicode_to_keysym(wc: number): number
function units_from_cm(cm: number): /* units */ Units
function units_from_em(em: number): /* units */ Units
function units_from_em_for_font(font_name: string | null, em: number): /* units */ Units
function units_from_mm(mm: number): /* units */ Units
function units_from_pixels(px: number): /* units */ Units
function units_from_pt(pt: number): /* units */ Units
function units_from_string(str: string): [ /* returnType */ boolean, /* units */ Units ]
function util_next_p2(a: number): number
function value_dup_paint_node(value: any): PaintNode
function value_get_color(value: any): Color
function value_get_paint_node(value: any): PaintNode
function value_get_shader_float(value: any): number[]
function value_get_shader_int(value: any): number[]
function value_get_shader_matrix(value: any): number[]
function value_get_units(value: any): Units
function value_set_color(value: any, color: Color): void
function value_set_paint_node(value: any, node?: PaintNode | null): void
function value_set_shader_float(value: any, floats: number[]): void
function value_set_shader_int(value: any, ints: number[]): void
function value_set_shader_matrix(value: any, matrix: number[]): void
function value_set_units(value: any, units: Units): void
function value_take_paint_node(value: any, node?: PaintNode | null): void
interface ActorCreateChildFunc {
    (item: GObject.Object): Actor
}
interface AlphaFunc {
    (alpha: Alpha): number
}
interface BehaviourForeachFunc {
    (behaviour: Behaviour, actor: Actor): void
}
interface BindingActionFunc {
    (gobject: GObject.Object, action_name: string, key_val: number, modifiers: ModifierType): boolean
}
interface Callback {
    (actor: Actor): void
}
interface EventFilterFunc {
    (event: Event): boolean
}
interface ModelFilterFunc {
    (model: Model, iter: ModelIter): boolean
}
interface ModelForeachFunc {
    (model: Model, iter: ModelIter): boolean
}
interface ModelSortFunc {
    (model: Model, a: any, b: any): number
}
interface PathCallback {
    (node: PathNode): void
}
interface ProgressFunc {
    (a: any, b: any, progress: number, retval: any): boolean
}
interface ScriptConnectFunc {
    (script: Script, object: GObject.Object, signal_name: string, handler_name: string, connect_object: GObject.Object, flags: GObject.ConnectFlags): void
}
interface TimelineProgressFunc {
    (timeline: Timeline, elapsed: number, total: number): number
}
class Animatable {
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Virtual methods of Clutter-1.0.Clutter.Animatable */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    static name: string
}
class Container {
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    get_children(): Actor[]
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Virtual methods of Clutter-1.0.Clutter.Container */
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Container, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Container, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Container, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Container, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Container, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Container, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    static name: string
    /* Static methods and pseudo-constructors */
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
}
class Content {
    /* Methods of Clutter-1.0.Clutter.Content */
    get_preferred_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    invalidate(): void
    /* Virtual methods of Clutter-1.0.Clutter.Content */
    vfunc_attached(actor: Actor): void
    vfunc_detached(actor: Actor): void
    vfunc_get_preferred_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    vfunc_invalidate(): void
    vfunc_paint_content(actor: Actor, node: PaintNode): void
    /* Signals of Clutter-1.0.Clutter.Content */
    connect(sigName: "attached", callback: (($obj: Content, actor: Actor) => void)): number
    connect_after(sigName: "attached", callback: (($obj: Content, actor: Actor) => void)): number
    emit(sigName: "attached", actor: Actor): void
    connect(sigName: "detached", callback: (($obj: Content, actor: Actor) => void)): number
    connect_after(sigName: "detached", callback: (($obj: Content, actor: Actor) => void)): number
    emit(sigName: "detached", actor: Actor): void
    static name: string
}
class Media {
    /* Properties of Clutter-1.0.Clutter.Media */
    audio_volume: number
    readonly buffer_fill: number
    readonly can_seek: boolean
    readonly duration: number
    playing: boolean
    progress: number
    subtitle_font_name: string
    subtitle_uri: string
    uri: string
    /* Methods of Clutter-1.0.Clutter.Media */
    get_audio_volume(): number
    get_buffer_fill(): number
    get_can_seek(): boolean
    get_duration(): number
    get_playing(): boolean
    get_progress(): number
    get_subtitle_font_name(): string
    get_subtitle_uri(): string
    get_uri(): string
    set_audio_volume(volume: number): void
    set_filename(filename: string): void
    set_playing(playing: boolean): void
    set_progress(progress: number): void
    set_subtitle_font_name(font_name: string): void
    set_subtitle_uri(uri: string): void
    set_uri(uri: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Media */
    vfunc_eos(): void
    vfunc_error(error: GLib.Error): void
    /* Signals of Clutter-1.0.Clutter.Media */
    connect(sigName: "eos", callback: (($obj: Media) => void)): number
    connect_after(sigName: "eos", callback: (($obj: Media) => void)): number
    emit(sigName: "eos"): void
    connect(sigName: "error", callback: (($obj: Media, error: GLib.Error) => void)): number
    connect_after(sigName: "error", callback: (($obj: Media, error: GLib.Error) => void)): number
    emit(sigName: "error", error: GLib.Error): void
    static name: string
}
class Scriptable {
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Scriptable */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    static name: string
}
interface Action_ConstructProps extends ActorMeta_ConstructProps {
}
class Action {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Action, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Action_ConstructProps)
    _init (config?: Action_ConstructProps): void
    static $gtype: GObject.Type
}
interface Actor_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Actor */
    actions?: Action
    anchor_gravity?: Gravity
    anchor_x?: number
    anchor_y?: number
    background_color?: Color
    child_transform?: Matrix
    clip?: Geometry
    clip_rect?: Rect
    clip_to_allocation?: boolean
    constraints?: Constraint
    content?: Content
    content_gravity?: ContentGravity
    content_repeat?: ContentRepeat
    depth?: number
    effect?: Effect
    fixed_position_set?: boolean
    fixed_x?: number
    fixed_y?: number
    height?: number
    layout_manager?: LayoutManager
    magnification_filter?: ScalingFilter
    margin_bottom?: number
    margin_left?: number
    margin_right?: number
    margin_top?: number
    min_height?: number
    min_height_set?: boolean
    min_width?: number
    min_width_set?: boolean
    minification_filter?: ScalingFilter
    name?: string
    natural_height?: number
    natural_height_set?: boolean
    natural_width?: number
    natural_width_set?: boolean
    offscreen_redirect?: OffscreenRedirect
    opacity?: number
    pivot_point?: Point
    pivot_point_z?: number
    position?: Point
    reactive?: boolean
    request_mode?: RequestMode
    rotation_angle_x?: number
    rotation_angle_y?: number
    rotation_angle_z?: number
    rotation_center_x?: Vertex
    rotation_center_y?: Vertex
    rotation_center_z?: Vertex
    rotation_center_z_gravity?: Gravity
    scale_center_x?: number
    scale_center_y?: number
    scale_gravity?: Gravity
    scale_x?: number
    scale_y?: number
    scale_z?: number
    show_on_set_parent?: boolean
    size?: Size
    text_direction?: TextDirection
    transform?: Matrix
    translation_x?: number
    translation_y?: number
    translation_z?: number
    visible?: boolean
    width?: number
    x?: number
    x_align?: ActorAlign
    x_expand?: boolean
    y?: number
    y_align?: ActorAlign
    y_expand?: boolean
    z_position?: number
}
class Actor {
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Actor, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Actor, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Actor, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Actor, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Actor, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Actor, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Actor, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Actor, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Actor) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Actor, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Actor, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Actor, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Actor, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Actor) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Actor) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Actor) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Actor, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Actor, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Actor, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Actor, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Actor, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Actor, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Actor, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Actor, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Actor) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Actor, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Actor, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Actor, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Actor, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Actor, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Actor, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Actor) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Actor) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Actor, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Actor, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "show", callback: (($obj: Actor) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Actor, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Actor, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Actor, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Actor, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Actor) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Actor) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Actor) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actions", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Actor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Actor_ConstructProps)
    _init (config?: Actor_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Actor
    static $gtype: GObject.Type
}
interface ActorMeta_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ActorMeta */
    enabled?: boolean
    name?: string
}
class ActorMeta {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ActorMeta, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ActorMeta_ConstructProps)
    _init (config?: ActorMeta_ConstructProps): void
    static $gtype: GObject.Type
}
interface AlignConstraint_ConstructProps extends Constraint_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.AlignConstraint */
    align_axis?: AlignAxis
    factor?: number
    source?: Actor
}
class AlignConstraint {
    /* Properties of Clutter-1.0.Clutter.AlignConstraint */
    align_axis: AlignAxis
    factor: number
    source: Actor
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.AlignConstraint */
    get_align_axis(): AlignAxis
    get_factor(): number
    get_source(): Actor
    set_align_axis(axis: AlignAxis): void
    set_factor(factor: number): void
    set_source(source?: Actor | null): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Constraint */
    vfunc_update_allocation(actor: Actor, allocation: ActorBox): void
    vfunc_update_preferred_size(actor: Actor, direction: Orientation, for_size: number, minimum_size: number, natural_size: number): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::align-axis", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align-axis", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::factor", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::factor", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::source", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: AlignConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: AlignConstraint_ConstructProps)
    _init (config?: AlignConstraint_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(source: Actor | null, axis: AlignAxis, factor: number): AlignConstraint
    static $gtype: GObject.Type
}
interface Alpha_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Alpha */
    mode?: number
    timeline?: Timeline
}
class Alpha {
    /* Properties of Clutter-1.0.Clutter.Alpha */
    readonly alpha: number
    mode: number
    timeline: Timeline
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Alpha */
    get_alpha(): number
    get_mode(): number
    get_timeline(): Timeline
    set_closure(closure: Function): void
    set_func(func: AlphaFunc): void
    set_mode(mode: number): void
    set_timeline(timeline: Timeline): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Alpha */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alpha", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::timeline", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timeline", callback: (($obj: Alpha, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Alpha_ConstructProps)
    _init (config?: Alpha_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Alpha
    static new_full(timeline: Timeline, mode: number): Alpha
    static new_with_func(timeline: Timeline, func: AlphaFunc): Alpha
    static register_func(closure: Function): number
    static $gtype: GObject.Type
}
interface Animation_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Animation */
    alpha?: Alpha
    duration?: number
    loop?: boolean
    mode?: number
    object?: GObject.Object
    timeline?: Timeline
}
class Animation {
    /* Properties of Clutter-1.0.Clutter.Animation */
    alpha: Alpha
    duration: number
    loop: boolean
    mode: number
    object: GObject.Object
    timeline: Timeline
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Animation */
    bind(property_name: string, final: any): Animation
    bind_interval(property_name: string, interval: Interval): Animation
    completed(): void
    get_alpha(): Alpha
    get_duration(): number
    get_interval(property_name: string): Interval
    get_loop(): boolean
    get_mode(): number
    get_object(): GObject.Object
    get_timeline(): Timeline
    has_property(property_name: string): boolean
    set_alpha(alpha: Alpha): void
    set_duration(msecs: number): void
    set_loop(loop: boolean): void
    set_mode(mode: number): void
    set_object(object: GObject.Object): void
    set_timeline(timeline?: Timeline | null): void
    unbind_property(property_name: string): void
    update(property_name: string, final: any): Animation
    update_interval(property_name: string, interval: Interval): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Animation */
    vfunc_completed(): void
    vfunc_started(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Animation */
    connect(sigName: "completed", callback: (($obj: Animation) => void)): number
    connect_after(sigName: "completed", callback: (($obj: Animation) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "started", callback: (($obj: Animation) => void)): number
    connect_after(sigName: "started", callback: (($obj: Animation) => void)): number
    emit(sigName: "started"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alpha", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duration", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::loop", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mode", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::object", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::object", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::timeline", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timeline", callback: (($obj: Animation, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Animation_ConstructProps)
    _init (config?: Animation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Animation
    static $gtype: GObject.Type
}
interface Animator_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Animator */
    duration?: number
    timeline?: Timeline
}
class Animator {
    /* Properties of Clutter-1.0.Clutter.Animator */
    duration: number
    timeline: Timeline
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Animator */
    compute_value(object: GObject.Object, property_name: string, progress: number, value: any): boolean
    get_duration(): number
    get_keys(object: GObject.Object | null, property_name: string | null, progress: number): AnimatorKey[]
    get_timeline(): Timeline
    property_get_ease_in(object: GObject.Object, property_name: string): boolean
    property_get_interpolation(object: GObject.Object, property_name: string): Interpolation
    property_set_ease_in(object: GObject.Object, property_name: string, ease_in: boolean): void
    property_set_interpolation(object: GObject.Object, property_name: string, interpolation: Interpolation): void
    remove_key(object: GObject.Object | null, property_name: string | null, progress: number): void
    set_duration(duration: number): void
    set_key(object: GObject.Object, property_name: string, mode: number, progress: number, value: any): Animator
    set_timeline(timeline: Timeline): void
    start(): Timeline
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Animator */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Animator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Animator, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::duration", callback: (($obj: Animator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: Animator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::timeline", callback: (($obj: Animator, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::timeline", callback: (($obj: Animator, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Animator_ConstructProps)
    _init (config?: Animator_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Animator
    static $gtype: GObject.Type
}
interface Backend_ConstructProps extends GObject.Object_ConstructProps {
}
class Backend {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Backend */
    get_double_click_distance(): number
    get_double_click_time(): number
    get_font_name(): string
    get_font_options(): cairo.FontOptions
    get_resolution(): number
    set_double_click_distance(distance: number): void
    set_double_click_time(msec: number): void
    set_font_name(font_name: string): void
    set_font_options(options: cairo.FontOptions): void
    set_resolution(dpi: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Backend */
    connect(sigName: "font-changed", callback: (($obj: Backend) => void)): number
    connect_after(sigName: "font-changed", callback: (($obj: Backend) => void)): number
    emit(sigName: "font-changed"): void
    connect(sigName: "resolution-changed", callback: (($obj: Backend) => void)): number
    connect_after(sigName: "resolution-changed", callback: (($obj: Backend) => void)): number
    emit(sigName: "resolution-changed"): void
    connect(sigName: "settings-changed", callback: (($obj: Backend) => void)): number
    connect_after(sigName: "settings-changed", callback: (($obj: Backend) => void)): number
    emit(sigName: "settings-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Backend, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Backend, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Backend_ConstructProps)
    _init (config?: Backend_ConstructProps): void
    static $gtype: GObject.Type
}
interface Behaviour_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Behaviour */
    alpha?: Alpha
}
class Behaviour {
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: Behaviour, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: Behaviour, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: Behaviour, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: Behaviour, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Behaviour, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Behaviour, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alpha", callback: (($obj: Behaviour, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: Behaviour, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Behaviour_ConstructProps)
    _init (config?: Behaviour_ConstructProps): void
    static $gtype: GObject.Type
}
interface BehaviourDepth_ConstructProps extends Behaviour_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BehaviourDepth */
    depth_end?: number
    depth_start?: number
}
class BehaviourDepth {
    /* Properties of Clutter-1.0.Clutter.BehaviourDepth */
    depth_end: number
    depth_start: number
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BehaviourDepth */
    get_bounds(): [ /* depth_start */ number, /* depth_end */ number ]
    set_bounds(depth_start: number, depth_end: number): void
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.BehaviourDepth */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: BehaviourDepth, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: BehaviourDepth, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: BehaviourDepth, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: BehaviourDepth, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::depth-end", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth-end", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth-start", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth-start", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::alpha", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: BehaviourDepth, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BehaviourDepth_ConstructProps)
    _init (config?: BehaviourDepth_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(alpha: Alpha | null, depth_start: number, depth_end: number): BehaviourDepth
    static $gtype: GObject.Type
}
interface BehaviourEllipse_ConstructProps extends Behaviour_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BehaviourEllipse */
    angle_end?: number
    angle_start?: number
    angle_tilt_x?: number
    angle_tilt_y?: number
    angle_tilt_z?: number
    center?: Knot
    direction?: RotateDirection
    height?: number
    width?: number
}
class BehaviourEllipse {
    /* Properties of Clutter-1.0.Clutter.BehaviourEllipse */
    angle_end: number
    angle_start: number
    angle_tilt_x: number
    angle_tilt_y: number
    angle_tilt_z: number
    center: Knot
    direction: RotateDirection
    height: number
    width: number
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BehaviourEllipse */
    get_angle_end(): number
    get_angle_start(): number
    get_angle_tilt(axis: RotateAxis): number
    get_center(): [ /* x */ number, /* y */ number ]
    get_direction(): RotateDirection
    get_height(): number
    get_tilt(): [ /* angle_tilt_x */ number, /* angle_tilt_y */ number, /* angle_tilt_z */ number ]
    get_width(): number
    set_angle_end(angle_end: number): void
    set_angle_start(angle_start: number): void
    set_angle_tilt(axis: RotateAxis, angle_tilt: number): void
    set_center(x: number, y: number): void
    set_direction(direction: RotateDirection): void
    set_height(height: number): void
    set_tilt(angle_tilt_x: number, angle_tilt_y: number, angle_tilt_z: number): void
    set_width(width: number): void
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.BehaviourEllipse */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: BehaviourEllipse, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: BehaviourEllipse, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: BehaviourEllipse, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: BehaviourEllipse, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::angle-end", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-end", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::angle-start", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-start", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::angle-tilt-x", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-tilt-x", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::angle-tilt-y", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-tilt-y", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::angle-tilt-z", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-tilt-z", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::center", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::center", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::alpha", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: BehaviourEllipse, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BehaviourEllipse_ConstructProps)
    _init (config?: BehaviourEllipse_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(alpha: Alpha | null, x: number, y: number, width: number, height: number, direction: RotateDirection, start: number, end: number): BehaviourEllipse
    static $gtype: GObject.Type
}
interface BehaviourOpacity_ConstructProps extends Behaviour_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BehaviourOpacity */
    opacity_end?: number
    opacity_start?: number
}
class BehaviourOpacity {
    /* Properties of Clutter-1.0.Clutter.BehaviourOpacity */
    opacity_end: number
    opacity_start: number
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BehaviourOpacity */
    get_bounds(): [ /* opacity_start */ number, /* opacity_end */ number ]
    set_bounds(opacity_start: number, opacity_end: number): void
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.BehaviourOpacity */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: BehaviourOpacity, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: BehaviourOpacity, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: BehaviourOpacity, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: BehaviourOpacity, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::opacity-end", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity-end", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity-start", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity-start", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::alpha", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: BehaviourOpacity, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BehaviourOpacity_ConstructProps)
    _init (config?: BehaviourOpacity_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(alpha: Alpha | null, opacity_start: number, opacity_end: number): BehaviourOpacity
    static $gtype: GObject.Type
}
interface BehaviourPath_ConstructProps extends Behaviour_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BehaviourPath */
    path?: Path
}
class BehaviourPath {
    /* Properties of Clutter-1.0.Clutter.BehaviourPath */
    path: Path
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BehaviourPath */
    get_path(): Path
    set_path(path: Path): void
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.BehaviourPath */
    vfunc_knot_reached(knot_num: number): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.BehaviourPath */
    connect(sigName: "knot-reached", callback: (($obj: BehaviourPath, knot_num: number) => void)): number
    connect_after(sigName: "knot-reached", callback: (($obj: BehaviourPath, knot_num: number) => void)): number
    emit(sigName: "knot-reached", knot_num: number): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: BehaviourPath, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: BehaviourPath, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: BehaviourPath, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: BehaviourPath, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BehaviourPath, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BehaviourPath, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::path", callback: (($obj: BehaviourPath, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: BehaviourPath, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::alpha", callback: (($obj: BehaviourPath, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: BehaviourPath, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BehaviourPath_ConstructProps)
    _init (config?: BehaviourPath_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(alpha: Alpha | null, path: Path): BehaviourPath
    static new_with_description(alpha: Alpha | null, desc: string): BehaviourPath
    static new_with_knots(alpha: Alpha | null, knots: Knot[]): BehaviourPath
    static $gtype: GObject.Type
}
interface BehaviourRotate_ConstructProps extends Behaviour_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BehaviourRotate */
    angle_end?: number
    angle_start?: number
    axis?: RotateAxis
    center_x?: number
    center_y?: number
    center_z?: number
    direction?: RotateDirection
}
class BehaviourRotate {
    /* Properties of Clutter-1.0.Clutter.BehaviourRotate */
    angle_end: number
    angle_start: number
    axis: RotateAxis
    center_x: number
    center_y: number
    center_z: number
    direction: RotateDirection
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BehaviourRotate */
    get_axis(): RotateAxis
    get_bounds(): [ /* angle_start */ number, /* angle_end */ number ]
    get_center(): [ /* x */ number, /* y */ number, /* z */ number ]
    get_direction(): RotateDirection
    set_axis(axis: RotateAxis): void
    set_bounds(angle_start: number, angle_end: number): void
    set_center(x: number, y: number, z: number): void
    set_direction(direction: RotateDirection): void
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.BehaviourRotate */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: BehaviourRotate, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: BehaviourRotate, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: BehaviourRotate, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: BehaviourRotate, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::angle-end", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-end", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::angle-start", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle-start", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::axis", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::axis", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::center-x", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::center-x", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::center-y", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::center-y", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::center-z", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::center-z", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::alpha", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: BehaviourRotate, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BehaviourRotate_ConstructProps)
    _init (config?: BehaviourRotate_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(alpha: Alpha | null, axis: RotateAxis, direction: RotateDirection, angle_start: number, angle_end: number): BehaviourRotate
    static $gtype: GObject.Type
}
interface BehaviourScale_ConstructProps extends Behaviour_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BehaviourScale */
    x_scale_end?: number
    x_scale_start?: number
    y_scale_end?: number
    y_scale_start?: number
}
class BehaviourScale {
    /* Properties of Clutter-1.0.Clutter.BehaviourScale */
    x_scale_end: number
    x_scale_start: number
    y_scale_end: number
    y_scale_start: number
    /* Properties of Clutter-1.0.Clutter.Behaviour */
    alpha: Alpha
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BehaviourScale */
    get_bounds(): [ /* x_scale_start */ number, /* y_scale_start */ number, /* x_scale_end */ number, /* y_scale_end */ number ]
    set_bounds(x_scale_start: number, y_scale_start: number, x_scale_end: number, y_scale_end: number): void
    /* Methods of Clutter-1.0.Clutter.Behaviour */
    actors_foreach(func: BehaviourForeachFunc): void
    apply(actor: Actor): void
    get_actors(): Actor[]
    get_alpha(): Alpha
    get_n_actors(): number
    get_nth_actor(index_: number): Actor
    is_applied(actor: Actor): boolean
    remove(actor: Actor): void
    remove_all(): void
    set_alpha(alpha: Alpha): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.BehaviourScale */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Behaviour */
    vfunc_alpha_notify(alpha_value: number): void
    vfunc_applied(actor: Actor): void
    vfunc_removed(actor: Actor): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Behaviour */
    connect(sigName: "applied", callback: (($obj: BehaviourScale, actor: Actor) => void)): number
    connect_after(sigName: "applied", callback: (($obj: BehaviourScale, actor: Actor) => void)): number
    emit(sigName: "applied", actor: Actor): void
    connect(sigName: "removed", callback: (($obj: BehaviourScale, actor: Actor) => void)): number
    connect_after(sigName: "removed", callback: (($obj: BehaviourScale, actor: Actor) => void)): number
    emit(sigName: "removed", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::x-scale-end", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-scale-end", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-scale-start", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-scale-start", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-scale-end", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-scale-end", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-scale-start", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-scale-start", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::alpha", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alpha", callback: (($obj: BehaviourScale, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BehaviourScale_ConstructProps)
    _init (config?: BehaviourScale_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(alpha: Alpha | null, x_scale_start: number, y_scale_start: number, x_scale_end: number, y_scale_end: number): BehaviourScale
    static $gtype: GObject.Type
}
interface BinLayout_ConstructProps extends LayoutManager_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BinLayout */
    x_align?: BinAlignment
    y_align?: BinAlignment
}
class BinLayout {
    /* Properties of Clutter-1.0.Clutter.BinLayout */
    x_align: BinAlignment
    y_align: BinAlignment
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BinLayout */
    add(child: Actor, x_align: BinAlignment, y_align: BinAlignment): void
    get_alignment(child?: Actor | null): [ /* x_align */ BinAlignment | null, /* y_align */ BinAlignment | null ]
    set_alignment(child: Actor | null, x_align: BinAlignment, y_align: BinAlignment): void
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: BinLayout) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: BinLayout) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BinLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BinLayout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::x-align", callback: (($obj: BinLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: BinLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: BinLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: BinLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BinLayout_ConstructProps)
    _init (config?: BinLayout_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(x_align: BinAlignment, y_align: BinAlignment): BinLayout
    static $gtype: GObject.Type
}
interface BindConstraint_ConstructProps extends Constraint_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BindConstraint */
    coordinate?: BindCoordinate
    offset?: number
    source?: Actor
}
class BindConstraint {
    /* Properties of Clutter-1.0.Clutter.BindConstraint */
    coordinate: BindCoordinate
    offset: number
    source: Actor
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BindConstraint */
    get_coordinate(): BindCoordinate
    get_offset(): number
    get_source(): Actor
    set_coordinate(coordinate: BindCoordinate): void
    set_offset(offset: number): void
    set_source(source?: Actor | null): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Constraint */
    vfunc_update_allocation(actor: Actor, allocation: ActorBox): void
    vfunc_update_preferred_size(actor: Actor, direction: Orientation, for_size: number, minimum_size: number, natural_size: number): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::coordinate", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::coordinate", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offset", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::source", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BindConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BindConstraint_ConstructProps)
    _init (config?: BindConstraint_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(source: Actor | null, coordinate: BindCoordinate, offset: number): BindConstraint
    static $gtype: GObject.Type
}
interface BindingPool_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BindingPool */
    name?: string
}
class BindingPool {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BindingPool */
    activate(key_val: number, modifiers: ModifierType, gobject: GObject.Object): boolean
    block_action(action_name: string): void
    find_action(key_val: number, modifiers: ModifierType): string
    install_action(action_name: string, key_val: number, modifiers: ModifierType, callback: BindingActionFunc): void
    install_closure(action_name: string, key_val: number, modifiers: ModifierType, closure: Function): void
    override_action(key_val: number, modifiers: ModifierType, callback: BindingActionFunc): void
    override_closure(key_val: number, modifiers: ModifierType, closure: Function): void
    remove_action(key_val: number, modifiers: ModifierType): void
    unblock_action(action_name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BindingPool, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BindingPool, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BindingPool_ConstructProps)
    _init (config?: BindingPool_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(name: string): BindingPool
    static find(name: string): BindingPool
    static get_for_class(klass?: object | null): BindingPool
    static $gtype: GObject.Type
}
interface BlurEffect_ConstructProps extends OffscreenEffect_ConstructProps {
}
class BlurEffect {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BlurEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BlurEffect_ConstructProps)
    _init (config?: BlurEffect_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): BlurEffect
    static $gtype: GObject.Type
}
interface Box_ConstructProps extends Actor_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Box */
    color?: Color
    color_set?: boolean
}
class Box {
    /* Properties of Clutter-1.0.Clutter.Box */
    color: Color
    color_set: boolean
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Box */
    get_color(): /* color */ Color
    get_layout_manager(): LayoutManager
    packv(actor: Actor, properties: string[], values: any[]): void
    set_color(color?: Color | null): void
    set_layout_manager(manager: LayoutManager): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Box */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Box, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Box, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Box, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Box, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Box, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Box, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Box, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Box, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Box) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Box) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Box, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Box, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Box, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Box, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Box) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Box) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Box) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Box) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Box) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Box) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Box, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Box, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Box, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Box, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Box, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Box, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Box, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Box, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Box) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Box) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Box, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Box, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Box, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Box, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Box, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Box, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Box) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Box) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Box) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Box) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Box, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Box, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Box) => void)): number
    connect_after(sigName: "show", callback: (($obj: Box) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Box, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Box, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Box, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Box, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Box) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Box) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Box) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Box) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Box, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Box, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Box, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Box, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Box, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Box, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::color", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::color-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Box, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Box_ConstructProps)
    _init (config?: Box_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(manager: LayoutManager): Box
    /* Function overloads */
    static new(): Box
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface BoxLayout_ConstructProps extends LayoutManager_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BoxLayout */
    easing_duration?: number
    easing_mode?: number
    homogeneous?: boolean
    orientation?: Orientation
    pack_start?: boolean
    spacing?: number
    use_animations?: boolean
    vertical?: boolean
}
class BoxLayout {
    /* Properties of Clutter-1.0.Clutter.BoxLayout */
    easing_duration: number
    easing_mode: number
    homogeneous: boolean
    orientation: Orientation
    pack_start: boolean
    spacing: number
    use_animations: boolean
    vertical: boolean
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BoxLayout */
    get_alignment(actor: Actor): [ /* x_align */ BoxAlignment, /* y_align */ BoxAlignment ]
    get_easing_duration(): number
    get_easing_mode(): number
    get_expand(actor: Actor): boolean
    get_fill(actor: Actor): [ /* x_fill */ boolean, /* y_fill */ boolean ]
    get_homogeneous(): boolean
    get_orientation(): Orientation
    get_pack_start(): boolean
    get_spacing(): number
    get_use_animations(): boolean
    get_vertical(): boolean
    pack(actor: Actor, expand: boolean, x_fill: boolean, y_fill: boolean, x_align: BoxAlignment, y_align: BoxAlignment): void
    set_alignment(actor: Actor, x_align: BoxAlignment, y_align: BoxAlignment): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: number): void
    set_expand(actor: Actor, expand: boolean): void
    set_fill(actor: Actor, x_fill: boolean, y_fill: boolean): void
    set_homogeneous(homogeneous: boolean): void
    set_orientation(orientation: Orientation): void
    set_pack_start(pack_start: boolean): void
    set_spacing(spacing: number): void
    set_use_animations(animate: boolean): void
    set_vertical(vertical: boolean): void
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: BoxLayout) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: BoxLayout) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::easing-duration", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::easing-duration", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::easing-mode", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::easing-mode", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::homogeneous", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::orientation", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pack-start", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pack-start", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::spacing", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::use-animations", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-animations", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vertical", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vertical", callback: (($obj: BoxLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BoxLayout_ConstructProps)
    _init (config?: BoxLayout_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): BoxLayout
    static $gtype: GObject.Type
}
interface BrightnessContrastEffect_ConstructProps extends OffscreenEffect_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.BrightnessContrastEffect */
    brightness?: Color
    contrast?: Color
}
class BrightnessContrastEffect {
    /* Properties of Clutter-1.0.Clutter.BrightnessContrastEffect */
    brightness: Color
    contrast: Color
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.BrightnessContrastEffect */
    get_brightness(): [ /* red */ number | null, /* green */ number | null, /* blue */ number | null ]
    get_contrast(): [ /* red */ number | null, /* green */ number | null, /* blue */ number | null ]
    set_brightness(brightness: number): void
    set_brightness_full(red: number, green: number, blue: number): void
    set_contrast(contrast: number): void
    set_contrast_full(red: number, green: number, blue: number): void
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::brightness", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::brightness", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::contrast", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::contrast", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BrightnessContrastEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BrightnessContrastEffect_ConstructProps)
    _init (config?: BrightnessContrastEffect_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): BrightnessContrastEffect
    static $gtype: GObject.Type
}
interface CairoTexture_ConstructProps extends Texture_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.CairoTexture */
    auto_resize?: boolean
    surface_height?: number
    surface_width?: number
}
class CairoTexture {
    /* Properties of Clutter-1.0.Clutter.CairoTexture */
    auto_resize: boolean
    surface_height: number
    surface_width: number
    /* Properties of Clutter-1.0.Clutter.Texture */
    filename: string
    filter_quality: TextureQuality
    keep_aspect_ratio: boolean
    load_async: boolean
    load_data_async: boolean
    pick_with_alpha: boolean
    readonly pixel_format: Cogl.PixelFormat
    repeat_x: boolean
    repeat_y: boolean
    sync_size: boolean
    readonly tile_waste: number
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.CairoTexture */
    clear(): void
    create(): cairo.Context
    create_region(x_offset: number, y_offset: number, width: number, height: number): cairo.Context
    get_auto_resize(): boolean
    get_surface_size(): [ /* width */ number, /* height */ number ]
    invalidate(): void
    invalidate_rectangle(rect?: cairo.RectangleInt | null): void
    set_auto_resize(value: boolean): void
    set_surface_size(width: number, height: number): void
    /* Methods of Clutter-1.0.Clutter.Texture */
    get_base_size(): [ /* width */ number, /* height */ number ]
    get_cogl_material(): Cogl.Handle
    get_cogl_texture(): Cogl.Handle
    get_filter_quality(): TextureQuality
    get_keep_aspect_ratio(): boolean
    get_load_async(): boolean
    get_load_data_async(): boolean
    get_max_tile_waste(): number
    get_pick_with_alpha(): boolean
    get_pixel_format(): Cogl.PixelFormat
    get_repeat(): [ /* repeat_x */ boolean, /* repeat_y */ boolean ]
    get_sync_size(): boolean
    set_area_from_rgb_data(data: Uint8Array, has_alpha: boolean, x: number, y: number, width: number, height: number, rowstride: number, bpp: number, flags: TextureFlags): boolean
    set_cogl_material(cogl_material: Cogl.Handle): void
    set_cogl_texture(cogl_tex: Cogl.Handle): void
    set_filter_quality(filter_quality: TextureQuality): void
    set_from_file(filename: string): boolean
    set_from_rgb_data(data: Uint8Array, has_alpha: boolean, width: number, height: number, rowstride: number, bpp: number, flags: TextureFlags): boolean
    set_from_yuv_data(data: Uint8Array, width: number, height: number, flags: TextureFlags): boolean
    set_keep_aspect_ratio(keep_aspect: boolean): void
    set_load_async(load_async: boolean): void
    set_load_data_async(load_async: boolean): void
    set_pick_with_alpha(pick_with_alpha: boolean): void
    set_repeat(repeat_x: boolean, repeat_y: boolean): void
    set_sync_size(sync_size: boolean): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.CairoTexture */
    vfunc_create_surface(width: number, height: number): cairo.Surface
    vfunc_draw(cr: cairo.Context): boolean
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Texture */
    vfunc_load_finished(error: GLib.Error): void
    vfunc_pixbuf_change(): void
    vfunc_size_change(width: number, height: number): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.CairoTexture */
    connect(sigName: "create-surface", callback: (($obj: CairoTexture, width: number, height: number) => cairo.Surface)): number
    connect_after(sigName: "create-surface", callback: (($obj: CairoTexture, width: number, height: number) => cairo.Surface)): number
    emit(sigName: "create-surface", width: number, height: number): void
    connect(sigName: "draw", callback: (($obj: CairoTexture, cr: cairo.Context) => boolean)): number
    connect_after(sigName: "draw", callback: (($obj: CairoTexture, cr: cairo.Context) => boolean)): number
    emit(sigName: "draw", cr: cairo.Context): void
    /* Signals of Clutter-1.0.Clutter.Texture */
    connect(sigName: "load-finished", callback: (($obj: CairoTexture, error: GLib.Error) => void)): number
    connect_after(sigName: "load-finished", callback: (($obj: CairoTexture, error: GLib.Error) => void)): number
    emit(sigName: "load-finished", error: GLib.Error): void
    connect(sigName: "pixbuf-change", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "pixbuf-change", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "pixbuf-change"): void
    connect(sigName: "size-change", callback: (($obj: CairoTexture, width: number, height: number) => void)): number
    connect_after(sigName: "size-change", callback: (($obj: CairoTexture, width: number, height: number) => void)): number
    emit(sigName: "size-change", width: number, height: number): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: CairoTexture, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: CairoTexture, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: CairoTexture, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: CairoTexture, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: CairoTexture, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: CairoTexture, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: CairoTexture, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: CairoTexture, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: CairoTexture, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: CairoTexture, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: CairoTexture, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: CairoTexture, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "hide", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: CairoTexture, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: CairoTexture, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: CairoTexture, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: CairoTexture, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: CairoTexture, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: CairoTexture, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: CairoTexture, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: CairoTexture, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "paint", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: CairoTexture, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: CairoTexture, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: CairoTexture, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: CairoTexture, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: CairoTexture, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: CairoTexture, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "realize", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: CairoTexture, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: CairoTexture, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "show", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: CairoTexture, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: CairoTexture, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: CairoTexture, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: CairoTexture, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: CairoTexture) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: CairoTexture) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: CairoTexture, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: CairoTexture, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: CairoTexture, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: CairoTexture, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: CairoTexture, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: CairoTexture, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-resize", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-resize", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::surface-height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::surface-height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::surface-width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::surface-width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filename", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filter-quality", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-quality", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::keep-aspect-ratio", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keep-aspect-ratio", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::load-async", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-async", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::load-data-async", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-data-async", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pick-with-alpha", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pick-with-alpha", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pixel-format", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixel-format", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sync-size", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-size", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tile-waste", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tile-waste", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: CairoTexture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CairoTexture_ConstructProps)
    _init (config?: CairoTexture_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(width: number, height: number): CairoTexture
    /* Function overloads */
    static new(): CairoTexture
    static new(): CairoTexture
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface Canvas_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Canvas */
    height?: number
    scale_factor?: number
    width?: number
}
class Canvas {
    /* Properties of Clutter-1.0.Clutter.Canvas */
    height: number
    scale_factor: number
    readonly scale_factor_set: boolean
    width: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Canvas */
    get_scale_factor(): number
    set_scale_factor(scale: number): void
    set_size(width: number, height: number): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Content */
    get_preferred_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    invalidate(): void
    /* Virtual methods of Clutter-1.0.Clutter.Canvas */
    vfunc_draw(cr: cairo.Context, width: number, height: number): boolean
    vfunc_attached(actor: Actor): void
    vfunc_detached(actor: Actor): void
    vfunc_get_preferred_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    vfunc_invalidate(): void
    vfunc_paint_content(actor: Actor, node: PaintNode): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Canvas */
    connect(sigName: "draw", callback: (($obj: Canvas, cr: cairo.Context, width: number, height: number) => boolean)): number
    connect_after(sigName: "draw", callback: (($obj: Canvas, cr: cairo.Context, width: number, height: number) => boolean)): number
    emit(sigName: "draw", cr: cairo.Context, width: number, height: number): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Content */
    connect(sigName: "attached", callback: (($obj: Canvas, actor: Actor) => void)): number
    connect_after(sigName: "attached", callback: (($obj: Canvas, actor: Actor) => void)): number
    emit(sigName: "attached", actor: Actor): void
    connect(sigName: "detached", callback: (($obj: Canvas, actor: Actor) => void)): number
    connect_after(sigName: "detached", callback: (($obj: Canvas, actor: Actor) => void)): number
    emit(sigName: "detached", actor: Actor): void
    connect(sigName: "notify::height", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-factor", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-factor-set", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor-set", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Canvas, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Canvas_ConstructProps)
    _init (config?: Canvas_ConstructProps): void
    static $gtype: GObject.Type
}
interface ChildMeta_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ChildMeta */
    actor?: Actor
    container?: Container
}
class ChildMeta {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ChildMeta */
    get_actor(): Actor
    get_container(): Container
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ChildMeta, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ChildMeta, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ChildMeta_ConstructProps)
    _init (config?: ChildMeta_ConstructProps): void
    static $gtype: GObject.Type
}
interface ClickAction_ConstructProps extends Action_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ClickAction */
    long_press_duration?: number
    long_press_threshold?: number
}
class ClickAction {
    /* Properties of Clutter-1.0.Clutter.ClickAction */
    readonly held: boolean
    long_press_duration: number
    long_press_threshold: number
    readonly pressed: boolean
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ClickAction */
    get_button(): number
    get_coords(): [ /* press_x */ number, /* press_y */ number ]
    get_state(): ModifierType
    release(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.ClickAction */
    vfunc_clicked(actor: Actor): void
    vfunc_long_press(actor: Actor, state: LongPressState): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.ClickAction */
    connect(sigName: "clicked", callback: (($obj: ClickAction, actor: Actor) => void)): number
    connect_after(sigName: "clicked", callback: (($obj: ClickAction, actor: Actor) => void)): number
    emit(sigName: "clicked", actor: Actor): void
    connect(sigName: "long-press", callback: (($obj: ClickAction, actor: Actor, state: LongPressState) => boolean)): number
    connect_after(sigName: "long-press", callback: (($obj: ClickAction, actor: Actor, state: LongPressState) => boolean)): number
    emit(sigName: "long-press", actor: Actor, state: LongPressState): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::held", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::held", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::long-press-duration", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-press-duration", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::long-press-threshold", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-press-threshold", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pressed", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pressed", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ClickAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ClickAction_ConstructProps)
    _init (config?: ClickAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ClickAction
    static $gtype: GObject.Type
}
class ClipNode {
    /* Methods of Clutter-1.0.Clutter.PaintNode */
    add_child(child: PaintNode): void
    add_rectangle(rect: ActorBox): void
    add_texture_rectangle(rect: ActorBox, x_1: number, y_1: number, x_2: number, y_2: number): void
    ref(): PaintNode
    set_name(name: string): void
    unref(): void
    static name: string
    static new(): ClipNode
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): ClipNode
}
interface Clone_ConstructProps extends Actor_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Clone */
    source?: Actor
}
class Clone {
    /* Properties of Clutter-1.0.Clutter.Clone */
    source: Actor
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Clone */
    get_source(): Actor
    set_source(source?: Actor | null): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Clone */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Clone, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Clone, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Clone, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Clone, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Clone, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Clone, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Clone, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Clone, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Clone) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Clone, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Clone, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Clone, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Clone, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Clone) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Clone) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Clone) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Clone, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Clone, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Clone, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Clone, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Clone, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Clone, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Clone, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Clone, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Clone) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Clone, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Clone, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Clone, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Clone, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Clone, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Clone, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Clone) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Clone) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Clone, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Clone, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "show", callback: (($obj: Clone) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Clone, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Clone, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Clone, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Clone, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Clone) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Clone) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Clone) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Clone, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Clone, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Clone, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Clone, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Clone, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Clone, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::source", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Clone, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Clone_ConstructProps)
    _init (config?: Clone_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(source: Actor): Clone
    /* Function overloads */
    static new(): Clone
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
class ColorNode {
    /* Methods of Clutter-1.0.Clutter.PaintNode */
    add_child(child: PaintNode): void
    add_rectangle(rect: ActorBox): void
    add_texture_rectangle(rect: ActorBox, x_1: number, y_1: number, x_2: number, y_2: number): void
    ref(): PaintNode
    set_name(name: string): void
    unref(): void
    static name: string
    static new(color?: Color | null): ColorNode
    constructor(color?: Color | null)
    /* Static methods and pseudo-constructors */
    static new(color?: Color | null): ColorNode
}
interface ColorizeEffect_ConstructProps extends OffscreenEffect_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ColorizeEffect */
    tint?: Color
}
class ColorizeEffect {
    /* Properties of Clutter-1.0.Clutter.ColorizeEffect */
    tint: Color
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ColorizeEffect */
    get_tint(): /* tint */ Color
    set_tint(tint: Color): void
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::tint", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tint", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ColorizeEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ColorizeEffect_ConstructProps)
    _init (config?: ColorizeEffect_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(tint: Color): ColorizeEffect
    static $gtype: GObject.Type
}
interface Constraint_ConstructProps extends ActorMeta_ConstructProps {
}
class Constraint {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Constraint */
    vfunc_update_allocation(actor: Actor, allocation: ActorBox): void
    vfunc_update_preferred_size(actor: Actor, direction: Orientation, for_size: number, minimum_size: number, natural_size: number): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Constraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Constraint_ConstructProps)
    _init (config?: Constraint_ConstructProps): void
    static $gtype: GObject.Type
}
interface DeformEffect_ConstructProps extends OffscreenEffect_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.DeformEffect */
    x_tiles?: number
    y_tiles?: number
}
class DeformEffect {
    /* Properties of Clutter-1.0.Clutter.DeformEffect */
    x_tiles: number
    y_tiles: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.DeformEffect */
    get_back_material(): Cogl.Handle
    get_n_tiles(): [ /* x_tiles */ number, /* y_tiles */ number ]
    invalidate(): void
    set_back_material(material?: Cogl.Handle | null): void
    set_n_tiles(x_tiles: number, y_tiles: number): void
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.DeformEffect */
    vfunc_deform_vertex(width: number, height: number, vertex: Cogl.TextureVertex): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::x-tiles", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-tiles", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-tiles", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-tiles", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DeformEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeformEffect_ConstructProps)
    _init (config?: DeformEffect_ConstructProps): void
    static $gtype: GObject.Type
}
interface DesaturateEffect_ConstructProps extends OffscreenEffect_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.DesaturateEffect */
    factor?: number
}
class DesaturateEffect {
    /* Properties of Clutter-1.0.Clutter.DesaturateEffect */
    factor: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.DesaturateEffect */
    get_factor(): number
    set_factor(factor: number): void
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::factor", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::factor", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DesaturateEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DesaturateEffect_ConstructProps)
    _init (config?: DesaturateEffect_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(factor: number): DesaturateEffect
    static $gtype: GObject.Type
}
interface DeviceManager_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.DeviceManager */
    backend?: Backend
}
class DeviceManager {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.DeviceManager */
    get_core_device(device_type: InputDeviceType): InputDevice
    get_device(device_id: number): InputDevice
    list_devices(): InputDevice[]
    peek_devices(): InputDevice[]
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.DeviceManager */
    vfunc_add_device(device: InputDevice): void
    vfunc_get_core_device(device_type: InputDeviceType): InputDevice
    vfunc_get_device(device_id: number): InputDevice
    vfunc_remove_device(device: InputDevice): void
    vfunc_select_stage_events(stage: Stage): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.DeviceManager */
    connect(sigName: "device-added", callback: (($obj: DeviceManager, device: InputDevice) => void)): number
    connect_after(sigName: "device-added", callback: (($obj: DeviceManager, device: InputDevice) => void)): number
    emit(sigName: "device-added", device: InputDevice): void
    connect(sigName: "device-removed", callback: (($obj: DeviceManager, device: InputDevice) => void)): number
    connect_after(sigName: "device-removed", callback: (($obj: DeviceManager, device: InputDevice) => void)): number
    emit(sigName: "device-removed", device: InputDevice): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DeviceManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DeviceManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DeviceManager_ConstructProps)
    _init (config?: DeviceManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_default(): DeviceManager
    static $gtype: GObject.Type
}
interface DragAction_ConstructProps extends Action_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.DragAction */
    drag_area?: Rect
    drag_axis?: DragAxis
    drag_handle?: Actor
    x_drag_threshold?: number
    y_drag_threshold?: number
}
class DragAction {
    /* Properties of Clutter-1.0.Clutter.DragAction */
    drag_area: Rect
    readonly drag_area_set: boolean
    drag_axis: DragAxis
    drag_handle: Actor
    x_drag_threshold: number
    y_drag_threshold: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.DragAction */
    get_drag_area(): [ /* returnType */ boolean, /* drag_area */ Rect ]
    get_drag_axis(): DragAxis
    get_drag_handle(): Actor
    get_drag_threshold(): [ /* x_threshold */ number, /* y_threshold */ number ]
    get_motion_coords(): [ /* motion_x */ number, /* motion_y */ number ]
    get_press_coords(): [ /* press_x */ number, /* press_y */ number ]
    set_drag_area(drag_area?: Rect | null): void
    set_drag_axis(axis: DragAxis): void
    set_drag_handle(handle?: Actor | null): void
    set_drag_threshold(x_threshold: number, y_threshold: number): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.DragAction */
    vfunc_drag_begin(actor: Actor, event_x: number, event_y: number, modifiers: ModifierType): void
    vfunc_drag_end(actor: Actor, event_x: number, event_y: number, modifiers: ModifierType): void
    vfunc_drag_motion(actor: Actor, delta_x: number, delta_y: number): void
    vfunc_drag_progress(actor: Actor, delta_x: number, delta_y: number): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.DragAction */
    connect(sigName: "drag-begin", callback: (($obj: DragAction, actor: Actor, event_x: number, event_y: number, modifiers: ModifierType) => void)): number
    connect_after(sigName: "drag-begin", callback: (($obj: DragAction, actor: Actor, event_x: number, event_y: number, modifiers: ModifierType) => void)): number
    emit(sigName: "drag-begin", actor: Actor, event_x: number, event_y: number, modifiers: ModifierType): void
    connect(sigName: "drag-end", callback: (($obj: DragAction, actor: Actor, event_x: number, event_y: number, modifiers: ModifierType) => void)): number
    connect_after(sigName: "drag-end", callback: (($obj: DragAction, actor: Actor, event_x: number, event_y: number, modifiers: ModifierType) => void)): number
    emit(sigName: "drag-end", actor: Actor, event_x: number, event_y: number, modifiers: ModifierType): void
    connect(sigName: "drag-motion", callback: (($obj: DragAction, actor: Actor, delta_x: number, delta_y: number) => void)): number
    connect_after(sigName: "drag-motion", callback: (($obj: DragAction, actor: Actor, delta_x: number, delta_y: number) => void)): number
    emit(sigName: "drag-motion", actor: Actor, delta_x: number, delta_y: number): void
    connect(sigName: "drag-progress", callback: (($obj: DragAction, actor: Actor, delta_x: number, delta_y: number) => boolean)): number
    connect_after(sigName: "drag-progress", callback: (($obj: DragAction, actor: Actor, delta_x: number, delta_y: number) => boolean)): number
    emit(sigName: "drag-progress", actor: Actor, delta_x: number, delta_y: number): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::drag-area", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drag-area", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::drag-area-set", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drag-area-set", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::drag-axis", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drag-axis", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::drag-handle", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::drag-handle", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-drag-threshold", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-drag-threshold", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-drag-threshold", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-drag-threshold", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DragAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DragAction_ConstructProps)
    _init (config?: DragAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DragAction
    static $gtype: GObject.Type
}
interface DropAction_ConstructProps extends Action_ConstructProps {
}
class DropAction {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.DropAction */
    vfunc_can_drop(actor: Actor, event_x: number, event_y: number): boolean
    vfunc_drop(actor: Actor, event_x: number, event_y: number): void
    vfunc_over_in(actor: Actor): void
    vfunc_over_out(actor: Actor): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.DropAction */
    connect(sigName: "can-drop", callback: (($obj: DropAction, actor: Actor, event_x: number, event_y: number) => boolean)): number
    connect_after(sigName: "can-drop", callback: (($obj: DropAction, actor: Actor, event_x: number, event_y: number) => boolean)): number
    emit(sigName: "can-drop", actor: Actor, event_x: number, event_y: number): void
    connect(sigName: "drop", callback: (($obj: DropAction, actor: Actor, event_x: number, event_y: number) => void)): number
    connect_after(sigName: "drop", callback: (($obj: DropAction, actor: Actor, event_x: number, event_y: number) => void)): number
    emit(sigName: "drop", actor: Actor, event_x: number, event_y: number): void
    connect(sigName: "drop-cancel", callback: (($obj: DropAction, actor: Actor, event_x: number, event_y: number) => void)): number
    connect_after(sigName: "drop-cancel", callback: (($obj: DropAction, actor: Actor, event_x: number, event_y: number) => void)): number
    emit(sigName: "drop-cancel", actor: Actor, event_x: number, event_y: number): void
    connect(sigName: "over-in", callback: (($obj: DropAction, actor: Actor) => void)): number
    connect_after(sigName: "over-in", callback: (($obj: DropAction, actor: Actor) => void)): number
    emit(sigName: "over-in", actor: Actor): void
    connect(sigName: "over-out", callback: (($obj: DropAction, actor: Actor) => void)): number
    connect_after(sigName: "over-out", callback: (($obj: DropAction, actor: Actor) => void)): number
    emit(sigName: "over-out", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DropAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DropAction_ConstructProps)
    _init (config?: DropAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DropAction
    static $gtype: GObject.Type
}
interface Effect_ConstructProps extends ActorMeta_ConstructProps {
}
class Effect {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Effect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Effect_ConstructProps)
    _init (config?: Effect_ConstructProps): void
    static $gtype: GObject.Type
}
interface FixedLayout_ConstructProps extends LayoutManager_ConstructProps {
}
class FixedLayout {
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: FixedLayout) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: FixedLayout) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: FixedLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FixedLayout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FixedLayout_ConstructProps)
    _init (config?: FixedLayout_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): FixedLayout
    static $gtype: GObject.Type
}
interface FlowLayout_ConstructProps extends LayoutManager_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.FlowLayout */
    column_spacing?: number
    homogeneous?: boolean
    max_column_width?: number
    max_row_height?: number
    min_column_width?: number
    min_row_height?: number
    orientation?: FlowOrientation
    row_spacing?: number
    snap_to_grid?: boolean
}
class FlowLayout {
    /* Properties of Clutter-1.0.Clutter.FlowLayout */
    column_spacing: number
    homogeneous: boolean
    max_column_width: number
    max_row_height: number
    min_column_width: number
    min_row_height: number
    orientation: FlowOrientation
    row_spacing: number
    snap_to_grid: boolean
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.FlowLayout */
    get_column_spacing(): number
    get_column_width(): [ /* min_width */ number, /* max_width */ number ]
    get_homogeneous(): boolean
    get_orientation(): FlowOrientation
    get_row_height(): [ /* min_height */ number, /* max_height */ number ]
    get_row_spacing(): number
    get_snap_to_grid(): boolean
    set_column_spacing(spacing: number): void
    set_column_width(min_width: number, max_width: number): void
    set_homogeneous(homogeneous: boolean): void
    set_orientation(orientation: FlowOrientation): void
    set_row_height(min_height: number, max_height: number): void
    set_row_spacing(spacing: number): void
    set_snap_to_grid(snap_to_grid: boolean): void
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: FlowLayout) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: FlowLayout) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::column-spacing", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::column-spacing", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::homogeneous", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-column-width", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-column-width", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-row-height", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-row-height", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-column-width", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-column-width", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-row-height", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-row-height", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::orientation", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::row-spacing", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-spacing", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::snap-to-grid", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snap-to-grid", callback: (($obj: FlowLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FlowLayout_ConstructProps)
    _init (config?: FlowLayout_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(orientation: FlowOrientation): FlowLayout
    static $gtype: GObject.Type
}
interface GestureAction_ConstructProps extends Action_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points?: number
    threshold_trigger_distance_x?: number
    threshold_trigger_distance_y?: number
    threshold_trigger_edge?: GestureTriggerEdge
}
class GestureAction {
    /* Properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.GestureAction */
    cancel(): void
    get_device(point: number): InputDevice
    get_last_event(point: number): Event
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_n_current_points(): number
    get_n_touch_points(): number
    get_press_coords(point: number): [ /* press_x */ number | null, /* press_y */ number | null ]
    get_release_coords(point: number): [ /* release_x */ number | null, /* release_y */ number | null ]
    get_sequence(point: number): EventSequence
    get_threshold_trigger_distance(): [ /* x */ number | null, /* y */ number | null ]
    get_threshold_trigger_edge(): GestureTriggerEdge
    get_threshold_trigger_egde(): GestureTriggerEdge
    get_velocity(point: number): [ /* returnType */ number, /* velocity_x */ number | null, /* velocity_y */ number | null ]
    set_n_touch_points(nb_points: number): void
    set_threshold_trigger_distance(x: number, y: number): void
    set_threshold_trigger_edge(edge: GestureTriggerEdge): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.GestureAction */
    vfunc_gesture_begin(actor: Actor): boolean
    vfunc_gesture_cancel(actor: Actor): void
    vfunc_gesture_end(actor: Actor): void
    vfunc_gesture_prepare(actor: Actor): boolean
    vfunc_gesture_progress(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.GestureAction */
    connect(sigName: "gesture-begin", callback: (($obj: GestureAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-begin", callback: (($obj: GestureAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-begin", actor: Actor): void
    connect(sigName: "gesture-cancel", callback: (($obj: GestureAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-cancel", callback: (($obj: GestureAction, actor: Actor) => void)): number
    emit(sigName: "gesture-cancel", actor: Actor): void
    connect(sigName: "gesture-end", callback: (($obj: GestureAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-end", callback: (($obj: GestureAction, actor: Actor) => void)): number
    emit(sigName: "gesture-end", actor: Actor): void
    connect(sigName: "gesture-progress", callback: (($obj: GestureAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-progress", callback: (($obj: GestureAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-progress", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::n-touch-points", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-touch-points", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: GestureAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: GestureAction_ConstructProps)
    _init (config?: GestureAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GestureAction
    static $gtype: GObject.Type
}
interface GridLayout_ConstructProps extends LayoutManager_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.GridLayout */
    column_homogeneous?: boolean
    column_spacing?: number
    orientation?: Orientation
    row_homogeneous?: boolean
    row_spacing?: number
}
class GridLayout {
    /* Properties of Clutter-1.0.Clutter.GridLayout */
    column_homogeneous: boolean
    column_spacing: number
    orientation: Orientation
    row_homogeneous: boolean
    row_spacing: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.GridLayout */
    attach(child: Actor, left: number, top: number, width: number, height: number): void
    attach_next_to(child: Actor, sibling: Actor | null, side: GridPosition, width: number, height: number): void
    get_child_at(left: number, top: number): Actor
    get_column_homogeneous(): boolean
    get_column_spacing(): number
    get_orientation(): Orientation
    get_row_homogeneous(): boolean
    get_row_spacing(): number
    insert_column(position: number): void
    insert_next_to(sibling: Actor, side: GridPosition): void
    insert_row(position: number): void
    set_column_homogeneous(homogeneous: boolean): void
    set_column_spacing(spacing: number): void
    set_orientation(orientation: Orientation): void
    set_row_homogeneous(homogeneous: boolean): void
    set_row_spacing(spacing: number): void
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: GridLayout) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: GridLayout) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::column-homogeneous", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::column-homogeneous", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::column-spacing", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::column-spacing", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::orientation", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::row-homogeneous", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-homogeneous", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::row-spacing", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-spacing", callback: (($obj: GridLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: GridLayout_ConstructProps)
    _init (config?: GridLayout_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GridLayout
    static $gtype: GObject.Type
}
interface Group_ConstructProps extends Actor_ConstructProps {
}
class Group {
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Group */
    get_n_children(): number
    get_nth_child(index_: number): Actor
    remove_all(): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Group */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Group, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Group, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Group, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Group, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Group, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Group, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Group, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Group, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Group) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Group) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Group, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Group, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Group, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Group, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Group) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Group) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Group) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Group) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Group) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Group) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Group, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Group, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Group, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Group, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Group, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Group, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Group, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Group, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Group) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Group) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Group, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Group, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Group, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Group, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Group, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Group, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Group) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Group) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Group) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Group) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Group, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Group, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Group) => void)): number
    connect_after(sigName: "show", callback: (($obj: Group) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Group, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Group, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Group, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Group, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Group) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Group) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Group) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Group) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Group, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Group, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Group, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Group, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Group, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Group, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actions", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Group, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Group_ConstructProps)
    _init (config?: Group_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Group
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface Image_ConstructProps extends GObject.Object_ConstructProps {
}
class Image {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Image */
    set_area(data: Uint8Array, pixel_format: Cogl.PixelFormat, rect: cairo.RectangleInt, row_stride: number): boolean
    set_bytes(data: GLib.Bytes, pixel_format: Cogl.PixelFormat, width: number, height: number, row_stride: number): boolean
    set_data(data: Uint8Array, pixel_format: Cogl.PixelFormat, width: number, height: number, row_stride: number): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Content */
    get_preferred_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    invalidate(): void
    /* Virtual methods of Clutter-1.0.Clutter.Image */
    vfunc_attached(actor: Actor): void
    vfunc_detached(actor: Actor): void
    vfunc_get_preferred_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    vfunc_invalidate(): void
    vfunc_paint_content(actor: Actor, node: PaintNode): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Image, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Image, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Content */
    connect(sigName: "attached", callback: (($obj: Image, actor: Actor) => void)): number
    connect_after(sigName: "attached", callback: (($obj: Image, actor: Actor) => void)): number
    emit(sigName: "attached", actor: Actor): void
    connect(sigName: "detached", callback: (($obj: Image, actor: Actor) => void)): number
    connect_after(sigName: "detached", callback: (($obj: Image, actor: Actor) => void)): number
    emit(sigName: "detached", actor: Actor): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Image_ConstructProps)
    _init (config?: Image_ConstructProps): void
    static $gtype: GObject.Type
}
interface InputDevice_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.InputDevice */
    backend?: Backend
    device_manager?: DeviceManager
    device_mode?: InputMode
    device_type?: InputDeviceType
    enabled?: boolean
    has_cursor?: boolean
    id?: number
    name?: string
    product_id?: string
    vendor_id?: string
}
class InputDevice {
    /* Properties of Clutter-1.0.Clutter.InputDevice */
    enabled: boolean
    readonly n_axes: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.InputDevice */
    get_associated_device(): InputDevice
    get_axis(index_: number): InputAxis
    get_axis_value(axes: number[], axis: InputAxis): [ /* returnType */ boolean, /* value */ number ]
    get_coords(sequence?: EventSequence | null): [ /* returnType */ boolean, /* point */ Point ]
    get_device_coords(): [ /* x */ number, /* y */ number ]
    get_device_id(): number
    get_device_mode(): InputMode
    get_device_name(): string
    get_device_type(): InputDeviceType
    get_enabled(): boolean
    get_grabbed_actor(): Actor
    get_has_cursor(): boolean
    get_key(index_: number): [ /* returnType */ boolean, /* keyval */ number, /* modifiers */ ModifierType ]
    get_modifier_state(): ModifierType
    get_n_axes(): number
    get_n_keys(): number
    get_pointer_actor(): Actor
    get_pointer_stage(): Stage
    get_product_id(): string
    get_slave_devices(): InputDevice[]
    get_vendor_id(): string
    grab(actor: Actor): void
    keycode_to_evdev(hardware_keycode: number, evdev_keycode: number): boolean
    sequence_get_grabbed_actor(sequence: EventSequence): Actor
    sequence_grab(sequence: EventSequence, actor: Actor): void
    sequence_ungrab(sequence: EventSequence): void
    set_enabled(enabled: boolean): void
    set_key(index_: number, keyval: number, modifiers: ModifierType): void
    ungrab(): void
    update_from_event(event: Event, update_stage: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: InputDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: InputDevice, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::enabled", callback: (($obj: InputDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: InputDevice, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::n-axes", callback: (($obj: InputDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-axes", callback: (($obj: InputDevice, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: InputDevice_ConstructProps)
    _init (config?: InputDevice_ConstructProps): void
    static $gtype: GObject.Type
}
interface Interval_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Interval */
    final?: any
    initial?: any
    value_type?: GObject.Type
}
class Interval {
    /* Properties of Clutter-1.0.Clutter.Interval */
    final: any
    initial: any
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Interval */
    clone(): Interval
    compute(factor: number): any
    compute_value(factor: number): [ /* returnType */ boolean, /* value */ any ]
    get_final_value(): /* value */ any
    get_initial_value(): /* value */ any
    get_value_type(): GObject.Type
    is_valid(): boolean
    peek_final_value(): any
    peek_initial_value(): any
    set_final(value: any): void
    set_initial(value: any): void
    validate(pspec: GObject.ParamSpec): boolean
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Interval */
    vfunc_compute_value(factor: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_validate(pspec: GObject.ParamSpec): boolean
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Interval, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Interval, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::final", callback: (($obj: Interval, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::final", callback: (($obj: Interval, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::initial", callback: (($obj: Interval, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::initial", callback: (($obj: Interval, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Interval_ConstructProps)
    _init (config?: Interval_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new_with_values(gtype: GObject.Type, initial?: any | null, final?: any | null): Interval
    static $gtype: GObject.Type
}
interface KeyframeTransition_ConstructProps extends PropertyTransition_ConstructProps {
}
class KeyframeTransition {
    /* Properties of Clutter-1.0.Clutter.PropertyTransition */
    property_name: string
    /* Properties of Clutter-1.0.Clutter.Transition */
    animatable: Animatable
    interval: Interval
    remove_on_complete: boolean
    /* Properties of Clutter-1.0.Clutter.Timeline */
    auto_reverse: boolean
    delay: number
    direction: TimelineDirection
    duration: number
    loop: boolean
    progress_mode: AnimationMode
    repeat_count: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.KeyframeTransition */
    clear(): void
    get_key_frame(index_: number): [ /* key */ number | null, /* mode */ AnimationMode | null, /* value */ any ]
    get_n_key_frames(): number
    set_key_frame(index_: number, key: number, mode: AnimationMode, value: any): void
    set_key_frames(key_frames: number[]): void
    set_modes(modes: AnimationMode[]): void
    set_values(values: any[]): void
    /* Methods of Clutter-1.0.Clutter.PropertyTransition */
    get_property_name(): string
    set_property_name(property_name?: string | null): void
    /* Methods of Clutter-1.0.Clutter.Transition */
    get_animatable(): Animatable
    get_interval(): Interval
    get_remove_on_complete(): boolean
    set_animatable(animatable?: Animatable | null): void
    set_from(value: any): void
    set_interval(interval?: Interval | null): void
    set_remove_on_complete(remove_complete: boolean): void
    set_to(value: any): void
    /* Methods of Clutter-1.0.Clutter.Timeline */
    add_marker(marker_name: string, progress: number): void
    add_marker_at_time(marker_name: string, msecs: number): void
    advance(msecs: number): void
    advance_to_marker(marker_name: string): void
    clone(): Timeline
    get_auto_reverse(): boolean
    get_cubic_bezier_progress(): [ /* returnType */ boolean, /* c_1 */ Point, /* c_2 */ Point ]
    get_current_repeat(): number
    get_delay(): number
    get_delta(): number
    get_direction(): TimelineDirection
    get_duration(): number
    get_duration_hint(): number
    get_elapsed_time(): number
    get_loop(): boolean
    get_progress(): number
    get_progress_mode(): AnimationMode
    get_repeat_count(): number
    get_step_progress(): [ /* returnType */ boolean, /* n_steps */ number, /* step_mode */ StepMode ]
    has_marker(marker_name: string): boolean
    is_playing(): boolean
    list_markers(msecs: number): string[]
    pause(): void
    remove_marker(marker_name: string): void
    rewind(): void
    set_auto_reverse(reverse: boolean): void
    set_cubic_bezier_progress(c_1: Point, c_2: Point): void
    set_delay(msecs: number): void
    set_direction(direction: TimelineDirection): void
    set_duration(msecs: number): void
    set_loop(loop: boolean): void
    set_progress_func(func: TimelineProgressFunc | null): void
    set_progress_mode(mode: AnimationMode): void
    set_repeat_count(count: number): void
    set_step_progress(n_steps: number, step_mode: StepMode): void
    skip(msecs: number): void
    start(): void
    stop(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.KeyframeTransition */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.PropertyTransition */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Transition */
    vfunc_attached(animatable: Animatable): void
    vfunc_compute_value(animatable: Animatable, interval: Interval, progress: number): void
    vfunc_detached(animatable: Animatable): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Timeline */
    vfunc_completed(): void
    vfunc_marker_reached(marker_name: string, msecs: number): void
    vfunc_new_frame(msecs: number): void
    vfunc_paused(): void
    vfunc_started(): void
    vfunc_stopped(is_finished: boolean): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Timeline */
    connect(sigName: "completed", callback: (($obj: KeyframeTransition) => void)): number
    connect_after(sigName: "completed", callback: (($obj: KeyframeTransition) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "marker-reached", callback: (($obj: KeyframeTransition, marker_name: string, msecs: number) => void)): number
    connect_after(sigName: "marker-reached", callback: (($obj: KeyframeTransition, marker_name: string, msecs: number) => void)): number
    emit(sigName: "marker-reached", marker_name: string, msecs: number): void
    connect(sigName: "new-frame", callback: (($obj: KeyframeTransition, msecs: number) => void)): number
    connect_after(sigName: "new-frame", callback: (($obj: KeyframeTransition, msecs: number) => void)): number
    emit(sigName: "new-frame", msecs: number): void
    connect(sigName: "paused", callback: (($obj: KeyframeTransition) => void)): number
    connect_after(sigName: "paused", callback: (($obj: KeyframeTransition) => void)): number
    emit(sigName: "paused"): void
    connect(sigName: "started", callback: (($obj: KeyframeTransition) => void)): number
    connect_after(sigName: "started", callback: (($obj: KeyframeTransition) => void)): number
    emit(sigName: "started"): void
    connect(sigName: "stopped", callback: (($obj: KeyframeTransition, is_finished: boolean) => void)): number
    connect_after(sigName: "stopped", callback: (($obj: KeyframeTransition, is_finished: boolean) => void)): number
    emit(sigName: "stopped", is_finished: boolean): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::property-name", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::property-name", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::animatable", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::animatable", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interval", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interval", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remove-on-complete", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remove-on-complete", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::auto-reverse", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-reverse", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::delay", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delay", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duration", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::loop", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::progress-mode", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-mode", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-count", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-count", callback: (($obj: KeyframeTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: KeyframeTransition_ConstructProps)
    _init (config?: KeyframeTransition_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(property_name: string): KeyframeTransition
    /* Function overloads */
    static new(property_name?: string | null): KeyframeTransition
    static new(msecs: number): KeyframeTransition
    static $gtype: GObject.Type
}
interface LayoutManager_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
}
class LayoutManager {
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: LayoutManager) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: LayoutManager) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: LayoutManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LayoutManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: LayoutManager_ConstructProps)
    _init (config?: LayoutManager_ConstructProps): void
    static $gtype: GObject.Type
}
interface LayoutMeta_ConstructProps extends ChildMeta_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.LayoutMeta */
    manager?: LayoutManager
}
class LayoutMeta {
    /* Fields of Clutter-1.0.Clutter.ChildMeta */
    readonly container: Container
    readonly actor: Actor
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.LayoutMeta */
    get_manager(): LayoutManager
    /* Methods of Clutter-1.0.Clutter.ChildMeta */
    get_actor(): Actor
    get_container(): Container
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: LayoutMeta, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LayoutMeta, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: LayoutMeta_ConstructProps)
    _init (config?: LayoutMeta_ConstructProps): void
    static $gtype: GObject.Type
}
interface ListModel_ConstructProps extends Model_ConstructProps {
}
class ListModel {
    /* Properties of Clutter-1.0.Clutter.Model */
    readonly filter_set: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Model */
    appendv(columns: number[], values: any[]): void
    filter_iter(iter: ModelIter): boolean
    filter_row(row: number): boolean
    foreach(func: ModelForeachFunc): void
    get_column_name(column: number): string
    get_column_type(column: number): GObject.Type
    get_filter_set(): boolean
    get_first_iter(): ModelIter
    get_iter_at_row(row: number): ModelIter
    get_last_iter(): ModelIter
    get_n_columns(): number
    get_n_rows(): number
    get_sorting_column(): number
    insert_value(row: number, column: number, value: any): void
    insertv(row: number, columns: number[], values: any[]): void
    prependv(columns: number[], values: any[]): void
    remove(row: number): void
    resort(): void
    set_filter(func: ModelFilterFunc | null): void
    set_names(names: string[]): void
    set_sort(column: number, func: ModelSortFunc | null): void
    set_sorting_column(column: number): void
    set_types(types: GObject.Type[]): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.ListModel */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Model */
    vfunc_filter_changed(): void
    vfunc_get_column_name(column: number): string
    vfunc_get_column_type(column: number): GObject.Type
    vfunc_get_iter_at_row(row: number): ModelIter
    vfunc_get_n_columns(): number
    vfunc_get_n_rows(): number
    vfunc_remove_row(row: number): void
    vfunc_row_added(iter: ModelIter): void
    vfunc_row_changed(iter: ModelIter): void
    vfunc_row_removed(iter: ModelIter): void
    vfunc_sort_changed(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Model */
    connect(sigName: "filter-changed", callback: (($obj: ListModel) => void)): number
    connect_after(sigName: "filter-changed", callback: (($obj: ListModel) => void)): number
    emit(sigName: "filter-changed"): void
    connect(sigName: "row-added", callback: (($obj: ListModel, iter: ModelIter) => void)): number
    connect_after(sigName: "row-added", callback: (($obj: ListModel, iter: ModelIter) => void)): number
    emit(sigName: "row-added", iter: ModelIter): void
    connect(sigName: "row-changed", callback: (($obj: ListModel, iter: ModelIter) => void)): number
    connect_after(sigName: "row-changed", callback: (($obj: ListModel, iter: ModelIter) => void)): number
    emit(sigName: "row-changed", iter: ModelIter): void
    connect(sigName: "row-removed", callback: (($obj: ListModel, iter: ModelIter) => void)): number
    connect_after(sigName: "row-removed", callback: (($obj: ListModel, iter: ModelIter) => void)): number
    emit(sigName: "row-removed", iter: ModelIter): void
    connect(sigName: "sort-changed", callback: (($obj: ListModel) => void)): number
    connect_after(sigName: "sort-changed", callback: (($obj: ListModel) => void)): number
    emit(sigName: "sort-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ListModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ListModel, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filter-set", callback: (($obj: ListModel, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-set", callback: (($obj: ListModel, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ListModel_ConstructProps)
    _init (config?: ListModel_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static newv(types: GObject.Type[], names: string[]): ListModel
    /* Function overloads */
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[]): ListModel
    static $gtype: GObject.Type
}
interface Model_ConstructProps extends GObject.Object_ConstructProps {
}
class Model {
    /* Properties of Clutter-1.0.Clutter.Model */
    readonly filter_set: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Model */
    appendv(columns: number[], values: any[]): void
    filter_iter(iter: ModelIter): boolean
    filter_row(row: number): boolean
    foreach(func: ModelForeachFunc): void
    get_column_name(column: number): string
    get_column_type(column: number): GObject.Type
    get_filter_set(): boolean
    get_first_iter(): ModelIter
    get_iter_at_row(row: number): ModelIter
    get_last_iter(): ModelIter
    get_n_columns(): number
    get_n_rows(): number
    get_sorting_column(): number
    insert_value(row: number, column: number, value: any): void
    insertv(row: number, columns: number[], values: any[]): void
    prependv(columns: number[], values: any[]): void
    remove(row: number): void
    resort(): void
    set_filter(func: ModelFilterFunc | null): void
    set_names(names: string[]): void
    set_sort(column: number, func: ModelSortFunc | null): void
    set_sorting_column(column: number): void
    set_types(types: GObject.Type[]): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Model */
    vfunc_filter_changed(): void
    vfunc_get_column_name(column: number): string
    vfunc_get_column_type(column: number): GObject.Type
    vfunc_get_iter_at_row(row: number): ModelIter
    vfunc_get_n_columns(): number
    vfunc_get_n_rows(): number
    vfunc_remove_row(row: number): void
    vfunc_row_added(iter: ModelIter): void
    vfunc_row_changed(iter: ModelIter): void
    vfunc_row_removed(iter: ModelIter): void
    vfunc_sort_changed(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Model */
    connect(sigName: "filter-changed", callback: (($obj: Model) => void)): number
    connect_after(sigName: "filter-changed", callback: (($obj: Model) => void)): number
    emit(sigName: "filter-changed"): void
    connect(sigName: "row-added", callback: (($obj: Model, iter: ModelIter) => void)): number
    connect_after(sigName: "row-added", callback: (($obj: Model, iter: ModelIter) => void)): number
    emit(sigName: "row-added", iter: ModelIter): void
    connect(sigName: "row-changed", callback: (($obj: Model, iter: ModelIter) => void)): number
    connect_after(sigName: "row-changed", callback: (($obj: Model, iter: ModelIter) => void)): number
    emit(sigName: "row-changed", iter: ModelIter): void
    connect(sigName: "row-removed", callback: (($obj: Model, iter: ModelIter) => void)): number
    connect_after(sigName: "row-removed", callback: (($obj: Model, iter: ModelIter) => void)): number
    emit(sigName: "row-removed", iter: ModelIter): void
    connect(sigName: "sort-changed", callback: (($obj: Model) => void)): number
    connect_after(sigName: "sort-changed", callback: (($obj: Model) => void)): number
    emit(sigName: "sort-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Model, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Model, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filter-set", callback: (($obj: Model, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-set", callback: (($obj: Model, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Model_ConstructProps)
    _init (config?: Model_ConstructProps): void
    static $gtype: GObject.Type
}
interface ModelIter_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ModelIter */
    model?: Model
    row?: number
}
class ModelIter {
    /* Properties of Clutter-1.0.Clutter.ModelIter */
    model: Model
    row: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ModelIter */
    copy(): ModelIter
    get_model(): Model
    get_row(): number
    get_value(column: number): /* value */ any
    is_first(): boolean
    is_last(): boolean
    next(): ModelIter
    prev(): ModelIter
    set_value(column: number, value: any): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.ModelIter */
    vfunc_copy(): ModelIter
    vfunc_get_model(): Model
    vfunc_get_row(): number
    vfunc_get_value(column: number): /* value */ any
    vfunc_is_first(): boolean
    vfunc_is_last(): boolean
    vfunc_next(): ModelIter
    vfunc_prev(): ModelIter
    vfunc_set_value(column: number, value: any): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ModelIter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ModelIter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::model", callback: (($obj: ModelIter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::model", callback: (($obj: ModelIter, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::row", callback: (($obj: ModelIter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row", callback: (($obj: ModelIter, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ModelIter_ConstructProps)
    _init (config?: ModelIter_ConstructProps): void
    static $gtype: GObject.Type
}
interface OffscreenEffect_ConstructProps extends Effect_ConstructProps {
}
class OffscreenEffect {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: OffscreenEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: OffscreenEffect_ConstructProps)
    _init (config?: OffscreenEffect_ConstructProps): void
    static $gtype: GObject.Type
}
interface PageTurnEffect_ConstructProps extends DeformEffect_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.PageTurnEffect */
    angle?: number
    period?: number
    radius?: number
}
class PageTurnEffect {
    /* Properties of Clutter-1.0.Clutter.PageTurnEffect */
    angle: number
    period: number
    radius: number
    /* Properties of Clutter-1.0.Clutter.DeformEffect */
    x_tiles: number
    y_tiles: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.PageTurnEffect */
    get_angle(): number
    get_period(): number
    get_radius(): number
    set_angle(angle: number): void
    set_period(period: number): void
    set_radius(radius: number): void
    /* Methods of Clutter-1.0.Clutter.DeformEffect */
    get_back_material(): Cogl.Handle
    get_n_tiles(): [ /* x_tiles */ number, /* y_tiles */ number ]
    invalidate(): void
    set_back_material(material?: Cogl.Handle | null): void
    set_n_tiles(x_tiles: number, y_tiles: number): void
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.DeformEffect */
    vfunc_deform_vertex(width: number, height: number, vertex: Cogl.TextureVertex): void
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::angle", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::angle", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::period", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::period", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::radius", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::radius", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-tiles", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-tiles", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-tiles", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-tiles", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: PageTurnEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: PageTurnEffect_ConstructProps)
    _init (config?: PageTurnEffect_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(period: number, angle: number, radius: number): PageTurnEffect
    static $gtype: GObject.Type
}
class PaintNode {
    /* Methods of Clutter-1.0.Clutter.PaintNode */
    add_child(child: PaintNode): void
    add_rectangle(rect: ActorBox): void
    add_texture_rectangle(rect: ActorBox, x_1: number, y_1: number, x_2: number, y_2: number): void
    ref(): PaintNode
    set_name(name: string): void
    unref(): void
    static name: string
}
interface PanAction_ConstructProps extends GestureAction_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.PanAction */
    acceleration_factor?: number
    deceleration?: number
    interpolate?: boolean
    pan_axis?: PanAxis
}
class PanAction {
    /* Properties of Clutter-1.0.Clutter.PanAction */
    acceleration_factor: number
    deceleration: number
    interpolate: boolean
    pan_axis: PanAxis
    /* Properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.PanAction */
    get_acceleration_factor(): number
    get_constrained_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_deceleration(): number
    get_interpolate(): boolean
    get_interpolated_coords(): [ /* interpolated_x */ number | null, /* interpolated_y */ number | null ]
    get_interpolated_delta(): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_pan_axis(): PanAxis
    set_acceleration_factor(factor: number): void
    set_deceleration(rate: number): void
    set_interpolate(should_interpolate: boolean): void
    set_pan_axis(axis: PanAxis): void
    /* Methods of Clutter-1.0.Clutter.GestureAction */
    cancel(): void
    get_device(point: number): InputDevice
    get_last_event(point: number): Event
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_n_current_points(): number
    get_n_touch_points(): number
    get_press_coords(point: number): [ /* press_x */ number | null, /* press_y */ number | null ]
    get_release_coords(point: number): [ /* release_x */ number | null, /* release_y */ number | null ]
    get_sequence(point: number): EventSequence
    get_threshold_trigger_distance(): [ /* x */ number | null, /* y */ number | null ]
    get_threshold_trigger_edge(): GestureTriggerEdge
    get_threshold_trigger_egde(): GestureTriggerEdge
    get_velocity(point: number): [ /* returnType */ number, /* velocity_x */ number | null, /* velocity_y */ number | null ]
    set_n_touch_points(nb_points: number): void
    set_threshold_trigger_distance(x: number, y: number): void
    set_threshold_trigger_edge(edge: GestureTriggerEdge): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.PanAction */
    vfunc_pan(actor: Actor, is_interpolated: boolean): boolean
    vfunc_pan_stopped(actor: Actor): void
    /* Virtual methods of Clutter-1.0.Clutter.GestureAction */
    vfunc_gesture_begin(actor: Actor): boolean
    vfunc_gesture_cancel(actor: Actor): void
    vfunc_gesture_end(actor: Actor): void
    vfunc_gesture_prepare(actor: Actor): boolean
    vfunc_gesture_progress(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.PanAction */
    connect(sigName: "pan", callback: (($obj: PanAction, actor: Actor, is_interpolated: boolean) => boolean)): number
    connect_after(sigName: "pan", callback: (($obj: PanAction, actor: Actor, is_interpolated: boolean) => boolean)): number
    emit(sigName: "pan", actor: Actor, is_interpolated: boolean): void
    connect(sigName: "pan-stopped", callback: (($obj: PanAction, actor: Actor) => void)): number
    connect_after(sigName: "pan-stopped", callback: (($obj: PanAction, actor: Actor) => void)): number
    emit(sigName: "pan-stopped", actor: Actor): void
    /* Signals of Clutter-1.0.Clutter.GestureAction */
    connect(sigName: "gesture-begin", callback: (($obj: PanAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-begin", callback: (($obj: PanAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-begin", actor: Actor): void
    connect(sigName: "gesture-cancel", callback: (($obj: PanAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-cancel", callback: (($obj: PanAction, actor: Actor) => void)): number
    emit(sigName: "gesture-cancel", actor: Actor): void
    connect(sigName: "gesture-end", callback: (($obj: PanAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-end", callback: (($obj: PanAction, actor: Actor) => void)): number
    emit(sigName: "gesture-end", actor: Actor): void
    connect(sigName: "gesture-progress", callback: (($obj: PanAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-progress", callback: (($obj: PanAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-progress", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::acceleration-factor", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::acceleration-factor", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::deceleration", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::deceleration", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interpolate", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interpolate", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pan-axis", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pan-axis", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::n-touch-points", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-touch-points", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: PanAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: PanAction_ConstructProps)
    _init (config?: PanAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): PanAction
    static $gtype: GObject.Type
}
class ParamSpecColor {
    /* Fields of GObject-2.0.GObject.ParamSpec */
    readonly g_type_instance: GObject.TypeInstance
    readonly name: string
    readonly flags: GObject.ParamFlags
    readonly value_type: GObject.Type
    readonly owner_type: GObject.Type
    /* Methods of GObject-2.0.GObject.ParamSpec */
    get_blurb(): string | null
    get_default_value(): any
    get_name(): string
    get_name_quark(): GLib.Quark
    get_nick(): string
    get_qdata(quark: GLib.Quark): object | null
    get_redirect_target(): GObject.ParamSpec | null
    set_qdata(quark: GLib.Quark, data?: object | null): void
    sink(): void
    steal_qdata(quark: GLib.Quark): object | null
    /* Virtual methods of GObject-2.0.GObject.ParamSpec */
    vfunc_finalize(): void
    vfunc_value_set_default(value: any): void
    vfunc_value_validate(value: any): boolean
    vfunc_values_cmp(value1: any, value2: any): number
    static name: string
}
class ParamSpecFixed {
    /* Fields of GObject-2.0.GObject.ParamSpec */
    readonly g_type_instance: GObject.TypeInstance
    readonly name: string
    readonly flags: GObject.ParamFlags
    readonly value_type: GObject.Type
    readonly owner_type: GObject.Type
    /* Methods of GObject-2.0.GObject.ParamSpec */
    get_blurb(): string | null
    get_default_value(): any
    get_name(): string
    get_name_quark(): GLib.Quark
    get_nick(): string
    get_qdata(quark: GLib.Quark): object | null
    get_redirect_target(): GObject.ParamSpec | null
    set_qdata(quark: GLib.Quark, data?: object | null): void
    sink(): void
    steal_qdata(quark: GLib.Quark): object | null
    /* Virtual methods of GObject-2.0.GObject.ParamSpec */
    vfunc_finalize(): void
    vfunc_value_set_default(value: any): void
    vfunc_value_validate(value: any): boolean
    vfunc_values_cmp(value1: any, value2: any): number
    static name: string
}
class ParamSpecUnit {
    /* Fields of GObject-2.0.GObject.ParamSpec */
    readonly g_type_instance: GObject.TypeInstance
    readonly name: string
    readonly flags: GObject.ParamFlags
    readonly value_type: GObject.Type
    readonly owner_type: GObject.Type
    /* Methods of GObject-2.0.GObject.ParamSpec */
    get_blurb(): string | null
    get_default_value(): any
    get_name(): string
    get_name_quark(): GLib.Quark
    get_nick(): string
    get_qdata(quark: GLib.Quark): object | null
    get_redirect_target(): GObject.ParamSpec | null
    set_qdata(quark: GLib.Quark, data?: object | null): void
    sink(): void
    steal_qdata(quark: GLib.Quark): object | null
    /* Virtual methods of GObject-2.0.GObject.ParamSpec */
    vfunc_finalize(): void
    vfunc_value_set_default(value: any): void
    vfunc_value_validate(value: any): boolean
    vfunc_values_cmp(value1: any, value2: any): number
    static name: string
}
interface Path_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Path */
    description?: string
}
class Path {
    /* Properties of Clutter-1.0.Clutter.Path */
    description: string
    readonly length: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Path */
    add_cairo_path(cpath: cairo.Path): void
    add_close(): void
    add_curve_to(x_1: number, y_1: number, x_2: number, y_2: number, x_3: number, y_3: number): void
    add_line_to(x: number, y: number): void
    add_move_to(x: number, y: number): void
    add_node(node: PathNode): void
    add_rel_curve_to(x_1: number, y_1: number, x_2: number, y_2: number, x_3: number, y_3: number): void
    add_rel_line_to(x: number, y: number): void
    add_rel_move_to(x: number, y: number): void
    add_string(str: string): boolean
    clear(): void
    foreach(callback: PathCallback): void
    get_description(): string
    get_length(): number
    get_n_nodes(): number
    get_node(index_: number): /* node */ PathNode
    get_nodes(): PathNode[]
    get_position(progress: number): [ /* returnType */ number, /* position */ Knot ]
    insert_node(index_: number, node: PathNode): void
    remove_node(index_: number): void
    replace_node(index_: number, node: PathNode): void
    set_description(str: string): boolean
    to_cairo_path(cr: cairo.Context): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Path, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Path, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::description", callback: (($obj: Path, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: Path, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::length", callback: (($obj: Path, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: Path, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Path_ConstructProps)
    _init (config?: Path_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Path
    static new_with_description(desc: string): Path
    static $gtype: GObject.Type
}
interface PathConstraint_ConstructProps extends Constraint_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.PathConstraint */
    offset?: number
    path?: Path
}
class PathConstraint {
    /* Properties of Clutter-1.0.Clutter.PathConstraint */
    offset: number
    path: Path
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.PathConstraint */
    get_offset(): number
    get_path(): Path
    set_offset(offset: number): void
    set_path(path?: Path | null): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Constraint */
    vfunc_update_allocation(actor: Actor, allocation: ActorBox): void
    vfunc_update_preferred_size(actor: Actor, direction: Orientation, for_size: number, minimum_size: number, natural_size: number): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.PathConstraint */
    connect(sigName: "node-reached", callback: (($obj: PathConstraint, actor: Actor, index: number) => void)): number
    connect_after(sigName: "node-reached", callback: (($obj: PathConstraint, actor: Actor, index: number) => void)): number
    emit(sigName: "node-reached", actor: Actor, index: number): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::offset", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: PathConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: PathConstraint_ConstructProps)
    _init (config?: PathConstraint_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(path: Path | null, offset: number): PathConstraint
    static $gtype: GObject.Type
}
class PipelineNode {
    /* Methods of Clutter-1.0.Clutter.PaintNode */
    add_child(child: PaintNode): void
    add_rectangle(rect: ActorBox): void
    add_texture_rectangle(rect: ActorBox, x_1: number, y_1: number, x_2: number, y_2: number): void
    ref(): PaintNode
    set_name(name: string): void
    unref(): void
    static name: string
}
interface PropertyTransition_ConstructProps extends Transition_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.PropertyTransition */
    property_name?: string
}
class PropertyTransition {
    /* Properties of Clutter-1.0.Clutter.PropertyTransition */
    property_name: string
    /* Properties of Clutter-1.0.Clutter.Transition */
    animatable: Animatable
    interval: Interval
    remove_on_complete: boolean
    /* Properties of Clutter-1.0.Clutter.Timeline */
    auto_reverse: boolean
    delay: number
    direction: TimelineDirection
    duration: number
    loop: boolean
    progress_mode: AnimationMode
    repeat_count: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.PropertyTransition */
    get_property_name(): string
    set_property_name(property_name?: string | null): void
    /* Methods of Clutter-1.0.Clutter.Transition */
    get_animatable(): Animatable
    get_interval(): Interval
    get_remove_on_complete(): boolean
    set_animatable(animatable?: Animatable | null): void
    set_from(value: any): void
    set_interval(interval?: Interval | null): void
    set_remove_on_complete(remove_complete: boolean): void
    set_to(value: any): void
    /* Methods of Clutter-1.0.Clutter.Timeline */
    add_marker(marker_name: string, progress: number): void
    add_marker_at_time(marker_name: string, msecs: number): void
    advance(msecs: number): void
    advance_to_marker(marker_name: string): void
    clone(): Timeline
    get_auto_reverse(): boolean
    get_cubic_bezier_progress(): [ /* returnType */ boolean, /* c_1 */ Point, /* c_2 */ Point ]
    get_current_repeat(): number
    get_delay(): number
    get_delta(): number
    get_direction(): TimelineDirection
    get_duration(): number
    get_duration_hint(): number
    get_elapsed_time(): number
    get_loop(): boolean
    get_progress(): number
    get_progress_mode(): AnimationMode
    get_repeat_count(): number
    get_step_progress(): [ /* returnType */ boolean, /* n_steps */ number, /* step_mode */ StepMode ]
    has_marker(marker_name: string): boolean
    is_playing(): boolean
    list_markers(msecs: number): string[]
    pause(): void
    remove_marker(marker_name: string): void
    rewind(): void
    set_auto_reverse(reverse: boolean): void
    set_cubic_bezier_progress(c_1: Point, c_2: Point): void
    set_delay(msecs: number): void
    set_direction(direction: TimelineDirection): void
    set_duration(msecs: number): void
    set_loop(loop: boolean): void
    set_progress_func(func: TimelineProgressFunc | null): void
    set_progress_mode(mode: AnimationMode): void
    set_repeat_count(count: number): void
    set_step_progress(n_steps: number, step_mode: StepMode): void
    skip(msecs: number): void
    start(): void
    stop(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.PropertyTransition */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Transition */
    vfunc_attached(animatable: Animatable): void
    vfunc_compute_value(animatable: Animatable, interval: Interval, progress: number): void
    vfunc_detached(animatable: Animatable): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Timeline */
    vfunc_completed(): void
    vfunc_marker_reached(marker_name: string, msecs: number): void
    vfunc_new_frame(msecs: number): void
    vfunc_paused(): void
    vfunc_started(): void
    vfunc_stopped(is_finished: boolean): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Timeline */
    connect(sigName: "completed", callback: (($obj: PropertyTransition) => void)): number
    connect_after(sigName: "completed", callback: (($obj: PropertyTransition) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "marker-reached", callback: (($obj: PropertyTransition, marker_name: string, msecs: number) => void)): number
    connect_after(sigName: "marker-reached", callback: (($obj: PropertyTransition, marker_name: string, msecs: number) => void)): number
    emit(sigName: "marker-reached", marker_name: string, msecs: number): void
    connect(sigName: "new-frame", callback: (($obj: PropertyTransition, msecs: number) => void)): number
    connect_after(sigName: "new-frame", callback: (($obj: PropertyTransition, msecs: number) => void)): number
    emit(sigName: "new-frame", msecs: number): void
    connect(sigName: "paused", callback: (($obj: PropertyTransition) => void)): number
    connect_after(sigName: "paused", callback: (($obj: PropertyTransition) => void)): number
    emit(sigName: "paused"): void
    connect(sigName: "started", callback: (($obj: PropertyTransition) => void)): number
    connect_after(sigName: "started", callback: (($obj: PropertyTransition) => void)): number
    emit(sigName: "started"): void
    connect(sigName: "stopped", callback: (($obj: PropertyTransition, is_finished: boolean) => void)): number
    connect_after(sigName: "stopped", callback: (($obj: PropertyTransition, is_finished: boolean) => void)): number
    emit(sigName: "stopped", is_finished: boolean): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::property-name", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::property-name", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::animatable", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::animatable", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interval", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interval", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remove-on-complete", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remove-on-complete", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::auto-reverse", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-reverse", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::delay", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delay", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duration", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::loop", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::progress-mode", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-mode", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-count", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-count", callback: (($obj: PropertyTransition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: PropertyTransition_ConstructProps)
    _init (config?: PropertyTransition_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(property_name?: string | null): PropertyTransition
    /* Function overloads */
    static new(msecs: number): PropertyTransition
    static $gtype: GObject.Type
}
interface Rectangle_ConstructProps extends Actor_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Rectangle */
    border_color?: Color
    border_width?: number
    color?: Color
    has_border?: boolean
}
class Rectangle {
    /* Properties of Clutter-1.0.Clutter.Rectangle */
    border_color: Color
    border_width: number
    color: Color
    has_border: boolean
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Rectangle */
    get_border_color(): /* color */ Color
    get_border_width(): number
    get_color(): /* color */ Color
    set_border_color(color: Color): void
    set_border_width(width: number): void
    set_color(color: Color): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Rectangle */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Rectangle, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Rectangle, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Rectangle, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Rectangle, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Rectangle, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Rectangle, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Rectangle, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Rectangle, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Rectangle, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Rectangle, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Rectangle, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Rectangle, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Rectangle, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Rectangle, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Rectangle, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Rectangle, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Rectangle, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Rectangle, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Rectangle, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Rectangle, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Rectangle, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Rectangle, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Rectangle, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Rectangle, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Rectangle, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Rectangle, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Rectangle, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Rectangle, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "show", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Rectangle, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Rectangle, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Rectangle, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Rectangle, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Rectangle) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Rectangle) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Rectangle, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Rectangle, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Rectangle, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Rectangle, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Rectangle, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Rectangle, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::border-color", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-color", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::border-width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::color", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-border", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-border", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Rectangle, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Rectangle_ConstructProps)
    _init (config?: Rectangle_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Rectangle
    static new_with_color(color: Color): Rectangle
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface RotateAction_ConstructProps extends GestureAction_ConstructProps {
}
class RotateAction {
    /* Properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.GestureAction */
    cancel(): void
    get_device(point: number): InputDevice
    get_last_event(point: number): Event
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_n_current_points(): number
    get_n_touch_points(): number
    get_press_coords(point: number): [ /* press_x */ number | null, /* press_y */ number | null ]
    get_release_coords(point: number): [ /* release_x */ number | null, /* release_y */ number | null ]
    get_sequence(point: number): EventSequence
    get_threshold_trigger_distance(): [ /* x */ number | null, /* y */ number | null ]
    get_threshold_trigger_edge(): GestureTriggerEdge
    get_threshold_trigger_egde(): GestureTriggerEdge
    get_velocity(point: number): [ /* returnType */ number, /* velocity_x */ number | null, /* velocity_y */ number | null ]
    set_n_touch_points(nb_points: number): void
    set_threshold_trigger_distance(x: number, y: number): void
    set_threshold_trigger_edge(edge: GestureTriggerEdge): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.RotateAction */
    vfunc_rotate(actor: Actor, angle: number): boolean
    /* Virtual methods of Clutter-1.0.Clutter.GestureAction */
    vfunc_gesture_begin(actor: Actor): boolean
    vfunc_gesture_cancel(actor: Actor): void
    vfunc_gesture_end(actor: Actor): void
    vfunc_gesture_prepare(actor: Actor): boolean
    vfunc_gesture_progress(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.RotateAction */
    connect(sigName: "rotate", callback: (($obj: RotateAction, actor: Actor, angle: number) => boolean)): number
    connect_after(sigName: "rotate", callback: (($obj: RotateAction, actor: Actor, angle: number) => boolean)): number
    emit(sigName: "rotate", actor: Actor, angle: number): void
    /* Signals of Clutter-1.0.Clutter.GestureAction */
    connect(sigName: "gesture-begin", callback: (($obj: RotateAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-begin", callback: (($obj: RotateAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-begin", actor: Actor): void
    connect(sigName: "gesture-cancel", callback: (($obj: RotateAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-cancel", callback: (($obj: RotateAction, actor: Actor) => void)): number
    emit(sigName: "gesture-cancel", actor: Actor): void
    connect(sigName: "gesture-end", callback: (($obj: RotateAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-end", callback: (($obj: RotateAction, actor: Actor) => void)): number
    emit(sigName: "gesture-end", actor: Actor): void
    connect(sigName: "gesture-progress", callback: (($obj: RotateAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-progress", callback: (($obj: RotateAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-progress", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::n-touch-points", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-touch-points", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: RotateAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: RotateAction_ConstructProps)
    _init (config?: RotateAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): RotateAction
    static $gtype: GObject.Type
}
interface Score_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Score */
    loop?: boolean
}
class Score {
    /* Properties of Clutter-1.0.Clutter.Score */
    loop: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Score */
    append(parent: Timeline | null, timeline: Timeline): number
    append_at_marker(parent: Timeline, marker_name: string, timeline: Timeline): number
    get_loop(): boolean
    get_timeline(id_: number): Timeline
    is_playing(): boolean
    list_timelines(): Timeline[]
    pause(): void
    remove(id_: number): void
    remove_all(): void
    rewind(): void
    set_loop(loop: boolean): void
    start(): void
    stop(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Score */
    vfunc_completed(): void
    vfunc_paused(): void
    vfunc_started(): void
    vfunc_timeline_completed(timeline: Timeline): void
    vfunc_timeline_started(timeline: Timeline): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Score */
    connect(sigName: "completed", callback: (($obj: Score) => void)): number
    connect_after(sigName: "completed", callback: (($obj: Score) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "paused", callback: (($obj: Score) => void)): number
    connect_after(sigName: "paused", callback: (($obj: Score) => void)): number
    emit(sigName: "paused"): void
    connect(sigName: "started", callback: (($obj: Score) => void)): number
    connect_after(sigName: "started", callback: (($obj: Score) => void)): number
    emit(sigName: "started"): void
    connect(sigName: "timeline-completed", callback: (($obj: Score, timeline: Timeline) => void)): number
    connect_after(sigName: "timeline-completed", callback: (($obj: Score, timeline: Timeline) => void)): number
    emit(sigName: "timeline-completed", timeline: Timeline): void
    connect(sigName: "timeline-started", callback: (($obj: Score, timeline: Timeline) => void)): number
    connect_after(sigName: "timeline-started", callback: (($obj: Score, timeline: Timeline) => void)): number
    emit(sigName: "timeline-started", timeline: Timeline): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Score, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Score, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::loop", callback: (($obj: Score, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: Score, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Score_ConstructProps)
    _init (config?: Score_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Score
    static $gtype: GObject.Type
}
interface Script_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Script */
    translation_domain?: string
}
class Script {
    /* Properties of Clutter-1.0.Clutter.Script */
    readonly filename: string
    readonly filename_set: boolean
    translation_domain: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Script */
    add_search_paths(paths: string[]): void
    add_states(name: string | null, state: State): void
    connect_signals(user_data?: object | null): void
    connect_signals_full(func: ScriptConnectFunc): void
    ensure_objects(): void
    get_object(name: string): GObject.Object
    get_states(name?: string | null): State
    get_translation_domain(): string
    get_type_from_name(type_name: string): GObject.Type
    list_objects(): GObject.Object[]
    load_from_data(data: string, length: number): number
    load_from_file(filename: string): number
    load_from_resource(resource_path: string): number
    lookup_filename(filename: string): string
    set_translation_domain(domain?: string | null): void
    unmerge_objects(merge_id: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Script */
    vfunc_get_type_from_name(type_name: string): GObject.Type
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filename", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filename-set", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename-set", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-domain", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-domain", callback: (($obj: Script, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Script_ConstructProps)
    _init (config?: Script_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Script
    static $gtype: GObject.Type
}
interface ScrollActor_ConstructProps extends Actor_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ScrollActor */
    scroll_mode?: ScrollMode
}
class ScrollActor {
    /* Properties of Clutter-1.0.Clutter.ScrollActor */
    scroll_mode: ScrollMode
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ScrollActor */
    get_scroll_mode(): ScrollMode
    scroll_to_point(point: Point): void
    scroll_to_rect(rect: Rect): void
    set_scroll_mode(mode: ScrollMode): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.ScrollActor */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: ScrollActor, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: ScrollActor, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: ScrollActor, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: ScrollActor, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: ScrollActor, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: ScrollActor, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: ScrollActor, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: ScrollActor, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: ScrollActor, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: ScrollActor, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: ScrollActor, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: ScrollActor, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "hide", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: ScrollActor, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: ScrollActor, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: ScrollActor, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: ScrollActor, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: ScrollActor, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: ScrollActor, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: ScrollActor, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: ScrollActor, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "paint", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: ScrollActor, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: ScrollActor, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: ScrollActor, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: ScrollActor, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: ScrollActor, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: ScrollActor, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "realize", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: ScrollActor, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: ScrollActor, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "show", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: ScrollActor, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: ScrollActor, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: ScrollActor, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: ScrollActor, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: ScrollActor) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: ScrollActor) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: ScrollActor, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: ScrollActor, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: ScrollActor, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: ScrollActor, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: ScrollActor, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: ScrollActor, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::scroll-mode", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-mode", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: ScrollActor, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ScrollActor_ConstructProps)
    _init (config?: ScrollActor_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ScrollActor
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface Settings_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Settings */
    backend?: Backend
    dnd_drag_threshold?: number
    double_click_distance?: number
    double_click_time?: number
    font_antialias?: number
    font_dpi?: number
    font_hint_style?: string
    font_hinting?: number
    font_name?: string
    font_subpixel_order?: string
    fontconfig_timestamp?: number
    long_press_duration?: number
    password_hint_time?: number
    unscaled_font_dpi?: number
    window_scaling_factor?: number
}
class Settings {
    /* Properties of Clutter-1.0.Clutter.Settings */
    dnd_drag_threshold: number
    double_click_distance: number
    double_click_time: number
    font_antialias: number
    font_dpi: number
    font_hint_style: string
    font_hinting: number
    font_name: string
    font_subpixel_order: string
    fontconfig_timestamp: number
    long_press_duration: number
    password_hint_time: number
    unscaled_font_dpi: number
    window_scaling_factor: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::dnd-drag-threshold", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dnd-drag-threshold", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::double-click-distance", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-click-distance", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::double-click-time", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-click-time", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-antialias", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-antialias", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-dpi", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-dpi", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-hint-style", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-hint-style", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-hinting", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-hinting", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-name", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-name", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-subpixel-order", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-subpixel-order", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fontconfig-timestamp", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fontconfig-timestamp", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::long-press-duration", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::long-press-duration", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-hint-time", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-hint-time", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::unscaled-font-dpi", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unscaled-font-dpi", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::window-scaling-factor", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window-scaling-factor", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Settings_ConstructProps)
    _init (config?: Settings_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_default(): Settings
    static $gtype: GObject.Type
}
interface Shader_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Shader */
    enabled?: boolean
    fragment_source?: string
    vertex_source?: string
}
class Shader {
    /* Properties of Clutter-1.0.Clutter.Shader */
    readonly compiled: boolean
    enabled: boolean
    fragment_source: string
    vertex_source: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Shader */
    compile(): boolean
    get_cogl_fragment_shader(): Cogl.Handle
    get_cogl_program(): Cogl.Handle
    get_cogl_vertex_shader(): Cogl.Handle
    get_fragment_source(): string
    get_is_enabled(): boolean
    get_vertex_source(): string
    is_compiled(): boolean
    release(): void
    set_fragment_source(data: string, length: number): void
    set_is_enabled(enabled: boolean): void
    set_uniform(name: string, value: any): void
    set_vertex_source(data: string, length: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compiled", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compiled", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fragment-source", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fragment-source", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::vertex-source", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vertex-source", callback: (($obj: Shader, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Shader_ConstructProps)
    _init (config?: Shader_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Shader
    static $gtype: GObject.Type
}
interface ShaderEffect_ConstructProps extends OffscreenEffect_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ShaderEffect */
    shader_type?: ShaderType
}
class ShaderEffect {
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ShaderEffect */
    get_program(): Cogl.Handle
    get_shader(): Cogl.Handle
    set_shader_source(source: string): boolean
    set_uniform_value(name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.OffscreenEffect */
    create_texture(width: number, height: number): Cogl.Handle
    get_target(): Cogl.Material
    get_target_rect(): [ /* returnType */ boolean, /* rect */ Rect ]
    get_target_size(): [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    get_texture(): Cogl.Handle
    paint_target(): void
    /* Methods of Clutter-1.0.Clutter.Effect */
    queue_repaint(): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.ShaderEffect */
    vfunc_get_static_shader_source(): string
    /* Virtual methods of Clutter-1.0.Clutter.OffscreenEffect */
    vfunc_create_texture(width: number, height: number): Cogl.Handle
    vfunc_paint_target(): void
    /* Virtual methods of Clutter-1.0.Clutter.Effect */
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_paint(flags: EffectPaintFlags): void
    vfunc_pick(flags: EffectPaintFlags): void
    vfunc_post_paint(): void
    vfunc_pre_paint(): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::actor", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ShaderEffect, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ShaderEffect_ConstructProps)
    _init (config?: ShaderEffect_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(shader_type: ShaderType): ShaderEffect
    static $gtype: GObject.Type
}
class ShaderFloat {
    static name: string
}
class ShaderInt {
    static name: string
}
class ShaderMatrix {
    static name: string
}
interface SnapConstraint_ConstructProps extends Constraint_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.SnapConstraint */
    from_edge?: SnapEdge
    offset?: number
    source?: Actor
    to_edge?: SnapEdge
}
class SnapConstraint {
    /* Properties of Clutter-1.0.Clutter.SnapConstraint */
    from_edge: SnapEdge
    offset: number
    source: Actor
    to_edge: SnapEdge
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.SnapConstraint */
    get_edges(): [ /* from_edge */ SnapEdge, /* to_edge */ SnapEdge ]
    get_offset(): number
    get_source(): Actor
    set_edges(from_edge: SnapEdge, to_edge: SnapEdge): void
    set_offset(offset: number): void
    set_source(source?: Actor | null): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.Constraint */
    vfunc_update_allocation(actor: Actor, allocation: ActorBox): void
    vfunc_update_preferred_size(actor: Actor, direction: Orientation, for_size: number, minimum_size: number, natural_size: number): void
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::from-edge", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from-edge", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offset", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offset", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::source", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::source", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::to-edge", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to-edge", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SnapConstraint, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SnapConstraint_ConstructProps)
    _init (config?: SnapConstraint_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(source: Actor | null, from_edge: SnapEdge, to_edge: SnapEdge, offset: number): SnapConstraint
    static $gtype: GObject.Type
}
interface Stage_ConstructProps extends Group_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Stage */
    accept_focus?: boolean
    color?: Color
    cursor_visible?: boolean
    fog?: Fog
    key_focus?: Actor
    no_clear_hint?: boolean
    offscreen?: boolean
    perspective?: Perspective
    title?: string
    use_alpha?: boolean
    use_fog?: boolean
    user_resizable?: boolean
}
class Stage {
    /* Properties of Clutter-1.0.Clutter.Stage */
    accept_focus: boolean
    color: Color
    cursor_visible: boolean
    fog: Fog
    readonly fullscreen_set: boolean
    key_focus: Actor
    no_clear_hint: boolean
    offscreen: boolean
    perspective: Perspective
    title: string
    use_alpha: boolean
    use_fog: boolean
    user_resizable: boolean
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Stage */
    ensure_current(): void
    ensure_redraw(): void
    ensure_viewport(): void
    event(event: Event): boolean
    get_accept_focus(): boolean
    get_actor_at_pos(pick_mode: PickMode, x: number, y: number): Actor
    get_color(): /* color */ Color
    get_fog(): /* fog */ Fog
    get_fullscreen(): boolean
    get_key_focus(): Actor
    get_minimum_size(): [ /* width */ number, /* height */ number ]
    get_motion_events_enabled(): boolean
    get_no_clear_hint(): boolean
    get_perspective(): /* perspective */ Perspective | null
    get_redraw_clip_bounds(): /* clip */ cairo.RectangleInt
    get_throttle_motion_events(): boolean
    get_title(): string
    get_use_alpha(): boolean
    get_use_fog(): boolean
    get_user_resizable(): boolean
    hide_cursor(): void
    is_default(): boolean
    queue_redraw(): void
    read_pixels(x: number, y: number, width: number, height: number): Uint8Array
    set_accept_focus(accept_focus: boolean): void
    set_color(color: Color): void
    set_fog(fog: Fog): void
    set_fullscreen(fullscreen: boolean): void
    set_key_focus(actor?: Actor | null): void
    set_minimum_size(width: number, height: number): void
    set_motion_events_enabled(enabled: boolean): void
    set_no_clear_hint(no_clear: boolean): void
    set_perspective(perspective: Perspective): void
    set_throttle_motion_events(throttle: boolean): void
    set_title(title: string): void
    set_use_alpha(use_alpha: boolean): void
    set_use_fog(fog: boolean): void
    set_user_resizable(resizable: boolean): void
    show_cursor(): void
    /* Methods of Clutter-1.0.Clutter.Group */
    get_n_children(): number
    get_nth_child(index_: number): Actor
    remove_all(): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Stage */
    vfunc_activate(): void
    vfunc_deactivate(): void
    vfunc_delete_event(event: Event): boolean
    vfunc_fullscreen(): void
    vfunc_unfullscreen(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Group */
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Stage */
    connect(sigName: "activate", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "activate", callback: (($obj: Stage) => void)): number
    emit(sigName: "activate"): void
    connect(sigName: "after-paint", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "after-paint", callback: (($obj: Stage) => void)): number
    emit(sigName: "after-paint"): void
    connect(sigName: "deactivate", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "deactivate", callback: (($obj: Stage) => void)): number
    emit(sigName: "deactivate"): void
    connect(sigName: "delete-event", callback: (($obj: Stage, event: Event) => boolean)): number
    connect_after(sigName: "delete-event", callback: (($obj: Stage, event: Event) => boolean)): number
    emit(sigName: "delete-event", event: Event): void
    connect(sigName: "fullscreen", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "fullscreen", callback: (($obj: Stage) => void)): number
    emit(sigName: "fullscreen"): void
    connect(sigName: "unfullscreen", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "unfullscreen", callback: (($obj: Stage) => void)): number
    emit(sigName: "unfullscreen"): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Stage, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Stage, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Stage, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Stage, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Stage, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Stage, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Stage, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Stage, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Stage) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Stage, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Stage, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Stage, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Stage, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Stage) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Stage) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Stage) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Stage, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Stage, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Stage, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Stage, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Stage, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Stage, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Stage, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Stage, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Stage) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Stage, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Stage, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Stage, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Stage, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Stage, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Stage, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Stage) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Stage) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Stage, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Stage, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "show", callback: (($obj: Stage) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Stage, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Stage, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Stage, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Stage, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Stage) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Stage) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Stage) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Stage, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Stage, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Stage, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Stage, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Stage, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Stage, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::accept-focus", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accept-focus", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::color", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cursor-visible", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-visible", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fog", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fog", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fullscreen-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fullscreen-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::key-focus", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key-focus", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::no-clear-hint", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-clear-hint", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::perspective", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::perspective", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::title", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::use-alpha", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-alpha", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::use-fog", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-fog", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-resizable", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-resizable", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Stage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Stage_ConstructProps)
    _init (config?: Stage_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Stage
    static get_default(): Stage
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface StageManager_ConstructProps extends GObject.Object_ConstructProps {
}
class StageManager {
    /* Properties of Clutter-1.0.Clutter.StageManager */
    readonly default_stage: Stage
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.StageManager */
    get_default_stage(): Stage
    list_stages(): Stage[]
    peek_stages(): Stage[]
    set_default_stage(stage: Stage): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.StageManager */
    vfunc_stage_added(stage: Stage): void
    vfunc_stage_removed(stage: Stage): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.StageManager */
    connect(sigName: "stage-added", callback: (($obj: StageManager, stage: Stage) => void)): number
    connect_after(sigName: "stage-added", callback: (($obj: StageManager, stage: Stage) => void)): number
    emit(sigName: "stage-added", stage: Stage): void
    connect(sigName: "stage-removed", callback: (($obj: StageManager, stage: Stage) => void)): number
    connect_after(sigName: "stage-removed", callback: (($obj: StageManager, stage: Stage) => void)): number
    emit(sigName: "stage-removed", stage: Stage): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: StageManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StageManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::default-stage", callback: (($obj: StageManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-stage", callback: (($obj: StageManager, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StageManager_ConstructProps)
    _init (config?: StageManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static get_default(): StageManager
    static $gtype: GObject.Type
}
interface State_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.State */
    duration?: number
    state?: string
}
class State {
    /* Properties of Clutter-1.0.Clutter.State */
    duration: number
    state: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.State */
    get_animator(source_state_name: string, target_state_name: string): Animator
    get_duration(source_state_name?: string | null, target_state_name?: string | null): number
    get_keys(source_state_name?: string | null, target_state_name?: string | null, object?: GObject.Object | null, property_name?: string | null): StateKey[]
    get_state(): string
    get_states(): string[]
    get_timeline(): Timeline
    remove_key(source_state_name?: string | null, target_state_name?: string | null, object?: GObject.Object | null, property_name?: string | null): void
    set_animator(source_state_name: string, target_state_name: string, animator?: Animator | null): void
    set_duration(source_state_name: string | null, target_state_name: string | null, duration: number): void
    set_key(source_state_name: string | null, target_state_name: string, object: GObject.Object, property_name: string, mode: number, value: any, pre_delay: number, post_delay: number): State
    set_state(target_state_name: string): Timeline
    warp_to_state(target_state_name: string): Timeline
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.State */
    vfunc_completed(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.State */
    connect(sigName: "completed", callback: (($obj: State) => void)): number
    connect_after(sigName: "completed", callback: (($obj: State) => void)): number
    emit(sigName: "completed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: State, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: State, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::duration", callback: (($obj: State, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: State, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state", callback: (($obj: State, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state", callback: (($obj: State, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: State_ConstructProps)
    _init (config?: State_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): State
    static $gtype: GObject.Type
}
interface SwipeAction_ConstructProps extends GestureAction_ConstructProps {
}
class SwipeAction {
    /* Properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.GestureAction */
    cancel(): void
    get_device(point: number): InputDevice
    get_last_event(point: number): Event
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_n_current_points(): number
    get_n_touch_points(): number
    get_press_coords(point: number): [ /* press_x */ number | null, /* press_y */ number | null ]
    get_release_coords(point: number): [ /* release_x */ number | null, /* release_y */ number | null ]
    get_sequence(point: number): EventSequence
    get_threshold_trigger_distance(): [ /* x */ number | null, /* y */ number | null ]
    get_threshold_trigger_edge(): GestureTriggerEdge
    get_threshold_trigger_egde(): GestureTriggerEdge
    get_velocity(point: number): [ /* returnType */ number, /* velocity_x */ number | null, /* velocity_y */ number | null ]
    set_n_touch_points(nb_points: number): void
    set_threshold_trigger_distance(x: number, y: number): void
    set_threshold_trigger_edge(edge: GestureTriggerEdge): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.SwipeAction */
    vfunc_swept(actor: Actor, direction: SwipeDirection): void
    vfunc_swipe(actor: Actor, direction: SwipeDirection): boolean
    /* Virtual methods of Clutter-1.0.Clutter.GestureAction */
    vfunc_gesture_begin(actor: Actor): boolean
    vfunc_gesture_cancel(actor: Actor): void
    vfunc_gesture_end(actor: Actor): void
    vfunc_gesture_prepare(actor: Actor): boolean
    vfunc_gesture_progress(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.SwipeAction */
    connect(sigName: "swept", callback: (($obj: SwipeAction, actor: Actor, direction: SwipeDirection) => void)): number
    connect_after(sigName: "swept", callback: (($obj: SwipeAction, actor: Actor, direction: SwipeDirection) => void)): number
    emit(sigName: "swept", actor: Actor, direction: SwipeDirection): void
    connect(sigName: "swipe", callback: (($obj: SwipeAction, actor: Actor, direction: SwipeDirection) => boolean)): number
    connect_after(sigName: "swipe", callback: (($obj: SwipeAction, actor: Actor, direction: SwipeDirection) => boolean)): number
    emit(sigName: "swipe", actor: Actor, direction: SwipeDirection): void
    /* Signals of Clutter-1.0.Clutter.GestureAction */
    connect(sigName: "gesture-begin", callback: (($obj: SwipeAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-begin", callback: (($obj: SwipeAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-begin", actor: Actor): void
    connect(sigName: "gesture-cancel", callback: (($obj: SwipeAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-cancel", callback: (($obj: SwipeAction, actor: Actor) => void)): number
    emit(sigName: "gesture-cancel", actor: Actor): void
    connect(sigName: "gesture-end", callback: (($obj: SwipeAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-end", callback: (($obj: SwipeAction, actor: Actor) => void)): number
    emit(sigName: "gesture-end", actor: Actor): void
    connect(sigName: "gesture-progress", callback: (($obj: SwipeAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-progress", callback: (($obj: SwipeAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-progress", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::n-touch-points", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-touch-points", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SwipeAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SwipeAction_ConstructProps)
    _init (config?: SwipeAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SwipeAction
    static $gtype: GObject.Type
}
interface TableLayout_ConstructProps extends LayoutManager_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.TableLayout */
    column_spacing?: number
    easing_duration?: number
    easing_mode?: number
    row_spacing?: number
    use_animations?: boolean
}
class TableLayout {
    /* Properties of Clutter-1.0.Clutter.TableLayout */
    column_spacing: number
    easing_duration: number
    easing_mode: number
    row_spacing: number
    use_animations: boolean
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.TableLayout */
    get_alignment(actor: Actor): [ /* x_align */ TableAlignment, /* y_align */ TableAlignment ]
    get_column_count(): number
    get_column_spacing(): number
    get_easing_duration(): number
    get_easing_mode(): number
    get_expand(actor: Actor): [ /* x_expand */ boolean, /* y_expand */ boolean ]
    get_fill(actor: Actor): [ /* x_fill */ boolean, /* y_fill */ boolean ]
    get_row_count(): number
    get_row_spacing(): number
    get_span(actor: Actor): [ /* column_span */ number, /* row_span */ number ]
    get_use_animations(): boolean
    pack(actor: Actor, column: number, row: number): void
    set_alignment(actor: Actor, x_align: TableAlignment, y_align: TableAlignment): void
    set_column_spacing(spacing: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: number): void
    set_expand(actor: Actor, x_expand: boolean, y_expand: boolean): void
    set_fill(actor: Actor, x_fill: boolean, y_fill: boolean): void
    set_row_spacing(spacing: number): void
    set_span(actor: Actor, column_span: number, row_span: number): void
    set_use_animations(animate: boolean): void
    /* Methods of Clutter-1.0.Clutter.LayoutManager */
    allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    begin_animation(duration: number, mode: number): Alpha
    child_get_property(container: Container, actor: Actor, property_name: string, value: any): void
    child_set_property(container: Container, actor: Actor, property_name: string, value: any): void
    end_animation(): void
    find_child_property(name: string): GObject.ParamSpec
    get_animation_progress(): number
    get_child_meta(container: Container, actor: Actor): LayoutMeta
    get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    layout_changed(): void
    list_child_properties(): GObject.ParamSpec[]
    set_container(container?: Container | null): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.LayoutManager */
    vfunc_allocate(container: Container, allocation: ActorBox, flags: AllocationFlags): void
    vfunc_begin_animation(duration: number, mode: number): Alpha
    vfunc_end_animation(): void
    vfunc_get_animation_progress(): number
    vfunc_get_child_meta_type(): GObject.Type
    vfunc_get_preferred_height(container: Container, for_width: number): [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    vfunc_get_preferred_width(container: Container, for_height: number): [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    vfunc_layout_changed(): void
    vfunc_set_container(container?: Container | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.LayoutManager */
    connect(sigName: "layout-changed", callback: (($obj: TableLayout) => void)): number
    connect_after(sigName: "layout-changed", callback: (($obj: TableLayout) => void)): number
    emit(sigName: "layout-changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::column-spacing", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::column-spacing", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::easing-duration", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::easing-duration", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::easing-mode", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::easing-mode", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::row-spacing", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::row-spacing", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::use-animations", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-animations", callback: (($obj: TableLayout, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TableLayout_ConstructProps)
    _init (config?: TableLayout_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TableLayout
    static $gtype: GObject.Type
}
interface TapAction_ConstructProps extends GestureAction_ConstructProps {
}
class TapAction {
    /* Properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.GestureAction */
    cancel(): void
    get_device(point: number): InputDevice
    get_last_event(point: number): Event
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_n_current_points(): number
    get_n_touch_points(): number
    get_press_coords(point: number): [ /* press_x */ number | null, /* press_y */ number | null ]
    get_release_coords(point: number): [ /* release_x */ number | null, /* release_y */ number | null ]
    get_sequence(point: number): EventSequence
    get_threshold_trigger_distance(): [ /* x */ number | null, /* y */ number | null ]
    get_threshold_trigger_edge(): GestureTriggerEdge
    get_threshold_trigger_egde(): GestureTriggerEdge
    get_velocity(point: number): [ /* returnType */ number, /* velocity_x */ number | null, /* velocity_y */ number | null ]
    set_n_touch_points(nb_points: number): void
    set_threshold_trigger_distance(x: number, y: number): void
    set_threshold_trigger_edge(edge: GestureTriggerEdge): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.TapAction */
    vfunc_tap(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.GestureAction */
    vfunc_gesture_begin(actor: Actor): boolean
    vfunc_gesture_cancel(actor: Actor): void
    vfunc_gesture_end(actor: Actor): void
    vfunc_gesture_prepare(actor: Actor): boolean
    vfunc_gesture_progress(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.TapAction */
    connect(sigName: "tap", callback: (($obj: TapAction, actor: Actor) => void)): number
    connect_after(sigName: "tap", callback: (($obj: TapAction, actor: Actor) => void)): number
    emit(sigName: "tap", actor: Actor): void
    /* Signals of Clutter-1.0.Clutter.GestureAction */
    connect(sigName: "gesture-begin", callback: (($obj: TapAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-begin", callback: (($obj: TapAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-begin", actor: Actor): void
    connect(sigName: "gesture-cancel", callback: (($obj: TapAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-cancel", callback: (($obj: TapAction, actor: Actor) => void)): number
    emit(sigName: "gesture-cancel", actor: Actor): void
    connect(sigName: "gesture-end", callback: (($obj: TapAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-end", callback: (($obj: TapAction, actor: Actor) => void)): number
    emit(sigName: "gesture-end", actor: Actor): void
    connect(sigName: "gesture-progress", callback: (($obj: TapAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-progress", callback: (($obj: TapAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-progress", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::n-touch-points", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-touch-points", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TapAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TapAction_ConstructProps)
    _init (config?: TapAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TapAction
    static $gtype: GObject.Type
}
interface Text_ConstructProps extends Actor_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Text */
    activatable?: boolean
    attributes?: Pango.AttrList
    buffer?: TextBuffer
    color?: Color
    cursor_color?: Color
    cursor_position?: number
    cursor_size?: number
    cursor_visible?: boolean
    editable?: boolean
    ellipsize?: Pango.EllipsizeMode
    font_description?: Pango.FontDescription
    font_name?: string
    justify?: boolean
    line_alignment?: Pango.Alignment
    line_wrap?: boolean
    line_wrap_mode?: Pango.WrapMode
    max_length?: number
    password_char?: number
    position?: number & Point
    selectable?: boolean
    selected_text_color?: Color
    selection_bound?: number
    selection_color?: Color
    single_line_mode?: boolean
    text?: string
    use_markup?: boolean
}
class Text {
    /* Properties of Clutter-1.0.Clutter.Text */
    activatable: boolean
    attributes: Pango.AttrList
    buffer: TextBuffer
    color: Color
    cursor_color: Color
    readonly cursor_color_set: boolean
    cursor_position: number
    cursor_size: number
    cursor_visible: boolean
    editable: boolean
    ellipsize: Pango.EllipsizeMode
    font_description: Pango.FontDescription
    font_name: string
    justify: boolean
    line_alignment: Pango.Alignment
    line_wrap: boolean
    line_wrap_mode: Pango.WrapMode
    max_length: number
    password_char: number
    position: number
    selectable: boolean
    selected_text_color: Color
    readonly selected_text_color_set: boolean
    selection_bound: number
    selection_color: Color
    readonly selection_color_set: boolean
    single_line_mode: boolean
    text: string
    use_markup: boolean
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Text */
    activate(): boolean
    coords_to_position(x: number, y: number): number
    delete_chars(n_chars: number): void
    delete_selection(): boolean
    delete_text(start_pos: number, end_pos: number): void
    get_activatable(): boolean
    get_attributes(): Pango.AttrList
    get_buffer(): TextBuffer
    get_chars(start_pos: number, end_pos: number): string
    get_color(): /* color */ Color
    get_cursor_color(): /* color */ Color
    get_cursor_position(): number
    get_cursor_rect(): /* rect */ Rect
    get_cursor_size(): number
    get_cursor_visible(): boolean
    get_editable(): boolean
    get_ellipsize(): Pango.EllipsizeMode
    get_font_description(): Pango.FontDescription
    get_font_name(): string
    get_justify(): boolean
    get_layout(): Pango.Layout
    get_layout_offsets(): [ /* x */ number, /* y */ number ]
    get_line_alignment(): Pango.Alignment
    get_line_wrap(): boolean
    get_line_wrap_mode(): Pango.WrapMode
    get_max_length(): number
    get_password_char(): number
    get_selectable(): boolean
    get_selected_text_color(): /* color */ Color
    get_selection(): string
    get_selection_bound(): number
    get_selection_color(): /* color */ Color
    get_single_line_mode(): boolean
    get_text(): string
    get_use_markup(): boolean
    insert_text(text: string, position: number): void
    insert_unichar(wc: number): void
    position_to_coords(position: number): [ /* returnType */ boolean, /* x */ number, /* y */ number, /* line_height */ number ]
    set_activatable(activatable: boolean): void
    set_attributes(attrs?: Pango.AttrList | null): void
    set_buffer(buffer: TextBuffer): void
    set_color(color: Color): void
    set_cursor_color(color?: Color | null): void
    set_cursor_position(position: number): void
    set_cursor_size(size: number): void
    set_cursor_visible(cursor_visible: boolean): void
    set_editable(editable: boolean): void
    set_ellipsize(mode: Pango.EllipsizeMode): void
    set_font_description(font_desc: Pango.FontDescription): void
    set_font_name(font_name?: string | null): void
    set_justify(justify: boolean): void
    set_line_alignment(alignment: Pango.Alignment): void
    set_line_wrap(line_wrap: boolean): void
    set_line_wrap_mode(wrap_mode: Pango.WrapMode): void
    set_markup(markup?: string | null): void
    set_max_length(max: number): void
    set_password_char(wc: number): void
    set_preedit_string(preedit_str: string | null, preedit_attrs: Pango.AttrList | null, cursor_pos: number): void
    set_selectable(selectable: boolean): void
    set_selected_text_color(color?: Color | null): void
    set_selection(start_pos: number, end_pos: number): void
    set_selection_bound(selection_bound: number): void
    set_selection_color(color?: Color | null): void
    set_single_line_mode(single_line: boolean): void
    set_text(text?: string | null): void
    set_use_markup(setting: boolean): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Text */
    vfunc_activate(): void
    vfunc_cursor_changed(): void
    vfunc_cursor_event(geometry: Geometry): void
    vfunc_text_changed(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Text */
    connect(sigName: "activate", callback: (($obj: Text) => void)): number
    connect_after(sigName: "activate", callback: (($obj: Text) => void)): number
    emit(sigName: "activate"): void
    connect(sigName: "cursor-changed", callback: (($obj: Text) => void)): number
    connect_after(sigName: "cursor-changed", callback: (($obj: Text) => void)): number
    emit(sigName: "cursor-changed"): void
    connect(sigName: "cursor-event", callback: (($obj: Text, geometry: Geometry) => void)): number
    connect_after(sigName: "cursor-event", callback: (($obj: Text, geometry: Geometry) => void)): number
    emit(sigName: "cursor-event", geometry: Geometry): void
    connect(sigName: "delete-text", callback: (($obj: Text, start_pos: number, end_pos: number) => void)): number
    connect_after(sigName: "delete-text", callback: (($obj: Text, start_pos: number, end_pos: number) => void)): number
    emit(sigName: "delete-text", start_pos: number, end_pos: number): void
    connect(sigName: "insert-text", callback: (($obj: Text, new_text: string, new_text_length: number, position?: object | null) => void)): number
    connect_after(sigName: "insert-text", callback: (($obj: Text, new_text: string, new_text_length: number, position?: object | null) => void)): number
    emit(sigName: "insert-text", new_text: string, new_text_length: number, position?: object | null): void
    connect(sigName: "text-changed", callback: (($obj: Text) => void)): number
    connect_after(sigName: "text-changed", callback: (($obj: Text) => void)): number
    emit(sigName: "text-changed"): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Text, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Text, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Text, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Text, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Text, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Text, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Text, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Text, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Text) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Text) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Text, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Text, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Text, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Text, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Text) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Text) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Text) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Text) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Text) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Text) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Text, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Text, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Text, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Text, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Text, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Text, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Text, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Text, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Text) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Text) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Text, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Text, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Text, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Text, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Text, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Text, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Text) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Text) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Text) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Text) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Text, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Text, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Text) => void)): number
    connect_after(sigName: "show", callback: (($obj: Text) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Text, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Text, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Text, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Text, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Text) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Text) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Text) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Text) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Text, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Text, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Text, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Text, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Text, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Text, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::activatable", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activatable", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::attributes", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::buffer", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cursor-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cursor-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cursor-position", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-position", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cursor-size", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-size", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cursor-visible", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-visible", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::editable", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::ellipsize", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ellipsize", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-description", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-description", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::font-name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::justify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justify", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::line-alignment", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line-alignment", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::line-wrap", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line-wrap", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::line-wrap-mode", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line-wrap-mode", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-length", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-length", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password-char", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password-char", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selectable", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectable", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selected-text-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-text-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selected-text-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected-text-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selection-bound", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-bound", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selection-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::selection-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::single-line-mode", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::single-line-mode", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::use-markup", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-markup", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Text, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Text_ConstructProps)
    _init (config?: Text_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Text
    static new_full(font_name: string, text: string, color: Color): Text
    static new_with_buffer(buffer: TextBuffer): Text
    static new_with_text(font_name: string | null, text: string): Text
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
interface TextBuffer_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.TextBuffer */
    max_length?: number
}
class TextBuffer {
    /* Properties of Clutter-1.0.Clutter.TextBuffer */
    readonly length: number
    max_length: number
    readonly text: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.TextBuffer */
    delete_text(position: number, n_chars: number): number
    emit_deleted_text(position: number, n_chars: number): void
    emit_inserted_text(position: number, chars: string, n_chars: number): void
    get_bytes(): number
    get_length(): number
    get_max_length(): number
    get_text(): string
    insert_text(position: number, chars: string, n_chars: number): number
    set_max_length(max_length: number): void
    set_text(chars: string, n_chars: number): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.TextBuffer */
    vfunc_delete_text(position: number, n_chars: number): number
    vfunc_deleted_text(position: number, n_chars: number): void
    vfunc_get_length(): number
    vfunc_get_text(n_bytes: number): string
    vfunc_insert_text(position: number, chars: string, n_chars: number): number
    vfunc_inserted_text(position: number, chars: string, n_chars: number): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.TextBuffer */
    connect(sigName: "deleted-text", callback: (($obj: TextBuffer, position: number, n_chars: number) => void)): number
    connect_after(sigName: "deleted-text", callback: (($obj: TextBuffer, position: number, n_chars: number) => void)): number
    emit(sigName: "deleted-text", position: number, n_chars: number): void
    connect(sigName: "inserted-text", callback: (($obj: TextBuffer, position: number, chars: string, n_chars: number) => void)): number
    connect_after(sigName: "inserted-text", callback: (($obj: TextBuffer, position: number, chars: string, n_chars: number) => void)): number
    emit(sigName: "inserted-text", position: number, chars: string, n_chars: number): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::length", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::length", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::max-length", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-length", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: TextBuffer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TextBuffer_ConstructProps)
    _init (config?: TextBuffer_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TextBuffer
    static new_with_text(text: string | null, text_len: number): TextBuffer
    static $gtype: GObject.Type
}
class TextNode {
    /* Methods of Clutter-1.0.Clutter.PaintNode */
    add_child(child: PaintNode): void
    add_rectangle(rect: ActorBox): void
    add_texture_rectangle(rect: ActorBox, x_1: number, y_1: number, x_2: number, y_2: number): void
    ref(): PaintNode
    set_name(name: string): void
    unref(): void
    static name: string
    static new(layout?: Pango.Layout | null, color?: Color | null): TextNode
    constructor(layout?: Pango.Layout | null, color?: Color | null)
    /* Static methods and pseudo-constructors */
    static new(layout?: Pango.Layout | null, color?: Color | null): TextNode
}
interface Texture_ConstructProps extends Actor_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Texture */
    disable_slicing?: boolean
    filename?: string
    filter_quality?: TextureQuality
    keep_aspect_ratio?: boolean
    load_async?: boolean
    load_data_async?: boolean
    pick_with_alpha?: boolean
    repeat_x?: boolean
    repeat_y?: boolean
    sync_size?: boolean
}
class Texture {
    /* Properties of Clutter-1.0.Clutter.Texture */
    filename: string
    filter_quality: TextureQuality
    keep_aspect_ratio: boolean
    load_async: boolean
    load_data_async: boolean
    pick_with_alpha: boolean
    readonly pixel_format: Cogl.PixelFormat
    repeat_x: boolean
    repeat_y: boolean
    sync_size: boolean
    readonly tile_waste: number
    /* Properties of Clutter-1.0.Clutter.Actor */
    actions: Action
    readonly allocation: ActorBox
    anchor_gravity: Gravity
    anchor_x: number
    anchor_y: number
    background_color: Color
    readonly background_color_set: boolean
    child_transform: Matrix
    readonly child_transform_set: boolean
    clip: Geometry
    clip_rect: Rect
    clip_to_allocation: boolean
    constraints: Constraint
    content: Content
    readonly content_box: ActorBox
    content_gravity: ContentGravity
    content_repeat: ContentRepeat
    depth: number
    effect: Effect
    readonly first_child: Actor
    fixed_position_set: boolean
    fixed_x: number
    fixed_y: number
    readonly has_clip: boolean
    readonly has_pointer: boolean
    height: number
    readonly last_child: Actor
    layout_manager: LayoutManager
    magnification_filter: ScalingFilter
    readonly mapped: boolean
    margin_bottom: number
    margin_left: number
    margin_right: number
    margin_top: number
    min_height: number
    min_height_set: boolean
    min_width: number
    min_width_set: boolean
    minification_filter: ScalingFilter
    name: string
    natural_height: number
    natural_height_set: boolean
    natural_width: number
    natural_width_set: boolean
    offscreen_redirect: OffscreenRedirect
    opacity: number
    pivot_point: Point
    pivot_point_z: number
    position: Point
    reactive: boolean
    readonly realized: boolean
    request_mode: RequestMode
    rotation_angle_x: number
    rotation_angle_y: number
    rotation_angle_z: number
    rotation_center_x: Vertex
    rotation_center_y: Vertex
    rotation_center_z: Vertex
    rotation_center_z_gravity: Gravity
    scale_center_x: number
    scale_center_y: number
    scale_gravity: Gravity
    scale_x: number
    scale_y: number
    scale_z: number
    show_on_set_parent: boolean
    size: Size
    text_direction: TextDirection
    transform: Matrix
    readonly transform_set: boolean
    translation_x: number
    translation_y: number
    translation_z: number
    visible: boolean
    width: number
    x: number
    x_align: ActorAlign
    x_expand: boolean
    y: number
    y_align: ActorAlign
    y_expand: boolean
    z_position: number
    /* Fields of Clutter-1.0.Clutter.Actor */
    readonly flags: number
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Texture */
    get_base_size(): [ /* width */ number, /* height */ number ]
    get_cogl_material(): Cogl.Handle
    get_cogl_texture(): Cogl.Handle
    get_filter_quality(): TextureQuality
    get_keep_aspect_ratio(): boolean
    get_load_async(): boolean
    get_load_data_async(): boolean
    get_max_tile_waste(): number
    get_pick_with_alpha(): boolean
    get_pixel_format(): Cogl.PixelFormat
    get_repeat(): [ /* repeat_x */ boolean, /* repeat_y */ boolean ]
    get_sync_size(): boolean
    set_area_from_rgb_data(data: Uint8Array, has_alpha: boolean, x: number, y: number, width: number, height: number, rowstride: number, bpp: number, flags: TextureFlags): boolean
    set_cogl_material(cogl_material: Cogl.Handle): void
    set_cogl_texture(cogl_tex: Cogl.Handle): void
    set_filter_quality(filter_quality: TextureQuality): void
    set_from_file(filename: string): boolean
    set_from_rgb_data(data: Uint8Array, has_alpha: boolean, width: number, height: number, rowstride: number, bpp: number, flags: TextureFlags): boolean
    set_from_yuv_data(data: Uint8Array, width: number, height: number, flags: TextureFlags): boolean
    set_keep_aspect_ratio(keep_aspect: boolean): void
    set_load_async(load_async: boolean): void
    set_load_data_async(load_async: boolean): void
    set_pick_with_alpha(pick_with_alpha: boolean): void
    set_repeat(repeat_x: boolean, repeat_y: boolean): void
    set_sync_size(sync_size: boolean): void
    /* Methods of Clutter-1.0.Clutter.Actor */
    add_action(action: Action): void
    add_action_with_name(name: string, action: Action): void
    add_child(child: Actor): void
    add_constraint(constraint: Constraint): void
    add_constraint_with_name(name: string, constraint: Constraint): void
    add_effect(effect: Effect): void
    add_effect_with_name(name: string, effect: Effect): void
    add_transition(name: string, transition: Transition): void
    allocate(box: ActorBox, flags: AllocationFlags): void
    allocate_align_fill(box: ActorBox, x_align: number, y_align: number, x_fill: boolean, y_fill: boolean, flags: AllocationFlags): void
    allocate_available_size(x: number, y: number, available_width: number, available_height: number, flags: AllocationFlags): void
    allocate_preferred_size(flags: AllocationFlags): void
    animate_with_alphav(alpha: Alpha, properties: string[], values: any[]): Animation
    animate_with_timelinev(mode: number, timeline: Timeline, properties: string[], values: any[]): Animation
    animatev(mode: number, duration: number, properties: string[], values: any[]): Animation
    apply_relative_transform_to_point(ancestor: Actor | null, point: Vertex): /* vertex */ Vertex
    apply_transform_to_point(point: Vertex): /* vertex */ Vertex
    bind_model(model: Gio.ListModel | null, create_child_func: ActorCreateChildFunc): void
    clear_actions(): void
    clear_constraints(): void
    clear_effects(): void
    contains(descendant: Actor): boolean
    continue_paint(): void
    create_pango_context(): Pango.Context
    create_pango_layout(text?: string | null): Pango.Layout
    destroy(): void
    destroy_all_children(): void
    detach_animation(): void
    event(event: Event, capture: boolean): boolean
    get_abs_allocation_vertices(): /* verts */ Vertex[]
    get_accessible(): Atk.Object
    get_action(name: string): Action
    get_actions(): Action[]
    get_allocation_box(): /* box */ ActorBox
    get_allocation_geometry(): /* geom */ Geometry
    get_allocation_vertices(ancestor?: Actor | null): /* verts */ Vertex[]
    get_anchor_point(): [ /* anchor_x */ number, /* anchor_y */ number ]
    get_anchor_point_gravity(): Gravity
    get_animation(): Animation
    get_background_color(): /* color */ Color
    get_child_at_index(index_: number): Actor
    get_child_transform(): /* transform */ Matrix
    get_children(): Actor[]
    get_clip(): [ /* xoff */ number | null, /* yoff */ number | null, /* width */ number | null, /* height */ number | null ]
    get_clip_to_allocation(): boolean
    get_constraint(name: string): Constraint
    get_constraints(): Constraint[]
    get_content(): Content
    get_content_box(): /* box */ ActorBox
    get_content_gravity(): ContentGravity
    get_content_repeat(): ContentRepeat
    get_content_scaling_filters(): [ /* min_filter */ ScalingFilter | null, /* mag_filter */ ScalingFilter | null ]
    get_default_paint_volume(): PaintVolume
    get_depth(): number
    get_easing_delay(): number
    get_easing_duration(): number
    get_easing_mode(): AnimationMode
    get_effect(name: string): Effect
    get_effects(): Effect[]
    get_first_child(): Actor
    get_fixed_position_set(): boolean
    get_flags(): ActorFlags
    get_geometry(): /* geometry */ Geometry
    get_gid(): number
    get_height(): number
    get_last_child(): Actor
    get_layout_manager(): LayoutManager
    get_margin(): /* margin */ Margin
    get_margin_bottom(): number
    get_margin_left(): number
    get_margin_right(): number
    get_margin_top(): number
    get_n_children(): number
    get_name(): string
    get_next_sibling(): Actor
    get_offscreen_redirect(): OffscreenRedirect
    get_opacity(): number
    get_paint_box(): [ /* returnType */ boolean, /* box */ ActorBox ]
    get_paint_opacity(): number
    get_paint_visibility(): boolean
    get_paint_volume(): PaintVolume
    get_pango_context(): Pango.Context
    get_parent(): Actor
    get_pivot_point(): [ /* pivot_x */ number | null, /* pivot_y */ number | null ]
    get_pivot_point_z(): number
    get_position(): [ /* x */ number | null, /* y */ number | null ]
    get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_size(): [ /* min_width_p */ number | null, /* min_height_p */ number | null, /* natural_width_p */ number | null, /* natural_height_p */ number | null ]
    get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    get_previous_sibling(): Actor
    get_reactive(): boolean
    get_request_mode(): RequestMode
    get_rotation(axis: RotateAxis): [ /* returnType */ number, /* x */ number, /* y */ number, /* z */ number ]
    get_rotation_angle(axis: RotateAxis): number
    get_scale(): [ /* scale_x */ number | null, /* scale_y */ number | null ]
    get_scale_center(): [ /* center_x */ number | null, /* center_y */ number | null ]
    get_scale_gravity(): Gravity
    get_scale_z(): number
    get_shader(): Shader
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_stage(): Stage
    get_text_direction(): TextDirection
    get_transform(): /* transform */ Matrix
    get_transformation_matrix(): /* matrix */ Matrix
    get_transformed_paint_volume(relative_to_ancestor: Actor): PaintVolume
    get_transformed_position(): [ /* x */ number | null, /* y */ number | null ]
    get_transformed_size(): [ /* width */ number | null, /* height */ number | null ]
    get_transition(name: string): Transition
    get_translation(): [ /* translate_x */ number | null, /* translate_y */ number | null, /* translate_z */ number | null ]
    get_width(): number
    get_x(): number
    get_x_align(): ActorAlign
    get_x_expand(): boolean
    get_y(): number
    get_y_align(): ActorAlign
    get_y_expand(): boolean
    get_z_position(): number
    get_z_rotation_gravity(): Gravity
    grab_key_focus(): void
    has_actions(): boolean
    has_allocation(): boolean
    has_constraints(): boolean
    has_effects(): boolean
    has_key_focus(): boolean
    has_overlaps(): boolean
    hide(): void
    hide_all(): void
    insert_child_above(child: Actor, sibling?: Actor | null): void
    insert_child_at_index(child: Actor, index_: number): void
    insert_child_below(child: Actor, sibling?: Actor | null): void
    is_in_clone_paint(): boolean
    is_mapped(): boolean
    is_realized(): boolean
    is_rotated(): boolean
    is_scaled(): boolean
    is_visible(): boolean
    lower(above?: Actor | null): void
    lower_bottom(): void
    map(): void
    move_anchor_point(anchor_x: number, anchor_y: number): void
    move_anchor_point_from_gravity(gravity: Gravity): void
    move_by(dx: number, dy: number): void
    needs_expand(orientation: Orientation): boolean
    paint(): void
    pop_internal(): void
    push_internal(): void
    queue_redraw(): void
    queue_redraw_with_clip(clip?: cairo.RectangleInt | null): void
    queue_relayout(): void
    raise(below?: Actor | null): void
    raise_top(): void
    realize(): void
    remove_action(action: Action): void
    remove_action_by_name(name: string): void
    remove_all_children(): void
    remove_all_transitions(): void
    remove_child(child: Actor): void
    remove_clip(): void
    remove_constraint(constraint: Constraint): void
    remove_constraint_by_name(name: string): void
    remove_effect(effect: Effect): void
    remove_effect_by_name(name: string): void
    remove_transition(name: string): void
    reparent(new_parent: Actor): void
    replace_child(old_child: Actor, new_child: Actor): void
    restore_easing_state(): void
    save_easing_state(): void
    set_allocation(box: ActorBox, flags: AllocationFlags): void
    set_anchor_point(anchor_x: number, anchor_y: number): void
    set_anchor_point_from_gravity(gravity: Gravity): void
    set_background_color(color?: Color | null): void
    set_child_above_sibling(child: Actor, sibling?: Actor | null): void
    set_child_at_index(child: Actor, index_: number): void
    set_child_below_sibling(child: Actor, sibling?: Actor | null): void
    set_child_transform(transform?: Matrix | null): void
    set_clip(xoff: number, yoff: number, width: number, height: number): void
    set_clip_to_allocation(clip_set: boolean): void
    set_content(content?: Content | null): void
    set_content_gravity(gravity: ContentGravity): void
    set_content_repeat(repeat: ContentRepeat): void
    set_content_scaling_filters(min_filter: ScalingFilter, mag_filter: ScalingFilter): void
    set_depth(depth: number): void
    set_easing_delay(msecs: number): void
    set_easing_duration(msecs: number): void
    set_easing_mode(mode: AnimationMode): void
    set_fixed_position_set(is_set: boolean): void
    set_flags(flags: ActorFlags): void
    set_geometry(geometry: Geometry): void
    set_height(height: number): void
    set_layout_manager(manager?: LayoutManager | null): void
    set_margin(margin: Margin): void
    set_margin_bottom(margin: number): void
    set_margin_left(margin: number): void
    set_margin_right(margin: number): void
    set_margin_top(margin: number): void
    set_name(name: string): void
    set_offscreen_redirect(redirect: OffscreenRedirect): void
    set_opacity(opacity: number): void
    set_parent(parent: Actor): void
    set_pivot_point(pivot_x: number, pivot_y: number): void
    set_pivot_point_z(pivot_z: number): void
    set_position(x: number, y: number): void
    set_reactive(reactive: boolean): void
    set_request_mode(mode: RequestMode): void
    set_rotation(axis: RotateAxis, angle: number, x: number, y: number, z: number): void
    set_rotation_angle(axis: RotateAxis, angle: number): void
    set_scale(scale_x: number, scale_y: number): void
    set_scale_full(scale_x: number, scale_y: number, center_x: number, center_y: number): void
    set_scale_with_gravity(scale_x: number, scale_y: number, gravity: Gravity): void
    set_scale_z(scale_z: number): void
    set_shader(shader?: Shader | null): boolean
    set_shader_param(param: string, value: any): void
    set_shader_param_float(param: string, value: number): void
    set_shader_param_int(param: string, value: number): void
    set_size(width: number, height: number): void
    set_text_direction(text_dir: TextDirection): void
    set_transform(transform?: Matrix | null): void
    set_translation(translate_x: number, translate_y: number, translate_z: number): void
    set_width(width: number): void
    set_x(x: number): void
    set_x_align(x_align: ActorAlign): void
    set_x_expand(expand: boolean): void
    set_y(y: number): void
    set_y_align(y_align: ActorAlign): void
    set_y_expand(expand: boolean): void
    set_z_position(z_position: number): void
    set_z_rotation_from_gravity(angle: number, gravity: Gravity): void
    should_pick_paint(): boolean
    show(): void
    show_all(): void
    transform_stage_point(x: number, y: number): [ /* returnType */ boolean, /* x_out */ number, /* y_out */ number ]
    unmap(): void
    unparent(): void
    unrealize(): void
    unset_flags(flags: ActorFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Animatable */
    animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    find_property(property_name: string): GObject.ParamSpec
    get_initial_state(property_name: string, value: any): void
    interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    set_final_state(property_name: string, value: any): void
    /* Methods of Clutter-1.0.Clutter.Container */
    add_actor(actor: Actor): void
    child_get_property(child: Actor, property: string, value: any): void
    child_notify(child: Actor, pspec: GObject.ParamSpec): void
    child_set_property(child: Actor, property: string, value: any): void
    create_child_meta(actor: Actor): void
    destroy_child_meta(actor: Actor): void
    find_child_by_name(child_name: string): Actor
    foreach(callback: Callback): void
    foreach_with_internals(callback: Callback): void
    get_child_meta(actor: Actor): ChildMeta
    lower_child(actor: Actor, sibling?: Actor | null): void
    raise_child(actor: Actor, sibling?: Actor | null): void
    remove_actor(actor: Actor): void
    sort_depth_order(): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Texture */
    vfunc_load_finished(error: GLib.Error): void
    vfunc_pixbuf_change(): void
    vfunc_size_change(width: number, height: number): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Actor */
    vfunc_allocate(box: ActorBox, flags: AllocationFlags): void
    vfunc_apply_transform(matrix: Matrix): void
    vfunc_button_press_event(event: ButtonEvent): boolean
    vfunc_button_release_event(event: ButtonEvent): boolean
    vfunc_captured_event(event: Event): boolean
    vfunc_destroy(): void
    vfunc_enter_event(event: CrossingEvent): boolean
    vfunc_event(event: Event): boolean
    vfunc_get_accessible(): Atk.Object
    vfunc_get_paint_volume(volume: PaintVolume): boolean
    vfunc_get_preferred_height(for_width: number): [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    vfunc_get_preferred_width(for_height: number): [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    vfunc_has_overlaps(): boolean
    vfunc_hide(): void
    vfunc_hide_all(): void
    vfunc_key_focus_in(): void
    vfunc_key_focus_out(): void
    vfunc_key_press_event(event: KeyEvent): boolean
    vfunc_key_release_event(event: KeyEvent): boolean
    vfunc_leave_event(event: CrossingEvent): boolean
    vfunc_map(): void
    vfunc_motion_event(event: MotionEvent): boolean
    vfunc_paint(): void
    vfunc_paint_node(root: PaintNode): void
    vfunc_parent_set(old_parent: Actor): void
    vfunc_pick(color: Color): void
    vfunc_queue_redraw(leaf_that_queued: Actor): void
    vfunc_queue_relayout(): void
    vfunc_realize(): void
    vfunc_scroll_event(event: ScrollEvent): boolean
    vfunc_show(): void
    vfunc_show_all(): void
    vfunc_touch_event(event: TouchEvent): boolean
    vfunc_unmap(): void
    vfunc_unrealize(): void
    vfunc_animate_property(animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any): boolean
    vfunc_find_property(property_name: string): GObject.ParamSpec
    vfunc_get_initial_state(property_name: string, value: any): void
    vfunc_interpolate_value(property_name: string, interval: Interval, progress: number): [ /* returnType */ boolean, /* value */ any ]
    vfunc_set_final_state(property_name: string, value: any): void
    vfunc_actor_added(actor: Actor): void
    vfunc_actor_removed(actor: Actor): void
    vfunc_add(actor: Actor): void
    vfunc_child_notify(child: Actor, pspec: GObject.ParamSpec): void
    vfunc_create_child_meta(actor: Actor): void
    vfunc_destroy_child_meta(actor: Actor): void
    vfunc_foreach(callback: Callback): void
    vfunc_foreach_with_internals(callback: Callback): void
    vfunc_get_child_meta(actor: Actor): ChildMeta
    vfunc_lower(actor: Actor, sibling?: Actor | null): void
    vfunc_raise(actor: Actor, sibling?: Actor | null): void
    vfunc_remove(actor: Actor): void
    vfunc_sort_depth_order(): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Texture */
    connect(sigName: "load-finished", callback: (($obj: Texture, error: GLib.Error) => void)): number
    connect_after(sigName: "load-finished", callback: (($obj: Texture, error: GLib.Error) => void)): number
    emit(sigName: "load-finished", error: GLib.Error): void
    connect(sigName: "pixbuf-change", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "pixbuf-change", callback: (($obj: Texture) => void)): number
    emit(sigName: "pixbuf-change"): void
    connect(sigName: "size-change", callback: (($obj: Texture, width: number, height: number) => void)): number
    connect_after(sigName: "size-change", callback: (($obj: Texture, width: number, height: number) => void)): number
    emit(sigName: "size-change", width: number, height: number): void
    /* Signals of Clutter-1.0.Clutter.Actor */
    connect(sigName: "allocation-changed", callback: (($obj: Texture, box: ActorBox, flags: AllocationFlags) => void)): number
    connect_after(sigName: "allocation-changed", callback: (($obj: Texture, box: ActorBox, flags: AllocationFlags) => void)): number
    emit(sigName: "allocation-changed", box: ActorBox, flags: AllocationFlags): void
    connect(sigName: "button-press-event", callback: (($obj: Texture, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-press-event", callback: (($obj: Texture, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-press-event", event: ButtonEvent): void
    connect(sigName: "button-release-event", callback: (($obj: Texture, event: ButtonEvent) => boolean)): number
    connect_after(sigName: "button-release-event", callback: (($obj: Texture, event: ButtonEvent) => boolean)): number
    emit(sigName: "button-release-event", event: ButtonEvent): void
    connect(sigName: "captured-event", callback: (($obj: Texture, event: Event) => boolean)): number
    connect_after(sigName: "captured-event", callback: (($obj: Texture, event: Event) => boolean)): number
    emit(sigName: "captured-event", event: Event): void
    connect(sigName: "destroy", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "destroy", callback: (($obj: Texture) => void)): number
    emit(sigName: "destroy"): void
    connect(sigName: "enter-event", callback: (($obj: Texture, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "enter-event", callback: (($obj: Texture, event: CrossingEvent) => boolean)): number
    emit(sigName: "enter-event", event: CrossingEvent): void
    connect(sigName: "event", callback: (($obj: Texture, event: Event) => boolean)): number
    connect_after(sigName: "event", callback: (($obj: Texture, event: Event) => boolean)): number
    emit(sigName: "event", event: Event): void
    connect(sigName: "hide", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "hide", callback: (($obj: Texture) => void)): number
    emit(sigName: "hide"): void
    connect(sigName: "key-focus-in", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "key-focus-in", callback: (($obj: Texture) => void)): number
    emit(sigName: "key-focus-in"): void
    connect(sigName: "key-focus-out", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "key-focus-out", callback: (($obj: Texture) => void)): number
    emit(sigName: "key-focus-out"): void
    connect(sigName: "key-press-event", callback: (($obj: Texture, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-press-event", callback: (($obj: Texture, event: KeyEvent) => boolean)): number
    emit(sigName: "key-press-event", event: KeyEvent): void
    connect(sigName: "key-release-event", callback: (($obj: Texture, event: KeyEvent) => boolean)): number
    connect_after(sigName: "key-release-event", callback: (($obj: Texture, event: KeyEvent) => boolean)): number
    emit(sigName: "key-release-event", event: KeyEvent): void
    connect(sigName: "leave-event", callback: (($obj: Texture, event: CrossingEvent) => boolean)): number
    connect_after(sigName: "leave-event", callback: (($obj: Texture, event: CrossingEvent) => boolean)): number
    emit(sigName: "leave-event", event: CrossingEvent): void
    connect(sigName: "motion-event", callback: (($obj: Texture, event: MotionEvent) => boolean)): number
    connect_after(sigName: "motion-event", callback: (($obj: Texture, event: MotionEvent) => boolean)): number
    emit(sigName: "motion-event", event: MotionEvent): void
    connect(sigName: "paint", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "paint", callback: (($obj: Texture) => void)): number
    emit(sigName: "paint"): void
    connect(sigName: "parent-set", callback: (($obj: Texture, old_parent?: Actor | null) => void)): number
    connect_after(sigName: "parent-set", callback: (($obj: Texture, old_parent?: Actor | null) => void)): number
    emit(sigName: "parent-set", old_parent?: Actor | null): void
    connect(sigName: "pick", callback: (($obj: Texture, color: Color) => void)): number
    connect_after(sigName: "pick", callback: (($obj: Texture, color: Color) => void)): number
    emit(sigName: "pick", color: Color): void
    connect(sigName: "queue-redraw", callback: (($obj: Texture, origin: Actor) => void)): number
    connect_after(sigName: "queue-redraw", callback: (($obj: Texture, origin: Actor) => void)): number
    emit(sigName: "queue-redraw", origin: Actor): void
    connect(sigName: "queue-relayout", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "queue-relayout", callback: (($obj: Texture) => void)): number
    emit(sigName: "queue-relayout"): void
    connect(sigName: "realize", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "realize", callback: (($obj: Texture) => void)): number
    emit(sigName: "realize"): void
    connect(sigName: "scroll-event", callback: (($obj: Texture, event: ScrollEvent) => boolean)): number
    connect_after(sigName: "scroll-event", callback: (($obj: Texture, event: ScrollEvent) => boolean)): number
    emit(sigName: "scroll-event", event: ScrollEvent): void
    connect(sigName: "show", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "show", callback: (($obj: Texture) => void)): number
    emit(sigName: "show"): void
    connect(sigName: "touch-event", callback: (($obj: Texture, event: Event) => boolean)): number
    connect_after(sigName: "touch-event", callback: (($obj: Texture, event: Event) => boolean)): number
    emit(sigName: "touch-event", event: Event): void
    connect(sigName: "transition-stopped", callback: (($obj: Texture, name: string, is_finished: boolean) => void)): number
    connect_after(sigName: "transition-stopped", callback: (($obj: Texture, name: string, is_finished: boolean) => void)): number
    emit(sigName: "transition-stopped", name: string, is_finished: boolean): void
    connect(sigName: "transitions-completed", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "transitions-completed", callback: (($obj: Texture) => void)): number
    emit(sigName: "transitions-completed"): void
    connect(sigName: "unrealize", callback: (($obj: Texture) => void)): number
    connect_after(sigName: "unrealize", callback: (($obj: Texture) => void)): number
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Container */
    connect(sigName: "actor-added", callback: (($obj: Texture, actor: Actor) => void)): number
    connect_after(sigName: "actor-added", callback: (($obj: Texture, actor: Actor) => void)): number
    emit(sigName: "actor-added", actor: Actor): void
    connect(sigName: "actor-removed", callback: (($obj: Texture, actor: Actor) => void)): number
    connect_after(sigName: "actor-removed", callback: (($obj: Texture, actor: Actor) => void)): number
    emit(sigName: "actor-removed", actor: Actor): void
    connect(sigName: "child-notify", callback: (($obj: Texture, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "child-notify", callback: (($obj: Texture, actor: Actor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "child-notify", actor: Actor, pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filename", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filter-quality", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-quality", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::keep-aspect-ratio", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::keep-aspect-ratio", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::load-async", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-async", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::load-data-async", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::load-data-async", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pick-with-alpha", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pick-with-alpha", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pixel-format", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixel-format", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::sync-size", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sync-size", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::tile-waste", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tile-waste", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actions", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actions", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::allocation", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allocation", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::anchor-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::anchor-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::background-color-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-color-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::child-transform-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-transform-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-rect", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-rect", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::clip-to-allocation", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clip-to-allocation", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::constraints", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::constraints", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-box", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-box", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-repeat", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-repeat", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::depth", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::depth", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::effect", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::effect", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::first-child", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::first-child", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-position-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-position-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::fixed-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fixed-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-clip", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-clip", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::has-pointer", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-pointer", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::height", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::last-child", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-child", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::layout-manager", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::magnification-filter", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::magnification-filter", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mapped", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mapped", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-bottom", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-left", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-right", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::margin-top", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-height-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-height-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::min-width-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::min-width-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::minification-filter", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minification-filter", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-height-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-height-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::natural-width-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::natural-width-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::offscreen-redirect", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offscreen-redirect", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::opacity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::pivot-point-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pivot-point-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::position", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::reactive", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reactive", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::realized", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::realized", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::request-mode", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::request-mode", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-angle-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-angle-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rotation-center-z-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-center-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-center-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-gravity", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::scale-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::show-on-set-parent", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-on-set-parent", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::text-direction", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-direction", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::transform-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transform-set", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::translation-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::translation-z", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::width", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-align", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-align", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::x-expand", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::x-expand", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-align", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-align", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::y-expand", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::y-expand", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::z-position", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::z-position", callback: (($obj: Texture, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Texture_ConstructProps)
    _init (config?: Texture_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Texture
    static new_from_actor(actor: Actor): Texture
    static new_from_file(filename: string): Texture
    static class_find_child_property(klass: GObject.ObjectClass, property_name: string): GObject.ParamSpec
    static class_list_child_properties(klass: GObject.ObjectClass): GObject.ParamSpec[]
    static $gtype: GObject.Type
}
class TextureNode {
    /* Methods of Clutter-1.0.Clutter.PaintNode */
    add_child(child: PaintNode): void
    add_rectangle(rect: ActorBox): void
    add_texture_rectangle(rect: ActorBox, x_1: number, y_1: number, x_2: number, y_2: number): void
    ref(): PaintNode
    set_name(name: string): void
    unref(): void
    static name: string
    static new(texture: Cogl.Texture, color: Color | null, min_filter: ScalingFilter, mag_filter: ScalingFilter): TextureNode
    constructor(texture: Cogl.Texture, color: Color | null, min_filter: ScalingFilter, mag_filter: ScalingFilter)
    /* Static methods and pseudo-constructors */
    static new(texture: Cogl.Texture, color: Color | null, min_filter: ScalingFilter, mag_filter: ScalingFilter): TextureNode
}
interface Timeline_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Timeline */
    auto_reverse?: boolean
    delay?: number
    direction?: TimelineDirection
    duration?: number
    loop?: boolean
    progress_mode?: AnimationMode
    repeat_count?: number
}
class Timeline {
    /* Properties of Clutter-1.0.Clutter.Timeline */
    auto_reverse: boolean
    delay: number
    direction: TimelineDirection
    duration: number
    loop: boolean
    progress_mode: AnimationMode
    repeat_count: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Timeline */
    add_marker(marker_name: string, progress: number): void
    add_marker_at_time(marker_name: string, msecs: number): void
    advance(msecs: number): void
    advance_to_marker(marker_name: string): void
    clone(): Timeline
    get_auto_reverse(): boolean
    get_cubic_bezier_progress(): [ /* returnType */ boolean, /* c_1 */ Point, /* c_2 */ Point ]
    get_current_repeat(): number
    get_delay(): number
    get_delta(): number
    get_direction(): TimelineDirection
    get_duration(): number
    get_duration_hint(): number
    get_elapsed_time(): number
    get_loop(): boolean
    get_progress(): number
    get_progress_mode(): AnimationMode
    get_repeat_count(): number
    get_step_progress(): [ /* returnType */ boolean, /* n_steps */ number, /* step_mode */ StepMode ]
    has_marker(marker_name: string): boolean
    is_playing(): boolean
    list_markers(msecs: number): string[]
    pause(): void
    remove_marker(marker_name: string): void
    rewind(): void
    set_auto_reverse(reverse: boolean): void
    set_cubic_bezier_progress(c_1: Point, c_2: Point): void
    set_delay(msecs: number): void
    set_direction(direction: TimelineDirection): void
    set_duration(msecs: number): void
    set_loop(loop: boolean): void
    set_progress_func(func: TimelineProgressFunc | null): void
    set_progress_mode(mode: AnimationMode): void
    set_repeat_count(count: number): void
    set_step_progress(n_steps: number, step_mode: StepMode): void
    skip(msecs: number): void
    start(): void
    stop(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Timeline */
    vfunc_completed(): void
    vfunc_marker_reached(marker_name: string, msecs: number): void
    vfunc_new_frame(msecs: number): void
    vfunc_paused(): void
    vfunc_started(): void
    vfunc_stopped(is_finished: boolean): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Timeline */
    connect(sigName: "completed", callback: (($obj: Timeline) => void)): number
    connect_after(sigName: "completed", callback: (($obj: Timeline) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "marker-reached", callback: (($obj: Timeline, marker_name: string, msecs: number) => void)): number
    connect_after(sigName: "marker-reached", callback: (($obj: Timeline, marker_name: string, msecs: number) => void)): number
    emit(sigName: "marker-reached", marker_name: string, msecs: number): void
    connect(sigName: "new-frame", callback: (($obj: Timeline, msecs: number) => void)): number
    connect_after(sigName: "new-frame", callback: (($obj: Timeline, msecs: number) => void)): number
    emit(sigName: "new-frame", msecs: number): void
    connect(sigName: "paused", callback: (($obj: Timeline) => void)): number
    connect_after(sigName: "paused", callback: (($obj: Timeline) => void)): number
    emit(sigName: "paused"): void
    connect(sigName: "started", callback: (($obj: Timeline) => void)): number
    connect_after(sigName: "started", callback: (($obj: Timeline) => void)): number
    emit(sigName: "started"): void
    connect(sigName: "stopped", callback: (($obj: Timeline, is_finished: boolean) => void)): number
    connect_after(sigName: "stopped", callback: (($obj: Timeline, is_finished: boolean) => void)): number
    emit(sigName: "stopped", is_finished: boolean): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-reverse", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-reverse", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::delay", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delay", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duration", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::loop", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::progress-mode", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-mode", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-count", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-count", callback: (($obj: Timeline, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Timeline_ConstructProps)
    _init (config?: Timeline_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(msecs: number): Timeline
    static $gtype: GObject.Type
}
interface Transition_ConstructProps extends Timeline_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.Transition */
    animatable?: Animatable
    interval?: Interval
    remove_on_complete?: boolean
}
class Transition {
    /* Properties of Clutter-1.0.Clutter.Transition */
    animatable: Animatable
    interval: Interval
    remove_on_complete: boolean
    /* Properties of Clutter-1.0.Clutter.Timeline */
    auto_reverse: boolean
    delay: number
    direction: TimelineDirection
    duration: number
    loop: boolean
    progress_mode: AnimationMode
    repeat_count: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.Transition */
    get_animatable(): Animatable
    get_interval(): Interval
    get_remove_on_complete(): boolean
    set_animatable(animatable?: Animatable | null): void
    set_from(value: any): void
    set_interval(interval?: Interval | null): void
    set_remove_on_complete(remove_complete: boolean): void
    set_to(value: any): void
    /* Methods of Clutter-1.0.Clutter.Timeline */
    add_marker(marker_name: string, progress: number): void
    add_marker_at_time(marker_name: string, msecs: number): void
    advance(msecs: number): void
    advance_to_marker(marker_name: string): void
    clone(): Timeline
    get_auto_reverse(): boolean
    get_cubic_bezier_progress(): [ /* returnType */ boolean, /* c_1 */ Point, /* c_2 */ Point ]
    get_current_repeat(): number
    get_delay(): number
    get_delta(): number
    get_direction(): TimelineDirection
    get_duration(): number
    get_duration_hint(): number
    get_elapsed_time(): number
    get_loop(): boolean
    get_progress(): number
    get_progress_mode(): AnimationMode
    get_repeat_count(): number
    get_step_progress(): [ /* returnType */ boolean, /* n_steps */ number, /* step_mode */ StepMode ]
    has_marker(marker_name: string): boolean
    is_playing(): boolean
    list_markers(msecs: number): string[]
    pause(): void
    remove_marker(marker_name: string): void
    rewind(): void
    set_auto_reverse(reverse: boolean): void
    set_cubic_bezier_progress(c_1: Point, c_2: Point): void
    set_delay(msecs: number): void
    set_direction(direction: TimelineDirection): void
    set_duration(msecs: number): void
    set_loop(loop: boolean): void
    set_progress_func(func: TimelineProgressFunc | null): void
    set_progress_mode(mode: AnimationMode): void
    set_repeat_count(count: number): void
    set_step_progress(n_steps: number, step_mode: StepMode): void
    skip(msecs: number): void
    start(): void
    stop(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Transition */
    vfunc_attached(animatable: Animatable): void
    vfunc_compute_value(animatable: Animatable, interval: Interval, progress: number): void
    vfunc_detached(animatable: Animatable): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Timeline */
    vfunc_completed(): void
    vfunc_marker_reached(marker_name: string, msecs: number): void
    vfunc_new_frame(msecs: number): void
    vfunc_paused(): void
    vfunc_started(): void
    vfunc_stopped(is_finished: boolean): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Timeline */
    connect(sigName: "completed", callback: (($obj: Transition) => void)): number
    connect_after(sigName: "completed", callback: (($obj: Transition) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "marker-reached", callback: (($obj: Transition, marker_name: string, msecs: number) => void)): number
    connect_after(sigName: "marker-reached", callback: (($obj: Transition, marker_name: string, msecs: number) => void)): number
    emit(sigName: "marker-reached", marker_name: string, msecs: number): void
    connect(sigName: "new-frame", callback: (($obj: Transition, msecs: number) => void)): number
    connect_after(sigName: "new-frame", callback: (($obj: Transition, msecs: number) => void)): number
    emit(sigName: "new-frame", msecs: number): void
    connect(sigName: "paused", callback: (($obj: Transition) => void)): number
    connect_after(sigName: "paused", callback: (($obj: Transition) => void)): number
    emit(sigName: "paused"): void
    connect(sigName: "started", callback: (($obj: Transition) => void)): number
    connect_after(sigName: "started", callback: (($obj: Transition) => void)): number
    emit(sigName: "started"): void
    connect(sigName: "stopped", callback: (($obj: Transition, is_finished: boolean) => void)): number
    connect_after(sigName: "stopped", callback: (($obj: Transition, is_finished: boolean) => void)): number
    emit(sigName: "stopped", is_finished: boolean): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::animatable", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::animatable", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interval", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interval", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remove-on-complete", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remove-on-complete", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::auto-reverse", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-reverse", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::delay", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delay", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duration", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::loop", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::progress-mode", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-mode", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-count", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-count", callback: (($obj: Transition, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Transition_ConstructProps)
    _init (config?: Transition_ConstructProps): void
    static $gtype: GObject.Type
}
interface TransitionGroup_ConstructProps extends Transition_ConstructProps {
}
class TransitionGroup {
    /* Properties of Clutter-1.0.Clutter.Transition */
    animatable: Animatable
    interval: Interval
    remove_on_complete: boolean
    /* Properties of Clutter-1.0.Clutter.Timeline */
    auto_reverse: boolean
    delay: number
    direction: TimelineDirection
    duration: number
    loop: boolean
    progress_mode: AnimationMode
    repeat_count: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.TransitionGroup */
    add_transition(transition: Transition): void
    remove_all(): void
    remove_transition(transition: Transition): void
    /* Methods of Clutter-1.0.Clutter.Transition */
    get_animatable(): Animatable
    get_interval(): Interval
    get_remove_on_complete(): boolean
    set_animatable(animatable?: Animatable | null): void
    set_from(value: any): void
    set_interval(interval?: Interval | null): void
    set_remove_on_complete(remove_complete: boolean): void
    set_to(value: any): void
    /* Methods of Clutter-1.0.Clutter.Timeline */
    add_marker(marker_name: string, progress: number): void
    add_marker_at_time(marker_name: string, msecs: number): void
    advance(msecs: number): void
    advance_to_marker(marker_name: string): void
    clone(): Timeline
    get_auto_reverse(): boolean
    get_cubic_bezier_progress(): [ /* returnType */ boolean, /* c_1 */ Point, /* c_2 */ Point ]
    get_current_repeat(): number
    get_delay(): number
    get_delta(): number
    get_direction(): TimelineDirection
    get_duration(): number
    get_duration_hint(): number
    get_elapsed_time(): number
    get_loop(): boolean
    get_progress(): number
    get_progress_mode(): AnimationMode
    get_repeat_count(): number
    get_step_progress(): [ /* returnType */ boolean, /* n_steps */ number, /* step_mode */ StepMode ]
    has_marker(marker_name: string): boolean
    is_playing(): boolean
    list_markers(msecs: number): string[]
    pause(): void
    remove_marker(marker_name: string): void
    rewind(): void
    set_auto_reverse(reverse: boolean): void
    set_cubic_bezier_progress(c_1: Point, c_2: Point): void
    set_delay(msecs: number): void
    set_direction(direction: TimelineDirection): void
    set_duration(msecs: number): void
    set_loop(loop: boolean): void
    set_progress_func(func: TimelineProgressFunc | null): void
    set_progress_mode(mode: AnimationMode): void
    set_repeat_count(count: number): void
    set_step_progress(n_steps: number, step_mode: StepMode): void
    skip(msecs: number): void
    start(): void
    stop(): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Methods of Clutter-1.0.Clutter.Scriptable */
    get_id(): string
    parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    set_custom_property(script: Script, name: string, value: any): void
    set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.TransitionGroup */
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Transition */
    vfunc_attached(animatable: Animatable): void
    vfunc_compute_value(animatable: Animatable, interval: Interval, progress: number): void
    vfunc_detached(animatable: Animatable): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of Clutter-1.0.Clutter.Timeline */
    vfunc_completed(): void
    vfunc_marker_reached(marker_name: string, msecs: number): void
    vfunc_new_frame(msecs: number): void
    vfunc_paused(): void
    vfunc_started(): void
    vfunc_stopped(is_finished: boolean): void
    vfunc_get_id(): string
    vfunc_parse_custom_node(script: Script, value: any, name: string, node: Json.Node): boolean
    vfunc_set_custom_property(script: Script, name: string, value: any): void
    vfunc_set_id(id_: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.Timeline */
    connect(sigName: "completed", callback: (($obj: TransitionGroup) => void)): number
    connect_after(sigName: "completed", callback: (($obj: TransitionGroup) => void)): number
    emit(sigName: "completed"): void
    connect(sigName: "marker-reached", callback: (($obj: TransitionGroup, marker_name: string, msecs: number) => void)): number
    connect_after(sigName: "marker-reached", callback: (($obj: TransitionGroup, marker_name: string, msecs: number) => void)): number
    emit(sigName: "marker-reached", marker_name: string, msecs: number): void
    connect(sigName: "new-frame", callback: (($obj: TransitionGroup, msecs: number) => void)): number
    connect_after(sigName: "new-frame", callback: (($obj: TransitionGroup, msecs: number) => void)): number
    emit(sigName: "new-frame", msecs: number): void
    connect(sigName: "paused", callback: (($obj: TransitionGroup) => void)): number
    connect_after(sigName: "paused", callback: (($obj: TransitionGroup) => void)): number
    emit(sigName: "paused"): void
    connect(sigName: "started", callback: (($obj: TransitionGroup) => void)): number
    connect_after(sigName: "started", callback: (($obj: TransitionGroup) => void)): number
    emit(sigName: "started"): void
    connect(sigName: "stopped", callback: (($obj: TransitionGroup, is_finished: boolean) => void)): number
    connect_after(sigName: "stopped", callback: (($obj: TransitionGroup, is_finished: boolean) => void)): number
    emit(sigName: "stopped", is_finished: boolean): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::animatable", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::animatable", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::interval", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interval", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::remove-on-complete", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remove-on-complete", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::auto-reverse", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-reverse", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::delay", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::delay", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::direction", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::duration", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::duration", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::loop", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::loop", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::progress-mode", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-mode", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::repeat-count", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::repeat-count", callback: (($obj: TransitionGroup, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TransitionGroup_ConstructProps)
    _init (config?: TransitionGroup_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): TransitionGroup
    /* Function overloads */
    static new(msecs: number): TransitionGroup
    static $gtype: GObject.Type
}
interface ZoomAction_ConstructProps extends GestureAction_ConstructProps {
    /* Constructor properties of Clutter-1.0.Clutter.ZoomAction */
    zoom_axis?: ZoomAxis
}
class ZoomAction {
    /* Properties of Clutter-1.0.Clutter.ZoomAction */
    zoom_axis: ZoomAxis
    /* Properties of Clutter-1.0.Clutter.GestureAction */
    n_touch_points: number
    /* Properties of Clutter-1.0.Clutter.ActorMeta */
    readonly actor: Actor
    enabled: boolean
    name: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Clutter-1.0.Clutter.ZoomAction */
    get_focal_point(): /* point */ Point
    get_transformed_focal_point(): /* point */ Point
    get_zoom_axis(): ZoomAxis
    set_zoom_axis(axis: ZoomAxis): void
    /* Methods of Clutter-1.0.Clutter.GestureAction */
    cancel(): void
    get_device(point: number): InputDevice
    get_last_event(point: number): Event
    get_motion_coords(point: number): [ /* motion_x */ number | null, /* motion_y */ number | null ]
    get_motion_delta(point: number): [ /* returnType */ number, /* delta_x */ number | null, /* delta_y */ number | null ]
    get_n_current_points(): number
    get_n_touch_points(): number
    get_press_coords(point: number): [ /* press_x */ number | null, /* press_y */ number | null ]
    get_release_coords(point: number): [ /* release_x */ number | null, /* release_y */ number | null ]
    get_sequence(point: number): EventSequence
    get_threshold_trigger_distance(): [ /* x */ number | null, /* y */ number | null ]
    get_threshold_trigger_edge(): GestureTriggerEdge
    get_threshold_trigger_egde(): GestureTriggerEdge
    get_velocity(point: number): [ /* returnType */ number, /* velocity_x */ number | null, /* velocity_y */ number | null ]
    set_n_touch_points(nb_points: number): void
    set_threshold_trigger_distance(x: number, y: number): void
    set_threshold_trigger_edge(edge: GestureTriggerEdge): void
    /* Methods of Clutter-1.0.Clutter.ActorMeta */
    get_actor(): Actor
    get_enabled(): boolean
    get_name(): string
    set_enabled(is_enabled: boolean): void
    set_name(name: string): void
    /* Methods of GObject-2.0.GObject.Object */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    force_floating(): void
    freeze_notify(): void
    get_data(key: string): object | null
    get_property(property_name: string, value: any): void
    get_qdata(quark: GLib.Quark): object | null
    getv(names: string[], values: any[]): void
    is_floating(): boolean
    notify(property_name: string): void
    notify_by_pspec(pspec: GObject.ParamSpec): void
    ref(): GObject.Object
    ref_sink(): GObject.Object
    run_dispose(): void
    set_data(key: string, data?: object | null): void
    set_property(property_name: string, value: any): void
    steal_data(key: string): object | null
    steal_qdata(quark: GLib.Quark): object | null
    thaw_notify(): void
    unref(): void
    watch_closure(closure: Function): void
    /* Virtual methods of Clutter-1.0.Clutter.ZoomAction */
    vfunc_zoom(actor: Actor, focal_point: Point, factor: number): boolean
    /* Virtual methods of Clutter-1.0.Clutter.GestureAction */
    vfunc_gesture_begin(actor: Actor): boolean
    vfunc_gesture_cancel(actor: Actor): void
    vfunc_gesture_end(actor: Actor): void
    vfunc_gesture_prepare(actor: Actor): boolean
    vfunc_gesture_progress(actor: Actor): boolean
    /* Virtual methods of Clutter-1.0.Clutter.ActorMeta */
    vfunc_set_actor(actor?: Actor | null): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Clutter-1.0.Clutter.ZoomAction */
    connect(sigName: "zoom", callback: (($obj: ZoomAction, actor: Actor, focal_point: Point, factor: number) => boolean)): number
    connect_after(sigName: "zoom", callback: (($obj: ZoomAction, actor: Actor, focal_point: Point, factor: number) => boolean)): number
    emit(sigName: "zoom", actor: Actor, focal_point: Point, factor: number): void
    /* Signals of Clutter-1.0.Clutter.GestureAction */
    connect(sigName: "gesture-begin", callback: (($obj: ZoomAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-begin", callback: (($obj: ZoomAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-begin", actor: Actor): void
    connect(sigName: "gesture-cancel", callback: (($obj: ZoomAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-cancel", callback: (($obj: ZoomAction, actor: Actor) => void)): number
    emit(sigName: "gesture-cancel", actor: Actor): void
    connect(sigName: "gesture-end", callback: (($obj: ZoomAction, actor: Actor) => void)): number
    connect_after(sigName: "gesture-end", callback: (($obj: ZoomAction, actor: Actor) => void)): number
    emit(sigName: "gesture-end", actor: Actor): void
    connect(sigName: "gesture-progress", callback: (($obj: ZoomAction, actor: Actor) => boolean)): number
    connect_after(sigName: "gesture-progress", callback: (($obj: ZoomAction, actor: Actor) => boolean)): number
    emit(sigName: "gesture-progress", actor: Actor): void
    /* Signals of GObject-2.0.GObject.Object */
    connect(sigName: "notify", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::zoom-axis", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::zoom-axis", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::n-touch-points", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-touch-points", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::actor", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::actor", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::enabled", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enabled", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::name", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ZoomAction, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: ZoomAction_ConstructProps)
    _init (config?: ZoomAction_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): ZoomAction
    static $gtype: GObject.Type
}
abstract class ActionClass {
    static name: string
}
class ActorBox {
    /* Fields of Clutter-1.0.Clutter.ActorBox */
    readonly x1: number
    readonly y1: number
    readonly x2: number
    readonly y2: number
    /* Methods of Clutter-1.0.Clutter.ActorBox */
    clamp_to_pixel(): void
    contains(x: number, y: number): boolean
    copy(): ActorBox
    equal(box_b: ActorBox): boolean
    free(): void
    from_vertices(verts: Vertex[]): void
    get_area(): number
    get_height(): number
    get_origin(): [ /* x */ number | null, /* y */ number | null ]
    get_size(): [ /* width */ number | null, /* height */ number | null ]
    get_width(): number
    get_x(): number
    get_y(): number
    init(x_1: number, y_1: number, x_2: number, y_2: number): ActorBox
    init_rect(x: number, y: number, width: number, height: number): void
    interpolate(final: ActorBox, progress: number): /* result */ ActorBox
    set_origin(x: number, y: number): void
    set_size(width: number, height: number): void
    union(b: ActorBox): /* result */ ActorBox
    static name: string
    static new(x_1: number, y_1: number, x_2: number, y_2: number): ActorBox
    constructor(x_1: number, y_1: number, x_2: number, y_2: number)
    /* Static methods and pseudo-constructors */
    static new(x_1: number, y_1: number, x_2: number, y_2: number): ActorBox
    static alloc(): ActorBox
}
abstract class ActorClass {
    /* Fields of Clutter-1.0.Clutter.ActorClass */
    readonly show: (self: Actor) => void
    readonly show_all: (self: Actor) => void
    readonly hide: (self: Actor) => void
    readonly hide_all: (self: Actor) => void
    readonly realize: (self: Actor) => void
    readonly unrealize: (self: Actor) => void
    readonly map: (self: Actor) => void
    readonly unmap: (self: Actor) => void
    readonly paint: (self: Actor) => void
    readonly parent_set: (actor: Actor, old_parent: Actor) => void
    readonly destroy: (self: Actor) => void
    readonly pick: (actor: Actor, color: Color) => void
    readonly queue_redraw: (actor: Actor, leaf_that_queued: Actor) => void
    readonly get_preferred_width: (self: Actor, for_height: number) => [ /* min_width_p */ number | null, /* natural_width_p */ number | null ]
    readonly get_preferred_height: (self: Actor, for_width: number) => [ /* min_height_p */ number | null, /* natural_height_p */ number | null ]
    readonly allocate: (self: Actor, box: ActorBox, flags: AllocationFlags) => void
    readonly apply_transform: (actor: Actor, matrix: Matrix) => void
    readonly event: (actor: Actor, event: Event) => boolean
    readonly button_press_event: (actor: Actor, event: ButtonEvent) => boolean
    readonly button_release_event: (actor: Actor, event: ButtonEvent) => boolean
    readonly scroll_event: (actor: Actor, event: ScrollEvent) => boolean
    readonly key_press_event: (actor: Actor, event: KeyEvent) => boolean
    readonly key_release_event: (actor: Actor, event: KeyEvent) => boolean
    readonly motion_event: (actor: Actor, event: MotionEvent) => boolean
    readonly enter_event: (actor: Actor, event: CrossingEvent) => boolean
    readonly leave_event: (actor: Actor, event: CrossingEvent) => boolean
    readonly captured_event: (actor: Actor, event: Event) => boolean
    readonly key_focus_in: (actor: Actor) => void
    readonly key_focus_out: (actor: Actor) => void
    readonly queue_relayout: (self: Actor) => void
    readonly get_accessible: (self: Actor) => Atk.Object
    readonly get_paint_volume: (actor: Actor, volume: PaintVolume) => boolean
    readonly has_overlaps: (self: Actor) => boolean
    readonly paint_node: (self: Actor, root: PaintNode) => void
    readonly touch_event: (self: Actor, event: TouchEvent) => boolean
    static name: string
}
class ActorIter {
    /* Methods of Clutter-1.0.Clutter.ActorIter */
    destroy(): void
    init(root: Actor): void
    is_valid(): boolean
    next(): [ /* returnType */ boolean, /* child */ Actor ]
    prev(): [ /* returnType */ boolean, /* child */ Actor ]
    remove(): void
    static name: string
}
abstract class ActorMetaClass {
    /* Fields of Clutter-1.0.Clutter.ActorMetaClass */
    readonly set_actor: (meta: ActorMeta, actor?: Actor | null) => void
    static name: string
}
class ActorMetaPrivate {
    static name: string
}
class ActorPrivate {
    static name: string
}
abstract class AlignConstraintClass {
    static name: string
}
abstract class AlphaClass {
    static name: string
}
class AlphaPrivate {
    static name: string
}
abstract class AnimatableIface {
    /* Fields of Clutter-1.0.Clutter.AnimatableIface */
    readonly animate_property: (animatable: Animatable, animation: Animation, property_name: string, initial_value: any, final_value: any, progress: number, value: any) => boolean
    readonly find_property: (animatable: Animatable, property_name: string) => GObject.ParamSpec
    readonly get_initial_state: (animatable: Animatable, property_name: string, value: any) => void
    readonly set_final_state: (animatable: Animatable, property_name: string, value: any) => void
    readonly interpolate_value: (animatable: Animatable, property_name: string, interval: Interval, progress: number) => [ /* returnType */ boolean, /* value */ any ]
    static name: string
}
abstract class AnimationClass {
    /* Fields of Clutter-1.0.Clutter.AnimationClass */
    readonly started: (animation: Animation) => void
    readonly completed: (animation: Animation) => void
    static name: string
}
class AnimationPrivate {
    static name: string
}
abstract class AnimatorClass {
    static name: string
}
class AnimatorKey {
    /* Methods of Clutter-1.0.Clutter.AnimatorKey */
    get_mode(): number
    get_object(): GObject.Object
    get_progress(): number
    get_property_name(): string
    get_property_type(): GObject.Type
    get_value(value: any): boolean
    static name: string
}
class AnimatorPrivate {
    static name: string
}
class AnyEvent {
    /* Fields of Clutter-1.0.Clutter.AnyEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    static name: string
}
abstract class BackendClass {
    static name: string
}
abstract class BehaviourClass {
    /* Fields of Clutter-1.0.Clutter.BehaviourClass */
    readonly alpha_notify: (behave: Behaviour, alpha_value: number) => void
    readonly applied: (behave: Behaviour, actor: Actor) => void
    readonly removed: (behave: Behaviour, actor: Actor) => void
    static name: string
}
abstract class BehaviourDepthClass {
    static name: string
}
class BehaviourDepthPrivate {
    static name: string
}
abstract class BehaviourEllipseClass {
    static name: string
}
class BehaviourEllipsePrivate {
    static name: string
}
abstract class BehaviourOpacityClass {
    static name: string
}
class BehaviourOpacityPrivate {
    static name: string
}
abstract class BehaviourPathClass {
    /* Fields of Clutter-1.0.Clutter.BehaviourPathClass */
    readonly knot_reached: (pathb: BehaviourPath, knot_num: number) => void
    static name: string
}
class BehaviourPathPrivate {
    static name: string
}
class BehaviourPrivate {
    static name: string
}
abstract class BehaviourRotateClass {
    static name: string
}
class BehaviourRotatePrivate {
    static name: string
}
abstract class BehaviourScaleClass {
    static name: string
}
class BehaviourScalePrivate {
    static name: string
}
abstract class BinLayoutClass {
    static name: string
}
class BinLayoutPrivate {
    static name: string
}
abstract class BindConstraintClass {
    static name: string
}
abstract class BindingPoolClass {
    static name: string
}
abstract class BlurEffectClass {
    static name: string
}
abstract class BoxClass {
    /* Fields of Clutter-1.0.Clutter.BoxClass */
    readonly clutter_padding_1: () => void
    readonly clutter_padding_2: () => void
    readonly clutter_padding_3: () => void
    readonly clutter_padding_4: () => void
    readonly clutter_padding_5: () => void
    readonly clutter_padding_6: () => void
    static name: string
}
abstract class BoxLayoutClass {
    static name: string
}
class BoxLayoutPrivate {
    static name: string
}
class BoxPrivate {
    static name: string
}
abstract class BrightnessContrastEffectClass {
    static name: string
}
class ButtonEvent {
    /* Fields of Clutter-1.0.Clutter.ButtonEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly x: number
    readonly y: number
    readonly modifier_state: ModifierType
    readonly button: number
    readonly click_count: number
    readonly axes: number
    readonly device: InputDevice
    static name: string
}
abstract class CairoTextureClass {
    /* Fields of Clutter-1.0.Clutter.CairoTextureClass */
    readonly create_surface: (texture: CairoTexture, width: number, height: number) => cairo.Surface
    readonly draw: (texture: CairoTexture, cr: cairo.Context) => boolean
    static name: string
}
class CairoTexturePrivate {
    static name: string
}
abstract class CanvasClass {
    /* Fields of Clutter-1.0.Clutter.CanvasClass */
    readonly draw: (canvas: Canvas, cr: cairo.Context, width: number, height: number) => boolean
    static name: string
}
class CanvasPrivate {
    static name: string
}
abstract class ChildMetaClass {
    static name: string
}
abstract class ClickActionClass {
    /* Fields of Clutter-1.0.Clutter.ClickActionClass */
    readonly clicked: (action: ClickAction, actor: Actor) => void
    readonly long_press: (action: ClickAction, actor: Actor, state: LongPressState) => boolean
    static name: string
}
class ClickActionPrivate {
    static name: string
}
abstract class ClipNodeClass {
    static name: string
}
abstract class CloneClass {
    static name: string
}
class ClonePrivate {
    static name: string
}
class Color {
    /* Fields of Clutter-1.0.Clutter.Color */
    readonly red: number
    readonly green: number
    readonly blue: number
    readonly alpha: number
    /* Methods of Clutter-1.0.Clutter.Color */
    add(b: Color): /* result */ Color
    copy(): Color
    darken(): /* result */ Color
    equal(v2: Color): boolean
    free(): void
    hash(): number
    init(red: number, green: number, blue: number, alpha: number): Color
    interpolate(final: Color, progress: number): /* result */ Color
    lighten(): /* result */ Color
    shade(factor: number): /* result */ Color
    subtract(b: Color): /* result */ Color
    to_hls(): [ /* hue */ number, /* luminance */ number, /* saturation */ number ]
    to_pixel(): number
    to_string(): string
    static name: string
    static new(red: number, green: number, blue: number, alpha: number): Color
    constructor(red: number, green: number, blue: number, alpha: number)
    /* Static methods and pseudo-constructors */
    static alloc(): Color
    static new(red: number, green: number, blue: number, alpha: number): Color
    static from_hls(hue: number, luminance: number, saturation: number): /* color */ Color
    static from_pixel(pixel: number): /* color */ Color
    static from_string(str: string): [ /* returnType */ boolean, /* color */ Color ]
    static get_static(color: StaticColor): Color
}
abstract class ColorNodeClass {
    static name: string
}
abstract class ColorizeEffectClass {
    static name: string
}
abstract class ConstraintClass {
    /* Fields of Clutter-1.0.Clutter.ConstraintClass */
    readonly update_allocation: (constraint: Constraint, actor: Actor, allocation: ActorBox) => void
    readonly update_preferred_size: (constraint: Constraint, actor: Actor, direction: Orientation, for_size: number, minimum_size: number, natural_size: number) => void
    static name: string
}
abstract class ContainerIface {
    /* Fields of Clutter-1.0.Clutter.ContainerIface */
    readonly add: (container: Container, actor: Actor) => void
    readonly remove: (container: Container, actor: Actor) => void
    readonly foreach: (container: Container, callback: Callback) => void
    readonly foreach_with_internals: (container: Container, callback: Callback) => void
    readonly raise: (container: Container, actor: Actor, sibling?: Actor | null) => void
    readonly lower: (container: Container, actor: Actor, sibling?: Actor | null) => void
    readonly sort_depth_order: (container: Container) => void
    readonly child_meta_type: GObject.Type
    readonly create_child_meta: (container: Container, actor: Actor) => void
    readonly destroy_child_meta: (container: Container, actor: Actor) => void
    readonly get_child_meta: (container: Container, actor: Actor) => ChildMeta
    readonly actor_added: (container: Container, actor: Actor) => void
    readonly actor_removed: (container: Container, actor: Actor) => void
    readonly child_notify: (container: Container, child: Actor, pspec: GObject.ParamSpec) => void
    static name: string
}
abstract class ContentIface {
    /* Fields of Clutter-1.0.Clutter.ContentIface */
    readonly get_preferred_size: (content: Content) => [ /* returnType */ boolean, /* width */ number, /* height */ number ]
    readonly paint_content: (content: Content, actor: Actor, node: PaintNode) => void
    readonly attached: (content: Content, actor: Actor) => void
    readonly detached: (content: Content, actor: Actor) => void
    readonly invalidate: (content: Content) => void
    static name: string
}
class CrossingEvent {
    /* Fields of Clutter-1.0.Clutter.CrossingEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly x: number
    readonly y: number
    readonly device: InputDevice
    readonly related: Actor
    static name: string
}
abstract class DeformEffectClass {
    /* Fields of Clutter-1.0.Clutter.DeformEffectClass */
    readonly deform_vertex: (effect: DeformEffect, width: number, height: number, vertex: Cogl.TextureVertex) => void
    static name: string
}
class DeformEffectPrivate {
    static name: string
}
abstract class DesaturateEffectClass {
    static name: string
}
abstract class DeviceManagerClass {
    /* Fields of Clutter-1.0.Clutter.DeviceManagerClass */
    readonly get_core_device: (device_manager: DeviceManager, device_type: InputDeviceType) => InputDevice
    readonly get_device: (device_manager: DeviceManager, device_id: number) => InputDevice
    readonly add_device: (manager: DeviceManager, device: InputDevice) => void
    readonly remove_device: (manager: DeviceManager, device: InputDevice) => void
    readonly select_stage_events: (manager: DeviceManager, stage: Stage) => void
    static name: string
}
class DeviceManagerPrivate {
    static name: string
}
abstract class DragActionClass {
    /* Fields of Clutter-1.0.Clutter.DragActionClass */
    readonly drag_begin: (action: DragAction, actor: Actor, event_x: number, event_y: number, modifiers: ModifierType) => void
    readonly drag_motion: (action: DragAction, actor: Actor, delta_x: number, delta_y: number) => void
    readonly drag_end: (action: DragAction, actor: Actor, event_x: number, event_y: number, modifiers: ModifierType) => void
    readonly drag_progress: (action: DragAction, actor: Actor, delta_x: number, delta_y: number) => boolean
    static name: string
}
class DragActionPrivate {
    static name: string
}
abstract class DropActionClass {
    /* Fields of Clutter-1.0.Clutter.DropActionClass */
    readonly can_drop: (action: DropAction, actor: Actor, event_x: number, event_y: number) => boolean
    readonly over_in: (action: DropAction, actor: Actor) => void
    readonly over_out: (action: DropAction, actor: Actor) => void
    readonly drop: (action: DropAction, actor: Actor, event_x: number, event_y: number) => void
    static name: string
}
class DropActionPrivate {
    static name: string
}
abstract class EffectClass {
    /* Fields of Clutter-1.0.Clutter.EffectClass */
    readonly pre_paint: (effect: Effect) => boolean
    readonly post_paint: (effect: Effect) => void
    readonly get_paint_volume: (effect: Effect, volume: PaintVolume) => boolean
    readonly paint: (effect: Effect, flags: EffectPaintFlags) => void
    readonly pick: (effect: Effect, flags: EffectPaintFlags) => void
    static name: string
}
class EventSequence {
    static name: string
}
abstract class FixedLayoutClass {
    static name: string
}
abstract class FlowLayoutClass {
    static name: string
}
class FlowLayoutPrivate {
    static name: string
}
class Fog {
    /* Fields of Clutter-1.0.Clutter.Fog */
    readonly z_near: number
    readonly z_far: number
    static name: string
}
class Geometry {
    /* Fields of Clutter-1.0.Clutter.Geometry */
    readonly x: number
    readonly y: number
    readonly width: number
    readonly height: number
    /* Methods of Clutter-1.0.Clutter.Geometry */
    intersects(geometry1: Geometry): boolean
    union(geometry_b: Geometry): /* result */ Geometry
    static name: string
}
abstract class GestureActionClass {
    /* Fields of Clutter-1.0.Clutter.GestureActionClass */
    readonly gesture_begin: (action: GestureAction, actor: Actor) => boolean
    readonly gesture_progress: (action: GestureAction, actor: Actor) => boolean
    readonly gesture_end: (action: GestureAction, actor: Actor) => void
    readonly gesture_cancel: (action: GestureAction, actor: Actor) => void
    readonly gesture_prepare: (action: GestureAction, actor: Actor) => boolean
    static name: string
}
class GestureActionPrivate {
    static name: string
}
abstract class GridLayoutClass {
    static name: string
}
class GridLayoutPrivate {
    static name: string
}
abstract class GroupClass {
    static name: string
}
class GroupPrivate {
    static name: string
}
abstract class ImageClass {
    static name: string
}
class ImagePrivate {
    static name: string
}
abstract class InputDeviceClass {
    static name: string
}
abstract class IntervalClass {
    /* Fields of Clutter-1.0.Clutter.IntervalClass */
    readonly validate: (interval: Interval, pspec: GObject.ParamSpec) => boolean
    readonly compute_value: (interval: Interval, factor: number) => [ /* returnType */ boolean, /* value */ any ]
    static name: string
}
class IntervalPrivate {
    static name: string
}
class KeyEvent {
    /* Fields of Clutter-1.0.Clutter.KeyEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly modifier_state: ModifierType
    readonly keyval: number
    readonly hardware_keycode: number
    readonly unicode_value: number
    readonly device: InputDevice
    static name: string
}
abstract class KeyframeTransitionClass {
    static name: string
}
class KeyframeTransitionPrivate {
    static name: string
}
class Knot {
    /* Fields of Clutter-1.0.Clutter.Knot */
    readonly x: number
    readonly y: number
    /* Methods of Clutter-1.0.Clutter.Knot */
    copy(): Knot
    equal(knot_b: Knot): boolean
    free(): void
    static name: string
}
abstract class LayoutManagerClass {
    /* Fields of Clutter-1.0.Clutter.LayoutManagerClass */
    readonly get_preferred_width: (manager: LayoutManager, container: Container, for_height: number) => [ /* min_width_p */ number | null, /* nat_width_p */ number | null ]
    readonly get_preferred_height: (manager: LayoutManager, container: Container, for_width: number) => [ /* min_height_p */ number | null, /* nat_height_p */ number | null ]
    readonly allocate: (manager: LayoutManager, container: Container, allocation: ActorBox, flags: AllocationFlags) => void
    readonly set_container: (manager: LayoutManager, container?: Container | null) => void
    readonly get_child_meta_type: (manager: LayoutManager) => GObject.Type
    readonly begin_animation: (manager: LayoutManager, duration: number, mode: number) => Alpha
    readonly get_animation_progress: (manager: LayoutManager) => number
    readonly end_animation: (manager: LayoutManager) => void
    readonly layout_changed: (manager: LayoutManager) => void
    static name: string
}
abstract class LayoutMetaClass {
    static name: string
}
abstract class ListModelClass {
    static name: string
}
class ListModelPrivate {
    static name: string
}
class Margin {
    /* Fields of Clutter-1.0.Clutter.Margin */
    readonly left: number
    readonly right: number
    readonly top: number
    readonly bottom: number
    /* Methods of Clutter-1.0.Clutter.Margin */
    copy(): Margin
    free(): void
    static name: string
    static new(): Margin
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Margin
}
class Matrix {
    /* Methods of Clutter-1.0.Clutter.Matrix */
    free(): void
    init_from_array(values: number[]): Matrix
    init_from_matrix(b: Matrix): Matrix
    init_identity(): Matrix
    static name: string
    /* Static methods and pseudo-constructors */
    static alloc(): Matrix
}
abstract class MediaIface {
    /* Fields of Clutter-1.0.Clutter.MediaIface */
    readonly eos: (media: Media) => void
    readonly error: (media: Media, error: GLib.Error) => void
    static name: string
}
abstract class ModelClass {
    /* Fields of Clutter-1.0.Clutter.ModelClass */
    readonly get_n_rows: (model: Model) => number
    readonly get_n_columns: (model: Model) => number
    readonly get_column_name: (model: Model, column: number) => string
    readonly get_column_type: (model: Model, column: number) => GObject.Type
    readonly remove_row: (model: Model, row: number) => void
    readonly get_iter_at_row: (model: Model, row: number) => ModelIter
    readonly row_added: (model: Model, iter: ModelIter) => void
    readonly row_removed: (model: Model, iter: ModelIter) => void
    readonly row_changed: (model: Model, iter: ModelIter) => void
    readonly sort_changed: (model: Model) => void
    readonly filter_changed: (model: Model) => void
    static name: string
}
abstract class ModelIterClass {
    /* Fields of Clutter-1.0.Clutter.ModelIterClass */
    readonly get_value: (iter: ModelIter, column: number) => /* value */ any
    readonly set_value: (iter: ModelIter, column: number, value: any) => void
    readonly is_first: (iter: ModelIter) => boolean
    readonly is_last: (iter: ModelIter) => boolean
    readonly next: (iter: ModelIter) => ModelIter
    readonly prev: (iter: ModelIter) => ModelIter
    readonly get_model: (iter: ModelIter) => Model
    readonly get_row: (iter: ModelIter) => number
    readonly copy: (iter: ModelIter) => ModelIter
    static name: string
}
class ModelIterPrivate {
    static name: string
}
class ModelPrivate {
    static name: string
}
class MotionEvent {
    /* Fields of Clutter-1.0.Clutter.MotionEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly x: number
    readonly y: number
    readonly modifier_state: ModifierType
    readonly axes: number
    readonly device: InputDevice
    static name: string
}
abstract class OffscreenEffectClass {
    /* Fields of Clutter-1.0.Clutter.OffscreenEffectClass */
    readonly create_texture: (effect: OffscreenEffect, width: number, height: number) => Cogl.Handle
    readonly paint_target: (effect: OffscreenEffect) => void
    static name: string
}
class OffscreenEffectPrivate {
    static name: string
}
abstract class PageTurnEffectClass {
    static name: string
}
abstract class PaintNodeClass {
    static name: string
}
class PaintNodePrivate {
    static name: string
}
class PaintVolume {
    /* Methods of Clutter-1.0.Clutter.PaintVolume */
    copy(): PaintVolume
    free(): void
    get_depth(): number
    get_height(): number
    get_origin(): /* vertex */ Vertex
    get_width(): number
    set_depth(depth: number): void
    set_from_allocation(actor: Actor): boolean
    set_height(height: number): void
    set_origin(origin: Vertex): void
    set_width(width: number): void
    union(another_pv: PaintVolume): void
    union_box(box: ActorBox): void
    static name: string
}
abstract class PanActionClass {
    /* Fields of Clutter-1.0.Clutter.PanActionClass */
    readonly pan: (action: PanAction, actor: Actor, is_interpolated: boolean) => boolean
    readonly pan_stopped: (action: PanAction, actor: Actor) => void
    static name: string
}
class PanActionPrivate {
    static name: string
}
class ParamSpecUnits {
    /* Fields of Clutter-1.0.Clutter.ParamSpecUnits */
    readonly default_type: UnitType
    readonly default_value: number
    readonly minimum: number
    readonly maximum: number
    static name: string
}
abstract class PathClass {
    static name: string
}
abstract class PathConstraintClass {
    static name: string
}
class PathNode {
    /* Fields of Clutter-1.0.Clutter.PathNode */
    readonly type: PathNodeType
    readonly points: Knot[]
    /* Methods of Clutter-1.0.Clutter.PathNode */
    copy(): PathNode
    equal(node_b: PathNode): boolean
    free(): void
    static name: string
}
class PathPrivate {
    static name: string
}
class Perspective {
    /* Fields of Clutter-1.0.Clutter.Perspective */
    readonly fovy: number
    readonly aspect: number
    readonly z_near: number
    readonly z_far: number
    static name: string
}
abstract class PipelineNodeClass {
    static name: string
}
class Point {
    /* Fields of Clutter-1.0.Clutter.Point */
    readonly x: number
    readonly y: number
    /* Methods of Clutter-1.0.Clutter.Point */
    copy(): Point
    distance(b: Point): [ /* returnType */ number, /* x_distance */ number | null, /* y_distance */ number | null ]
    equals(b: Point): boolean
    free(): void
    init(x: number, y: number): Point
    static name: string
    /* Static methods and pseudo-constructors */
    static alloc(): Point
    static zero(): Point
}
abstract class PropertyTransitionClass {
    static name: string
}
class PropertyTransitionPrivate {
    static name: string
}
class Rect {
    /* Fields of Clutter-1.0.Clutter.Rect */
    readonly origin: Point
    readonly size: Size
    /* Methods of Clutter-1.0.Clutter.Rect */
    clamp_to_pixel(): void
    contains_point(point: Point): boolean
    contains_rect(b: Rect): boolean
    copy(): Rect
    equals(b: Rect): boolean
    free(): void
    get_center(): /* center */ Point
    get_height(): number
    get_width(): number
    get_x(): number
    get_y(): number
    init(x: number, y: number, width: number, height: number): Rect
    inset(d_x: number, d_y: number): void
    intersection(b: Rect): [ /* returnType */ boolean, /* res */ Rect | null ]
    normalize(): Rect
    offset(d_x: number, d_y: number): void
    union(b: Rect): /* res */ Rect
    static name: string
    /* Static methods and pseudo-constructors */
    static alloc(): Rect
    static zero(): Rect
}
abstract class RectangleClass {
    static name: string
}
class RectanglePrivate {
    static name: string
}
abstract class RotateActionClass {
    /* Fields of Clutter-1.0.Clutter.RotateActionClass */
    readonly rotate: (action: RotateAction, actor: Actor, angle: number) => boolean
    static name: string
}
class RotateActionPrivate {
    static name: string
}
abstract class ScoreClass {
    /* Fields of Clutter-1.0.Clutter.ScoreClass */
    readonly timeline_started: (score: Score, timeline: Timeline) => void
    readonly timeline_completed: (score: Score, timeline: Timeline) => void
    readonly started: (score: Score) => void
    readonly completed: (score: Score) => void
    readonly paused: (score: Score) => void
    static name: string
}
class ScorePrivate {
    static name: string
}
abstract class ScriptClass {
    /* Fields of Clutter-1.0.Clutter.ScriptClass */
    readonly get_type_from_name: (script: Script, type_name: string) => GObject.Type
    static name: string
}
class ScriptPrivate {
    static name: string
}
abstract class ScriptableIface {
    /* Fields of Clutter-1.0.Clutter.ScriptableIface */
    readonly set_id: (scriptable: Scriptable, id_: string) => void
    readonly get_id: (scriptable: Scriptable) => string
    readonly parse_custom_node: (scriptable: Scriptable, script: Script, value: any, name: string, node: Json.Node) => boolean
    readonly set_custom_property: (scriptable: Scriptable, script: Script, name: string, value: any) => void
    static name: string
}
abstract class ScrollActorClass {
    static name: string
}
class ScrollActorPrivate {
    static name: string
}
class ScrollEvent {
    /* Fields of Clutter-1.0.Clutter.ScrollEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly x: number
    readonly y: number
    readonly direction: ScrollDirection
    readonly modifier_state: ModifierType
    readonly axes: number
    readonly device: InputDevice
    readonly scroll_source: ScrollSource
    readonly finish_flags: ScrollFinishFlags
    static name: string
}
abstract class SettingsClass {
    static name: string
}
abstract class ShaderClass {
    static name: string
}
abstract class ShaderEffectClass {
    /* Fields of Clutter-1.0.Clutter.ShaderEffectClass */
    readonly get_static_shader_source: (effect: ShaderEffect) => string
    static name: string
}
class ShaderEffectPrivate {
    static name: string
}
class ShaderPrivate {
    static name: string
}
class Size {
    /* Fields of Clutter-1.0.Clutter.Size */
    readonly width: number
    readonly height: number
    /* Methods of Clutter-1.0.Clutter.Size */
    copy(): Size
    equals(b: Size): boolean
    free(): void
    init(width: number, height: number): Size
    static name: string
    /* Static methods and pseudo-constructors */
    static alloc(): Size
}
abstract class SnapConstraintClass {
    static name: string
}
abstract class StageClass {
    /* Fields of Clutter-1.0.Clutter.StageClass */
    readonly fullscreen: (stage: Stage) => void
    readonly unfullscreen: (stage: Stage) => void
    readonly activate: (stage: Stage) => void
    readonly deactivate: (stage: Stage) => void
    readonly delete_event: (stage: Stage, event: Event) => boolean
    static name: string
}
abstract class StageManagerClass {
    /* Fields of Clutter-1.0.Clutter.StageManagerClass */
    readonly stage_added: (stage_manager: StageManager, stage: Stage) => void
    readonly stage_removed: (stage_manager: StageManager, stage: Stage) => void
    static name: string
}
class StagePrivate {
    static name: string
}
class StageStateEvent {
    /* Fields of Clutter-1.0.Clutter.StageStateEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly changed_mask: StageState
    readonly new_state: StageState
    static name: string
}
abstract class StateClass {
    /* Fields of Clutter-1.0.Clutter.StateClass */
    readonly completed: (state: State) => void
    static name: string
}
class StateKey {
    /* Methods of Clutter-1.0.Clutter.StateKey */
    get_mode(): number
    get_object(): GObject.Object
    get_post_delay(): number
    get_pre_delay(): number
    get_property_name(): string
    get_property_type(): GObject.Type
    get_source_state_name(): string
    get_target_state_name(): string
    get_value(value: any): boolean
    static name: string
}
class StatePrivate {
    static name: string
}
abstract class SwipeActionClass {
    /* Fields of Clutter-1.0.Clutter.SwipeActionClass */
    readonly swept: (action: SwipeAction, actor: Actor, direction: SwipeDirection) => void
    readonly swipe: (action: SwipeAction, actor: Actor, direction: SwipeDirection) => boolean
    static name: string
}
class SwipeActionPrivate {
    static name: string
}
abstract class TableLayoutClass {
    static name: string
}
class TableLayoutPrivate {
    static name: string
}
abstract class TapActionClass {
    /* Fields of Clutter-1.0.Clutter.TapActionClass */
    readonly tap: (action: TapAction, actor: Actor) => boolean
    static name: string
}
class TapActionPrivate {
    static name: string
}
abstract class TextBufferClass {
    /* Fields of Clutter-1.0.Clutter.TextBufferClass */
    readonly inserted_text: (buffer: TextBuffer, position: number, chars: string, n_chars: number) => void
    readonly deleted_text: (buffer: TextBuffer, position: number, n_chars: number) => void
    readonly get_text: (buffer: TextBuffer, n_bytes: number) => string
    readonly get_length: (buffer: TextBuffer) => number
    readonly insert_text: (buffer: TextBuffer, position: number, chars: string, n_chars: number) => number
    readonly delete_text: (buffer: TextBuffer, position: number, n_chars: number) => number
    static name: string
}
class TextBufferPrivate {
    static name: string
}
abstract class TextClass {
    /* Fields of Clutter-1.0.Clutter.TextClass */
    readonly text_changed: (self: Text) => void
    readonly activate: (self: Text) => void
    readonly cursor_event: (self: Text, geometry: Geometry) => void
    readonly cursor_changed: (self: Text) => void
    static name: string
}
abstract class TextNodeClass {
    static name: string
}
class TextPrivate {
    static name: string
}
abstract class TextureClass {
    /* Fields of Clutter-1.0.Clutter.TextureClass */
    readonly size_change: (texture: Texture, width: number, height: number) => void
    readonly pixbuf_change: (texture: Texture) => void
    readonly load_finished: (texture: Texture, error: GLib.Error) => void
    static name: string
}
abstract class TextureNodeClass {
    static name: string
}
class TexturePrivate {
    static name: string
}
abstract class TimelineClass {
    /* Fields of Clutter-1.0.Clutter.TimelineClass */
    readonly started: (timeline: Timeline) => void
    readonly completed: (timeline: Timeline) => void
    readonly paused: (timeline: Timeline) => void
    readonly new_frame: (timeline: Timeline, msecs: number) => void
    readonly marker_reached: (timeline: Timeline, marker_name: string, msecs: number) => void
    readonly stopped: (timeline: Timeline, is_finished: boolean) => void
    static name: string
}
class TimelinePrivate {
    static name: string
}
class TimeoutPool {
    /* Methods of Clutter-1.0.Clutter.TimeoutPool */
    add(fps: number, func: GLib.SourceFunc): number
    remove(id_: number): void
    static name: string
}
class TouchEvent {
    /* Fields of Clutter-1.0.Clutter.TouchEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly x: number
    readonly y: number
    readonly sequence: EventSequence
    readonly modifier_state: ModifierType
    readonly axes: number
    readonly device: InputDevice
    static name: string
}
class TouchpadPinchEvent {
    /* Fields of Clutter-1.0.Clutter.TouchpadPinchEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly phase: TouchpadGesturePhase
    readonly x: number
    readonly y: number
    readonly dx: number
    readonly dy: number
    readonly angle_delta: number
    readonly scale: number
    static name: string
}
class TouchpadSwipeEvent {
    /* Fields of Clutter-1.0.Clutter.TouchpadSwipeEvent */
    readonly type: EventType
    readonly time: number
    readonly flags: EventFlags
    readonly stage: Stage
    readonly source: Actor
    readonly phase: TouchpadGesturePhase
    readonly n_fingers: number
    readonly x: number
    readonly y: number
    readonly dx: number
    readonly dy: number
    static name: string
}
abstract class TransitionClass {
    /* Fields of Clutter-1.0.Clutter.TransitionClass */
    readonly attached: (transition: Transition, animatable: Animatable) => void
    readonly detached: (transition: Transition, animatable: Animatable) => void
    readonly compute_value: (transition: Transition, animatable: Animatable, interval: Interval, progress: number) => void
    static name: string
}
abstract class TransitionGroupClass {
    static name: string
}
class TransitionGroupPrivate {
    static name: string
}
class TransitionPrivate {
    static name: string
}
class Units {
    /* Methods of Clutter-1.0.Clutter.Units */
    copy(): Units
    free(): void
    get_unit_type(): UnitType
    get_unit_value(): number
    to_pixels(): number
    to_string(): string
    static name: string
    /* Static methods and pseudo-constructors */
    static from_cm(cm: number): /* units */ Units
    static from_em(em: number): /* units */ Units
    static from_em_for_font(font_name: string | null, em: number): /* units */ Units
    static from_mm(mm: number): /* units */ Units
    static from_pixels(px: number): /* units */ Units
    static from_pt(pt: number): /* units */ Units
    static from_string(str: string): [ /* returnType */ boolean, /* units */ Units ]
}
class Vertex {
    /* Fields of Clutter-1.0.Clutter.Vertex */
    readonly x: number
    readonly y: number
    readonly z: number
    /* Methods of Clutter-1.0.Clutter.Vertex */
    copy(): Vertex
    equal(vertex_b: Vertex): boolean
    free(): void
    init(x: number, y: number, z: number): Vertex
    static name: string
    static new(x: number, y: number, z: number): Vertex
    constructor(x: number, y: number, z: number)
    /* Static methods and pseudo-constructors */
    static alloc(): Vertex
    static new(x: number, y: number, z: number): Vertex
}
abstract class ZoomActionClass {
    /* Fields of Clutter-1.0.Clutter.ZoomActionClass */
    readonly zoom: (action: ZoomAction, actor: Actor, focal_point: Point, factor: number) => boolean
    static name: string
}
class ZoomActionPrivate {
    static name: string
}
class Event {
    /* Methods of Clutter-1.0.Clutter.Event */
    copy(): Event
    free(): void
    get_angle(target: Event): number
    get_axes(): [ /* returnType */ number, /* n_axes */ number ]
    get_button(): number
    get_click_count(): number
    get_coords(): [ /* x */ number, /* y */ number ]
    get_device(): InputDevice
    get_device_id(): number
    get_device_type(): InputDeviceType
    get_distance(target: Event): number
    get_event_sequence(): EventSequence
    get_flags(): EventFlags
    get_gesture_motion_delta(): [ /* dx */ number | null, /* dy */ number | null ]
    get_gesture_phase(): TouchpadGesturePhase
    get_gesture_pinch_angle_delta(): number
    get_gesture_pinch_scale(): number
    get_gesture_swipe_finger_count(): number
    get_key_code(): number
    get_key_symbol(): number
    get_key_unicode(): number
    get_position(position: Point): void
    get_related(): Actor
    get_scroll_delta(): [ /* dx */ number, /* dy */ number ]
    get_scroll_direction(): ScrollDirection
    get_scroll_finish_flags(): ScrollFinishFlags
    get_scroll_source(): ScrollSource
    get_source(): Actor
    get_source_device(): InputDevice
    get_stage(): Stage
    get_state(): ModifierType
    get_state_full(): [ /* button_state */ ModifierType | null, /* base_state */ ModifierType | null, /* latched_state */ ModifierType | null, /* locked_state */ ModifierType | null, /* effective_state */ ModifierType | null ]
    get_time(): number
    has_control_modifier(): boolean
    has_shift_modifier(): boolean
    is_pointer_emulated(): boolean
    put(): void
    set_button(button: number): void
    set_coords(x: number, y: number): void
    set_device(device?: InputDevice | null): void
    set_flags(flags: EventFlags): void
    set_key_code(key_code: number): void
    set_key_symbol(key_sym: number): void
    set_key_unicode(key_unicode: number): void
    set_related(actor?: Actor | null): void
    set_scroll_delta(dx: number, dy: number): void
    set_scroll_direction(direction: ScrollDirection): void
    set_source(actor?: Actor | null): void
    set_source_device(device?: InputDevice | null): void
    set_stage(stage?: Stage | null): void
    set_state(state: ModifierType): void
    set_time(time_: number): void
    type(): EventType
    static name: string
    static new(type: EventType): Event
    constructor(type: EventType)
    /* Static methods and pseudo-constructors */
    static new(type: EventType): Event
    static add_filter(stage: Stage | null, func: EventFilterFunc): number
    static get(): Event
    static peek(): Event
    static remove_filter(id: number): void
}
}
export default Clutter;