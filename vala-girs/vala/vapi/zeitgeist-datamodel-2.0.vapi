/* zeitgeist-datamodel-2.0.vapi generated by valac 0.50.0.13-bab5f, do not modify. */

/**
 * Abstracts data sources used by the DataSourceRegistry extension
 *
 * ZeitgeistDataSource represents a data source used to insert events into
 * Zeitgeist. The data sources are identified using the unique_id property,
 * and when querying the data source registry you get other interesting
 * information like timestamp of the last action of the data source, flag
 * whether it is currently running etc.
 */
namespace Zeitgeist {
	namespace DataSources {
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SIG_DATASOURCES;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.GenericArray<Zeitgeist.DataSource> from_variant (GLib.Variant sources_variant) throws Zeitgeist.DataModelError;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.Variant to_variant (GLib.HashTable<string,Zeitgeist.DataSource> sources);
	}
	namespace Events {
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.GenericArray<Zeitgeist.Event?> from_variant (GLib.Variant vevents) throws Zeitgeist.DataModelError;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.Variant to_variant (GLib.GenericArray<Zeitgeist.Event?> events);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.Variant to_variant_with_limit (GLib.GenericArray<Zeitgeist.Event?> events, size_t limit = Utils.MAX_DBUS_RESULT_SIZE) throws Zeitgeist.DataModelError;
	}
	namespace NCAL {
		/**
		 * ALARM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Alarm]]
		 *
		 * Provide a grouping of component properties that define an alarm.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ALARM;
		/**
		 * ATTACHMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Attachment]]
		 *
		 * An object attached to a calendar entity. This class has been introduced to serve as a structured value of the ncal:attach property. See the documentation of ncal:attach for details.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.ATTACHMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ATTACHMENT;
		/**
		 * CALENDAR:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Calendar]]
		 *
		 * A calendar. Inspirations for this class can be traced to the VCALENDAR component defined in RFC 2445 sec. 4.4, but it may just as well be used to represent any kind of Calendar.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CALENDAR;
		/**
		 * CALENDAR_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#CalendarDataObject]]
		 *
		 * A DataObject found in a calendar. It is usually interpreted as one of the calendar entity types (e.g. Event, Journal, Todo etc.)
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CALENDAR_DATA_OBJECT;
		/**
		 * EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Event]]
		 *
		 * Provide a grouping of component properties that describe an event.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EVENT;
		/**
		 * FREEBUSY:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Freebusy]]
		 *
		 * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string FREEBUSY;
		/**
		 * JOURNAL:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Journal]]
		 *
		 * Provide a grouping of component properties that describe a journal entry.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string JOURNAL;
		/**
		 * TIMEZONE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Timezone]]
		 *
		 * Provide a grouping of component properties that defines a time zone.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string TIMEZONE;
		/**
		 * TODO:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Todo]]
		 *
		 * Provide a grouping of calendar properties that describe a to-do.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string TODO;
	}
	namespace NCO {
		/**
		 * CONTACT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nco#Contact]]
		 *
		 * A Contact. A piece of data that can provide means to identify or communicate with an entity.
		 *
		 * Children: {@link NCO.ORGANIZATION_CONTACT}, {@link NCO.PERSON_CONTACT}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CONTACT;
		/**
		 * CONTACT_GROUP:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactGroup]]
		 *
		 * A group of Contacts. Could be used to express a group in an addressbook or on a contact list of an IM application. One contact can belong to many groups.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CONTACT_GROUP;
		/**
		 * CONTACT_LIST:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactList]]
		 *
		 * A contact list, this class represents an addressbook or a contact list of an IM application. Contacts inside a contact list can belong to contact groups.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CONTACT_LIST;
		/**
		 * CONTACT_LIST_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nco#ContactListDataObject]]
		 *
		 * An entity occuring on a contact list (usually interpreted as an nco:Contact)
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CONTACT_LIST_DATA_OBJECT;
		/**
		 * ORGANIZATION_CONTACT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nco#OrganizationContact]]
		 *
		 * A Contact that denotes on Organization.
		 *
		 * Children: None
		 *
		 * Parents: {@link NCO.CONTACT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ORGANIZATION_CONTACT;
		/**
		 * PERSON_CONTACT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact]]
		 *
		 * A Contact that denotes a Person. A person can have multiple Affiliations.
		 *
		 * Children: None
		 *
		 * Parents: {@link NCO.CONTACT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string PERSON_CONTACT;
	}
	namespace NFO {
		/**
		 * APPLICATION:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Application]]
		 *
		 * An application
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.SOFTWARE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string APPLICATION;
		/**
		 * ARCHIVE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Archive]]
		 *
		 * A compressed file. May contain other files or folder inside. 
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.DATA_CONTAINER}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ARCHIVE;
		/**
		 * ARCHIVE_ITEM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#ArchiveItem]]
		 *
		 * A file entity inside an archive.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.EMBEDDED_FILE_DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ARCHIVE_ITEM;
		/**
		 * ATTACHMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Attachment]]
		 *
		 * A file attached to another data object. Many data formats allow for attachments: emails, vcards, ical events, id3 and exif...
		 *
		 * Children: {@link NCAL.ATTACHMENT}
		 *
		 * Parents: {@link NFO.EMBEDDED_FILE_DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ATTACHMENT;
		/**
		 * AUDIO:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Audio]]
		 *
		 * A file containing audio content
		 *
		 * Children: {@link NMM.MUSIC_PIECE}
		 *
		 * Parents: {@link NFO.MEDIA}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string AUDIO;
		/**
		 * BOOKMARK:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Bookmark]]
		 *
		 * A bookmark of a webbrowser. Use nie:title for the name/label, nie:contentCreated to represent the date when the user added the bookmark, and nie:contentLastModified for modifications. nfo:bookmarks to store the link.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string BOOKMARK;
		/**
		 * BOOKMARK_FOLDER:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#BookmarkFolder]]
		 *
		 * A folder with bookmarks of a webbrowser. Use nfo:containsBookmark to relate Bookmarks. Folders can contain subfolders, use containsBookmarkFolder to relate them.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string BOOKMARK_FOLDER;
		/**
		 * CURSOR:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Cursor]]
		 *
		 * A Cursor.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.RASTER_IMAGE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CURSOR;
		/**
		 * DATA_CONTAINER:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#DataContainer]]
		 *
		 * A superclass for all entities, whose primary purpose is to serve as containers for other data object. They usually don't have any "meaning" by themselves. Examples include folders, archives and optical disc images.
		 *
		 * Children: {@link NFO.FILESYSTEM}, {@link NFO.FOLDER}, {@link NFO.TRASH}, {@link NFO.ARCHIVE}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string DATA_CONTAINER;
		/**
		 * DELETED_RESOURCE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#DeletedResource]]
		 *
		 * A file entity that has been deleted from the original source. Usually such entities are stored within various kinds of 'Trash' or 'Recycle Bin' folders.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.FILE_DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string DELETED_RESOURCE;
		/**
		 * DOCUMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Document]]
		 *
		 * A generic document. A common superclass for all documents on the desktop.
		 *
		 * Children: {@link NFO.MIND_MAP}, {@link NFO.TEXT_DOCUMENT}, {@link NFO.SPREADSHEET}, {@link NFO.PRESENTATION}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string DOCUMENT;
		/**
		 * EMBEDDED_FILE_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#EmbeddedFileDataObject]]
		 *
		 * A file embedded in another data object. There are many ways in which a file may be embedded in another one. Use this class directly only in cases if none of the subclasses gives a better description of your case.
		 *
		 * Children: {@link NFO.ATTACHMENT}, {@link NFO.ARCHIVE_ITEM}
		 *
		 * Parents: {@link NFO.FILE_DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EMBEDDED_FILE_DATA_OBJECT;
		/**
		 * EXECUTABLE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Executable]]
		 *
		 * An executable file.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EXECUTABLE;
		/**
		 * FILESYSTEM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Filesystem]]
		 *
		 * A filesystem. Examples of filesystems include hard disk partitions, removable media, but also images thereof stored in files such as ISO.
		 *
		 * Children: {@link NFO.FILESYSTEM_IMAGE}
		 *
		 * Parents: {@link NFO.DATA_CONTAINER}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string FILESYSTEM;
		/**
		 * FILESYSTEM_IMAGE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FilesystemImage]]
		 *
		 * An image of a filesystem. Instances of this class may include CD images, DVD images or hard disk partition images created by various pieces of software (e.g. Norton Ghost). Deprecated in favor of nfo:Filesystem.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.FILESYSTEM}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string FILESYSTEM_IMAGE;
		/**
		 * FILE_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject]]
		 *
		 * A resource containing a finite sequence of bytes with arbitrary information, that is available to a computer program and is usually based on some kind of durable storage. A file is durable in the sense that it remains available for programs to use after the current program has finished.
		 *
		 * Children: {@link NFO.EMBEDDED_FILE_DATA_OBJECT}, {@link NFO.REMOTE_DATA_OBJECT}, {@link NFO.DELETED_RESOURCE}
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string FILE_DATA_OBJECT;
		/**
		 * FOLDER:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Folder]]
		 *
		 * A folder/directory. Examples of folders include folders on a filesystem and message folders in a mailbox.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.DATA_CONTAINER}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string FOLDER;
		/**
		 * FONT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Font]]
		 *
		 * A font.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string FONT;
		/**
		 * HARD_DISK_PARTITION:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HardDiskPartition]]
		 *
		 * A partition on a hard disk
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string HARD_DISK_PARTITION;
		/**
		 * HTML_DOCUMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HtmlDocument]]
		 *
		 * A HTML document, may contain links to other files.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.PLAIN_TEXT_DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string HTML_DOCUMENT;
		/**
		 * ICON:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Icon]]
		 *
		 * An Icon (regardless of whether it's a raster or a vector icon. A resource representing an icon could have two types (Icon and Raster, or Icon and Vector) if required.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.IMAGE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ICON;
		/**
		 * IMAGE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Image]]
		 *
		 * A file containing an image.
		 *
		 * Children: {@link NFO.ICON}, {@link NFO.VECTOR_IMAGE}, {@link NFO.RASTER_IMAGE}
		 *
		 * Parents: {@link NFO.VISUAL}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string IMAGE;
		/**
		 * MEDIA:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Media]]
		 *
		 * A piece of media content. This class may be used to express complex media containers with many streams of various media content (both aural and visual).
		 *
		 * Children: {@link NFO.AUDIO}, {@link NFO.VISUAL}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MEDIA;
		/**
		 * MEDIA_LIST:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaList]]
		 *
		 * A file containing a list of media files.e.g. a playlist
		 *
		 * Children: {@link NMM.MUSIC_ALBUM}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MEDIA_LIST;
		/**
		 * MEDIA_STREAM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaStream]]
		 *
		 * A stream of multimedia content, usually contained within a media container such as a movie (containing both audio and video) or a DVD (possibly containing many streams of audio and video). Most common interpretations for such a DataObject include Audio and Video.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MEDIA_STREAM;
		/**
		 * MIND_MAP:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MindMap]]
		 *
		 * A MindMap, created by a mind-mapping utility. Examples might include FreeMind or mind mapper.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MIND_MAP;
		/**
		 * OPERATING_SYSTEM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#OperatingSystem]]
		 *
		 * An OperatingSystem
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.SOFTWARE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string OPERATING_SYSTEM;
		/**
		 * PAGINATED_TEXT_DOCUMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#PaginatedTextDocument]]
		 *
		 * A file containing a text document, that is unambiguously divided into pages. Examples might include PDF, DOC, PS, DVI etc.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.TEXT_DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string PAGINATED_TEXT_DOCUMENT;
		/**
		 * PLAIN_TEXT_DOCUMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#PlainTextDocument]]
		 *
		 * A file containing plain text (ASCII, Unicode or other encodings). Examples may include TXT, HTML, XML, program source code etc.
		 *
		 * Children: {@link NFO.HTML_DOCUMENT}, {@link NFO.SOURCE_CODE}
		 *
		 * Parents: {@link NFO.TEXT_DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string PLAIN_TEXT_DOCUMENT;
		/**
		 * PRESENTATION:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Presentation]]
		 *
		 * A Presentation made by some presentation software (Corel Presentations, OpenOffice Impress, MS Powerpoint etc.)
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string PRESENTATION;
		/**
		 * RASTER_IMAGE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RasterImage]]
		 *
		 * A raster image.
		 *
		 * Children: {@link NFO.CURSOR}
		 *
		 * Parents: {@link NFO.IMAGE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string RASTER_IMAGE;
		/**
		 * REMOTE_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemoteDataObject]]
		 *
		 * A file data object stored at a remote location. Don't confuse this class with a RemotePortAddress. This one applies to a particular resource, RemotePortAddress applies to an address, that can have various interpretations.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.FILE_DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string REMOTE_DATA_OBJECT;
		/**
		 * REMOTE_PORT_ADDRESS:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemotePortAddress]]
		 *
		 * An address specifying a remote host and port. Such an address can be interpreted in many ways (examples of such interpretations include mailboxes, websites, remote calendars or filesystems), depending on an interpretation, various kinds of data may be extracted from such an address.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string REMOTE_PORT_ADDRESS;
		/**
		 * SOFTWARE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Software]]
		 *
		 * A piece of software. Examples may include applications and the operating system. This interpretation most commonly applies to SoftwareItems.
		 *
		 * Children: {@link NFO.OPERATING_SYSTEM}, {@link NFO.APPLICATION}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SOFTWARE;
		/**
		 * SOFTWARE_ITEM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareItem]]
		 *
		 * A DataObject representing a piece of software. Examples of interpretations of a SoftwareItem include an Application and an OperatingSystem.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SOFTWARE_ITEM;
		/**
		 * SOFTWARE_SERVICE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareService]]
		 *
		 * A service published by a piece of software, either by an operating system or an application. Examples of such services may include calendar, addressbook and mailbox managed by a PIM application. This category is introduced to distinguish between data available directly from the applications (Via some Interprocess Communication Mechanisms) and data available from files on a disk. In either case both DataObjects would receive a similar interpretation (e.g. a Mailbox) and wouldn't differ on the content level.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SOFTWARE_SERVICE;
		/**
		 * SOURCE_CODE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SourceCode]]
		 *
		 * Code in a compilable or interpreted programming language.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.PLAIN_TEXT_DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SOURCE_CODE;
		/**
		 * SPREADSHEET:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Spreadsheet]]
		 *
		 * A spreadsheet, created by a spreadsheet application. Examples might include Gnumeric, OpenOffice Calc or MS Excel.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SPREADSHEET;
		/**
		 * TEXT_DOCUMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#TextDocument]]
		 *
		 * A text document
		 *
		 * Children: {@link NFO.PAGINATED_TEXT_DOCUMENT}, {@link NFO.PLAIN_TEXT_DOCUMENT}
		 *
		 * Parents: {@link NFO.DOCUMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string TEXT_DOCUMENT;
		/**
		 * TRASH:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Trash]]
		 *
		 * Represents a container for deleted files, a feature common in modern operating systems.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.DATA_CONTAINER}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string TRASH;
		/**
		 * VECTOR_IMAGE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#VectorImage]]
		 *
		 * 
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.IMAGE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string VECTOR_IMAGE;
		/**
		 * VIDEO:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Video]]
		 *
		 * A video file.
		 *
		 * Children: {@link NMM.MOVIE}, {@link NMM.TVSHOW}
		 *
		 * Parents: {@link NFO.VISUAL}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string VIDEO;
		/**
		 * VISUAL:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Visual]]
		 *
		 * File containing visual content.
		 *
		 * Children: {@link NFO.VIDEO}, {@link NFO.IMAGE}
		 *
		 * Parents: {@link NFO.MEDIA}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string VISUAL;
		/**
		 * WEBSITE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#Website]]
		 *
		 * A website, usually a container for remote resources, that may be interpreted as HTMLDocuments, images or other types of content.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string WEBSITE;
		/**
		 * WEB_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#WebDataObject]]
		 *
		 * An information resources of which representations (files, streams) can be retrieved through a web server. They may be generated at retrieval time. Typical examples are pages served by PHP or AJAX or mp3 streams.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string WEB_DATA_OBJECT;
	}
	namespace NIE {
		/**
		 * DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/01/19/nie#DataObject]]
		 *
		 * A unit of data that is created, annotated and processed on the user desktop. It represents a native structure the user works with. The usage of the term 'native' is important. It means that a DataObject can be directly mapped to a data structure maintained by a native application. This may be a file, a set of files or a part of a file. The granularity depends on the user. This class is not intended to be instantiated by itself. Use more specific subclasses.
		 *
		 * Children: {@link NFO.HARD_DISK_PARTITION}, {@link NCAL.CALENDAR_DATA_OBJECT}, {@link NFO.WEB_DATA_OBJECT}, {@link NFO.SOFTWARE_ITEM}, {@link NFO.MEDIA_STREAM}, {@link NFO.FILE_DATA_OBJECT}, {@link NFO.REMOTE_PORT_ADDRESS}, {@link NCO.CONTACT_LIST_DATA_OBJECT}, {@link NFO.SOFTWARE_SERVICE}, {@link ZG.EVENT_MANIFESTATION}, {@link NMO.MAILBOX_DATA_OBJECT}
		 *
		 * Parents: None
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string DATA_OBJECT;
		/**
		 * INFORMATION_ELEMENT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/01/19/nie#InformationElement]]
		 *
		 * A unit of content the user works with. This is a superclass for all interpretations of a DataObject.
		 *
		 * Children: {@link NCAL.CALENDAR}, {@link NFO.BOOKMARK_FOLDER}, {@link NCO.CONTACT}, {@link NFO.EXECUTABLE}, {@link ZG.APPLICATION_ACTION}, {@link NMO.MESSAGE}, {@link NMO.MAILBOX}, {@link NFO.WEBSITE}, {@link NCAL.FREEBUSY}, {@link NCAL.TODO}, {@link NFO.BOOKMARK}, {@link NCAL.TIMEZONE}, {@link NMM.TVSERIES}, {@link NCAL.EVENT}, {@link NFO.DATA_CONTAINER}, {@link NFO.SOFTWARE}, {@link ZG.EVENT_INTERPRETATION}, {@link NFO.MEDIA}, {@link NCO.CONTACT_LIST}, {@link NCAL.ALARM}, {@link NMO.MIME_ENTITY}, {@link NFO.FONT}, {@link NCO.CONTACT_GROUP}, {@link NFO.DOCUMENT}, {@link NCAL.JOURNAL}, {@link NFO.MEDIA_LIST}
		 *
		 * Parents: None
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string INFORMATION_ELEMENT;
	}
	namespace NMM {
		/**
		 * MOVIE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#Movie]]
		 *
		 * A Movie
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.VIDEO}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MOVIE;
		/**
		 * MUSIC_ALBUM:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicAlbum]]
		 *
		 * The music album as provided by the publisher. Not to be confused with media lists or collections.
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.MEDIA_LIST}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MUSIC_ALBUM;
		/**
		 * MUSIC_PIECE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#MusicPiece]]
		 *
		 * Used to assign music-specific properties such a BPM to video and audio
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.AUDIO}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MUSIC_PIECE;
		/**
		 * TVSERIES:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVSeries]]
		 *
		 * A TV Series has multiple seasons and episodes
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string TVSERIES;
		/**
		 * TVSHOW:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2009/02/19/nmm#TVShow]]
		 *
		 * A TV Show
		 *
		 * Children: None
		 *
		 * Parents: {@link NFO.VIDEO}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string TVSHOW;
	}
	namespace NMO {
		/**
		 * EMAIL:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Email]]
		 *
		 * An email.
		 *
		 * Children: None
		 *
		 * Parents: {@link NMO.MESSAGE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EMAIL;
		/**
		 * IMMESSAGE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#IMMessage]]
		 *
		 * A message sent with Instant Messaging software.
		 *
		 * Children: None
		 *
		 * Parents: {@link NMO.MESSAGE}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string IMMESSAGE;
		/**
		 * MAILBOX:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Mailbox]]
		 *
		 * A mailbox - container for MailboxDataObjects.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MAILBOX;
		/**
		 * MAILBOX_DATA_OBJECT:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MailboxDataObject]]
		 *
		 * An entity encountered in a mailbox. Most common interpretations for such an entity include Message or Folder
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MAILBOX_DATA_OBJECT;
		/**
		 * MESSAGE:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#Message]]
		 *
		 * A message. Could be an email, instant messanging message, SMS message etc.
		 *
		 * Children: {@link NMO.EMAIL}, {@link NMO.IMMESSAGE}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MESSAGE;
		/**
		 * MIME_ENTITY:
		 *
		 * Macro defining the interpretation type [[http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MimeEntity]]
		 *
		 * A MIME entity, as defined in RFC2045, Section 2.4.
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MIME_ENTITY;
	}
	namespace Symbol {
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.List<weak string> get_all_children (string symbol_uri);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.List<weak string> get_all_parents (string symbol_uri);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.List<weak string> get_children (string symbol_uri);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static unowned string get_description (string symbol_uri);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static unowned string get_display_name (string symbol_uri);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.List<weak string> get_parents (string symbol_uri);
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool is_a (string? symbol_uri, string? parent_uri);
	}
	/**
	 * Convenience functions for dealing with timestamps and dates
	 *
	 * include: zeitgeist.h
	 *
	 * A suite of convenience functions for dealing with timestamps and dates.
	 *
	 * Zeitgeist timestamps are represented as ''gint64''s with the number
	 * of milliseconds since the Unix Epoch.
	 */
	namespace Timestamp {
		/**
		 * A day represented as a Zeitgeist timestamp (ie. 86400000ms)
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const int64 DAY;
		/**
		 * An hour represented as a Zeitgeist timestamp (ie. 3600000ms)
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const int64 HOUR;
		/**
		 * A minute represented as a Zeitgeist timestamp (ie. 60000ms)
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const int64 MINUTE;
		/**
		 * A second represented as a Zeitgeist timestamp (ie. 1000ms)
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const int64 SECOND;
		/**
		 * A week represented as a Zeitgeist timestamp (ie. 604800000ms)
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const int64 WEEK;
		/**
		 * A year represented as a Zeitgeist timestamp (ie. 31556952000ms).
		 * Be warned that a year is not 365 days, but in fact 365.2425 days,
		 * to account for leap years.
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const int64 YEAR;
		/**
		 * Convert a ''GDate'' to a Zeitgeist timestamp
		 *
		 * @param date the date to convert
		 *
		 * @return the given date expressed as a timestamp in milliseconds since
		 *         the Epoch. The timestamp is guaranteed to be roudned off to the
		 *         midnight of the given date.
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 from_date (GLib.Date date);
		/**
		 * Convert a day, month, year tuple into a Zeitgeist timestamp
		 *
		 * @param day the day of the month
		 * @param month the month of the year
		 * @param year the year
		 *
		 * @return the given date (rounded off to the midnight), expressed as
		 *         a timestamp in milliseconds since the Epoch, or -1 in case
		 *         the provided parameters don't constitute a valid date.
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 from_dmy (GLib.DateDay day, GLib.DateMonth month, GLib.DateYear year);
		/**
		 * Parse a timestamp from an ISO8601-encoded string.
		 *
		 * @param datetime a string containing an ISO8601-conforming datetime
		 *
		 * @return the timestamp represented by the given string, or -1 if
		 *         it can't be parsed
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 from_iso8601 (string datetime);
		/**
		 * Return the current timestamp in milliseconds.
		 *
		 * @return the timestamp for the current system time, in milliseconds
		 *         since the Unix Epoch
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 from_now ();
		/**
		 * Convert a {@link GLib.TimeVal} to an amount of milliseconds since
		 * the Unix Epoch
		 *
		 * @param timeval time to convert
		 *
		 * @return number of milliseconds since the Unix Epoch
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 from_timeval (GLib.TimeVal timeval);
		/**
		 * Calculate the timestamp for the next midnight after the given timestamp.
		 *
		 * If is is already midnight (down to the millisecond), this method will
		 * return the value for the next midnight. In other words, you can call
		 * this method recursively in order to iterate, forwards in time, over
		 * midnights.
		 *
		 * @param timestamp the Zeitgeist timestamp to find the next midnight for
		 *
		 * @return the timestamp for the next midnight after the given timestamp
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 next_midnight (int64 timestamp);
		/**
		 * Calculate the timestamp for the midnight just before the given
		 * timestamp.
		 *
		 * If is is already midnight (down to the millisecond), this method will
		 * return the value for the previous midnight. In other words, you can
		 * call this method recursively in order to iterate, backwards in time,
		 * over midnights.
		 *
		 * @param timestamp the Zeitgeist timestamp to find the previous
		 *        midnight for
		 *
		 * @return the timestamp for the midnight just before the given timestamp
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static int64 prev_midnight (int64 timestamp);
		/**
		 * Write a timestamp to a {@link GLib.Date} structure
		 *
		 * @param timestamp to convert
		 * @return {@link GLib.Date} initialized to the given timestamp
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.Date to_date (int64 timestamp);
		/**
		 * Convert a timestamp to a human-readable ISO8601 format
		 *
		 * @param timestamp a timestamp in milliseconds since the Unix Epoch
		 *
		 * @return a newly allocated string containing the ISO8601 version of
		 *         the given timestamp
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static string to_iso8601 (int64 timestamp);
		/**
		 * Write a Zeitgeist timestamp to a {@link GLib.TimeVal} instance.
		 * Note that Zeitgeist uses only a millisecond resolution, whereas
		 * {@link GLib.TimeVal} has microsecond resolution. This means that
		 * the lower three digits of @tv.tv_usec will always be 0.
		 *
		 * @param timestamp to convert
		 *
		 * @return the equivalent {@link GLib.TimeVal} instance.
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static GLib.TimeVal to_timeval (int64 timestamp);
	}
	/**
	 * Utility functions. FOR INTERNAL USE ONLY
	 * 
	 * A set of funtions that if used would only affect libzeitgeist in the
	 * code it is used in.
	 */
	namespace Utils {
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const uint CACHE_SIZE;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ENGINE_DBUS_NAME;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ENGINE_DBUS_PATH;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const size_t MAX_DBUS_RESULT_SIZE;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SIG_EVENT;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static void backup_database () throws GLib.Error;
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static unowned string get_data_path ();
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static unowned string get_database_file_backup_path ();
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static unowned string get_database_file_path ();
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static string get_database_file_retire_name ();
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static string get_default_data_path ();
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static unowned string get_local_extensions_path ();
		/**
		 * Return true if a string is empty (null or containing just a null
		 * byte).
		 *
		 * @param s string to check
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool is_empty_string (string? s);
		/**
		 * @return True if direct reading of the DB is enabled for Log, default is True.
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool log_may_read_directly ();
		/**
		 * Check if the value starts with the negation operator. If it does,
		 * remove the operator from the value and return true. Otherwise,
		 * return false.
		 *
		 * @param val value to check
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool parse_negation (ref string val);
		/**
		 * Check if the value starts with the noexpand operator. If it does,
		 * remove the operator from the value and return true. Otherwise,
		 * return false.
		 *
		 * Check for the negation operator before calling this function.
		 *
		 * @param val value to check
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool parse_noexpand (ref string val);
		/**
		 * Check if the value ends with the wildcard character. If it does,
		 * remove the wildcard character from the value and return true.
		 * Otherwise, return false.
		 *
		 * @param val value to check
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool parse_wildcard (ref string val);
		/**
		 * Sets the filepath of the database.
		 * @param path a {@link string}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static void set_database_file_path (string path);
		/**
		 * @return Whether a in-memory SQLite database is in use (vs.
		 *         a file-based one).
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public static bool using_in_memory_database ();
	}
	namespace ZG {
		/**
		 * ACCEPT_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#AcceptEvent]]
		 *
		 * Event triggered when the user accepts a request of some sort. Examples could be answering a phone call, accepting a file transfer, or accepting a friendship request over an IM protocol. See also DenyEvent for when the user denies a similar request
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ACCEPT_EVENT;
		/**
		 * ACCESS_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#AccessEvent]]
		 *
		 * Event triggered by opening, accessing, or starting a resource. Most zg:AccessEvents will have an accompanying zg:LeaveEvent, but this need not always be the case
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string ACCESS_EVENT;
		/**
		 * APPLICATION_ACTION:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ApplicationAction]]
		 *
		 * Representation of a specific Action on an Application
		 *
		 * Children: None
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string APPLICATION_ACTION;
		/**
		 * CREATE_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#CreateEvent]]
		 *
		 * Event type triggered when an item is created
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string CREATE_EVENT;
		/**
		 * DELETE_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#DeleteEvent]]
		 *
		 * Event triggered because a resource has been deleted or otherwise made permanently unavailable. Fx. when deleting a file. FIXME: How about when moving to trash?
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string DELETE_EVENT;
		/**
		 * DENY_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#DenyEvent]]
		 *
		 * Event triggered when the user denies a request of some sort. Examples could be rejecting a phone call, rejecting a file transfer, or denying a friendship request over an IM protocol. See also AcceptEvent for the converse event type
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string DENY_EVENT;
		/**
		 * EVENT_INTERPRETATION:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#EventInterpretation]]
		 *
		 * Base class for event interpretations. Please do no instantiate directly, but use one of the sub classes. The interpretation of an event describes 'what happened' - fx. 'something was created' or 'something was accessed'
		 *
		 * Children: {@link ZG.SEND_EVENT}, {@link ZG.MOVE_EVENT}, {@link ZG.DELETE_EVENT}, {@link ZG.RECEIVE_EVENT}, {@link ZG.LEAVE_EVENT}, {@link ZG.MODIFY_EVENT}, {@link ZG.DENY_EVENT}, {@link ZG.ACCESS_EVENT}, {@link ZG.CREATE_EVENT}, {@link ZG.EXPIRE_EVENT}, {@link ZG.ACCEPT_EVENT}
		 *
		 * Parents: {@link NIE.INFORMATION_ELEMENT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EVENT_INTERPRETATION;
		/**
		 * EVENT_MANIFESTATION:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#EventManifestation]]
		 *
		 * Base class for event manifestation types. Please do no instantiate directly, but use one of the sub classes. The manifestation of an event describes 'how it happened'. Fx. 'the user did this' or 'the system notified the user'
		 *
		 * Children: {@link ZG.USER_ACTIVITY}, {@link ZG.WORLD_ACTIVITY}, {@link ZG.SCHEDULED_ACTIVITY}, {@link ZG.HEURISTIC_ACTIVITY}, {@link ZG.SYSTEM_NOTIFICATION}
		 *
		 * Parents: {@link NIE.DATA_OBJECT}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EVENT_MANIFESTATION;
		/**
		 * EXPIRE_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ExpireEvent]]
		 *
		 * Event triggered when something expires or times out. These types of events are normally not triggered by the user, but by the operating system or some external party. Examples are a recurring calendar item or task deadline that expires or a when the user fails to respond to an external request such as a phone call
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string EXPIRE_EVENT;
		/**
		 * HEURISTIC_ACTIVITY:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#HeuristicActivity]]
		 *
		 * An event that is caused indirectly from user activity or deducted via analysis of other events. Fx. if an algorithm divides a user workflow into disjoint 'projects' based on temporal analysis it could insert heuristic events when the user changed project
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_MANIFESTATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string HEURISTIC_ACTIVITY;
		/**
		 * LEAVE_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#LeaveEvent]]
		 *
		 * Event triggered by closing, leaving, or stopping a resource. Most zg:LeaveEvents will be following a zg:Access event, but this need not always be the case
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string LEAVE_EVENT;
		/**
		 * MODIFY_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ModifyEvent]]
		 *
		 * Event triggered by modifying an existing resources. Fx. when editing and saving a file on disk or correcting a typo in the name of a contact
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MODIFY_EVENT;
		/**
		 * MOVE_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#MoveEvent]]
		 *
		 * Event triggered when a resource has been moved from a location to another. Fx. moving a file from a folder to another.
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string MOVE_EVENT;
		/**
		 * RECEIVE_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ReceiveEvent]]
		 *
		 * Event triggered when something is received from an external party. The event manifestation must be set according to the world view of the receiving party. Most often the item that is being received will be some sort of message - an email, instant message, or broadcasted media such as micro blogging
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string RECEIVE_EVENT;
		/**
		 * SCHEDULED_ACTIVITY:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ScheduledActivity]]
		 *
		 * An event that was directly triggered by some user initiated sequence of actions. For example a music player automatically changing to the next song in a playlist
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_MANIFESTATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SCHEDULED_ACTIVITY;
		/**
		 * SEND_EVENT:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#SendEvent]]
		 *
		 * Event triggered when something is send to an external party. The event manifestation must be set according to the world view of the sending party. Most often the item that is being send will be some sort of message - an email, instant message, or broadcasted media such as micro blogging
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_INTERPRETATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SEND_EVENT;
		/**
		 * SYSTEM_NOTIFICATION:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#SystemNotification]]
		 *
		 * An event send to the user by the operating system. Examples could include when the user inserts a USB stick or when the system warns that the hard disk is full
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_MANIFESTATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string SYSTEM_NOTIFICATION;
		/**
		 * USER_ACTIVITY:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#UserActivity]]
		 *
		 * An event that was actively performed by the user. For example saving or opening a file by clicking on it in the file manager
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_MANIFESTATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string USER_ACTIVITY;
		/**
		 * WORLD_ACTIVITY:
		 *
		 * Macro defining the interpretation type [[http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#WorldActivity]]
		 *
		 * An event that was performed by an entity, usually human or organization, other than the user. An example could be logging the activities of other people in a team
		 *
		 * Children: None
		 *
		 * Parents: {@link ZG.EVENT_MANIFESTATION}
		 */
		[CCode (cheader_filename = "zeitgeist-datamodel.h")]
		public const string WORLD_ACTIVITY;
	}
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public class DataSource : GLib.Object {
		/**
		 * ZeitgeistDataSource
		 *
		 * Abstracts data sources used by the ZeitgeistDataSourceRegistry extension
		 * 
		 * ZeitgeistDataSource represents a data source used to insert events into
		 * Zeitgeist. The data sources are identified using the unique_id property,
		 * and when querying the data source registry you get other interesting
		 * information like timestamp of the last action of the data source, flag
		 * whether it is currently running etc.
		 *
		 */
		public DataSource ();
		public DataSource.from_variant (GLib.Variant variant, bool reset_running = false) throws Zeitgeist.DataModelError;
		public DataSource.full (string unique_id, string name, string description, GLib.GenericArray<Zeitgeist.Event>? templates);
		public GLib.Variant to_variant ();
		public string description { get; set; }
		public bool enabled { get; set; }
		public GLib.GenericArray<Zeitgeist.Event>? event_templates { get; set; }
		public string name { get; set; }
		public bool running { get; set; }
		public int64 timestamp { get; set; }
		public string unique_id { get; set; }
	}
	/**
	 * Event objects abstract Zeitgeist events
	 *
	 * The Event class is one of the primary elements for communicating
	 * with the Zeitgeist daemon. Events serve two purposes
	 * Unsurprisingly, they represent events that have happened, but they
	 * can also act as templates. See also {@link Subject}.
	 *
	 * An event in the Zeitgeist world is characterized by two main
	 * properties. "What happened", also called the interpretation, and
	 * "How did it happen", also called the manifestation. Besides these
	 * properties, an event also has an actor which identifies the party
	 * responsible for triggering the event which in most cases will be
	 * an application. Lastly there is an event timestamp and an event ID.
	 * The timestamp is calculated as the number of milliseconds since the
	 * Unix epoch and the event ID is a number assigned to the event by
	 * the Zeitgeist engine when it's logged. These five properties are
	 * collectively known as the event metadata.
	 *
	 * An event must also describe what it happened to. For this we have
	 * event subjects. Most events have one subject, but they may also
	 * have more. The metadata of the subjects are recorded at the time
	 * of logging, and are encapsulated by the #Subject class. It's
	 * important to understand that it's just the subject metadata at the
	 * time of logging, not necessarily the subject metadata as it exists
	 * right now.
	 *
	 * In addition to the listed properties, events may also carry a free
	 * form binary payload. The usage of this is application specific and
	 * is generally useless unless you have some contextual information to
	 * figure out what's in it.
	 *
	 * A large part of the Zeitgeist query and monitoring API revolves
	 * around a concept of template matching. A query is simply a list of
	 * event templates that you want to look for in the log. An unset
	 * property on an event template indicates that anything is allowed in
	 * that field. If the property is set it indicates that the property
	 * must be an exact match, unless a special operator is used.
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public class Event : GLib.Object {
		public const string SIGNATURE;
		public Event ();
		public void add_subject (Zeitgeist.Subject subject);
		public void debug_print ();
		public Event.from_variant (GLib.Variant event_variant) throws Zeitgeist.DataModelError;
		public Event.full (string? interpretation = null, string? manifestation = null, string? actor = null, string? origin = null, ...);
		public Zeitgeist.Subject get_subject (int index);
		public bool matches_template (Zeitgeist.Event template_event);
		public int num_subjects ();
		public void set_actor_from_app_info (GLib.AppInfo info);
		public void take_subject (owned Zeitgeist.Subject subject);
		public GLib.Variant to_variant ();
		public string? actor { get; set; }
		public uint32 id { get; set; }
		public string? interpretation { get; set; }
		public string? manifestation { get; set; }
		public string? origin { get; set; }
		public GLib.ByteArray? payload { get; set; }
		public GLib.GenericArray<Zeitgeist.Subject> subjects { get; set; }
		public int64 timestamp { get; set; }
	}
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public class SimpleResultSet : GLib.Object, Zeitgeist.ResultSet {
		public SimpleResultSet (GLib.GenericArray<Zeitgeist.Event> events);
		public SimpleResultSet.with_num_matches (GLib.GenericArray<Zeitgeist.Event> events, uint matches);
	}
	/**
	 * Subject objects abstract Zeitgeist subjects
	 *
	 * In Zeitgeist terminology, a //subject// is something (a file, web page,
	 * person, conversation, etc.) that was somehow involved or affected by
	 * a {@link Event}.
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public class Subject : GLib.Object {
		public Subject ();
		/** 
		 * Create a new Subject structure from predefined {@link GLib.Variant} data
		 *
		 * @param subject_variant A {@link GLib.Variant} decscribing the subject data.
		 *
		 * @return A newly create {@link Subject} instance. The returned subject will
		 *          have a floating reference which will be consumed if you pass the
		 *          event to any of the methods provided by this library (like
		 *          adding it to an event).
		 */
		public Subject.from_variant (GLib.Variant subject_variant) throws Zeitgeist.DataModelError;
		/** 
		 * Create a new Subject structure with predefined data
		 * @param uri The URI or URL of the subject
		 * @param interpretation The interpretation type of the subject.
		 * @param manifestation The manifestation type of the subject.
		 * @param mimetype The mimetype of the subject. Eg. <emphasis>text/plain</emphasis>
		 * @param origin The origin of the subject.
		 * @param text A small textual representation of the subject suitable for display
		 * @param storage String identifier for the storage medium the subject is on.
		 *
		 * @return A newly create {@link Subject} instance. The returned subject will
		 *          have a floating reference which will be consumed if you pass the
		 *          event to any of the methods provided by this library (like
		 *          adding it to an event).
		 */
		public Subject.full (string? uri = null, string? interpretation = null, string? manifestation = null, string? mimetype = null, string? origin = null, string? text = null, string? storage = null);
		/**
		 * @return true if this Subject matches *subject_template*. Empty
		 * fields in the template are treated as wildcards.
		 * Interpretations and manifestations are also matched if they are
		 * children of the types specified in `subject_template`.
		 * @param template_subject a {@link Subject}
		 */
		public bool matches_template (Zeitgeist.Subject template_subject);
		/** 
		 * Create a new Subject structure to describe a move event
		 *
		 * @param source_uri The URI or URL of the subject
		 * @param source_origin The URI or URL of the subject
		 * @param destination_uri The URI or URL of the subject
		 * @param destination_origin The URI or URL of the subject
		 * @param interpretation The interpretation type of the subject.
		 * @param manifestation The manifestation type of the subject.
		 * @param mimetype The mimetype of the subject. Eg. <emphasis>text/plain</emphasis>
		 * @param text A small textual representation of the subject suitable for display
		 * @param storage String identifier for the storage medium the subject is on.
		 *
		 * @return A newly create {@link Subject} instance. The returned subject will
		 *          have a floating reference which will be consumed if you pass the
		 *          event to any of the methods provided by this library (like
		 *          adding it to an event).
		 */
		public Subject.move_event (string? source_uri = null, string? source_origin = null, string? destination_uri = null, string? destination_origin = null, string? interpretation, string? manifestation = null, string? mimetype = null, string? text = null, string? storage = null);
		public GLib.Variant to_variant ();
		public string? current_origin { get; set; }
		public string? current_uri { get; set; }
		public string? interpretation { get; set; }
		public string? manifestation { get; set; }
		public string? mimetype { get; set; }
		public string? origin { get; set; }
		public string? storage { get; set; }
		public string? text { get; set; }
		public string? uri { get; set; }
	}
	/**
	 * Immutable representation of an interval in time, marked by a
	 * beginning and an end
	 *
	 * A light, immutable, encapsulation of an interval in time, marked by
	 * a beginning and an end.
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h", type_signature = "(xx)")]
	public class TimeRange : GLib.Object {
		/**
		 * @param start_msec starting timestamp in number of milliseconds
		 *        since the Unix Epoch
		 * @param end_msec ending timestamp in number of milliseconds
		 *        since the Unix Epoch
		 * @return a newly allocated ZeitgeistTimeRange. Free with
		 *        g_object_unref()
		 */
		public TimeRange (int64 start_msec, int64 end_msec);
		/**
		 * @return a new time range starting from the beginning of the Unix
		 *         Epoch stretching to the end of time
		 */
		public TimeRange.anytime ();
		/**
		 * @return a new time range starting from the moment of invocation
		 *         to the end of time
		 */
		public TimeRange.from_now ();
		/**
		 * Create a #TimeRange from a variant.
		 *
		 * @param variant a variant representing a #TimeRange
		 * @return a new time range starting from the moment of invocation
		 *         to the end of time
		 */
		public TimeRange.from_variant (GLib.Variant variant) throws Zeitgeist.DataModelError;
		/**
		 * Check whether two time ranges are intersecting.
		 *
		 * @param time_range the second time range to compare with
		 * @return a new time range representing the intersection
		 */
		public Zeitgeist.TimeRange? intersect (Zeitgeist.TimeRange time_range);
		/**
		 * @return a new time range starting from the beggining of the
		 *         Unix Epoch ending a the moment of invocation
		 */
		public TimeRange.to_now ();
		/**
		 * @return a new variant holding the time range
		 */
		public GLib.Variant to_variant ();
		public int64 end { get; private set; }
		public int64 start { get; private set; }
	}
	/**
	 * Cursor-like interface for results sets
	 *
	 * include: zeitgeist.h
	 *
	 * Interface for results returned by zeitgeist_log_find_events(),
	 * zeitgeist_log_get_events(), and zeitgeist_index_search().
	 *
	 * This interface utilizes a cursor-like metaphor. You advance the cursor
	 * by calling zeitgeist_result_set_next() or adjust it manually by calling
	 * zeitgeist_result_set_seek().
	 *
	 * Calling zeitgeist_result_set_next() will also return the event at the
	 * current cursor position. You may retrieve the current event without advancing
	 * the cursor by calling zeitgeist_result_set_peek().
	 *
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public interface ResultSet : GLib.Object {
		/**
		 * Get the total number of matches that would have been for the query
		 * that generated the result set had it not been restricted in size.
		 * For FTS the number of matches is estimated.
		 *
		 * For zeitgeist_log_find_events() and zeitgeist_log_get_events() this will
		 * always be the same as zeitgeist_result_set_size(). For cases like
		 * zeitgeist_index_search() where you specify a subset of the hits to retrieve
		 * the estimated match count will often be bigger than the result set size.
		 *
		 * @return The number of events that matched the query
		 */
		public abstract uint estimated_matches ();
		/**
		 * Check if a call to zeitgeist_result_set_next() will succeed.
		 *
		 * @return TRUE if and only if more events can be retrieved
		 *         by calling zeitgeist_result_set_next()
		 */
		public abstract bool has_next ();
		/**
		 * Do not use this method! It is only for use by Vala.
		 */
		public Zeitgeist.ResultSet iterator ();
		/**
		 * Get the current event from the result set and advance the cursor. To
		 * ensure that calls to this method will succeed you can call
		 * zeitgeist_result_set_has_next().
		 *
		 * @return The #ZeitgeistEvent at the current cursor position, or NULL
		 *         if there are no events left.
		 */
		public abstract Zeitgeist.Event? next_value ();
		/**
		 * Resets the result set to start iterating it again from scratch.
		 *
		 */
		public abstract void reset ();
		/**
		 * Get the number of #ZeitgeistEvent<!-- -->s held in a #ZeitgeistResultSet.
		 * Unlike the number obtained from zeitgeist_result_set_estimated_matches() the
		 * size of the result set is always equal to the number of times you can call
		 * zeitgeist_result_set_next().
		 *
		 * @return The number of events held in the result set
		 */
		public abstract uint size ();
		/**
		 * Get the current position of the cursor.
		 *
		 * @return The current position of the cursor
		 */
		public abstract uint tell ();
	}
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public enum RelevantResultType {
		/**
		 * All uris with the most recent uri first
		 */
		RECENT,
		/**
		 * All uris with the most related one first
		 */
		RELATED
	}
	/**
	 * ZeitgeistResultType
	 *
	 * Used to control how the query results are grouped and sorted.
	 * See zeitgeist_log_find_events(), zeitgeist_log_find_event_ids(), and
	 * zeitgeist_index_search().
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public enum ResultType {
		/**
		 * All events with the most recent events first
		 */
		MOST_RECENT_EVENTS,
		/**
		 * All events with the oldest
		 */
		LEAST_RECENT_EVENTS,
		/**
		 * One event for each subject only, ordered with the most recent events first
		 */
		MOST_RECENT_SUBJECTS,
		/**
		 * One event for each subject, only, ordered with oldest events first
		 */
		LEAST_RECENT_SUBJECTS,
		/**
		 * One event for each subject only, ordered by the popularity of the subject
		 */
		MOST_POPULAR_SUBJECTS,
		/**
		 * One event for each subject only, ordered ascendingly by popularity of the subject
		 */
		LEAST_POPULAR_SUBJECTS,
		/**
		 * The last event of each different actor ordered by the popularity of the actor
		 */
		MOST_POPULAR_ACTOR,
		/**
		 * The last event of each different actor, ordered ascendingly by the popularity of the actor
		 */
		LEAST_POPULAR_ACTOR,
		/**
		 * The actor that has been used to most recently
		 */
		MOST_RECENT_ACTOR,
		/**
		 * The actor that has been used to least recently
		 */
		LEAST_RECENT_ACTOR,
		/**
		 * The last event of each different subject origin.
		 */
		MOST_RECENT_ORIGIN,
		/**
		 * The last event of each different subject origin, ordered by least recently used first
		 */
		LEAST_RECENT_ORIGIN,
		/**
		 * The last event of each different subject origin, ordered by the popularity of the origins
		 */
		MOST_POPULAR_ORIGIN,
		/**
		 * The last event of each different subject origin, ordered ascendingly by the popularity of the origin
		 */
		LEAST_POPULAR_ORIGIN,
		/**
		 * The first event of each different actor
		 */
		OLDEST_ACTOR,
		/**
		 * One event for each subject interpretation only, ordered with the most recent events first
		 */
		MOST_RECENT_SUBJECT_INTERPRETATION,
		/**
		 * One event for each subject interpretation only, ordered with the least recent events first
		 */
		LEAST_RECENT_SUBJECT_INTERPRETATION,
		/**
		 * One event for each subject interpretation only, ordered by the popularity of the subject interpretation
		 */
		MOST_POPULAR_SUBJECT_INTERPRETATION,
		/**
		 * One event for each subject interpretation only, ordered ascendingly by popularity of the subject interpretation
		 */
		LEAST_POPULAR_SUBJECT_INTERPRETATION,
		/**
		 * One event for each mimetype only ordered with the most recent events first
		 */
		MOST_RECENT_MIMETYPE,
		/**
		 * One event for each mimetype only ordered with the least recent events first
		 */
		LEAST_RECENT_MIMETYPE,
		/**
		 * One event for each mimetype only ordered by the popularity of the mimetype
		 */
		MOST_POPULAR_MIMETYPE,
		/**
		 * One event for each mimetype only ordered ascendingly by popularity of the mimetype
		 */
		LEAST_POPULAR_MIMETYPE,
		/**
		 * One event for each subject only by current_uri instead of uri ordered with the most recent events first
		 */
		MOST_RECENT_CURRENT_URI,
		/**
		 *  One event for each subject only by current_uri instead of uri ordered with oldest events first
		 */
		LEAST_RECENT_CURRENT_URI,
		/**
		 * One event for each subject only by current_uri instead of uri ordered by the popularity of the subject
		 */
		MOST_POPULAR_CURRENT_URI,
		/**
		 * One event for each subject only by current_uri instead of uri ordered ascendingly by popularity of the subject
		 */
		LEAST_POPULAR_CURRENT_URI,
		/**
		 * The last event of each different origin
		 */
		MOST_RECENT_EVENT_ORIGIN,
		/**
		 * The last event of each different origin, ordered by least recently used first
		 */
		LEAST_RECENT_EVENT_ORIGIN,
		/**
		 * The last event of each different origin ordered by the popularity of the origins
		 */
		MOST_POPULAR_EVENT_ORIGIN,
		/**
		 * The last event of each different origin, ordered ascendingly by the popularity of the origin
		 */
		LEAST_POPULAR_EVENT_ORIGIN,
		/**
		 * The last event of each different subject origin.
		 */
		MOST_RECENT_CURRENT_ORIGIN,
		/**
		 * The last event of each different subject origin, ordered by least recently used first
		 */
		LEAST_RECENT_CURRENT_ORIGIN,
		/**
		 * The last event of each different subject origin, ordered by the popularity of the origins
		 */
		MOST_POPULAR_CURRENT_ORIGIN,
		/**
		 * The last event of each different subject origin, ordered ascendingly by the popularity of the origin
		 */
		LEAST_POPULAR_CURRENT_ORIGIN,
		/**
		 * Only allowed on zeitgeist_index_search(). Events are sorted by query relevancy
		 */
		RELEVANCY;
		/**
		 * @param result_type A {@link ResultType}
		 *
		 * @return true if the results for the given result_type will be sorted
		 * ascendantly by date, false if they'll be sorted descendingly.
		 */
		public static bool is_sort_order_asc (Zeitgeist.ResultType result_type);
	}
	/**
	 * Enumeration class defining the possible values for the storage
	 * state of an event subject.
	 *
	 * The StorageState enumeration can be used to control whether or
	 * not matched events must have their subjects available to the user.
	 * Fx. not including deleted files, files on unplugged USB drives,
	 * files available only when a network is available etc.
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public enum StorageState {
		/**
		 * The storage medium of the events subjects must not be available to the user
		 */
		NOT_AVAILABLE,
		/**
		 * The storage medium of all event subjects must be immediately available to the user
		 */
		AVAILABLE,
		/**
		 * The event subjects may or may not be available
		 */
		ANY
	}
	/**
	 * Errors which can be thrown when asynchronously querying for {@link Event}s.
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	[DBus (name = "org.gnome.zeitgeist.DataModelError")]
	public errordomain DataModelError {
		/**
		 * Signature sent over DBus is invalid.
		 */
		INVALID_SIGNATURE,
		/**
		 * {@link Event} is NULL.
		 */
		NULL_EVENT,
		/**
		 * Query return too many {@link Event}s.
		 */
		TOO_MANY_RESULTS
	}
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	[DBus (name = "org.gnome.zeitgeist.EngineError")]
	public errordomain EngineError {
		BACKUP_FAILED,
		DATABASE_BUSY,
		DATABASE_CANTOPEN,
		DATABASE_CORRUPT,
		DATABASE_ERROR,
		DATABASE_RETIRE_FAILED,
		EXISTING_INSTANCE,
		INVALID_ARGUMENT,
		INVALID_EVENT,
		INVALID_KEY
	}
	/**
	 * zeitgeist_interpretation_for_mimetype:
	 *
	 * Look up the subject interpretation type associated with @mimetype.
	 *
	 * @param mimetype A MIME-type string. Eg. //text/plain//
	 *
	 * @return A URI defining the subject interpretation type associated with
	 *     "mimetype" or %NULL in case "mimetype" is unknown
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public static unowned string? interpretation_for_mimetype (string? mimetype);
	/**
	 * zeitgeist_manifestation_for_uri
	 *
	 * Look up a subject manifestation type for a given URI. Eg. if you pass in
	 * //file:\/\/\/tmp/foo.txt// you will get back
	 * ZEITGEIST_NFO_FILE_DATA_OBJECT.
	 *
	 * @param uri An URI
	 *
	 * @return A subject manifestation type for @uri or %NULL in case no
	 *     suitable manifestation type is known
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public static unowned string? manifestation_for_uri (string uri);
	/**
	 * zeitgeist_register_mimetype:
	 *
	 * Associate a MIME-type with a given interpretation type. Registered
	 * MIME-types can be looked up with zeitgeist_interpretation_for_mimetype().
	 *
	 * You can register a regular expression as mimetype if instead of this
	 * function you invoke zeitgeist_register_mimetype_regex().
	 *
	 * MIME-types are first looked up by their exact name and then if none is
	 * found the regular expressions will be checked as fallbacks.
	 *
	 * This library will install a wide range a common mimetypes for you, so
	 * unless you have very specific needs you will normally not have to call
	 * this function.
	 *
	 * @param mimetype  A MIME-type string. Eg. //text/plain//
	 * @param interpretation_uri A URI defining the subject interpretation
	 *     type to associate with "mimetype"
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public static void register_mimetype (string mimetype, string interpretation_uri);
	/**
	 * zeitgeist_register_mimetype_regex:
	 *
	 * Associate a range of MIME-types with a given interpretation type.
	 * Registered MIME-types can be looked up with
	 * zeitgeist_interpretation_for_mimetype().
	 *
	 * If you only need to register one specific MIME-type, it is more efficient
	 * to use zeitgeist_register_mimetype() instead of this function.
	 *
	 * MIME-types are first looked up by their exact name and then if none is
	 * found the regular expressions will be checked as fallbacks.
	 *
	 * This library will install a wide range a common mimetypes for you, so
	 * unless you have very specific needs you will normally not have to call
	 * this function.
	 *
	 * @param mimetype_regex A regular expression matching a certain range of
	 *     mimetypes. Eg. //text/.* // to match all //text// subtypes.
	 * @param interpretation_uri A URI defining the subject interpretation
	 *     type to associate with the matched MIME-types
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public static void register_mimetype_regex (string mimetype_regex, string interpretation_uri);
	/**
	 * zeitgeist_register_uri_scheme:
	 *
	 * Associate a URI scheme with a given subject manifestation type.
	 * You can find the manifestation type of a given URI by passing it to
	 * zeitgeist_manifestation_for_uri().
	 *
	 * This library will install a range a common URI schemes for you, so unless
	 * you have very specific needs you will normally not have to call this
	 * function.
	 *
	 * @param uri_scheme A URI scheme such as //http:\/\///
	 * @param manifestation_type A URI defining the subject manifestation type
	 *     to associate with "uri_scheme"
	 */
	[CCode (cheader_filename = "zeitgeist-datamodel.h")]
	public static void register_uri_scheme (string uri_scheme, string manifestation_type);
}
