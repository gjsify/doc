/* gegl-gtk3-0.1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "GeglGtk", gir_namespace = "GeglGtk3", gir_version = "0.1", lower_case_cprefix = "gegl_gtk_")]
namespace GeglGtk {
	[CCode (cheader_filename = "gegl-gtk.h", type_id = "gegl_gtk_view_get_type ()")]
	public class View : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public View ();
		[CCode (has_construct_function = false)]
		public View.for_buffer (Gegl.Buffer buffer);
		[CCode (has_construct_function = false)]
		public View.for_node (Gegl.Node node);
		public GeglGtk.ViewAutoscale get_autoscale_policy ();
		public unowned Gegl.Node get_node ();
		public float get_scale ();
		public void get_transformation (out unowned Gegl.Matrix3 matrix);
		public float get_x ();
		public float get_y ();
		public void set_autoscale_policy (GeglGtk.ViewAutoscale autoscale);
		public void set_node (Gegl.Node? node);
		public void set_scale (float scale);
		public void set_x (float x);
		public void set_y (float y);
		public GeglGtk.ViewAutoscale autoscale_policy { get; set construct; }
		[NoAccessorMethod]
		public bool block { get; set; }
		public GLib.Object node { get; set construct; }
		public double scale { get; set construct; }
		public float x { get; set construct; }
		public float y { get; set construct; }
		public signal void draw_background (Cairo.Context cr, Gdk.Rectangle rect);
		public signal void draw_overlay (Cairo.Context cr, Gdk.Rectangle rect);
	}
	[CCode (cheader_filename = "gegl-gtk.h", cprefix = "GEGL_GTK_VIEW_AUTOSCALE_", type_id = "gegl_gtk_view_autoscale_get_type ()")]
	public enum ViewAutoscale {
		DISABLED,
		WIDGET,
		CONTENT
	}
}
