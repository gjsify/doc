/* granite.vapi generated by valac 0.48.9, do not modify. */

namespace Granite {
	/**
	 * The DateTime namespace contains useful functions for
	 * getting the default translated format for either date and time.
	 */
	namespace DateTime {
		/**
		 * Gets the default translated date format.
		 * The function constructs a new string interpreting the //with_weekday//, //with_day// and //with_year// parameters
		 * so that it can be used with formatting functions like {@link GLib.DateTime.format}.
		 *
		 * As the {@link Granite.DateTime.get_default_time_format}, the returned string is formatted, translated and is also mostly used to display
		 * the date in various user interfaces like the date displayed in the top panel.
		 *
		 * @param with_weekday if the returned string should contain the abbreviated weekday name
		 * @param with_day if the returned string should contain contain the day of the month as a decimal number (range 1 to 31)
		 * @param with_year if the returned string should contain the year as a decimal number including the century
		 *
		 * @return returns the formatted and located date string. If for some reason, the function could not determine the format to use,
		 *         an empty string will be returned.
		 */
		[CCode (cheader_filename = "granite.h")]
		public static string get_default_date_format (bool with_weekday = false, bool with_day = true, bool with_year = false);
		/**
		 * Gets a default translated time format.
		 * The function constructs a new string interpreting the //is_12h// and //with_second// parameters
		 * so that it can be used with formatting functions like {@link GLib.DateTime.format}.
		 *
		 * The returned string is formatted and translated. This function is mostly used to display
		 * the time in various user interfaces like the time displayed in the top panel.
		 *
		 * @param is_12h if the returned string should be formatted in 12h format
		 * @param with_second if the returned string should include seconds
		 *
		 * @return the formatted and located time string.
		 */
		[CCode (cheader_filename = "granite.h")]
		public static string get_default_time_format (bool is_12h = false, bool with_second = false);
		/**
		 * Compares a {@link GLib.DateTime} to {@link GLib.DateTime.now_local} and returns a location, relative date and
		 * time string. Results appear as natural-language strings like "Now", "5m ago", "Yesterday"
		 *
		 * @param date_time a {@link GLib.DateTime} to compare against {@link GLib.DateTime.now_local}
		 *
		 * @return a localized, relative date and time string
		 */
		[CCode (cheader_filename = "granite.h")]
		public static string get_relative_datetime (GLib.DateTime date_time);
		/**
		 * Compare two {@link GLib.DateTime} and return true if they occur on the same day of the same year
		 *
		 * @param day1 a {@link GLib.DateTime} to compare against day2
		 * @param day2 a {@link GLib.DateTime} to compare against day1
		 *
		 * @return true if day1 and day2 occur on the same day of the same year. False otherwise
		 */
		[CCode (cheader_filename = "granite.h")]
		public static bool is_same_day (GLib.DateTime day1, GLib.DateTime day2);
		/**
		 * Converts seconds into the ISO 8601 standard date format for minutes (e.g. 100s to 01:40).
		 * Output of negative seconds is prepended with minus character.
		 *
		 * @param seconds the number of seconds to convert into ISO 8601
		 *
		 * @return returns an ISO 8601 formatted string
		 */
		[CCode (cheader_filename = "granite.h")]
		public static string seconds_to_time (int seconds);
	}
	namespace Drawing {
		/**
		 * A buffer containing an internal Cairo-usable surface and context, designed
		 * for usage with large, rarely updated draw operations.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class BufferSurface : GLib.Object {
			/**
			 * Constructs a new, empty {@link Granite.Drawing.BufferSurface} with the supplied dimensions.
			 *
			 * @param width the width of {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param height the height of the {@link Granite.Drawing.BufferSurface}, in pixels
			 */
			public BufferSurface (int width, int height);
			/**
			 * Averages all the colors in the internal {@link Cairo.Surface}.
			 *
			 * @return the {@link Granite.Drawing.Color} with the averaged color
			 */
			public Granite.Drawing.Color average_color ();
			/**
			 * Clears the internal {@link Cairo.Surface}, making all pixels fully transparent.
			 */
			public void clear ();
			/**
			 * Performs a blur operation on the internal {@link Cairo.Surface}, using an
			 * exponential blurring algorithm. This method is usually the fastest
			 * and produces good-looking results (though not quite as good as gaussian's).
			 *
			 * @param radius the blur radius
			 */
			public void exponential_blur (int radius);
			/**
			 * Performs a blur operation on the internal {@link Cairo.Surface}, using the
			 * fast-blur algorithm found here [[http://incubator.quasimondo.com/processing/superfastblur.pde]].
			 *
			 * @param radius the blur radius
			 * @param process_count the number of times to perform the operation
			 */
			public void fast_blur (int radius, int process_count = 1);
			/**
			 * Performs a blur operation on the internal {@link Cairo.Surface}, using a
			 * gaussian blurring algorithm. This method is very slow, albeit producing
			 * debatably the best-looking results, and in most cases developers should
			 * use the exponential blurring algorithm instead.
			 *
			 * @param radius the blur radius
			 */
			public void gaussian_blur (int radius);
			/**
			 * Creates a {@link Gdk.Pixbuf} from internal {@link Cairo.Surface}.
			 *
			 * @return the {@link Gdk.Pixbuf}
			 */
			public Gdk.Pixbuf load_to_pixbuf ();
			/**
			 * Constructs a new, empty {@link Granite.Drawing.BufferSurface} with the supplied dimensions, using
			 * the supplied {@link Granite.Drawing.BufferSurface} as a model.
			 *
			 * @param width the width of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param height the height of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param model the {@link Granite.Drawing.BufferSurface} to use as a model for the internal {@link Cairo.Surface}
			 */
			public BufferSurface.with_buffer_surface (int width, int height, Granite.Drawing.BufferSurface model);
			/**
			 * Constructs a new, empty {@link Granite.Drawing.BufferSurface} with the supplied dimensions, using
			 * the supplied {@link Cairo.Surface} as a model.
			 *
			 * @param width the width of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param height the height of the new {@link Granite.Drawing.BufferSurface}, in pixels
			 * @param model the {@link Cairo.Surface} to use as a model for the internal {@link Cairo.Surface}
			 */
			public BufferSurface.with_surface (int width, int height, Cairo.Surface model);
			/**
			 * The {@link Cairo.Context} for the internal surface. All drawing operations done on this
			 * {@link Granite.Drawing.BufferSurface} should use this context.
			 */
			public Cairo.Context context { get; }
			/**
			 * The height of the BufferSurface, in pixels.
			 */
			public int height { get; private set; }
			/**
			 * The {@link Cairo.Surface} which will store the results of all drawing operations
			 * made with {@link Granite.Drawing.BufferSurface.context}.
			 */
			public Cairo.Surface surface { get; private set; }
			/**
			 * The width of the {@link Granite.Drawing.BufferSurface}, in pixels.
			 */
			public int width { get; private set; }
		}
		/**
		 * A class containing an RGBA color and methods for more powerful color manipulation.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Color : GLib.Object, Granite.Services.SettingsSerializable {
			/**
			 * The value of the alpha channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double A;
			/**
			 * The value of the blue channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double B;
			/**
			 * The value of the green channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double G;
			/**
			 * The value of the red channel, with 0 being the lowest value and 1.0 being the greatest value.
			 */
			public double R;
			/**
			 * Constructs a new {@link Granite.Drawing.Color} with the supplied values.
			 *
			 * @param R the value of the red channel as a double
			 * @param G the value of the green channel as a double
			 * @param B the value of the blue channel as a double
			 * @param A the value of the alpha channel as a double
			 */
			public Color (double R, double G, double B, double A);
			/**
			 * Adds the supplied hue value to this color's hue value.
			 *
			 * @param val the hue to add to this color's hue
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color add_hue (double val);
			/**
			 * Extracts the alpha value from the integer value
			 * serialized by {@link Granite.Drawing.Color.to_int}.
			 *
			 * @return the alpha channel value as a uint8 ranging from 0 - 255.
			 */
			public static uint8 alpha_from_int (int color);
			/**
			 * Extracts the blue value from the integer value
			 * serialized by {@link Granite.Drawing.Color.to_int}.
			 *
			 * @return the blue channel value as a uint8 ranging from 0 - 255.
			 */
			public static uint8 blue_from_int (int color);
			/**
			 * Brightens this color's value by the supplied amount.
			 *
			 * @param amount the amount to brighten the value by
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color brighten_val (double amount);
			/**
			 * Darkens this color's value by the supplied amount * color's saturation.
			 *
			 * @param amount the amount to darken the value by
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color darken_by_sat (double amount);
			/**
			 * Darkens this color's value by the supplied amount.
			 *
			 * @param amount the amount to darken the value by
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color darken_val (double amount);
			/**
			 * Constructs a new {@link Granite.Drawing.Color} from a {@link Gdk.Color}.
			 *
			 * @param color the {@link Gdk.Color}
			 */
			public Color.from_gdk (Gdk.Color color);
			/**
			 * Constructs a new {@link Granite.Drawing.Color} from an integer.
			 *
			 * This constructor should be used when deserializing the previously serialized
			 * color by {@link Granite.Drawing.Color.to_int}.
			 *
			 * For more details on what format the color integer representation has, see {@link Granite.Drawing.Color.to_int}.
			 *
			 * If you would like to deserialize the A, R, G and B values from the integer without
			 * creating a new instance of {@link Granite.Drawing.Color}, you can use the available
			 * //*_from_int// static method collection such as {@link Granite.Drawing.Color.alpha_from_int}.
			 *
			 * @param color the integer specyfying the color
			 */
			public Color.from_int (int color);
			/**
			 * Constructs a new {@link Granite.Drawing.Color} from a {@link Gdk.RGBA}.
			 *
			 * @param color the {@link Gdk.RGBA}
			 */
			public Color.from_rgba (Gdk.RGBA color);
			/**
			 * Constructs a new {@link Granite.Drawing.Color} from a string.
			 *
			 * The string can be either one of:
			 *
			 * * A standard name (Taken from the X11 rgb.txt file).
			 * * A hexadecimal value in the form “#rgb”, “#rrggbb”, “#rrrgggbbb” or ”#rrrrggggbbbb”
			 * * A RGB color in the form “rgb(r,g,b)” (In this case the color will have full opacity)
			 * * A RGBA color in the form “rgba(r,g,b,a)”
			 *
			 * For more details on formatting and how this function works see {@link Gdk.RGBA.parse}
			 *
			 * @param color the string specifying the color
			 */
			public Color.from_string (string color);
			/**
			 * Get the value.
			 * @return the hue of this color, as a double value
			 */
			public double get_hue ();
			/**
			 * Get the value.
			 * @return the saturation of this color, as a double value
			 */
			public double get_sat ();
			/**
			 * Get the value.
			 *
			 * @return the value of this color, as a double value
			 */
			public double get_val ();
			/**
			 * Extracts the green value from the integer value
			 * serialized by {@link Granite.Drawing.Color.to_int}.
			 *
			 * @return the green channel value as a uint8 ranging from 0 - 255.
			 */
			public static uint8 green_from_int (int color);
			/**
			 * Multiplies this color's saturation by the supplied amount.
			 *
			 * @param amount the amount to multiply the saturation by
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color multiply_sat (double amount);
			/**
			 * Extracts the red value from the integer value
			 * serialized by {@link Granite.Drawing.Color.to_int}.
			 *
			 * @return the red channel value as a uint8 ranging from 0 - 255.
			 */
			public static uint8 red_from_int (int color);
			/**
			 * Changes the value of the alpha channel.
			 *
			 * @param alpha the value of the alpha channel
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_alpha (double alpha);
			/**
			 * Changes the hue of this color to the supplied one.
			 *
			 * @param hue the hue to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_hue (double hue);
			/**
			 * Changes this color's saturation to the supplied saturation, if it is smaller than this color's saturation.
			 *
			 * @param sat the hue to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_max_sat (double sat);
			/**
			 * Changes this color's value to the supplied value, if it is smaller than this color's value.
			 *
			 * @param val the value to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_max_val (double val);
			/**
			 * Changes this color's saturation to the supplied saturation, if it is greater than this color's saturation.
			 *
			 * @param sat the saturation to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_min_sat (double sat);
			/**
			 * Changes this color's value to the supplied value, if it is greater than this color's value.
			 *
			 * @param val the value to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_min_value (double val);
			/**
			 * Changes the saturation of this color to the supplied one.
			 *
			 * @param sat the saturation to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_sat (double sat);
			/**
			 * Changes the value of this color to the supplied one.
			 *
			 * @param val the value to change this color to
			 *
			 * @return the new {@link Granite.Drawing.Color}
			 */
			public Granite.Drawing.Color set_val (double val);
			/**
			 * Converts this to a 32 bit integer.
			 *
			 * This function can be useful for serializing the color so that it can be stored
			 * and retrieved easily with hash tables and lists.
			 *
			 * The returned integer will contain the four channels
			 * that define the {@link Granite.Drawing.Color} class: alpha, red, green and blue.
			 *
			 * Each channel is represented by 8 bits.
			 * The first 8 bits of the integer conatin the alpha channel while all other 24 bits represent
			 * red, green and blue channels respectively.
			 *
			 * The format written as a string would look like this:
			 *
			 * //AAAAAAAA RRRRRRRR GGGGGGGG BBBBBBBB//
			 *
			 * where //A// is one bit of alpha chnnel, //R// of red channel, //G// of green channel and //B// of blue channel.
			 *
			 * @return a 32 bit integer representing this
			 */
			public int to_int ();
			/**
			 * Returns a textual specification of this in the form `rgb (r, g, b)` or `rgba (r, g, b, a)`,
			 * where “r”, “g”, “b” and “a” represent the red, green, blue and alpha values respectively.
			 *
			 * r, g, and b are represented as integers in the range 0 to 255, and a is represented as
			 * floating point value in the range 0 to 1.
			 *
			 * Note: that this string representation may lose some precision, since r, g and b are represented
			 * as 8-bit integers. If this is a concern, you should use a different representation.
			 *
			 * This returns the same string as a {@link Gdk.RGBA} would return in {@link Gdk.RGBA.to_string}
			 *
			 * @return the text string
			 */
			public string to_string ();
		}
		/**
		 * A utility class for frequently-performed drawing operations.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Utilities : GLib.Object {
			public Utilities ();
			/**
			 * Averages the colors in the {@link Gdk.Pixbuf} and returns it.
			 *
			 * @param source the {@link Gdk.Pixbuf}
			 *
			 * @return the {@link Granite.Drawing.Color} containing the averaged color
			 */
			public static Granite.Drawing.Color average_color (Gdk.Pixbuf source);
			/**
			 * Adds a closed sub-path rounded rectangle of the given size and border radius to the current path
			 * at position (x, y) in user-space coordinates.
			 *
			 * @param cr a {@link Cairo.Context}
			 * @param x the X coordinate of the top left corner of the rounded rectangle
			 * @param y the Y coordinate to the top left corner of the rounded rectangle
			 * @param width the width of the rounded rectangle
			 * @param height the height of the rounded rectangle
			 * @param radius the border radius of the rounded rectangle
			 */
			public static void cairo_rounded_rectangle (Cairo.Context cr, double x, double y, double width, double height, double radius);
		}
	}
	namespace FDO {
	}
	namespace GtkPatch {
		[CCode (cheader_filename = "granite.h")]
		public class AboutDialog : Gtk.Dialog {
			/**
			 * Creates a new Granite.AboutDialog
			 */
			public AboutDialog ();
			/**
			 * The people who contributed artwork to the program, as a null-terminated array of strings.
			 */
			public string[] artists { get; set; }
			/**
			 * The authors of the program, as a null-terminated array of strings.
			 */
			public string[] authors { get; set; }
			/**
			 * Comments about the program.
			 */
			public string comments { get; set; }
			/**
			 * Copyright information for the program.
			 */
			public string copyright { get; set; }
			/**
			 * The people documenting the program, as a null-terminated array of strings.
			 */
			public string[] documenters { get; set; }
			/**
			 * The license of the program.
			 */
			public string license { get; set; }
			public Gtk.License license_type { get; set; }
			/**
			 * A logo for the about box.
			 */
			public Gdk.Pixbuf logo { get; set; }
			/**
			 * A named icon to use as the logo for the about box.
			 */
			public string logo_icon_name { get; set; }
			/**
			 * The name of the program.
			 */
			public string program_name { get; set; }
			/**
			 * Credits to the translators.
			 */
			public string translator_credits { get; set; }
			/**
			 * The version of the program.
			 */
			public string version { get; set; }
			/**
			 * The URL for the link to the website of the program.
			 */
			public string website { get; set; }
			/**
			 * The label for the link to the website of the program.
			 */
			public string website_label { get; set; }
			public virtual signal bool activate_link (string uri);
		}
	}
	namespace Pantheon {
	}
	[CCode (gir_namespace = "GraniteServices", gir_version = "1.0")]
	namespace Services {
		/**
		 * Utilities for Applications
		 */
		namespace Application {
			/**
			 * Set the badge count, usually visible with the dock in the desktop. There is no guarantee
			 * that the target environment supports it in any way.
			 * For it to be visible, one has to make sure to call set_badge_visible().
			 */
			[CCode (cheader_filename = "granite.h")]
			public static async bool set_badge (int64 count) throws GLib.Error;
			/**
			 * Set the badge visibility.
			 */
			[CCode (cheader_filename = "granite.h")]
			public static async bool set_badge_visible (bool visible) throws GLib.Error;
			/**
			 * Set the progress of the application, usually visible with the dock in the desktop.
			 * There is no guarantee that the target environment supports it in any way.
			 * For it to be visible, one has to make sure to call set_progress_visible().
			 */
			[CCode (cheader_filename = "granite.h")]
			public static async bool set_progress (double progress) throws GLib.Error;
			/**
			 * Set the progress visibility.
			 */
			[CCode (cheader_filename = "granite.h")]
			public static async bool set_progress_visible (bool visible) throws GLib.Error;
		}
		/**
		 * Provides a convenient GObject wrapper around Contractor's D-bus API
		 */
		[CCode (cheader_filename = "granite.h")]
		public class ContractorProxy : GLib.Object {
			/**
			 * Provides all the contracts.
			 *
			 * @return {@link Gee.List} containing all the contracts available in the system.
			 */
			public static Gee.List<Granite.Services.Contract> get_all_contracts () throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to the given mimetypes.
			 *
			 * @param mime_type Mimetype of file.
			 * @return {@link Gee.List} of contracts that support the given mimetype.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_by_mime (string mime_type) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to all given mimetypes.
			 *
			 * Only the contracts that support all of the mimetypes are returned.
			 *
			 * @param mime_types Array of mimetypes.
			 * @return {@link Gee.List} of contracts that support the given mimetypes.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_by_mimelist (string[] mime_types) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to the given file.
			 *
			 * Errors occurring in {@link GLib.File.query_info} method while looking up
			 * the file (e.g. if the file is deleted) are forwarded to the caller.
			 *
			 * @param file An existing file.
			 * @return {@link Gee.List} of contracts applicable to the given file.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_for_file (GLib.File file) throws GLib.Error;
			/**
			 * Returns actions (contracts) applicable to all given files.
			 *
			 * Only the contracts that support all of the files are returned.<<BR>>
			 * Errors occurring in {@link GLib.File.query_info} method while looking up
			 * the file (e.g. if the file is deleted) are forwarded to the caller.<<BR>>
			 *
			 * @param files Array of existing files.
			 * @return {@link Gee.List} of contracts applicable to any of the given files.
			 */
			public static Gee.List<Granite.Services.Contract> get_contracts_for_files (GLib.File[] files) throws GLib.Error;
			public static Granite.Services.ContractorProxy get_instance () throws GLib.Error;
			/**
			 * Emitted when the list of actions available to Contractor changes.
			 * Application should generally request the updated list of actions upon receiving this signal.
			 *
			 * This is not obligatory for frequently updated lists (e.g. in context menus), 
			 * but essential for applications that display action lists without re-requesting them.
			 */
			public signal void contracts_changed ();
		}
		/**
		 * This class provides an easy way to access symbolic icons.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "")]
		public class IconFactory : GLib.Object {
			public IconFactory ();
			public static Granite.Services.IconFactory get_default ();
			/**
			 * Loads a symbolic icon for the given icon name with a better chance
			 * for loading a symbolic icon in case of fallback than with {@link Gtk.IconTheme.load_icon}
			 *
			 * Note that the resulting pixbuf may not be exactly the requested size;
			 * an icon theme may have icons that differ slightly from their nominal sizes,
			 * and in addition GTK+ will avoid scaling icons that it considers sufficiently close
			 * to the requested size or for which the source image would have to be scaled up too far
			 * (this maintains sharpness).
			 *
			 * Due to the way {@link Gtk.IconLookupFlags.GENERIC_FALLBACK} works, Gtk readily
			 * falls back to the non-symbolic icon if the exact match for the provided name is not found,
			 * and only after that fails tries to look up alternative names of the icon itself.
			 * This function uses the same mechanism, but looks up the symbolic icon for the
			 * name chosen after all the fallbacks, and returns the symbolic one if it's present.
			 * This gives a better chance of getting a symbolic icon in case of fallbacks than
			 * when using {@link Gtk.IconTheme.load_icon}
			 *
			 * @return a {@link Gdk.Pixbuf} with the rendered icon; this may be a newly created icon
			 * or a new reference to an internal icon, so you must not modify the icon.
			 * Returns null if the icon was not found in the theme hierarchy.
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "")]
			public Gdk.Pixbuf? load_symbolic_icon (Gtk.StyleContext style, string iconname, int size);
			/**
			 * Attempts to load a symbolic icon for the given {@link GLib.Icon}
			 * with graceful fallback on the non-symbolic variant if the symbolic one
			 * does not exist.
			 *
			 * Note that the resulting pixbuf may not be exactly the requested size;
			 * an icon theme may have icons that differ slightly from their nominal sizes,
			 * and in addition GTK+ will avoid scaling icons that it considers sufficiently close
			 * to the requested size or for which the source image would have to be scaled up too far
			 * (this maintains sharpness).
			 *
			 * @return a {@link Gdk.Pixbuf} with the rendered icon; this may be a newly created icon
			 * or a new reference to an internal icon, so you must not modify the icon.
			 * Returns null if the icon was not found in the theme hierarchy.
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "")]
			public Gdk.Pixbuf? load_symbolic_icon_from_gicon (Gtk.StyleContext style, GLib.Icon gicon, int size);
		}
		/**
		 * This class helps in the use of logs in a Granite application.
		 *
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Logger : GLib.Object {
			public Logger ();
			/**
			 * This method initializes the Logger
			 *
			 * @param app_name name of app that is logging
			 */
			public static void initialize (string app_name);
			/**
			 * Logs message using Notify level formatting
			 *
			 * @param msg message to be logged
			 */
			public static void notification (string msg);
			/**
			 * This is used to determine which level of LogLevelling should be used.
			 */
			public static Granite.Services.LogLevel DisplayLevel { get; set; }
		}
		/**
		 * A class for interacting with frequently-used directories, following the
		 * XDG Base Directory specification: [[http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html]]
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "GLib.Environment")]
		public class Paths : GLib.Object {
			public Paths ();
			/**
			 * Ensure the directory exists, by creating it if it does not.
			 *
			 * @param dir the directory in question
			 *
			 * @return `true` is the directory exists, `false` if it does not
			 */
			public static bool ensure_directory_exists (GLib.File dir);
			/**
			 * Initialize all the paths using the supplied app name and path to the app's data folder.
			 *
			 * @param app_name the name of the application
			 * @param data_folder_path the path to the application's data folder
			 */
			public static void initialize (string app_name, string data_folder_path);
			/**
			 * Path passed in to initialize method; should be Build.PKGDATADIR.
			 */
			public static GLib.File data_folder { get; protected set; }
			/**
			 * User's home folder - $HOME
			 */
			public static GLib.File home_folder { get; protected set; }
			/**
			 * defaults to xdg_cache_home_folder/app_name
			 */
			public static GLib.File user_cache_folder { get; protected set; }
			/**
			 * defaults to xdg_config_home_folder/app_name
			 */
			public static GLib.File user_config_folder { get; protected set; }
			/**
			 * defaults to xdg_data_home_folder/app_name
			 */
			public static GLib.File user_data_folder { get; protected set; }
			/**
			 * $XDG_CACHE_HOME - defaults to $HOME/.cache
			 */
			public static GLib.File xdg_cache_home_folder { get; protected set; }
			/**
			 * $XDG_CONFIG_HOME - defaults to $HOME/.config
			 */
			public static GLib.File xdg_config_home_folder { get; protected set; }
			/**
			 * $XDG_DATA_DIRS - defaults to /usr/local/share/:/usr/share/
			 */
			public static GLib.List<GLib.File> xdg_data_dir_folders { get; protected owned set; }
			/**
			 * $XDG_DATA_HOME - defaults to $HOME/.local/share
			 */
			public static GLib.File xdg_data_home_folder { get; protected set; }
		}
		/**
		 * Class for interacting with an internal {@link GLib.Settings} using native Vala properties.
		 * Clients of this class should not connect to the {@link GLib.Object.notify} signal.
		 * Instead, they should connect to the {@link Granite.Services.Settings.changed} signal.
		 *
		 * For example, if a developer wanted to interact with desktop.Wallpaper's (http:/www.launchpad.net/pantheon-wallpaper) schema,
		 * this is what his/her subclass might look like:
		 *
		 * {{{
		 *    public class WallpaperSettings : Granite.Services.Settings {
		 *
		 *        public PictureMode picture_mode { get; set; }
		 *
		 *        public string picture_path { get; set; }
		 *
		 *        public string background_color { get; set; }
		 *
		 *        public WallpaperSettings () {
		 *            base ("desktop.Wallpaper");
		 *        }
		 *
		 *        protected override void verify (string key) {
		 *
		 *            switch (key) {
		 *
		 *                case "background-color":
		 *                    Gdk.Color bg;
		 *                    if (!Gdk.Color.parse (background_color, out bg))
		 *                        background_color = "#000000";
		 *                    break;
		 *            }
		 *        }
		 *
		 *    }
		 * }}}
		 *
		 * Keep in mind that the developer must define his/her enums to match the schema's.
		 *
		 * The following is a simplified explanation of how this library works:
		 *
		 *  1. Any subclass looks at all properties it contains, and loads their initial values from the keys they represent.
		 *     Because Vala properties are stored as GLib properties, the string representation of a property replaces underscores with
		 *     hyphens (i.e. property_name becomes "property-name"). This is how this library knows which keys to load from. If the key
		 *     does not exist, it will result in a fatal error.
		 *  1. When a property of the subclass changes, the library will first verify the data before emitting a changed signal. If necessary,
		 *     the library will change the value of the property while verifying.
		 *     This is why developers should only act upon emissions of the changed () signal and never the native {@link GLib.Object.notify} signal.
		 *  1. When the corresponding key of one of the properties of the subclass changes, it will also verify the data and change it, if necessary,
		 *     before loading it into as the corresponding property's value.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "5.4.0", replacement = "GLib.Settings")]
		public abstract class Settings : GLib.Object {
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema.
			 *
			 * @param schema the name of the schema to interact with
			 */
			protected Settings (string schema);
			/**
			 * Verify the given key, changing the property if necessary. Refer to the example given for the class.
			 *
			 * @param key the key in question
			 */
			protected virtual void verify (string key);
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema and {@link GLib.SettingsBackend}.
			 *
			 * @param schema the name of the schema to interact with
			 * @param backend the desired backend to use
			 */
			protected Settings.with_backend (string schema, GLib.SettingsBackend backend);
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema, {@link GLib.SettingsBackend}, and path.
			 *
			 *
			 * @param schema the name of the schema to interact with
			 * @param backend the desired backend to use
			 * @param path the path to use
			 */
			protected Settings.with_backend_and_path (string schema, GLib.SettingsBackend backend, string path);
			/**
			 * Creates a new {@link Granite.Services.Settings} object for the supplied schema, and path.
			 *
			 * You only need to do this if you want to directly create a settings object with a schema that
			 * doesn't have a specified path of its own. That's quite rare.
			 *
			 * It is a programmer error to call this function for a schema that has an explicitly specified path.
			 *
			 * @param schema the name of the schema to interact with
			 * @param path the path to use
			 */
			protected Settings.with_path (string schema, string path);
			public GLib.Settings schema { get; construct; }
			/**
			 * This signal is to be used in place of the standard {@link GLib.Object.notify} signal.
			 *
			 * This signal ''only'' emits after a property's value was verified.
			 *
			 * Note that in the case where a property was set to an invalid value,
			 * (and thus, sanitized to a valid value), the {@link GLib.Object.notify} signal will emit
			 * twice: once with the invalid value and once with the sanitized value.
			 */
			[Signal (action = true, detailed = true, no_hooks = true, no_recurse = true, run = "first")]
			public signal void changed ();
		}
		/**
		 * This class is a wrapper to run an async command. It provides useful signals.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "GLib.AppInfo.create_from_commandline")]
		public class SimpleCommand : GLib.Object {
			/**
			 * The whole current error output
			 */
			public string error_output_str;
			/**
			 * The whole current output
			 */
			public string output_str;
			/**
			 * The whole current standard output
			 */
			public string standard_output_str;
			/**
			 * Create a new object. You will have to call `run ()` when you want to run the command.
			 *
			 * @param dir The working dir
			 * @param command The command to execute (using absolute paths like /usr/bin/make causes less
			 * strange bugs).
			 *
			 */
			public SimpleCommand (string dir, string command);
			/**
			 * Launch the command. It is async.
			 */
			public void run ();
			/**
			 * Emitted when the command is finished.
			 */
			public signal void done (int exit);
			/**
			 * When the error output is changed.
			 *
			 * @param text the new text from std.err
			 */
			public signal void error_changed (string text);
			/**
			 * When the output changed (std.out and std.err).
			 *
			 * @param text the new text
			 */
			public signal void output_changed (string text);
			/**
			 * When the standard output is changed.
			 *
			 * @param text the new text from std.out
			 */
			public signal void standard_changed (string text);
		}
		/**
		 * Utility class for frequently-used system-related functions, such as opening files, launching
		 * applications, or executing terminal commands.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class System : GLib.Object {
			public System ();
			/**
			 * Executes the specified command.
			 *
			 * @param command the command to execute
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "AppInfo.create_from_commandline")]
			public static bool execute_command (string command);
			/**
			 * Returns whether history is enabled within the Security and Privacy system settings or not. A value of true
			 * means that you should store information such as the last opened file or a history within the app.
			 *
			 * Checks the "remember_recent_files" key in "org.gnome.desktop.privacy", returning true if the schema does not exist.
			 */
			public static bool history_is_enabled ();
			/**
			 * Launches the specified application.
			 *
			 * @param app the {@link GLib.File} representing the application to launch
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "GLib.AppInfo.launch")]
			public static void launch (GLib.File app);
			/**
			 * Launches the supplied files with the specified application.
			 *
			 * @param app the {@link GLib.File} representing the application to launch
			 * @param files an array of {@link GLib.File} to open
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "GLib.AppInfo.launch")]
			public static void launch_with_files (GLib.File? app, GLib.File[] files);
			/**
			 * Opens the specified file with the default application.
			 *
			 * @param file the {@link GLib.File} to open
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "GLib.AppInfo.launch_default_for_uri")]
			public static void open (GLib.File file);
			/**
			 * Opens the specified files with the default application.
			 *
			 * @param files an array of {@link GLib.File} to open
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "GLib.AppInfo.launch_default_for_uri")]
			public static void open_files (GLib.File[] files);
			/**
			 * Opens the specified URI with the default application.  This can be used for opening websites
			 * with the default browser, etc.
			 *
			 * @param uri the URI to open
			 */
			[Version (deprecated = true, deprecated_since = "5.2.4", replacement = "GLib.AppInfo.launch_default_for_uri")]
			public static void open_uri (string uri);
		}
		/**
		 * Interface for executing and accessing properties of Contractor actions
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface Contract : GLib.Object {
			/**
			 * Executes the action on the given file
			 */
			public abstract void execute_with_file (GLib.File file) throws GLib.Error;
			/**
			 * Executes the action on the given list of files
			 */
			public abstract void execute_with_files (GLib.File[] files) throws GLib.Error;
			/**
			 * Returns the description of the contract, already internationalized
			 *
			 * @return The internationalized value of the 'Description' key in the .contract file.
			 * As of 2014, Contractor uses gettext to handle internationalization.
			 */
			public abstract string get_description ();
			/**
			 * Returns the display name of the contract, already internationalized
			 *
			 * @return The internationalized value of the 'Name' key in the .contract file.
			 * As of 2014, Contractor uses gettext to handle internationalization.
			 */
			public abstract string get_display_name ();
			/**
			 * Returns an icon for this contract
			 *
			 * @return {@link GLib.Icon} based on the 'Icon' key in the .contract file.
			 */
			public abstract GLib.Icon get_icon ();
		}
		/**
		 * This interface is used by objects that need to be serialized in a Settings.
		 * The object must have a string representation and provide these methods to
		 * translate between the string and object representations.
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SettingsSerializable : GLib.Object {
			/**
			 * Un-serializes the object from a string representation.
			 *
			 * @param s the string representation of the object
			 */
			public abstract void settings_deserialize (string s);
			/**
			 * Serializes the object into a string representation.
			 *
			 * @return the string representation of the object
			 */
			public abstract string settings_serialize ();
		}
		/**
		 * LogLevel:
		 */
		[CCode (cheader_filename = "granite.h")]
		public enum LogLevel {
			/**
			 * This level is for use in debugging.
			 */
			DEBUG,
			/**
			 * This level should be used for non-error, non-debugging that is not due to any direct event.
			 */
			INFO,
			/**
			 * This level is used to log events that have happened in the app.
			 */
			NOTIFY,
			/**
			 * This level should be used for warnings of errors that haven't happened yet.
			 */
			WARN,
			/**
			 * This level should be used by recoverable errors.
			 */
			ERROR,
			/**
			 * This level should be used only in cases of unrecoverable errors.
			 */
			FATAL
		}
		/**
		 * thrown by {@link Granite.Services.ContractorProxy}
		 */
		[CCode (cheader_filename = "granite.h")]
		public errordomain ContractorError {
			/**
			 * Usually means that Contractor is not installed or not configured properly
			 *
			 * Contractor is not a compile-time dependency, so it is possible to
			 * install an application that uses it without installing Contractor.
			 *
			 * Upon receiving this error the application should disable its Contractor-related
			 * functionality, which typically means hiding the relevant UI elements.
			 */
			SERVICE_NOT_AVAILABLE
		}
		[CCode (cheader_filename = "granite.h")]
		public static Granite.Services.IconFactory? icon_factory;
	}
	namespace StyleClass {
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_BADGE")]
		public const string BADGE;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_CATEGORY_EXPANDER")]
		public const string CATEGORY_EXPANDER;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string COMPOSITED;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string CONTENT_VIEW;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string CONTENT_VIEW_WINDOW;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string DECORATED_WINDOW;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_H1_LABEL")]
		public const string H1_TEXT;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_H2_LABEL")]
		public const string H2_TEXT;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_H3_LABEL")]
		public const string H3_TEXT;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string HELP_BUTTON;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_OVERLAY_BAR")]
		public const string OVERLAY_BAR;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Gtk.STYLE_CLASS_POPOVER")]
		public const string POPOVER;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string POPOVER_BG;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Granite.STYLE_CLASS_SOURCE_LIST")]
		public const string SOURCE_LIST;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public const string THIN_PANE_SEPARATOR;
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Gtk.STYLE_CLASS_TITLE")]
		public const string TITLE_TEXT;
	}
	namespace Widgets {
		/**
		 * This namespace contains functions to apply CSS stylesheets to widgets.
		 */
		namespace Utils {
			/**
			 * This method applies given text style to given label
			 *
			 * @param text_style text style to apply
			 * @param label label to apply style to
			 */
			[CCode (cheader_filename = "granite.h")]
			[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
			public static void apply_text_style_to_label (Granite.TextStyle text_style, Gtk.Label label);
			/**
			 * This methods returns the schema used by {@link Granite.Widgets.Utils.get_default_close_button_position}
			 * to determine the close button placement. It will first check for the pantheon/gala schema and then fallback
			 * to the default gnome one. If neither is available, null is returned. Make sure to check for this case,
			 * as otherwise your program may crash on startup.
			 *
			 * @return the schema name. If the layout could not be determined, a warning will be thrown and null will be returned
			 */
			[CCode (cheader_filename = "granite.h")]
			[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "")]
			public static string? get_button_layout_schema ();
			/**
			 * Constructs a new {@link Gtk.CssProvider} that will store the //stylesheet// data.
			 * This function uses {@link Gtk.CssProvider.load_from_data} internally so if this method fails
			 * then a warning will be thrown and null returned as a result.
			 *
			 * @param stylesheet CSS style to apply to the returned provider
			 *
			 * @return a new {@link Gtk.CssProvider}, or null in case the parsing of
			 *         //stylesheet// failed.
			 */
			[CCode (cheader_filename = "granite.h")]
			[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "Gtk.CssProvider.load_from_data")]
			public static Gtk.CssProvider? get_css_provider (string stylesheet);
			/**
			 * This method detects the close button position as configured for the window manager. If you
			 * need to know when this key changed, it's best to listen on the schema returned by
			 * {@link Granite.Widgets.Utils.get_button_layout_schema} for changes and then call this method again.
			 *
			 * @param position a {@link Granite.CloseButtonPosition} indicating where to best put the close button
			 * @return if no schema was detected by {@link Granite.Widgets.Utils.get_button_layout_schema}
			 *         or there was no close value in the button-layout string, false will be returned. The position
			 *         will be LEFT in that case.
			 */
			[CCode (cheader_filename = "granite.h")]
			[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "")]
			public static bool get_default_close_button_position (out Granite.CloseButtonPosition position);
			/**
			 * Applies colorPrimary property to the window. The colorPrimary property currently changes
			 * the color of the {@link Gtk.HeaderBar} and it's children so that the application window
			 * can have a so-called "brand color".
			 *
			 * Note that this currently only works with the default stylesheet that elementary OS uses.
			 *
			 * @param window the widget to apply the color, for most cases the widget will be actually the {@link Gtk.Window} itself
			 * @param color the color to apply
			 * @param priority priorty of change, by default {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
			 *
			 * @return the added {@link Gtk.CssProvider}, or null in case the parsing of
			 *         stylesheet failed.
			 */
			[CCode (cheader_filename = "granite.h")]
			public static Gtk.CssProvider? set_color_primary (Gtk.Widget window, Gdk.RGBA color, int priority = Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
			/**
			 * Applies the //stylesheet// to the widget.
			 *
			 * @param widget widget to apply style to
			 * @param stylesheet CSS style to apply to the widget
			 * @param class_name class name to add style to, pass null if no class should be applied to the //widget//
			 * @param priority priorty of change, for most cases this will be {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
			 *
			 * @return the {@link Gtk.CssProvider} that was applied to the //widget//.
			 */
			[CCode (cheader_filename = "granite.h")]
			[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "")]
			public static Gtk.CssProvider? set_theming (Gtk.Widget widget, string stylesheet, string? class_name, int priority);
			/**
			 * Applies a stylesheet to the given //screen//. This will affect all the
			 * widgets which are part of that screen.
			 *
			 * @param screen screen to apply style to, use {@link Gtk.Widget.get_screen} in order to get the screen that the widget is on
			 * @param stylesheet CSS style to apply to screen
			 * @param priority priorty of change, for most cases this will be {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
			 *
			 * @return the {@link Gtk.CssProvider} that was applied to the //screen//.
			 */
			[CCode (cheader_filename = "granite.h")]
			[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "Gtk.StyleContext.add_provider_for_screen")]
			public static Gtk.CssProvider? set_theming_for_screen (Gdk.Screen screen, string stylesheet, int priority);
		}
		/**
		 * This class makes an about dialog which goes in the App Menu on most apps.
		 * This class is deprecated. Applications should instead provide an Appstream appdata.xml file to describe their metadata
		 *
		 * {{../doc/images/AboutDialog.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public class AboutDialog : Granite.GtkPatch.AboutDialog {
			/**
			 * Creates a new Granite.Widgets.AboutDialog
			 */
			public AboutDialog ();
			/**
			 * The URL for the link to the website of the program.
			 */
			public string bug { get; set; }
			/**
			 * The URL for the link to the website of the program.
			 */
			public string help { get; set; }
			/**
			 * The URL for the link to the website of the program.
			 */
			public string translate { get; set; }
		}
		/**
		 * The AlertView widget shows to the user that some actions are now restricted.
		 *
		 * It can be used to show an empty view or hiding a panel when this one is disabled.
		 *
		 * {{../doc/images/AlertView.png}}
		 *
		 * ''Example''<<BR>>
		 * {{{
		 * public class AlertViewView : Gtk.Grid {
		 *     construct {
		 *         var alert = new Granite.Widgets.AlertView ("Nothing here", "Maybe you can enable <b>something</b> to hide it but <i>otherwise</i> it will stay here", "dialog-warning");
		 *         alert.show_action ("Hide this button");
		 *
		 *         alert.action_activated.connect (() => {
		 *             alert.hide_action ();
		 *         });
		 *
		 *         add (alert);
		 *     }
		 * }
		 * }}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class AlertView : Gtk.Grid {
			/**
			 * Makes new AlertView
			 *
			 * @param title the first line of text
			 * @param description the second line of text
			 * @param icon_name the icon to be shown
			 */
			public AlertView (string title, string description, string icon_name);
			/**
			 * Hides the action button.
			 */
			public void hide_action ();
			/**
			 * Creates the action button with the given label
			 *
			 * @param label the text of the action button
			 */
			public void show_action (string? label = null);
			/**
			 * The second line of text, explaining why this alert is shown.
			 * You may need to escape it with #escape_text or #printf_escaped
			 */
			public string description { get; set; }
			/**
			 * The icon name
			 */
			public string icon_name { owned get; set; }
			/**
			 * The first line of text, should be short and not contain markup.
			 */
			public string title { get; set; }
			public signal void action_activated ();
		}
		/**
		 * An App Menu is the gear menu that goes on the right of the toolbar.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "0.4.1", replacement = "Gtk.MenuButton")]
		public class AppMenu : Gtk.MenuButton {
			/**
			 * Menu item for about page.
			 */
			public Gtk.MenuItem about_item;
			/**
			 * Makes new AppMenu.
			 *
			 * @param menu menu to be turned into an AppMenu.
			 */
			public AppMenu (Gtk.Menu menu);
			/**
			 * This method adds makes a properly formatted App Menu menu from given menu
			 *
			 * @param menu menu to format
			 */
			public void add_items (Gtk.Menu menu);
			/**
			 * Makes new AppMenu with built-in about page.
			 *
			 * @param application application of AppMenu.
			 * @param menu menu to be created.
			 */
			public AppMenu.with_app (Granite.Application? application, Gtk.Menu menu);
			/**
			 * Called when showing about.
			 */
			public signal void show_about (Gtk.Widget w);
		}
		/**
		 * The Avatar widget allowes to theme & crop images with css BORDER_RADIUS property in the .avatar class.
		 *
		 * ''Example''<<BR>>
		 * {{{
		 * public class AvatarView : Gtk.Grid {
		 *     construct {
		 *         var username = GLib.Environment.get_user_name ();
		 *         var iconfile = @"/var/lib/AccountsService/icons/$username";
		 *
		 *         var avatar_dialog = new Granite.Widgets.Avatar.from_file (iconfile, 48);
		 *
		 *         var avatar_default_dialog = new Granite.Widgets.Avatar.with_default_icon (48);
		 *
		 *         row_spacing = 6;
		 *         halign = Gtk.Align.CENTER;
		 *         valign = Gtk.Align.CENTER;
		 *         attach (avatar_dialog, 0, 0, 1, 1);
		 *         attach (avatar_default_dialog, 0, 1, 1, 1);
		 *     }
		 * }
		 * }}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Avatar : Gtk.EventBox {
			/**
			 * Makes new Avatar widget
			 *
			 */
			public Avatar ();
			public override bool draw (Cairo.Context cr);
			/**
			 * Creates a new Avatar from the specified filepath and icon size
			 *
			 * @param filepath image to be used
			 * @param pixel_size to scale the image
			 */
			public Avatar.from_file (string filepath, int pixel_size);
			/**
			 * Creates a new Avatar from the specified pixbuf
			 *
			 * @param pixbuf image to be used
			 */
			public Avatar.from_pixbuf (Gdk.Pixbuf pixbuf);
			/**
			 * Load the default avatar icon from theme into the widget without applying the css style
			 *
			 * @param pixel_size size of the icon to be loaded
			 */
			public void show_default (int pixel_size);
			/**
			 * Creates a new Avatar with the default icon from theme without applying the css style
			 *
			 * @param pixel_size size of the icon to be loaded
			 */
			public Avatar.with_default_icon (int pixel_size);
			public Gdk.Pixbuf? pixbuf { get; set; }
		}
		/**
		 * A badge renderer.
		 *
		 * Informs the user quickly on the content of the corresponding view. For example
		 * it might be used to show how much songs are in a playlist or how much updates
		 * are available.
		 *
		 * {{../doc/images/cellrendererbadge.png}}
		 *
		 * @since 0.2
		 */
		[CCode (cheader_filename = "granite.h")]
		public class CellRendererBadge : Gtk.CellRenderer {
			public CellRendererBadge ();
			public override void get_preferred_height_for_width (Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
			public override void get_preferred_width (Gtk.Widget widget, out int minimum_size, out int natural_size);
			public override Gtk.SizeRequestMode get_request_mode ();
			[Version (deprecated = true, deprecated_since = "0.3", replacement = "Gtk.CellRenderer.get_preferred_size")]
			public override void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
			public override void render (Cairo.Context context, Gtk.Widget widget, Gdk.Rectangle bg_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
			public string text { get; set; }
		}
		/**
		 * An expander renderer.
		 *
		 * For it to draw an expander, the the {@link Gtk.CellRenderer.is_expander} property must
		 * be set to true; otherwise nothing is drawn. The state of the expander (i.e. expanded or
		 * collapsed) is controlled by the {@link Gtk.CellRenderer.is_expanded} property.
		 *
		 * @since 0.2
		 */
		[CCode (cheader_filename = "granite.h")]
		public class CellRendererExpander : Gtk.CellRenderer {
			public CellRendererExpander ();
			/**
			 * Gets the size of the expander arrow.
			 *
			 * The default implementation tries to retrieve the "expander-size" style property from
			 * //widget//, as it is primarily meant to be used along with a {@link Gtk.TreeView}.
			 * For those with special needs, it is recommended to override this method.
			 *
			 * @param widget Widget used to query the "expander-size" style property (should be a Gtk.TreeView.)
			 * @return Size of the expander arrow.
			 * @since 0.2
			 */
			public virtual int get_arrow_size (Gtk.Widget widget);
			public override void get_preferred_height_for_width (Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
			public override void get_preferred_width (Gtk.Widget widget, out int minimum_size, out int natural_size);
			public override Gtk.SizeRequestMode get_request_mode ();
			[Version (deprecated = true, deprecated_since = "", replacement = "Gtk.CellRenderer.get_preferred_size")]
			public override void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
			public override void render (Cairo.Context context, Gtk.Widget widget, Gdk.Rectangle bg_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
			public bool is_category_expander { get; set; }
		}
		/**
		 * A paned that can be easily collapsed by double-clicking over the pane separator.
		 * If it was previously collapsed, it is expanded, and vice-versa.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "Gtk.Paned")]
		public class CollapsiblePaned : Gtk.Paned {
			public CollapsiblePaned (Gtk.Orientation orientation);
			public Granite.CollapseMode collapse_mode { get; set; }
		}
		/**
		 * CompositedWindow is an invisible window without decorations or background.
		 *
		 * It is useful for handling different situations where the user has to
		 * "pick" something or select an area on the screen, although it can be used in other scenarios too.
		 * Most of the times the window will act as a surface to receive mouse / key press events from the user.
		 *
		 * CompositedWindow does not and will not try to set any default size. You are responsible to
		 * set it's size to e.g: the window's //screen// size to have the window cover the enire //screen// area.
		 *
		 * Note that you should provide a way for the user to exit the window since it's invisible.
		 * You can do that by connecting to {@link Gtk.Widget.key_press_event} signal and seeing if
		 * e.g: the user pressed an Escape key. You should always {@link Gtk.Widget.destroy} the window after
		 * it's not needed.
		 *
		 * Do not forget to call {@link Gtk.Widget.show_all} to actually start receiving events.
		 */
		[CCode (cheader_filename = "granite.h")]
		[Version (deprecated = true, deprecated_since = "5.5.0", replacement = "Gtk.Window")]
		public class CompositedWindow : Gtk.Window, Gtk.Buildable {
			public CompositedWindow ();
		}
		/**
		 * This class allows users to pick dates from a calendar.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class DatePicker : Gtk.Entry, Gtk.Buildable {
			/**
			 * The Calendar to create the DatePicker
			 */
			protected Gtk.Calendar calendar;
			/**
			 * Dropdown of DatePicker
			 */
			protected Gtk.EventBox dropdown;
			public DatePicker ();
			protected virtual void position_dropdown (out Gdk.Rectangle rect);
			/**
			 * Makes a new DatePicker
			 *
			 * @param format desired format of new DatePicker
			 */
			public DatePicker.with_format (string format);
			/**
			 * Current Date
			 */
			public GLib.DateTime date { get; set; }
			/**
			 * Desired format of DatePicker
			 */
			public string format { get; construct; }
			/**
			 * Sent when the date got changed
			 */
			public signal void date_changed ();
		}
		/**
		 * Tab bar widget designed for a variable number of tabs.
		 * Supports showing a "New tab" button, restoring closed tabs, "pinning" tabs, and more.
		 *
		 * {{../doc/images/DynamicNotebook.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class DynamicNotebook : Gtk.EventBox {
			public enum TabBarBehavior {
				ALWAYS,
				SINGLE,
				NEVER
			}
			/**
			 * Create a new dynamic notebook
			 */
			public DynamicNotebook ();
			public new GLib.List<Gtk.Widget> get_children ();
			public Gtk.Widget get_nth_page (int index);
			public Granite.Widgets.Tab? get_tab_by_index (int index);
			public Granite.Widgets.Tab? get_tab_by_widget (Gtk.Widget widget);
			public int get_tab_position (Granite.Widgets.Tab tab);
			public uint insert_tab (Granite.Widgets.Tab tab, int index);
			public void next_page ();
			public void previous_page ();
			public void remove_tab (Granite.Widgets.Tab tab);
			public void set_tab_position (Granite.Widgets.Tab tab, int position);
			public override void show ();
			/**
			 * The text shown in the add button tooltip
			 */
			public string add_button_tooltip { get; set; }
			public bool add_button_visible { get; set; }
			public bool allow_drag { get; set; }
			public bool allow_duplication { get; set; }
			public bool allow_new_window { get; set; }
			public bool allow_pinning { get; set; }
			public bool allow_restoring { get; set; }
			public Granite.Widgets.Tab current { get; set; }
			public bool force_left { get; set; }
			public string group_name { get; set; }
			/**
			 * Set or get the upper limit of the size of the set
			 * of restorable tabs.
			 */
			public int max_restorable_tabs { get; set; }
			/**
			 * The menu appearing when the notebook is clicked on a blank space
			 */
			public Gtk.Menu menu { get; private set; }
			/**
			 * number of pages
			 */
			public int n_tabs { get; }
			[Version (deprecated = true, deprecated_since = "0.3.1", replacement = "")]
			public bool show_icons { get; set; }
			/**
			 * Hide the tab bar and only show the pages
			 */
			public bool show_tabs { get; set; }
			/**
			 * The behavior of the tab bar and its visibility
			 */
			public Granite.Widgets.DynamicNotebook.TabBarBehavior tab_bar_behavior { get; set; }
			public GLib.List<Granite.Widgets.Tab> tabs { get; }
			public bool tabs_closable { get; set; }
			public signal bool close_tab_requested (Granite.Widgets.Tab tab);
			public signal void new_tab_requested ();
			public signal void tab_added (Granite.Widgets.Tab tab);
			public signal void tab_duplicated (Granite.Widgets.Tab duplicated_tab);
			public signal void tab_moved (Granite.Widgets.Tab tab, int x, int y);
			public signal void tab_removed (Granite.Widgets.Tab tab);
			public signal void tab_reordered (Granite.Widgets.Tab tab, int new_pos);
			public signal void tab_restored (string label, string data, GLib.Icon? icon);
			public signal void tab_switched (Granite.Widgets.Tab? old_tab, Granite.Widgets.Tab new_tab);
		}
		/**
		 * This widget is a multiple option modal switch
		 *
		 * {{../doc/images/ModeButton.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class ModeButton : Gtk.Box {
			/**
			 * Makes new ModeButton
			 */
			public ModeButton ();
			/**
			 * Appends given widget to ModeButton
			 *
			 * @param w widget to add to ModeButton
			 * @return index of new item
			 */
			public int append (Gtk.Widget w);
			/**
			 * Appends icon to ModeButton
			 *
			 * @param icon_name name of icon to append
			 * @param size desired size of icon
			 * @return index of appended item
			 */
			public int append_icon (string icon_name, Gtk.IconSize size);
			/**
			 * Appends Pixbuf to ModeButton
			 *
			 * @param pixbuf Gdk.Pixbuf to append to ModeButton
			 */
			public int append_pixbuf (Gdk.Pixbuf pixbuf);
			/**
			 * Appends text to ModeButton
			 *
			 * @param text text to append to ModeButton
			 * @return index of new item
			 */
			public int append_text (string text);
			/**
			 * Clears all children
			 */
			public void clear_children ();
			/**
			 * Removes item at given index
			 *
			 * @param index index of item to remove
			 */
			public new void remove (int index);
			/**
			 * Sets item of given index's activity
			 *
			 * @param new_active_index index of changed item
			 */
			public void set_active (int new_active_index);
			/**
			 * Changes visibility of item of given index
			 *
			 * @param index index of item to be modified
			 * @param val value to change the visiblity to
			 */
			public void set_item_visible (int index, bool val);
			/**
			 * Read-only length of current ModeButton
			 */
			public uint n_items { get; }
			/**
			 * Index of currently selected item.
			 */
			public int selected { get; set; }
			public signal void mode_added (int index, Gtk.Widget widget);
			public signal void mode_changed (Gtk.Widget widget);
			public signal void mode_removed (int index, Gtk.Widget widget);
		}
		/**
		 * A floating status bar that displays a single line of text.
		 *
		 * This widget is intended to be used as an overlay for a {@link Gtk.Overlay} and is placed in the
		 * bottom-right corner by default. You can change its position like you would do for any overlay
		 * widget used in a {@link Gtk.Overlay}.
		 *
		 * The Overlay Bar displays a single line of text that can be changed using the "status" property.
		 *
		 * {{../doc/images/OverlayBar.png}}
		 *
		 * This widget tries to avoid getting in front of the content being displayed inside the {@link Gtk.Overlay}
		 * by moving itself horizontally to the opposite side from the current one when the mouse pointer enters
		 * the widget.
		 *
		 * For this widget to function correctly, the event {@link Gdk.EventMask.ENTER_NOTIFY_MASK} must be set
		 * for the parent {@link Gtk.Overlay}. Overlay Bar's constructor takes care of this automatically, if
		 * the parent is supplied as a parameter, but you have to be careful not to unset the event for
		 * the {@link Gtk.Overlay} at a later stage.
		 *
		 * ''Example''<<BR>>
		 * {{{
		 * public class OverlayBarView : Gtk.Overlay {
		 *     construct {
		 *         var button = new Gtk.ToggleButton.with_label ("Show Spinner");
		 * 
		 *         var grid = new Gtk.Grid ();
		 *         grid.halign = Gtk.Align.CENTER;
		 *         grid.valign = Gtk.Align.CENTER;
		 *         grid.add (button);
		 * 
		 *         var overlaybar = new Granite.Widgets.OverlayBar (this);
		 *         overlaybar.label = "Hover the OverlayBar to change its position";
		 *         
		 *         add (grid);
		 * 
		 *         button.toggled.connect (() => {
		 *             overlaybar.active = button.active;
		 *         });
		 *     }
		 * }
		 * }}}
		 *
		 * @see Gtk.Overlay
		 *
		 */
		[CCode (cheader_filename = "granite.h")]
		public class OverlayBar : Gtk.EventBox {
			/**
			 * Create a new Overlay Bar, and add it to the {@link Gtk.Overlay}.
			 */
			public OverlayBar (Gtk.Overlay? overlay = null);
			public override void parent_set (Gtk.Widget? old_parent);
			/**
			 * Whether to display a {@link Gtk.Spinner} inside the Overlay Bar.
			 */
			public bool active { get; set; }
			/**
			 * Text displayed inside the Overlay Bar.
			 */
			public string label { get; set; }
			/**
			 * overlay: Deprecated property, always returns null.
			 */
			[Version (deprecated = true, deprecated_since = "0.5.1", replacement = "")]
			public Gtk.Overlay? overlay { get; construct; }
			/**
			 * Status text displayed inside the Overlay Bar.
			 */
			[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "OverlayBar.label")]
			public string status { get; set; }
		}
		/**
		 * A widget that can display a list of items organized in categories.
		 *
		 * The source list widget consists of a collection of items, some of which are also expandable (and
		 * thus can contain more items). All the items displayed in the source list are children of the widget's
		 * root item. The API is meant to be used as follows:
		 *
		 * 1. Create the items you want to display in the source list, setting the appropriate values for their
		 * properties. The desired hierarchy is achieved by creating expandable items and adding items to them.
		 * These will be displayed as descendants in the widget's tree structure. The expandable items that are
		 * not nested inside any other item are considered to be at root level, and should be added to
		 * the widget's root item.<<BR>>
		 *
		 * Expandable items located at the root level are treated as categories, and only support text.
		 *
		 * ''Example''<<BR>>
		 * The final tree will have the following structure:
		 * {{{
		 * Libraries
		 *   Music
		 * Stores
		 *   My Store
		 *      Music
		 *      Podcasts
		 * Devices
		 *   Player 1
		 *   Player 2
		 * }}}
		 *
		 * {{{
		 * var library_category = new Granite.Widgets.SourceList.ExpandableItem ("Libraries");
		 * var store_category = new Granite.Widgets.SourceList.ExpandableItem ("Stores");
		 * var device_category = new Granite.Widgets.SourceList.ExpandableItem ("Devices");
		 *
		 * var music_item = new Granite.Widgets.SourceList.Item ("Music");
		 *
		 * // "Libraries" will be the parent category of "Music"
		 * library_category.add (music_item);
		 *
		 * // We plan to add sub-items to the store, so let's use an expandable item
		 * var my_store_item = new Granite.Widgets.SourceList.ExpandableItem ("My Store");
		 * store_category.add (my_store_item);
		 *
		 * var my_store_podcast_item = new Granite.Widgets.SourceList.Item ("Podcasts");
		 * var my_store_music_item = new Granite.Widgets.SourceList.Item ("Music");
		 *
		 * my_store_item.add (my_store_music_item);
		 * my_store_item.add (my_store_podcast_item);
		 *
		 * var player1_item = new Granite.Widgets.SourceList.Item ("Player 1");
		 * var player2_item = new Granite.Widgets.SourceList.Item ("Player 2");
		 *
		 * device_category.add (player1_item);
		 * device_category.add (player2_item);
		 * }}}
		 *
		 * 2. Create a source list widget.<<BR>>
		 * {{{
		 * var source_list = new Granite.Widgets.SourceList ();
		 * }}}
		 *
		 * 3. Add root-level items to the {@link Granite.Widgets.SourceList.root} item.
		 * This item only serves as a container, and all its properties are ignored by the widget.
		 *
		 * {{{
		 * // This will add the main categories (including their children) to the source list. After
		 * // having being added to be widget, any other item added to any of these items
		 * // (or any other child item in a deeper level) will be automatically added too.
		 * // There's no need to deal with the source list widget directly.
		 *
		 * var root = source_list.root;
		 *
		 * root.add (library_category);
		 * root.add (store_category);
		 * root.add (device_category);
		 * }}}
		 *
		 * The steps mentioned above are enough for initializing the source list. Future changes to the items'
		 * properties are ''automatically'' reflected by the widget.
		 *
		 * Final steps would involve connecting handlers to the source list events, being
		 * {@link Granite.Widgets.SourceList.item_selected} the most important, as it indicates that
		 * the selection was modified.
		 *
		 * Pack the source list into the GUI using the {@link Gtk.Paned} widget.
		 * This is usually done as follows:
		 * {{{
		 * var pane = new Gtk.Paned (Gtk.Orientation.HORIZONTAL);
		 * pane.pack1 (source_list, false, false);
		 * pane.pack2 (content_area, true, false);
		 * }}}
		 *
		 * @since 0.2
		 * @see Gtk.Paned
		 */
		[CCode (cheader_filename = "granite.h")]
		public class SourceList : Gtk.ScrolledWindow {
			/**
			 * An item that can contain more items.
			 *
			 * It supports all the properties inherited from {@link Granite.Widgets.SourceList.Item},
			 * and behaves like a normal item, except when it is located at the root level; in that case,
			 * the following properties are ignored by the widget:
			 *
			 * * {@link Granite.Widgets.SourceList.Item.selectable}
			 * * {@link Granite.Widgets.SourceList.Item.editable}
			 * * {@link Granite.Widgets.SourceList.Item.icon}
			 * * {@link Granite.Widgets.SourceList.Item.activatable}
			 * * {@link Granite.Widgets.SourceList.Item.badge}
			 *
			 * Root-level expandable items (i.e. Main Categories) are ''not'' displayed when they contain
			 * zero visible children.
			 *
			 * @since 0.2
			 */
			public class ExpandableItem : Granite.Widgets.SourceList.Item {
				/**
				 * Creates a new {@link Granite.Widgets.SourceList.ExpandableItem}
				 *
				 * @param name Title of the item.
				 * @return (transfer full) A new {@link Granite.Widgets.SourceList.ExpandableItem}.
				 * @since 0.2
				 */
				public ExpandableItem (string name = "");
				/**
				 * Adds an item.
				 *
				 * {@link Granite.Widgets.SourceList.ExpandableItem.child_added} is fired after the item is added.
				 *
				 * While adding a child item, //the item it's being added to will set itself as the parent//.
				 * Please note that items are required to have their //parent// property set to //null// before
				 * being added, so make sure the item is removed from its previous parent before attempting
				 * to add it to another item. For instance:
				 * {{{
				 * if (item.parent != null)
				 *     item.parent.remove (item); // this will set item's parent to null
				 * new_parent.add (item);
				 * }}}
				 *
				 * @param item The item to add. Its parent __must__ be //null//.
				 * @see Granite.Widgets.SourceList.ExpandableItem.child_added
				 * @see Granite.Widgets.SourceList.ExpandableItem.remove
				 * @since 0.2
				 */
				public void add (Granite.Widgets.SourceList.Item item);
				/**
				 * Removes all the items contained by the item. It works similarly to
				 * {@link Granite.Widgets.SourceList.ExpandableItem.remove}.
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.remove
				 * @see Granite.Widgets.SourceList.ExpandableItem.child_removed
				 * @since 0.2
				 */
				public void clear ();
				/**
				 * Collapses the item and/or its children.
				 *
				 * @param inclusive Whether to also collapse this item (true), or only its children (false).
				 * @param recursive Whether to recursively collapse all the children (true), or only
				 * immediate children (false).
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void collapse_all (bool inclusive = true, bool recursive = true);
				/**
				 * Recursively collapses the item along with its parent(s).
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void collapse_with_parents ();
				/**
				 * Checks whether the item contains the specified child.
				 *
				 * This method only considers the item's immediate children.
				 *
				 * @param item Item to search.
				 * @return Whether the item was found or not.
				 * @since 0.2
				 */
				public bool contains (Granite.Widgets.SourceList.Item item);
				/**
				 * Expands the item and/or its children.
				 *
				 * @param inclusive Whether to also expand this item (true), or only its children (false).
				 * @param recursive Whether to recursively expand all the children (true), or only
				 * immediate children (false).
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void expand_all (bool inclusive = true, bool recursive = true);
				/**
				 * Recursively expands the item along with its parent(s).
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public void expand_with_parents ();
				/**
				 * Removes an item.
				 *
				 * The {@link Granite.Widgets.SourceList.ExpandableItem.child_removed} signal is fired
				 * //after removing the item//. Finally (i.e. after all the handlers have been invoked),
				 * the item's {@link Granite.Widgets.SourceList.Item.parent} property is set to //null//.
				 * This has the advantage of letting signal handlers know the parent from which //item//
				 * is being removed.
				 *
				 * @param item The item to remove. This will fail if item has a different parent.
				 * @see Granite.Widgets.SourceList.ExpandableItem.child_removed
				 * @see Granite.Widgets.SourceList.ExpandableItem.clear
				 * @since 0.2
				 */
				public void remove (Granite.Widgets.SourceList.Item item);
				/**
				 * The item's children.
				 *
				 * This returns a newly-created list containing the children.
				 * It's safe to iterate it while removing items with
				 * {@link Granite.Widgets.SourceList.ExpandableItem.remove}
				 *
				 * @since 0.2
				 */
				public Gee.Collection<Granite.Widgets.SourceList.Item> children { owned get; }
				/**
				 * Whether the item is collapsible or not.
				 *
				 * When set to //false//, the item is //always// expanded and the expander is
				 * not shown. Please note that this will also affect the value returned by the
				 * {@link Granite.Widgets.SourceList.ExpandableItem.expanded} property.
				 *
				 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
				 * @since 0.2
				 */
				public bool collapsible { get; set; }
				public bool expanded { get; set; }
				/**
				 * Number of children contained by the item.
				 *
				 * @since 0.2
				 */
				public uint n_children { get; }
				/**
				 * Emitted when an item is added.
				 *
				 * @param item Item added.
				 * @see Granite.Widgets.SourceList.ExpandableItem.add
				 * @since 0.2
				 */
				public signal void child_added (Granite.Widgets.SourceList.Item item);
				/**
				 * Emitted when an item is removed.
				 *
				 * @param item Item removed.
				 * @see Granite.Widgets.SourceList.ExpandableItem.remove
				 * @since 0.2
				 */
				public signal void child_removed (Granite.Widgets.SourceList.Item item);
				/**
				 * Emitted when the item is expanded or collapsed.
				 *
				 * @since 0.2
				 */
				public virtual signal void toggled ();
			}
			/**
			 * A source list entry.
			 *
			 * Any change made to any of its properties will be ''automatically'' reflected
			 * by the {@link Granite.Widgets.SourceList} widget.
			 *
			 * @since 0.2
			 */
			public class Item : GLib.Object {
				/**
				 * Creates a new {@link Granite.Widgets.SourceList.Item}.
				 *
				 * @param name Name of the item.
				 * @return (transfer full) A new {@link Granite.Widgets.SourceList.Item}.
				 * @since 0.2
				 */
				public Item (string name = "");
				/**
				 * Invoked when the item is secondary-clicked or when the usual menu keys are pressed.
				 *
				 * Note that since Granite 5.0, right clicking on an item no longer selects/activates it, so
				 * any context menu items should be actioned on the item instance rather than the selected item
				 * in the SourceList
				 *
				 * @return A {@link Gtk.Menu} or //null// if nothing should be displayed.
				 * @since 0.2
				 */
				public virtual Gtk.Menu? get_context_menu ();
				/**
				 * An activatable icon that works like a button.
				 *
				 * It can be used for e.g. showing an //"eject"// icon on a device's item.
				 *
				 * @see Granite.Widgets.SourceList.Item.action_activated
				 * @since 0.2
				 */
				public GLib.Icon activatable { get; set; }
				/**
				 * The tooltip for the activatable icon.
				 *
				 * @since 5.0
				 */
				public string activatable_tooltip { get; set; }
				/**
				 * A badge shown next to the item's name.
				 *
				 * It can be used for displaying the number of unread messages in the "Inbox" item,
				 * for instance.
				 *
				 * @since 0.2
				 */
				public string badge { get; set; }
				/**
				 * Whether the item's name can be edited from within the source list.
				 *
				 * When this property is set to //true//, users can edit the item by pressing
				 * the F2 key, or by double-clicking its name.
				 *
				 * ''This property only works for selectable items''.
				 *
				 * @see Granite.Widgets.SourceList.Item.selectable
				 * @see Granite.Widgets.SourceList.start_editing_item
				 * @since 0.2
				 */
				public bool editable { get; set; }
				/**
				 * Primary icon.
				 *
				 * This property should be used to give the user an idea of what the item represents
				 * (i.e. content type.)
				 *
				 * @since 0.2
				 */
				public GLib.Icon icon { get; set; }
				/**
				 * Markup to be used instead of {@link Granite.Widgets.SourceList.ExpandableItem.name}
				 * This would mean that &, <, etc have to be escaped in the text, but basic formatting
				 * can be done on the item with HTML style tags.
				 *
				 * Note: Only the {@link Granite.Widgets.SourceList.ExpandableItem.name} property
				 * is modified for editable items. So this property will be need to updated and
				 * reformatted with editable items.
				 *
				 * @since 5.0
				 */
				public string? markup { get; set; }
				/**
				 * The item's name. Primary and most important information.
				 *
				 * @since 0.2
				 */
				public string name { get; set; }
				/**
				 * Parent {@link Granite.Widgets.SourceList.ExpandableItem} of the item.
				 * ''Must not'' be modified.
				 *
				 * @since 0.2
				 */
				public Granite.Widgets.SourceList.ExpandableItem parent { get; internal set; }
				/**
				 * Whether the item can be selected or not.
				 *
				 * Setting this property to true doesn't guarantee that the item will actually be
				 * selectable, since there are other external factors to take into account, like the
				 * item's {@link Granite.Widgets.SourceList.Item.visible} property; whether the item is
				 * a category; the parent item is collapsed, etc.
				 *
				 * @see Granite.Widgets.SourceList.Item.visible
				 * @since 0.2
				 */
				public bool selectable { get; set; }
				/**
				 * The item's tooltip. If set to null (default), the tooltip for the item will be the
				 * contents of the {@link Granite.Widgets.SourceList.Item.name} property.
				 *
				 * @since 5.3
				 */
				public string? tooltip { get; set; }
				/**
				 * Whether the item should appear in the source list's tree or not.
				 *
				 * @since 0.2
				 */
				public bool visible { get; set; }
				/**
				 * The {@link Granite.Widgets.SourceList.Item.activatable} icon was activated.
				 *
				 * @see Granite.Widgets.SourceList.Item.activatable
				 * @since 0.2
				 */
				public virtual signal void action_activated ();
				/**
				 * Emitted when the item is double-clicked or when it is selected and one of the keys:
				 * Space, Shift+Space, Return or Enter is pressed. This signal is //also// for
				 * editable items.
				 *
				 * @since 0.2
				 */
				public virtual signal void activated ();
				/**
				 * Emitted when the user has finished editing the item's name.
				 *
				 * By default, if the name doesn't consist of white space, it is automatically assigned
				 * to the {@link Granite.Widgets.SourceList.Item.name} property. The default behavior can
				 * be changed by overriding this signal.
				 * @param new_name The item's new name (result of editing.)
				 * @since 0.2
				 */
				public virtual signal void edited (string new_name);
			}
			/**
			 * A {@link Granite.Widgets.SourceList.VisibleFunc} should return true if the item should be
			 * visible; false otherwise. If //item//'s {@link Granite.Widgets.SourceList.Item.visible}
			 * property is set to //false//, then it won't be displayed even if this method returns //true//.
			 *
			 * It is important to note that the method ''must not modify any property of //item//''.
			 * Doing so would result in an infinite loop, freezing the application's user interface.
			 * This happens because the source list invokes this method to "filter" an item after
			 * any of its properties changes, so by modifying a property this method would be invoking
			 * itself again.
			 *
			 * For most use cases, modifying the {@link Granite.Widgets.SourceList.Item.visible} property is enough.
			 *
			 * The advantage of using this method is that its nature is non-destructive, and the
			 * changes it makes can be easily reverted (see {@link Granite.Widgets.SourceList.refilter}).
			 *
			 * @param item Item to be checked.
			 * @return Whether //item// should be visible or not.
			 * @since 0.2
			 */
			public delegate bool VisibleFunc (Granite.Widgets.SourceList.Item item);
			/**
			 * Creates a new {@link Granite.Widgets.SourceList}.
			 *
			 * @return A new {@link Granite.Widgets.SourceList}.
			 * @since 0.2
			 */
			public SourceList (Granite.Widgets.SourceList.ExpandableItem root = new Granite.Widgets.SourceList.ExpandableItem (""));
			/**
			 * Undoes the effect of {@link Granite.Widgets.SourceList.enable_drag_dest}
			 *
			 * @see Granite.Widgets.SourceList.enable_drag_dest
			 * @since 0.3
			 */
			public void disable_drag_dest ();
			/**
			 * Undoes the effect of {@link Granite.Widgets.SourceList.enable_drag_source}
			 *
			 * @see Granite.Widgets.SourceList.enable_drag_source
			 * @since 0.3
			 */
			public void disable_drag_source ();
			/**
			 * Turns Source List into a //drop destination//.
			 *
			 * This enables items that implement {@link Granite.Widgets.SourceListDragDest}
			 * to receive data from external widgets via drag-and-drop.
			 *
			 * @param dest_entries an array of {@link Gtk.TargetEntry}s indicating the drop
			 * types that Source List items will accept.
			 * @param actions a bitmask of possible actions for a drop onto Source List items.
			 * @see Granite.Widgets.SourceListDragDest
			 * @see Granite.Widgets.SourceList.disable_drag_dest
			 * @since 0.3
			 */
			public void enable_drag_dest (Gtk.TargetEntry[] dest_entries, Gdk.DragAction actions);
			/**
			 * Turns Source List into a //drag source//.
			 *
			 * This enables items that implement {@link Granite.Widgets.SourceListDragSource}
			 * to be dragged outside the Source List and drop data into external widgets.
			 *
			 * @param src_entries an array of {@link Gtk.TargetEntry}s indicating the targets
			 * that the drag will support.
			 * @see Granite.Widgets.SourceListDragSource
			 * @see Granite.Widgets.SourceList.disable_drag_source
			 * @since 0.3
			 */
			public void enable_drag_source (Gtk.TargetEntry[] src_entries);
			/**
			 * Gets the first visible child of an expandable item.
			 *
			 * @param parent Parent of the child to look up.
			 * @return The first visible child of //parent//, or null if it was not found.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_first_child (Granite.Widgets.SourceList.ExpandableItem parent);
			/**
			 * Gets the last visible child of an expandable item.
			 *
			 * @param parent Parent of the child to look up.
			 * @return The last visible child of //parent//, or null if it was not found.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_last_child (Granite.Widgets.SourceList.ExpandableItem parent);
			/**
			 * Gets the number of visible children of an expandable item.
			 *
			 * @param parent Item to query.
			 * @return Number of visible children of //parent//.
			 * @since 0.2
			 */
			public uint get_n_visible_children (Granite.Widgets.SourceList.ExpandableItem parent);
			/**
			 * Gets the next item with respect to //reference//.
			 *
			 * @param reference Item to use as reference.
			 * @return The item that appears after //reference//, or //null// if there's none.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_next_item (Granite.Widgets.SourceList.Item reference);
			/**
			 * Gets the previous item with respect to //reference//.
			 *
			 * @param reference Item to use as reference.
			 * @return The item that appears before //reference//, or //null// if there's none.
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? get_previous_item (Granite.Widgets.SourceList.Item reference);
			/**
			 * Checks whether //item// is part of the source list.
			 *
			 * @param item The item to query.
			 * @return //true// if the item belongs to the source list; //false// otherwise.
			 * @since 0.2
			 */
			public bool has_item (Granite.Widgets.SourceList.Item item);
			/**
			 * Queries the actual expansion state of //item//.
			 *
			 * @see Granite.Widgets.SourceList.ExpandableItem.expanded
			 * @return Whether //item// is expanded or not.
			 * @since 0.2
			 */
			public bool is_item_expanded (Granite.Widgets.SourceList.Item item);
			/**
			 * Applies the filter method set by {@link Granite.Widgets.SourceList.set_filter_func}
			 * to all the items that are part of the current tree.
			 *
			 * @see Granite.Widgets.SourceList.VisibleFunc
			 * @see Granite.Widgets.SourceList.set_filter_func
			 * @since 0.2
			 */
			public void refilter ();
			/**
			 * Scrolls the source list tree to make //item// visible.
			 *
			 * {@link Granite.Widgets.SourceList.ExpandableItem.expand_with_parents} is called
			 * for the item's parent if //expand_parents// is //true//, to make sure it's not
			 * hidden behind a collapsed row.
			 *
			 * If use_align is //false//, then the row_align argument is ignored, and the tree
			 * does the minimum amount of work to scroll the item onto the screen. This means that
			 * the item will be scrolled to the edge closest to its current position. If the item
			 * is currently visible on the screen, nothing is done.
			 *
			 * @param item Item to scroll to.
			 * @param expand_parents Whether to recursively expand item's parent in case they are collapsed.
			 * @param use_align Whether to use the //row_align// argument.
			 * @param row_align The vertical alignment of //item//. 0.0 means top, 0.5 center, and 1.0 bottom.
			 * @return //true// if successful; //false// otherwise.
			 * @since 0.2
			 */
			public bool scroll_to_item (Granite.Widgets.SourceList.Item item, bool expand_parents = true, bool use_align = false, float row_align = 0);
			/**
			 * Sets the method used for filtering out items.
			 *
			 * @param visible_func The method to use for filtering items.
			 * @param refilter Whether to call {@link Granite.Widgets.SourceList.refilter} using the new function.
			 * @see Granite.Widgets.SourceList.VisibleFunc
			 * @see Granite.Widgets.SourceList.refilter
			 * @since 0.2
			 */
			public void set_filter_func (Granite.Widgets.SourceList.VisibleFunc? visible_func, bool refilter);
			/**
			 * If //item// is editable, this activates the editor; otherwise, it does nothing.
			 * If an item was already being edited, this will fail.
			 *
			 * @param item Item to edit.
			 * @see Granite.Widgets.SourceList.Item.editable
			 * @see Granite.Widgets.SourceList.editing
			 * @see Granite.Widgets.SourceList.stop_editing
			 * @return true if the editing started successfully; false otherwise.
			 * @since 0.2
			 */
			public bool start_editing_item (Granite.Widgets.SourceList.Item item);
			/**
			 * Cancels any editing operation going on.
			 *
			 * @see Granite.Widgets.SourceList.editing
			 * @see Granite.Widgets.SourceList.start_editing_item
			 * @since 0.2
			 */
			public void stop_editing ();
			/**
			 * Whether an item is being edited.
			 *
			 * @see Granite.Widgets.SourceList.start_editing_item
			 * @since 0.2
			 */
			public bool editing { get; }
			/**
			 * Text ellipsize mode.
			 *
			 * @since 0.2
			 */
			public Pango.EllipsizeMode ellipsize_mode { get; set; }
			/**
			 * Root-level expandable item.
			 *
			 * This item contains the first-level source list items. It //only serves as an item container//.
			 * It is used to add and remove items to/from the widget.
			 *
			 * Internally, it allows the source list to connect to its {@link Granite.Widgets.SourceList.ExpandableItem.child_added}
			 * and {@link Granite.Widgets.SourceList.ExpandableItem.child_removed} signals in order to monitor
			 * new children additions/removals.
			 *
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.ExpandableItem root { get; set; }
			/**
			 * The current selected item.
			 *
			 * Setting it to //null// un-selects the previously selected item, if there was any.
			 * {@link Granite.Widgets.SourceList.ExpandableItem.expand_with_parents} is called on the
			 * item's parent to make sure it's possible to select it.
			 *
			 * @since 0.2
			 */
			public Granite.Widgets.SourceList.Item? selected { get; set; }
			/**
			 * Emitted when the source list selection changes.
			 *
			 * @param item Selected item; //null// if nothing is selected.
			 * @since 0.2
			 */
			public virtual signal void item_selected (Granite.Widgets.SourceList.Item? item);
		}
		/**
		 * An horizontal bar showing the remaining amount of space.
		 *
		 * {{../doc/images/StorageBar.png}}
		 *
		 * ''Example''<<BR>>
		 * {{{
		 * public class StorageView : Gtk.Grid {
		 *     construct {
		 *         var file_root = GLib.File.new_for_path ("/");
		 *
		 *         try {
		 *             var info = file_root.query_filesystem_info (GLib.FileAttribute.FILESYSTEM_SIZE, null);
		 *
		 *             var size = info.get_attribute_uint64 (GLib.FileAttribute.FILESYSTEM_SIZE);
		 *
		 *             var storage = new Granite.Widgets.StorageBar.with_total_usage (size, size/2);
		 *             storage.update_block_size (Granite.Widgets.StorageBar.ItemDescription.AUDIO, size/40);
		 *             storage.update_block_size (Granite.Widgets.StorageBar.ItemDescription.VIDEO, size/30);
		 *             storage.update_block_size (Granite.Widgets.StorageBar.ItemDescription.APP, size/20);
		 *             storage.update_block_size (Granite.Widgets.StorageBar.ItemDescription.PHOTO, size/10);
		 *             storage.update_block_size (Granite.Widgets.StorageBar.ItemDescription.FILES, size/5);
		 *
		 *             add (storage);
		 *         } catch (Error e) {
		 *             critical (e.message);
		 *         }
		 *     }
		 * }
		 * }}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class StorageBar : Gtk.Box {
			public enum ItemDescription {
				OTHER,
				AUDIO,
				VIDEO,
				PHOTO,
				APP,
				FILES;
				public static string? get_class (Granite.Widgets.StorageBar.ItemDescription description);
				public static string get_name (Granite.Widgets.StorageBar.ItemDescription description);
			}
			/**
			 * Creates a new StorageBar widget with the given amount of space.
			 *
			 * @param storage the total amount of space.
			 */
			public StorageBar (uint64 storage);
			/**
			 * Update the specified block with a given amount of space.
			 *
			 * @param description the category to update.
			 * @param size the size of the category or 0 to hide.
			 */
			public void update_block_size (Granite.Widgets.StorageBar.ItemDescription description, uint64 size);
			/**
			 * Creates a new StorageBar widget with the given amount of space.an a larger total usage block
			 *
			 * @param storage the total amount of space.
			 * @param usage the amount of space used.
			 */
			public StorageBar.with_total_usage (uint64 storage, uint64 total_usage);
			public int inner_margin_sides { get; set; }
			public uint64 storage { get; set; }
			public uint64 total_usage { get; set; }
		}
		/**
		 * This is a standard tab which can be used in a notebook to form a tabbed UI.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Tab : Gtk.EventBox {
			/**
			 * An optional delegate that is called when the tab is dropped from the set
			 * of restorable tabs in DynamicNotebook.
			 * A tab is dropped either when Clear All is pressed, or when
			 * the tab is the oldest tab in the set of restorable tabs and
			 * the number of restorable tabs has exceeded the upper limit.
			 */
			public Granite.WidgetsDroppedDelegate dropped_callback;
			/**
			 * With this you can construct a Tab. It is linked to the page that is shown on focus.
			 * A Tab can have a icon on the right side. You can pass null on the constructor to
			 * create a tab without a icon.
			 **/
			public Tab (string? label = null, GLib.Icon? icon = null, Gtk.Widget? page = null);
			public void close ();
			public Pango.EllipsizeMode ellipsize_mode { get; set; }
			[Version (deprecated = true, deprecated_since = "0.3", replacement = "")]
			public bool fixed { get; set; }
			public GLib.Icon? icon { owned get; set; }
			public string label { get; set; }
			public Gtk.Menu menu { get; set; }
			public Gtk.Widget page { get; set; }
			public bool pinnable { get; set; }
			public bool pinned { get; set; }
			/**
			 * Data which will be kept once the tab is deleted, and which will be used by
			 * the application to restore the data into the restored tab. Let it empty if
			 * the tab should not be restored.
			 **/
			public string restore_data { get; set; }
			public bool working { get; set; }
		}
		/**
		 * This widget allows users to easily pick a time.
		 */
		[CCode (cheader_filename = "granite.h")]
		public class TimePicker : Gtk.Entry {
			public TimePicker ();
			[Version (deprecated = true, deprecated_since = "5.2.0")]
			protected virtual void position_dropdown (out int x, out int y);
			/**
			 * Creates a new TimePicker.
			 *
			 * @param format_12 The desired custom 12h format. For example "%l:%M %p".
			 * @param format_24 The desired custom 24h format. For example "%H:%M".
			 */
			public TimePicker.with_format (string format_12, string format_24);
			/**
			 * Format used in 12h mode
			 */
			public string format_12 { get; construct; }
			/**
			 * Format used in 24h mode
			 */
			public string format_24 { get; construct; }
			/**
			 * Current time
			 */
			public GLib.DateTime time { get; set; }
			/**
			 * Sent when the time got changed
			 */
			public signal void time_changed ();
		}
		/**
		 * Toasts are small in-app notifications that provide feedback about an operation
		 * in a small popup. They only fill the space required to show the message and do
		 * not block the UI.
		 *
		 * Granite.Widgets.Toast will get the style class .app-notification
		 *
		 * {{../doc/images/Toast.png}}
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Toast : Gtk.Revealer {
			/**
			 * Creates a new Toast with #title as its title
			 */
			public Toast (string title);
			/**
			 * Sends the Toast on behalf of #this
			 */
			public void send_notification ();
			/**
			 * Sets the default action button label of #this to #label and hides the
			 * button if #label is #null.
			 */
			public void set_default_action (string? label);
			/**
			 * The notification text label to be displayed inside of #this
			 */
			public string title { get; set construct; }
			/**
			 * Emitted when the Toast is closed by activating the close button
			 */
			public signal void closed ();
			/**
			 * Emitted when the default action button is activated
			 */
			public signal void default_action ();
		}
		/**
		 * This class is for making a first-launch screen easily
		 *
		 * It can be used to create a list of one-time action items that need to be executed in order to setup the app.
		 *
		 * Granite.Widgets.Welcome will get the style class `welcome`.
		 *
		 * {{../doc/images/Welcome.png}}
		 *
		 * ''Example''<<BR>>
		 * {{{
		 * public class WelcomeView : Gtk.Grid {
		 *     construct {
		 *         var welcome = new Granite.Widgets.Welcome ("Granite Demo", "This is a demo of the Granite library.");
		 *         welcome.append ("text-x-vala", "Visit Valadoc", "The canonical source for Vala API references.");
		 *         welcome.append ("text-x-source", "Get Granite Source", "Granite's source code is hosted on GitHub.");
		 *
		 *         add (welcome);
		 *
		 *         welcome.activated.connect ((index) => {
		 *             switch (index) {
		 *                 case 0:
		 *                     try {
		 *                         AppInfo.launch_default_for_uri ("https://valadoc.org/granite/Granite.html", null);
		 *                     } catch (Error e) {
		 *                         warning (e.message);
		 *                     }
		 *
		 *                     break;
		 *                 case 1:
		 *                     try {
		 *                         AppInfo.launch_default_for_uri ("https://github.com/elementary/granite", null);
		 *                     } catch (Error e) {
		 *                         warning (e.message);
		 *                     }
		 *
		 *                     break;
		 *             }
		 *         });
		 *     }
		 * }
		 * }}}
		 *
		 */
		[CCode (cheader_filename = "granite.h")]
		public class Welcome : Gtk.EventBox {
			/**
			 * List of buttons for action items
			 */
			protected new GLib.List<Gtk.Button> children;
			/**
			 * Grid for action items
			 */
			protected Gtk.Grid options;
			/**
			 * Makes new Welcome Page
			 *
			 * @param title_text main title for new Welcome Page
			 * @param subtitle_text subtitle text for new Welcome Page
			 */
			public Welcome (string title_text, string subtitle_text);
			/**
			 * Appends new action item to welcome page with a {@link Gtk.Image.from_icon_name}
			 *
			 * @param icon_name named icon to be set as icon for action item
			 * @param option_text text to be set as the title for action item. It should use Title Case.
			 * @param description_text text to be set as description for action item. It should use sentence case.
			 * @return index of new item
			 */
			public int append (string icon_name, string option_text, string description_text);
			/**
			 * Appends new action item to welcome page with a {@link Gtk.Image} icon
			 *
			 * @param image image to be set as icon for action item
			 * @param option_text text to be set as the header for action item
			 * @param description_text text to be set as description for action item
			 * @return index of new item
			 */
			public int append_with_image (Gtk.Image? image, string option_text, string description_text);
			/**
			 * Appends new action item to welcome page with a {link Gdk.Pixbuf} icon
			 *
			 * @param pixbuf pixbuf to be set as icon for action item
			 * @param option_text text to be set as the header for action item
			 * @param description_text text to be set as description for action item
			 * @return index of new item
			 */
			public int append_with_pixbuf (Gdk.Pixbuf? pixbuf, string option_text, string description_text);
			/**
			 * Returns a welcome button by index
			 *
			 * @param index index of action item to be returned
			 * @return welcome button at //index//, or //null// if //index// is invalid.
			 * @since 0.3
			 */
			public Granite.Widgets.WelcomeButton? get_button_from_index (int index);
			/**
			 * Removes action item of given index
			 *
			 * @param index index of action item to remove
			 */
			public void remove_item (uint index);
			/**
			 * Sets action item of given index sensitivity
			 *
			 * @param index index of action item to be changed
			 * @param val value deteriming whether the action item is senstitive
			 */
			public void set_item_sensitivity (uint index, bool val);
			/**
			 * Sets action item of given index's visiblity
			 *
			 * @param index index of action item to be changed
			 * @param val value deteriming whether the action item is visible
			 */
			public void set_item_visible (uint index, bool val);
			/**
			 * This is the subtitle of the welcome widget. It should use sentence case.
			 */
			public string subtitle { get; set; }
			/**
			 * This is the title of the welcome widget. It should use Title Case.
			 */
			public string title { get; set; }
			public signal void activated (int index);
		}
		[CCode (cheader_filename = "granite.h")]
		public class WelcomeButton : Gtk.Button {
			public WelcomeButton (Gtk.Image? image, string option_text, string description_text);
			/**
			 * Description property of the Welcome Button
			 *
			 * @since 0.3
			 */
			public string description { get; set; }
			/**
			 * Image of the Welcome Button
			 *
			 * @since 0.3
			 */
			public Gtk.Image? icon { get; set; }
			/**
			 * Title property of the Welcome Button
			 *
			 * @since 0.3
			 */
			public string title { get; set; }
		}
		/**
		 * An interface for receiving data from other widgets via drag-and-drop.
		 *
		 * @since 0.3
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SourceListDragDest : Granite.Widgets.SourceList.Item {
			/**
			 * Determines whether //data// can be dropped into this item.
			 *
			 * @param context The drag context.
			 * @param data {@link Gtk.SelectionData} containing source data.
			 * @return //true// if the drop is possible; //false// otherwise.
			 * @since 0.3
			 */
			public abstract bool data_drop_possible (Gdk.DragContext context, Gtk.SelectionData data);
			/**
			 * If a data drop is deemed possible, then this method is called
			 * when the data is actually dropped into this item. Any actions
			 * consequence of the data received should be handled here.
			 *
			 * @param context The drag context.
			 * @param data {@link Gtk.SelectionData} containing source data.
			 * @return The action taken, or //0// to indicate that the dropped data was not accepted.
			 * @since 0.3
			 */
			public abstract Gdk.DragAction data_received (Gdk.DragContext context, Gtk.SelectionData data);
		}
		/**
		 * An interface for dragging items out of the source list widget.
		 *
		 * @since 0.3
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SourceListDragSource : Granite.Widgets.SourceList.Item {
			/**
			 * Determines whether this item can be dragged outside the source list widget.
			 *
			 * Even if this method returns //false//, the item could still be dragged around
			 * within the source list if its parent allows DnD reordering. This only happens
			 * when the parent implements {@link Granite.Widgets.SourceListSortable}.
			 *
			 * @return //true// if the item can be dragged; //false// otherwise.
			 * @since 0.3
			 * @see Granite.Widgets.SourceListSortable
			 */
			public abstract bool draggable ();
			/**
			 * This method is called when the drop site requests the data which is dragged.
			 *
			 * It is the responsibility of this method to fill //selection_data// with the
			 * data in the format which is indicated by {@link Gtk.SelectionData.get_target}.
			 *
			 * @param selection_data {@link Gtk.SelectionData} containing source data.
			 * @since 0.3
			 * @see Gtk.SelectionData.set
			 * @see Gtk.SelectionData.set_uris
			 * @see Gtk.SelectionData.set_text
			 */
			public abstract void prepare_selection_data (Gtk.SelectionData selection_data);
		}
		/**
		 * An interface for sorting items.
		 *
		 * @since 0.3
		 */
		[CCode (cheader_filename = "granite.h")]
		public interface SourceListSortable : Granite.Widgets.SourceList.ExpandableItem {
			/**
			 * Whether this item will allow users to re-arrange its children via DnD.
			 *
			 * This feature can co-exist with a sort algorithm (implemented
			 * by {@link Granite.Widgets.SourceListSortable.compare}), but
			 * the actual order of the items in the list will always
			 * honor that method. The sort function has to be compatible with
			 * the kind of DnD reordering the item wants to allow, since the user can
			 * only reorder those items for which //compare// returns 0.
			 *
			 * @return Whether the item's children can be re-arranged by users.
			 * @since 0.3
			 */
			public abstract bool allow_dnd_sorting ();
			/**
			 * Should return a negative integer, zero, or a positive integer if ''a''
			 * sorts //before// ''b'', ''a'' sorts //with// ''b'', or ''a'' sorts
			 * //after// ''b'' respectively. If two items compare as equal, their
			 * order in the sorted source list is undefined.
			 *
			 * In order to ensure that the source list behaves as expected, this
			 * method must define a partial order on the source list tree; i.e. it
			 * must be reflexive, antisymmetric and transitive. Not complying with
			 * those requirements could make the program fall into an infinite loop
			 * and freeze the user interface.
			 *
			 * Should return //0// to allow any pair of items to be sortable via DnD.
			 *
			 * @param a First item.
			 * @param b Second item.
			 * @return A //negative// integer if //a// sorts before //b//,
			 *         //zero// if //a// equals //b//, or a //positive//
			 *         integer if //a// sorts after //b//.
			 * @since 0.3
			 */
			public abstract int compare (Granite.Widgets.SourceList.Item a, Granite.Widgets.SourceList.Item b);
			/**
			 * Emitted after a user has re-ordered an item via DnD.
			 *
			 * @param moved The item that was moved to a different position by the user.
			 * @since 0.3
			 */
			public signal void user_moved_item (Granite.Widgets.SourceList.Item moved);
		}
		[CCode (cheader_filename = "granite.h")]
		public static void show_about_dialog (Gtk.Window* parent, string first, ...);
	}
	/**
	 * AccelLabel is meant to be used as a {@link Gtk.MenuItem} child for displaying
	 * a {@link GLib.Action}'s accelerator alongside the Menu Item label.
	 *
	 * The class itself is similar to it's Gtk equivalent {@link Gtk.AccelLabel}
	 * but follows elementary OS design conventions. Specifically, this class uses
	 * {@link Granite.accel_to_string} for accelerator string parsing.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var copy_menuitem = new Gtk.MenuItem ();
	 *   copy_menuitem.set_action_name (ACTION_PREFIX + ACTION_COPY);
	 *   copy_menuitem.add (new Granite.AccelLabel.from_action_name (_("Copy"), copy_menuitem.action_name));
	 * }}}
	 *
	 */
	[CCode (cheader_filename = "granite.h")]
	public class AccelLabel : Gtk.Grid {
		/**
		 * Creates a new AccelLabel from a label and an accelerator string
		 *
		 * @param label displayed to the user as the menu item name
		 * @param accel an accelerator label like “<Control>a” or “<Super>Right”
		 */
		public AccelLabel (string label, string? accel_string = null);
		/**
		 * Creates a new AccelLabel from a label and an action name
		 *
		 * @param label displayed to the user as the menu item name
		 * @param action_name name of the {@link GLib.Action} used to retrieve action accelerators
		 */
		public AccelLabel.from_action_name (string label, string action_name);
		/**
		 * A {@link Gtk.accelerator_parse} style accel string like “<Control>a” or “<Super>Right”
		 */
		public string? accel_string { get; set construct; }
		/**
		 * The name of the {@link GLib.Action} used to retrieve action accelerators
		 */
		public string action_name { get; set construct; }
		/**
		 * The user-facing menu item label
		 */
		public string label { get; set construct; }
	}
	/**
	 * This is the base class for all Granite-based apps. It has methods that help
	 * to create a great deal of an app's functionality.
	 */
	[CCode (cheader_filename = "granite.h")]
	[Version (deprecated = true, deprecated_since = "0.5.0", replacement = "Gtk.Application")]
	public abstract class Application : Gtk.Application {
		protected static bool DEBUG;
		/**
		 * Names of the designers of the application's user interface.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string[] about_artists;
		/**
		 * Full names of the application authors for the about dialog.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string[] about_authors;
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string about_comments;
		protected Granite.Widgets.AboutDialog about_dlg;
		/**
		 * Full names of documenters of the app for the about dialog.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string[] about_documenters;
		/**
		 * The copyright license that the work is distributed under.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string about_license;
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public Gtk.License about_license_type;
		/**
		 * Names of the translators of the application.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string about_translators;
		/**
		 * Years that the copyright extends to. Usually from the start
		 * of the project to the most recent modification to it.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string app_copyright;
		/**
		 * Icon to be associated with the application.
		 *
		 * This is either the name of an icon shipped by the icon theme,
		 * or the name of an icon shipped with the app (for custom icons).
		 * The name should not include the full path or file extension.
		 * WRONG: /usr/share/icons/myicon.png RIGHT: myicon
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string app_icon;
		/**
		 * The launcher to be associated with this application.
		 *
		 * This should be the name of a file in /usr/share/applications/.
		 * See [[http://standards.freedesktop.org/desktop-entry-spec/latest/]]
		 * for more information.
		 */
		public string app_launcher;
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string app_years;
		/**
		 * A link to the software's public bug tracker.
		 *
		 * If the application does not have a bug tracker, one should be
		 * created on launchpad.net.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string bug_url;
		public string build_data_dir;
		public string build_pkg_data_dir;
		public string build_release_name;
		public string build_version;
		public string build_version_info;
		/**
		 * The compiled binary name, which must match the CMake exec name.
		 * This is used to launch the application from a launcher or the
		 * command line.
		 */
		public string exec_name;
		/**
		 * Link to question and answer site or support forum for the app.
		 *
		 * Launchpad offers a QA service if one is needed.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string help_url;
		/**
		 * Main website or homepage for the application.
		 *
		 * If the application has no homepage, one should be created on
		 * launchpad.net.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string main_url;
		/**
		 * The user facing name of the application. This name is used
		 * throughout the application and should be capitalized correctly.
		 */
		public string program_name;
		/**
		 * Link to where users can translate the application.
		 *
		 * Launchad offers a translation service if one is necessary.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public string translate_url;
		protected const GLib.OptionEntry[] options;
		/**
		 * This creates a new Application class
		 */
		protected Application ();
		/**
		 * This methods creates a new App Menu
		 *
		 * @param menu the menu to create the App Menu for
		 *
		 * @return app_menu
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "Gtk.MenuButton")]
		public Granite.Widgets.AppMenu create_appmenu (Gtk.Menu menu);
		/**
		 * This method runs the application
		 *
		 * @param args array of arguments
		 */
		public new int run (string[] args);
		protected virtual void set_options ();
		/**
		 * This method shows the about dialog of this app.
		 *
		 * @param parent This widget is the window that is calling the about page being created.
		 */
		[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
		public virtual void show_about (Gtk.Widget parent);
	}
	/**
	 * AsyncImage is a {@link Gtk.Image} that provides a way to load
	 * icons and images asynchronously without blocking the main GTK thread.
	 *
	 * AsyncImage can be used to improve your GTK interface's performance that
	 * has a lot of images to load and populate e.g: the applications menu and
	 * an icon chooser.
	 *
	 * Primarily the {@link Gtk.Image} loads it's surface synchronously and blocks the main GTK thread
	 * which can cause significant slow downs and lagging. The AsyncImage is a wrapper for the {@link Gtk.Image}
	 * and provides with two main methods: {@link Granite.AsyncImage.set_from_gicon_async} and {@link Granite.AsyncImage.set_from_file_async}.
	 *
	 * AsyncImage internally operates only on {@link Gdk.Pixbuf} and {@link Cairo.Surface}'s which means that you cannot read valid properties
	 * from the main {@link Gtk.Image} like {@link Gtk.Image.icon_name}, {@link Gtk.Image.gicon} or {@link Gtk.Image.file}.
	 * The only property which will be set is the final surface: {@link Gtk.Image.surface}.
	 *
	 * Even though AsyncImage sets only the {@link Gtk.Image.surface}, it automatically detects changes to the underlying {@link Gtk.Widget.scale_factor}
	 * and reloads the icon to a new scale factor when it changes. If you request to set an {@link GLib.ThemedIcon} and the icon or GTK theme changes
	 * the AsyncImage will also reload it to display the new icon with applied changes.
	 *
	 * The {@link Granite.AsyncImage.gicon_async} and {@link Granite.AsyncImage.size_async} are properties which reflect
	 * the current icon and it's size which will or is currently displayed. Note that those two properties will return
	 * meaningful results //''only''// when you call {@link Granite.AsyncImage.set_from_gicon_async} and it's wrappers.
	 *
	 * AsyncImage has also its own cache for already loaded icons. If you attempt to load the same icon at the same size
	 * AsyncImage will look it up and if it's available, will set it immediately.
	 *
	 * If you want to detect when the image was actually loaded into the {@link Cairo.Surface} you can connect to
	 * the {@link GLib.Object.notify} signal for {@link Gtk.Image.surface}.
	 */
	[CCode (cheader_filename = "granite.h")]
	public class AsyncImage : Gtk.Image {
		/**
		 * Creates a new {@link Granite.AsyncImage} that displays
		 * a requested icon or file to display asynchronously.
		 *
		 * The ``load_on_realize`` boolean parameter specifies if the requested image should load when
		 * it's about to render and show. This is useful when you don't want to have the image data
		 * loaded into memory immediately after calling {@link Granite.AsyncImage.set_from_gicon_async}.
		 * Internally this parameter causes the {@link Granite.AsyncImage} to connect to the {@link Gtk.Widget.realize} signal.
		 *
		 * ``auto_size_request`` boolean parameter specifies if AsyncImage should allocate initial
		 * space when loading the image. This is useful when the image is not yet loaded and the widget
		 * should act as a placeholder until the image is loaded. Calling any of the ``set_from`` methods will
		 * call the {@link Gtk.Widget.set_size_request} with the passed ``size`` or ``width`` and ``height`` if you called {@link Granite.AsyncImage.set_from_file_async}.
		 * When image is loaded and shown the size request is then reset to the original values.
		 *
		 * @param load_on_realize if ``true`` the image will be loaded when it's rendered, false to load the image immediately
		 * @param auto_size_request if the widget should act as a placeholder when the image is not yet loaded
		 */
		public AsyncImage (bool load_on_realize = true, bool auto_size_request = true);
		/**
		 * Creates a new {@link Granite.AsyncImage} with the supplied
		 * ``icon`` and ``size``. See {@link Granite.AsyncImage.AsyncImage} for more details.
		 *
		 * This is equivalent to calling {@link Granite.AsyncImage.AsyncImage} and {@link Granite.AsyncImage.set_from_gicon_async}.
		 *
		 * @param icon the {@link GLib.Icon} to display in the image
		 * @param size the size of the icon, ``-1`` to load the default size
		 * @param load_on_realize if ``true`` the image will be loaded when it's rendered, false to load the image immediately
		 * @param auto_size_request if the widget should act as a placeholder when the image is not yet loaded
		 */
		public AsyncImage.from_gicon_async (GLib.Icon icon, int size, bool load_on_realize = true, bool auto_size_request = true);
		/**
		 * Creates a new {@link Granite.AsyncImage} with the supplied
		 * ``icon_name`` and {@link Gtk.IconSize}. See {@link Granite.AsyncImage.AsyncImage} for more details.
		 *
		 * This is equivalent to calling {@link Granite.AsyncImage.AsyncImage} and {@link Granite.AsyncImage.set_from_icon_name_async}.
		 *
		 * @param icon_name the icon name to display in the image
		 * @param icon_size the {@link Gtk.IconSize} as the size for the image
		 * @param load_on_realize if ``true`` the image will be loaded when it's rendered, false to load the image immediately
		 * @param auto_size_request if the widget should act as a placeholder when the image is not yet loaded
		 */
		public AsyncImage.from_icon_name_async (string icon_name, Gtk.IconSize icon_size, bool load_on_realize = true, bool auto_size_request = true);
		/**
		 * Sets the image to display a {@link GLib.File} with requested width and height.
		 *
		 * ''Note that this method is not a wrapper to the main'' {@link Granite.AsyncImage.set_from_gicon_async} ''method''. Internally, it only creates
		 * a {@link Gdk.Pixbuf} with an {@link GLib.InputStream}, loads it asynchronously and sets the {@link Gtk.Image}'s surface to the result.
		 *
		 * This method will reset the {@link Granite.AsyncImage.gicon_async} and {@link Granite.AsyncImage.size_async} properties to their
		 * default values and will not make the {@link Granite.AsyncImage} update the image when the scale factor or icon theme changes.
		 *
		 * For the time that the image is loaded, the size request of the AsyncImage will be set to ``width`` and ``height`` if ``auto_size_request`` is set to ``true``
		 *
		 * @param file the {@link GLib.File} to display in the image
		 * @param width the width of the final image, ``-1`` to not constrain the width
		 * @param height the height of the final image, ``-1`` to not constrain the height
		 * @param preserve_aspect_ratio ``true`` to preserve the image's aspect ratio
		 * @param cancellable the cancellable to stop loading the image
		 *
		 * @throws GLib.Error when the the file was not found or failed to load
		 */
		public async void set_from_file_async (GLib.File file, int width, int height, bool preserve_aspect_ratio, GLib.Cancellable? cancellable = null) throws GLib.Error;
		/**
		 * Sets the image to display an {@link GLib.Icon} with a specified size asynchronously.
		 *
		 * This method sets the {@link Granite.AsyncImage.gicon_async} and {@link Granite.AsyncImage.size_async} properties
		 * and depending on the {@link Granite.AsyncImage.load_on_realize} setting, loads it when the image realizes or
		 * loads it immediately.
		 *
		 * Use {@link GLib.ThemedIcon} or {@link Granite.AsyncImage.set_from_icon_name_async} to load the image
		 * from an icon name.
		 *
		 * If the ``icon`` is a {@link GLib.FileIcon} then the image will be loaded using  the {@link Granite.AsyncImage.set_from_file_async}
		 * method with the supplied size for both ``width`` and ``height`` with preserving the aspect ratio of the image.
		 *
		 * If the {@link Granite.AsyncImage.load_on_realize} is ``true``, the error will never be thrown in this method since
		 * the loading will happen internally in the AsyncImage when the {@link Gtk.Widget.realize} signal is invoked.
		 * In this case, a warning will be printed with relevant information about a fauilure.
		 *
		 * @param icon the {@link GLib.Icon} to display in the image
		 * @param size the size of the icon, ``0`` will clear the {@link Gtk.Image.pixbuf}, ``-1`` to load the default size
		 * @param cancellable the cancellable to stop loading the icon
		 *
		 * @throws GLib.Error when the the icon was not found or failed to load
		 */
		public async void set_from_gicon_async (GLib.Icon icon, int size, GLib.Cancellable? cancellable = null) throws GLib.Error;
		/**
		 * A wrapper for {@link Granite.AsyncImage.set_from_gicon_async} to display an icon name.
		 *
		 * This is a convenience method for setting an icon name with a desired {@link Gtk.IconSize}. Note that you'll not be
		 * able to change the icon size afterwards with {@link Gtk.Image.pixel_size} or {@link Gtk.Image.icon_size}. You will
		 * have to call one of the {@link Granite.AsyncImage} set_from_ methods to change it's size.
		 *
		 * See {@link Granite.AsyncImage.set_from_gicon_async} for more details.
		 *
		 * @param icon_name the icon name to display in the image
		 * @param icon_size the {@link Gtk.IconSize} as the size for the image
		 * @param cancellable the cancellable to stop loading the icon
		 *
		 * @throws GLib.Error when the the icon was not found or failed to load
		 */
		public async void set_from_icon_name_async (string icon_name, Gtk.IconSize icon_size, GLib.Cancellable? cancellable = null) throws GLib.Error;
		/**
		 * If the widget should act as a placeholder when the image is not yet loaded.
		 *
		 * For more details see {@link Granite.AsyncImage.AsyncImage}.
		 */
		public bool auto_size_request { private get; construct; }
		/**
		 * The icon that will be or is currently displayed in the image.
		 *
		 * Note that this property is by default and will be ``null`` if you didn't call the {@link Granite.AsyncImage.set_from_gicon_async} or it's wrappers.
		 */
		public GLib.Icon? gicon_async { get; private set; }
		/**
		 * If the image should be loaded when the image is rendered.
		 *
		 * For more details see {@link Granite.AsyncImage.AsyncImage}.
		 */
		public bool load_on_realize { private get; construct; }
		/**
		 * The size in pixels of the displayed {@link Granite.AsyncImage.gicon_async}.
		 *
		 * Note that this property is by default and will be ``-1`` if you didn't call the {@link Granite.AsyncImage.set_from_gicon_async} or it's wrappers.
		 */
		public int size_async { get; private set; }
	}
	/**
	 * HeaderLabel is a start-aligned Gtk.Label with the Granite H4 style class
	 */
	[CCode (cheader_filename = "granite.h")]
	public class HeaderLabel : Gtk.Label {
		/**
		 * Create a new HeaderLabel
		 */
		public HeaderLabel (string label);
	}
	/**
	 * MessageDialog is an elementary OS styled dialog used to display a message to the user.
	 *
	 * The class itself is similar to it's Gtk equivalent {@link Gtk.MessageDialog}
	 * but follows elementary OS design conventions.
	 *
	 * See [[https://elementary.io/docs/human-interface-guidelines#dialogs|The Human Interface Guidelines for dialogs]]
	 * for more detailed disscussion on the dialog wording and design.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var message_dialog = new Granite.MessageDialog.with_image_from_icon_name (
	 *      "This is a primary text",
	 *      "This is a secondary, multiline, long text. This text usually extends the primary text and prints e.g: the details of an error.",
	 *      "applications-development",
	 *      Gtk.ButtonsType.CLOSE
	 *   );
	 *
	 *   var custom_widget = new Gtk.CheckButton.with_label ("Custom widget");
	 *   custom_widget.show ();
	 *
	 *   message_dialog.custom_bin.add (custom_widget);
	 *   message_dialog.run ();
	 *   message_dialog.destroy ();
	 * }}}
	 *
	 * {{../doc/images/MessageDialog.png}}
	 */
	[CCode (cheader_filename = "granite.h")]
	public class MessageDialog : Gtk.Dialog {
		/**
		 * Constructs a new {@link Granite.MessageDialog}.
		 * See {@link Gtk.Dialog} for more details.
		 *
		 * @param primary_text the title of the dialog
		 * @param secondary_text the body of the dialog
		 * @param image_icon the {@link GLib.Icon} that is displayed on the left side of the dialog
		 * @param buttons the {@link Gtk.ButtonsType} value that decides what buttons to use, defaults to {@link Gtk.ButtonsType.CLOSE},
		 *        see {@link Granite.MessageDialog.buttons} on details and what values are accepted
		 */
		public MessageDialog (string primary_text, string secondary_text, GLib.Icon image_icon, Gtk.ButtonsType buttons = Gtk.ButtonsType.CLOSE);
		/**
		 * Shows a terminal-like widget for error details that can be expanded by the user.
		 *
		 * This method can be useful to provide the user extended error details in a
		 * terminal-like text view. Calling this method will not add any widgets to the
		 * {@link Granite.MessageDialog.custom_bin}.
		 *
		 * Subsequent calls to this method will change the error message to a new one.
		 *
		 * @param error_message the detailed error message to display
		 */
		public void show_error_details (string error_message);
		/**
		 * Constructs a new {@link Granite.MessageDialog} with an icon name as it's icon displayed in the image.
		 * This constructor is same as the main one but with a difference that
		 * you can pass an icon name string instead of manually creating the {@link GLib.Icon}.
		 *
		 * The {@link Granite.MessageDialog.image_icon} will store the created icon
		 * so you can retrieve it later with {@link GLib.Icon.to_string}.
		 *
		 * See {@link Gtk.Dialog} for more details.
		 *
		 * @param primary_text the title of the dialog
		 * @param secondary_text the body of the dialog
		 * @param image_icon_name the icon name to create the dialog image with
		 * @param buttons the {@link Gtk.ButtonsType} value that decides what buttons to use, defaults to {@link Gtk.ButtonsType.CLOSE},
		 *        see {@link Granite.MessageDialog.buttons} on details and what values are accepted
		 */
		public MessageDialog.with_image_from_icon_name (string primary_text, string secondary_text, string image_icon_name = "dialog-information", Gtk.ButtonsType buttons = Gtk.ButtonsType.CLOSE);
		/**
		 * The {@link GLib.Icon} that is used to display a badge, bottom-end aligned,
		 * over the image on the left side of the dialog.
		 */
		public GLib.Icon badge_icon { owned get; set; }
		/**
		 * The {@link Gtk.ButtonsType} value to display a set of buttons
		 * in the dialog.
		 *
		 * By design, some actions are not acceptable and such action values will not be added to the dialog, these include:
		 *
		 *  * {@link Gtk.ButtonsType.OK}
		 *  * {@link Gtk.ButtonsType.YES_NO}
		 *  * {@link Gtk.ButtonsType.OK_CANCEL}
		 *
		 * If you wish to provide more specific actions for your dialog
		 * pass a {@link Gtk.ButtonsType.NONE} to {@link Granite.MessageDialog.MessageDialog} and manually
		 * add those actions with {@link Gtk.Dialog.add_buttons} or {@link Gtk.Dialog.add_action_widget}.
		 */
		public Gtk.ButtonsType buttons { construct; }
		/**
		 * The custom area to add custom widgets.
		 *
		 * This bin can be used to add any custom widget to the message area such as a {@link Gtk.ComboBox} or {@link Gtk.CheckButton}.
		 * Note that after adding such widget you will need to call {@link Gtk.Widget.show} or {@link Gtk.Widget.show_all} on the widget itself for it to appear in the dialog.
		 *
		 * If you want to add multiple widgets to this area, create a new container such as {@link Gtk.Grid} or {@link Gtk.Box} and then add it to the custom bin.
		 *
		 * When adding a custom widget to the custom bin, the {@link Granite.MessageDialog.secondary_label}'s bottom margin will be expanded automatically
		 * to compensate for the additional widget in the dialog.
		 * Removing the previously added widget will remove the bottom margin.
		 *
		 * If you don't want to have any margin between your custom widget and the {@link Granite.MessageDialog.secondary_label}, simply add your custom widget
		 * and then set the {@link Gtk.Label.margin_bottom} of {@link Granite.MessageDialog.secondary_label} to 0.
		 */
		public Gtk.Bin custom_bin { get; construct; }
		/**
		 * The {@link GLib.Icon} that is used to display the image
		 * on the left side of the dialog.
		 */
		public GLib.Icon image_icon { owned get; set; }
		/**
		 * The {@link Gtk.Label} that displays the {@link Granite.MessageDialog.primary_text}.
		 *
		 * Most of the times, you will only want to modify the {@link Granite.MessageDialog.primary_text} string,
		 * this is available to set additional properites like {@link Gtk.Label.use_markup} if you wish to do so.
		 */
		public Gtk.Label primary_label { get; construct; }
		/**
		 * The primary text, title of the dialog.
		 */
		public string primary_text { get; set; }
		/**
		 * The {@link Gtk.Label} that displays the {@link Granite.MessageDialog.secondary_text}.
		 *
		 * Most of the times, you will only want to modify the {@link Granite.MessageDialog.secondary_text} string,
		 * this is available to set additional properites like {@link Gtk.Label.use_markup} if you wish to do so.
		 */
		public Gtk.Label secondary_label { get; construct; }
		/**
		 * The secondary text, body of the dialog.
		 */
		public string secondary_text { get; set; }
	}
	/**
	 * ModeSwitch is a selection control for choosing between two options that can be described with an icon.
	 *
	 * ''Example''<<BR>>
	 * {{{
	 *   var gtk_settings = Gtk.Settings.get_default ();
	 *
	 *   var mode_switch = new ModeSwitch.from_icon_name ("display-brightness-symbolic", "weather-clear-night-symbolic");
	 *   mode_switch.primary_icon_tooltip_text = _("Light background");
	 *   mode_switch.secondary_icon_tooltip_text = _("Dark background");
	 *   mode_switch.bind_property ("active", gtk_settings, "gtk_application_prefer_dark_theme");
	 * }}}
	 */
	[CCode (cheader_filename = "granite.h")]
	public class ModeSwitch : Gtk.Grid {
		/**
		 * Constructs a new {@link Granite.ModeSwitch} using {@link GLib.Icon}s.
		 *
		 * @param primary_icon_gicon The {@link GLib.Icon} to use for the primary icon for the switch.
		 * @param secondary_icon_gicon The {@link GLib.Icon} to use for the secondary icon for the switch.
		 */
		public ModeSwitch (GLib.Icon primary_icon_gicon, GLib.Icon secondary_icon_gicon);
		/**
		 * Constructs a new {@link Granite.ModeSwitch} from icon names.
		 *
		 * @param primary_icon_name The icon name to use for the primary icon for the switch.
		 * @param secondary_icon_name The icon name to use for the secondary icon for the switch.
		 */
		public ModeSwitch.from_icon_name (string primary_icon_name, string secondary_icon_name);
		/**
		 * Whether the {@link Gtk.Switch} widget is pointing to the secondary icon or not.
		 */
		public bool active { get; set; }
		/**
		 * The {@link GLib.Icon} to use for the primary icon for the switch.
		 */
		public GLib.Icon primary_icon_gicon { get; set construct; }
		/**
		 * The icon name to use for the primary icon for the switch.
		 */
		public string primary_icon_name { get; set construct; }
		/**
		 * The contents of the tooltip on the primary icon.
		 */
		public string primary_icon_tooltip_text { get; set; }
		/**
		 * The {@link GLib.Icon} to use for the secondary icon for the switch.
		 */
		public GLib.Icon secondary_icon_gicon { get; set construct; }
		/**
		 * The icon name to use for the secondary icon for the switch.
		 */
		public string secondary_icon_name { get; set construct; }
		/**
		 * The contents of the tooltip on the secondary icon.
		 */
		public string secondary_icon_tooltip_text { get; set; }
	}
	/**
	 * This widget is a playback statusbar that contains a Gtk.Scale widget and
	 * two labels displaying the current progression and the total duration.
	 *
	 * Granite.SeekBar will get the style class .seek-bar
	 *
	 * {{../doc/images/SeekBar.png}}
	 *
	 * ''Example''<<BR>>
	 * {{{
	 * public class SeekBarView : Gtk.Grid {
	 *     private Gtk.Popover preview_popover;
	 *     private Gtk.Label preview_label;
	 *
	 *     public SeekBarView () {
	 *         Object (valign: Gtk.Align.CENTER,
	 *                 margin: 24);
	 *     }
	 *
	 *     construct {
	 *         preview_popover = new Gtk.Popover (this);
	 *         preview_popover.can_focus = false;
	 *         preview_popover.sensitive = false;
	 *         preview_popover.modal = false;
	 *         preview_popover.valign = Gtk.Align.CENTER;
	 *
	 *         preview_label = new Gtk.Label ("");
	 *         preview_label.margin = 5;
	 *         preview_popover.add (preview_label);
	 *         preview_popover.show_all ();
	 *         preview_popover.set_visible (false);
	 *
	 *         var seek_bar = new Granite.SeekBar (100);
	 *
	 *         preview_popover.relative_to = seek_bar.scale;
	 *
	 *         seek_bar.scale.motion_notify_event.connect ((event) => {
	 *             update_pointing ((int) event.x);
	 *             if (!seek_bar.is_grabbing) {
	 *                 var duration_decimal = (event.x / ((double) event.window.get_width ()));
	 *                 var duration_mins = Granite.DateTime.seconds_to_time ((int) (duration_decimal * seek_bar.playback_duration));
	 *                 preview_label.label = duration_mins.to_string ();
	 *             }
	 *             return false;
	 *         });
	 *
	 *         seek_bar.scale.enter_notify_event.connect (() => {
	 *             preview_popover.set_visible (true);
	 *             return false;
	 *         });
	 *
	 *         seek_bar.scale.leave_notify_event.connect (() => {
	 *             preview_popover.set_visible (false);
	 *             return false;
	 *         });
	 *
	 *         seek_bar.scale.button_press_event.connect (() => {
	 *             preview_label.margin = 10;
	 *             return false;
	 *         });
	 *
	 *         seek_bar.scale.button_release_event.connect (() => {
	 *             preview_label.margin = 5;
	 *             return false;
	 *         });
	 *
	 *         seek_bar.scale.change_value.connect ((scroll, new_value) => {
	 *             if (new_value >= 0.0 && new_value <= 1.0) {
	 *                 var duration_mins = Granite.DateTime.seconds_to_time ((int) (new_value * seek_bar.playback_duration));
	 *                 preview_label.label = duration_mins.to_string ();
	 *             }
	 *             return false;
	 *         });
	 *
	 *         add (seek_bar);
	 *
	 *         int progress = 0;
	 *         Timeout.add (500, () => {
	 *             if (seek_bar.is_grabbing) {
	 *                 return true;
	 *             }
	 *
	 *             if (progress >= 10) {
	 *                 progress = 0;
	 *                 seek_bar.playback_progress = 0.0;
	 *             } else {
	 *                 progress += 1;
	 *                 seek_bar.playback_progress = progress / 10.0;
	 *             }
	 *             return true;
	 *         });
	 *     }
	 *
	 *     private void update_pointing (int x) {
	 *         var pointing = preview_popover.pointing_to;
	 *         pointing.x = x;
	 *
	 *         // changing the width properly updates arrow position when popover hits the edge
	 *         if (pointing.width == 0) {
	 *             pointing.width = 2;
	 *             pointing.x -= 1;
	 *         } else {
	 *             pointing.width = 0;
	 *         }
	 *
	 *         preview_popover.set_pointing_to (pointing);
	 *     }
	 * }
	 * }}}
	 */
	[CCode (cheader_filename = "granite.h")]
	public class SeekBar : Gtk.Grid {
		public SeekBar (double playback_duration);
		public override void get_preferred_width (out int minimum_width, out int natural_width);
		public Gtk.Label duration_label { get; set construct; }
		public bool is_grabbing { get; private set; }
		public bool is_hovering { get; private set; }
		public double playback_duration { get; set; }
		public double playback_progress { get; set; }
		public Gtk.Label progression_label { get; set construct; }
		public Gtk.Scale scale { get; set construct; }
	}
	/**
	 * Granite.Settings provides a way to share Pantheon desktop settings with applications.
	 */
	[CCode (cheader_filename = "granite.h")]
	public class Settings : GLib.Object {
		/**
		 * Possible color scheme preferences expressed by the user
		 */
		public enum ColorScheme {
			/**
			 * The user has not expressed a color scheme preference. Apps should decide on a color scheme on their own.
			 */
			NO_PREFERENCE,
			/**
			 * The user prefers apps to use a dark color scheme.
			 */
			DARK,
			/**
			 * The user prefers a light color scheme.
			 */
			LIGHT
		}
		public static unowned Granite.Settings get_default ();
		/**
		 * Whether the user would prefer if apps use a dark or light color scheme or if the user has expressed no preference.
		 */
		public Granite.Settings.ColorScheme prefers_color_scheme { get; private set; }
	}
	/**
	 * AbstractSettingsPage is a {@link Gtk.ScrolledWindow} subclass with properties used
	 * by other Granite settings widgets.
	 */
	[CCode (cheader_filename = "granite.h")]
	public abstract class SettingsPage : Gtk.ScrolledWindow {
		/**
		 * Used to display a status icon overlayed on the display_widget in a Granite.SettingsSidebar
		 */
		public enum StatusType {
			ERROR,
			OFFLINE,
			SUCCESS,
			WARNING,
			NONE
		}
		protected string _icon_name;
		protected string _title;
		protected SettingsPage ();
		/**
		 * A widget to display in place of an icon in a Granite.SettingsSidebar
		 */
		public Gtk.Widget? display_widget { get; construct; }
		/**
		 * A header to be sorted under in a Granite.SettingsSidebar
		 */
		public string? header { get; construct; }
		/**
		 * An icon name to be displayed in a Granite.SettingsSidebar
		 */
		public string? icon_name { get; set construct; }
		/**
		 * A status string to be displayed underneath the title in a Granite.SettingsSidebar
		 */
		public string status { get; set; }
		/**
		 * Selects a colored icon to be displayed in a Granite.SettingsSidebar
		 */
		public Granite.SettingsPage.StatusType status_type { get; set; }
		/**
		 * A title to be displayed in a Granite.SettingsSidebar
		 */
		public string title { get; set construct; }
	}
	/**
	 * SettingsSidebar acts as a controller for a Gtk.Stack; it shows a row of buttons
	 * to switch between the various pages of the associated stack widget.
	 *
	 * All the content for the rows comes from the child properties of a Granite.SettingsPage
	 * inside of the Gtk.Stack
	 */
	[CCode (cheader_filename = "granite.h")]
	public class SettingsSidebar : Gtk.ScrolledWindow {
		/**
		 * Create a new SettingsSidebar
		 */
		public SettingsSidebar (Gtk.Stack stack);
		/**
		 * The Gtk.Stack to control
		 */
		public Gtk.Stack stack { get; construct; }
		/**
		 * The name of the currently visible Granite.SettingsPage
		 */
		public string? visible_child_name { get; set; }
	}
	/**
	 * SimpleSettingsPage is a widget divided into three sections: a predefined header,
	 * a content area, and an action area.
	 */
	[CCode (cheader_filename = "granite.h")]
	public abstract class SimpleSettingsPage : Granite.SettingsPage {
		/**
		 * Creates a new SimpleSettingsPage
		 * Deprecated: Subclass this instead.
		 */
		protected SimpleSettingsPage ();
		/**
		 * A {@link Gtk.ButtonbBox} used as the action area for #this
		 */
		public Gtk.ButtonBox action_area { get; construct; }
		/**
		 * Creates a {@link Gtk.Switch} #status_switch in the header of #this
		 */
		public bool activatable { get; construct; }
		/**
		 * A {@link Gtk.Grid} used as the content area for #this
		 */
		public Gtk.Grid content_area { get; construct; }
		/**
		 * Creates a {@link Gtk.Label} with a page description in the header of #this
		 */
		public string description { get; set construct; }
		/**
		 * An icon name associated with #this
		 * Deprecated: Use #SettingsPage.icon_name instead.
		 */
		public new string icon_name { get; set construct; }
		/**
		 * A {@link Gtk.Switch} that appears in the header area when #this.activatable is #true. #status_switch will be #null when #this.activatable is #false
		 */
		public Gtk.Switch? status_switch { get; construct; }
		/**
		 * A title associated with #this
		 * Deprecated: Use #SettingsPage.title instead.
		 */
		public new string title { get; set construct; }
	}
	/**
	 * An enum used to derermine where the window manager currently displays its close button on windows.
	 * Used with {@link Granite.Widgets.Utils.get_default_close_button_position}.
	 */
	[CCode (cheader_filename = "granite.h")]
	public enum CloseButtonPosition {
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "granite.h")]
	public enum CollapseMode {
		NONE,
		LEFT,
		TOP,
		FIRST,
		RIGHT,
		BOTTOM,
		LAST
	}
	[CCode (cheader_filename = "granite.h")]
	[Version (deprecated = true, deprecated_since = "0.4.2", replacement = "")]
	public enum TextStyle {
		/**
		 * Highest level header
		 */
		TITLE,
		/**
		 * Second highest header
		 */
		H1,
		/**
		 * Third highest header
		 */
		H2,
		/**
		 * Fourth Highest Header
		 */
		H3;
		/**
		 * Converts this to a CSS style string that could be used with e.g: {@link Granite.Widgets.Utils.set_theming}.
		 *
		 * @param style_class the style class used for this
		 *
		 * @return CSS of text style
		 */
		public string get_stylesheet (out string style_class = null);
	}
	[CCode (cheader_filename = "granite.h")]
	public delegate void WidgetsDroppedDelegate ();
	/**
	 * Style class to give accent color to a {@link Gtk.Label} or symbolic icon
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_ACCENT;
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_AVATAR;
	/**
	 * Style class for shaping a {@link Gtk.Button}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_BACK_BUTTON;
	/**
	 * Style class for numbered badges as in a {@link Granite.Widgets.SourceList}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_BADGE;
	/**
	 * Style class for adding a small shadow to a container such as for image thumbnails
	 *
	 * Can be combined with the style class ".collapsed" to further reduce the size of the shadow
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_CARD;
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_CATEGORY_EXPANDER;
	/**
	 * Style class for checkered backgrounds to represent transparency in images
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_CHECKERBOARD;
	/**
	 * Style class for color chooser buttons to be applied to {@link Gtk.CheckButton} or {@link Gtk.RadioButton}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_COLOR_BUTTON;
	/**
	 * Style class for large primary text as seen in {@link Granite.Widgets.Welcome}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_H1_LABEL;
	/**
	 * Style class for large seondary text as seen in {@link Granite.Widgets.Welcome}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_H2_LABEL;
	/**
	 * Style class for small primary text
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_H3_LABEL;
	/**
	 * Style class for a {@link Granite.HeaderLabel}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_H4_LABEL;
	/**
	 * Style class for a {@link Gtk.Label} to be displayed as a keyboard key cap
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_KEYCAP;
	/**
	 * Style class for a {@link Gtk.Switch} used to change between two modes rather than active and inactive states
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_MODE_SWITCH;
	/**
	 * Style class for a {@link Granite.Widgets.OverlayBar}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_OVERLAY_BAR;
	/**
	 * Style class for primary label text in a {@link Granite.MessageDialog}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_PRIMARY_LABEL;
	/**
	 * Style class for rounded corners, i.e. on a {@link Gtk.Window} or {@link Granite.STYLE_CLASS_CARD}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_ROUNDED;
	/**
	 * Style class for a {@link Granite.SeekBar}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_SEEKBAR;
	/**
	 * Style class for a {@link Granite.Widgets.SourceList}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_SOURCE_LIST;
	/**
	 * Style class for a {@link Granite.Widgets.Granite.Widgets.StorageBar}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_STORAGEBAR;
	/**
	 * Style class for a temperature scale, a {@link Gtk.Scale} with a "cold" to "hot" color gradient
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_TEMPERATURE;
	/**
	 * Style class for {@link Gtk.Label} or {@link Gtk.TextView} to emulate the appearance of Terminal. This includes
	 * text color, background color, selection highlighting, and selecting the system monospace font.
	 *
	 * When used with {@link Gtk.Label} this style includes internal padding. When used with {@link Gtk.TextView}
	 * interal padding will need to be set with {@link Gtk.Container.border_width}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_TERMINAL;
	/**
	 * Style class for a warmth scale, a {@link Gtk.Scale} with a "less warm" to "more warm" color gradient
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_WARMTH;
	/**
	 * Style class for a {@link Granite.Widgets.Welcome}
	 */
	[CCode (cheader_filename = "granite.h")]
	public const string STYLE_CLASS_WELCOME;
	/**
	 * Converts a {@link Gtk.accelerator_parse} style accel string to a human-readable string.
	 *
	 * @param accel an accelerator label like “<Control>a” or “<Super>Right”
	 *
	 * @return a human-readable string like "Ctrl + A" or "⌘ + →"
	 */
	[CCode (cheader_filename = "granite.h")]
	public static string accel_to_string (string? accel);
	/**
	 * Takes a {@link Gdk.RGBA} background color and returns a suitably-contrasting foreground color, i.e. for determining text color on a colored background. There is a slight bias toward returning white, as white generally looks better on a wider range of colored backgrounds than black.
	 *
	 * @param bg_color any {@link Gdk.RGBA} background color
	 *
	 * @return a contrasting {@link Gdk.RGBA} foreground color, i.e. white ({ 1.0, 1.0, 1.0, 1.0}) or black ({ 0.0, 0.0, 0.0, 1.0}).
	 */
	[CCode (cheader_filename = "granite.h")]
	public static Gdk.RGBA contrasting_foreground_color (Gdk.RGBA bg_color);
	/**
	 * Takes a description and an array of accels and returns {@link Pango} markup for use in a {@link Gtk.Tooltip}. This method uses {@link Granite.accel_to_string}.
	 *
	 * Example:
	 *
	 * Description
	 * Shortcut 1, Shortcut 2
	 *
	 * @param a string array of accelerator labels like {"<Control>a", "<Super>Right"}
	 *
	 * @param description a standard tooltip text string
	 *
	 * @return {@link Pango} markup with the description label on one line and a list of human-readable accels on a new line
	 */
	[CCode (cheader_filename = "granite.h")]
	public static string markup_accel_tooltip (string[]? accels, string? description = null);
}
