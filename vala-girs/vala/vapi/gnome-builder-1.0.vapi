/* gnome-builder-1.0.vapi generated by vapigen-0.32, do not modify. */

[CCode (cprefix = "Gb", gir_namespace = "Builder", gir_version = "1.0", lower_case_cprefix = "gb_")]
namespace Gb {
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_application_get_type ()")]
	public class Application : Gtk.Application, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false)]
		protected Application ();
		public unowned string get_argv0 ();
		public unowned string get_keybindings_mode ();
		public GLib.DateTime get_started_at ();
		public async GLib.DBusProxy get_worker_async (string plugin_name, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool open_project_async (GLib.File file, GLib.GenericArray<GLib.File>? additional_files, GLib.Cancellable? cancellable) throws GLib.Error;
		public void show_projects_window ();
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_editor_view_get_type ()")]
	public class EditorView : Gb.View, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected EditorView ();
		public signal void request_documentation (string object);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_menu_extension_get_type ()")]
	public class MenuExtension : GLib.Object {
		[CCode (has_construct_function = false)]
		public MenuExtension (GLib.Menu menu);
		public void append_menu_item (GLib.MenuItem item);
		[CCode (has_construct_function = false)]
		public MenuExtension.for_section (GLib.Menu menu, string section);
		public void prepend_menu_item (GLib.MenuItem item);
		public void remove_items ();
		[NoAccessorMethod]
		public GLib.Menu menu { owned get; construct; }
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_tree_get_type ()")]
	public class Tree : Gtk.TreeView, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false)]
		protected Tree ();
		public void add_builder (owned Gb.TreeBuilder builder);
		public void expand_to_node (Gb.TreeNode node);
		public unowned Gb.TreeNode? find_child_node (Gb.TreeNode node, Gb.TreeFindFunc find_func);
		public unowned Gb.TreeNode? find_custom (GLib.EqualFunc equal_func, void* key);
		public unowned Gb.TreeNode? find_item (GLib.Object? item);
		public unowned Gb.TreeNode? get_root ();
		public unowned Gb.TreeNode get_selected ();
		public bool get_show_icons ();
		public void rebuild ();
		public void remove_builder (Gb.TreeBuilder builder);
		public void scroll_to_node (Gb.TreeNode node);
		public void set_filter (owned Gb.TreeFilterFunc filter_func);
		public void set_root (Gb.TreeNode node);
		public void set_show_icons (bool show_icons);
		public Gb.TreeNode root { get; set; }
		[NoAccessorMethod]
		public Gb.TreeNode selection { owned get; set; }
		public bool show_icons { get; set; }
		public virtual signal void action (string action_group, string action_name, string param);
		public virtual signal void populate_popup (Gtk.Widget widget);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_tree_builder_get_type ()")]
	public class TreeBuilder : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected TreeBuilder ();
		public unowned Gb.Tree? get_tree ();
		public Gb.Tree tree { get; }
		public virtual signal void added (Gb.Tree tree);
		public virtual signal void build_node (Gb.TreeNode node);
		public virtual signal bool node_activated (Gb.TreeNode node);
		public virtual signal void node_popup (Gb.TreeNode node, GLib.Menu menu);
		public virtual signal void node_selected (Gb.TreeNode node);
		public virtual signal void node_unselected (Gb.TreeNode node);
		public virtual signal void removed (Gb.Tree tree);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_tree_node_get_type ()")]
	public class TreeNode : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public TreeNode ();
		public void append (Gb.TreeNode child);
		public void collapse ();
		public bool expand (bool expand_ancestors);
		public void get_area (Gdk.Rectangle area);
		public bool get_children_possible ();
		public bool get_expanded ();
		public unowned string get_icon_name ();
		public unowned GLib.Object get_item ();
		public bool get_iter (Gtk.TreeIter iter);
		public unowned Gb.TreeNode get_parent ();
		public Gtk.TreePath? get_path ();
		public unowned string get_text ();
		public unowned Gb.Tree get_tree ();
		public bool get_use_dim_label ();
		public bool get_use_markup ();
		public void insert_sorted (Gb.TreeNode child, Gb.TreeNodeCompareFunc compare_func);
		public void invalidate ();
		public void prepend (Gb.TreeNode child);
		public void remove (Gb.TreeNode child);
		public void select ();
		public void set_children_possible (bool children_possible);
		public void set_icon_name (string icon_name);
		public void set_item (GLib.Object item);
		public void set_text (string text);
		public void set_use_dim_label (bool use_dim_label);
		public void set_use_markup (bool use_markup);
		public void show_popover (Gtk.Popover popover);
		public bool children_possible { get; set; }
		public string icon_name { get; set; }
		public GLib.Object item { get; set; }
		public Gb.TreeNode parent { get; }
		public string text { get; set; }
		[NoAccessorMethod]
		public Gb.Tree tree { owned get; set; }
		public bool use_dim_label { get; set; }
		public bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_view_get_type ()")]
	public class View : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected View ();
		public virtual Gb.View create_split ();
		public virtual bool get_can_preview ();
		public virtual bool get_can_split ();
		public unowned Gtk.Widget? get_controls ();
		public virtual unowned Gb.Document get_document ();
		public unowned GLib.Menu get_menu ();
		public virtual bool get_modified ();
		public virtual unowned string get_special_title ();
		public virtual unowned string get_title ();
		public virtual void navigate_to (Ide.SourceLocation location);
		public virtual void set_back_forward_list (Ide.BackForwardList back_forward_list);
		public virtual void set_split_view (bool split_view);
		public bool can_split { get; }
		public Gb.Document document { get; }
		public bool modified { get; }
		public string special_title { get; }
		public string title { get; }
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_view_grid_get_type ()")]
	public class ViewGrid : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ViewGrid ();
		public unowned Gb.ViewStack add_stack_after (Gb.ViewStack stack);
		public unowned Gb.ViewStack add_stack_before (Gb.ViewStack stack);
		public unowned Gb.Document? find_document_typed (GLib.Type document_type);
		public void focus_document (Gb.Document document);
		public unowned Gtk.Widget? get_last_focus ();
		public unowned Gb.ViewStack? get_stack_after (Gb.ViewStack stack);
		public unowned Gb.ViewStack? get_stack_before (Gb.ViewStack stack);
		public GLib.List<weak Gb.ViewStack> get_stacks ();
		public void raise_document (Gb.Document document, bool focus);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_view_stack_get_type ()")]
	public class ViewStack : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ViewStack ();
		public unowned Gb.Document? find_document_typed (GLib.Type document_type);
		public unowned Gtk.Widget? find_with_document (Gb.Document document);
		public void focus_document (Gb.Document document);
		public void focus_location (Ide.SourceLocation location);
		public unowned Gtk.Widget? get_active_view ();
		public GLib.List<weak Gb.View> get_views ();
		public void raise_document (Gb.Document document, bool focus);
		public void remove (Gb.View view);
		public void set_active_view (Gtk.Widget active_view);
		public Gb.View active_view { get; set; }
		public signal void empty ();
		public signal void split (Gb.View view, int split_type);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_id = "gb_workbench_get_type ()")]
	public class Workbench : Gtk.ApplicationWindow, Atk.Implementor, GLib.ActionGroup, GLib.ActionMap, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Workbench ();
		public void add_temporary_buffer ();
		public async bool build_async (bool force_rebuild, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned Gtk.Widget get_active_view ();
		public bool get_closing ();
		public unowned Ide.Context get_context ();
		public unowned Gtk.Widget get_slider ();
		public unowned Gtk.Widget get_view_grid ();
		public unowned Gtk.Widget get_workspace ();
		public void open (GLib.File file);
		public void open_uri_list (string uri_list);
		public void open_with_editor (GLib.File file);
		public void reveal_file (GLib.File file);
		public void views_foreach (Gtk.Callback callback);
		public Gb.View active_view { get; }
		[NoAccessorMethod]
		public bool building { get; }
		public Ide.Context context { get; construct; }
		public signal void unload (Ide.Context object);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_cname = "GbApplicationAddinInterface", type_id = "gb_application_addin_get_type ()")]
	public interface ApplicationAddin : GLib.Object {
		public abstract void load (Gb.Application application);
		public abstract void unload (Gb.Application application);
	}
	[CCode (cheader_filename = "gnome-builder.h", type_cname = "GbDocumentInterface", type_id = "gb_document_get_type ()")]
	public interface Document : GLib.Object {
		public abstract bool get_modified ();
		public abstract bool get_mtime (GLib.TimeVal mtime);
		public abstract bool get_read_only ();
		public abstract unowned string get_title ();
		public abstract bool is_untitled ();
		public abstract async bool save_as_async (Gtk.Widget toplevel, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract async bool save_async (Gtk.Widget toplevel, GLib.Cancellable? cancellable) throws GLib.Error;
		public abstract bool modified { get; }
		public abstract bool read_only { get; }
		public abstract string title { get; }
		[HasEmitter]
		public virtual signal Gb.View create_view ();
	}
	[CCode (cheader_filename = "gnome-builder.h", type_cname = "GbEditorViewAddinInterface", type_id = "gb_editor_view_addin_get_type ()")]
	public interface EditorViewAddin : GLib.Object {
		[NoWrapper]
		public abstract void language_changed (string language_id);
		[NoWrapper]
		public abstract void load (Gb.EditorView view);
		[NoWrapper]
		public abstract void unload (Gb.EditorView view);
	}
	[CCode (cheader_filename = "gnome-builder.h", cprefix = "GB_VIEW_GRID_SPLIT_", type_id = "gb_view_grid_split_get_type ()")]
	public enum ViewGridSplit {
		LEFT,
		RIGHT,
		MOVE_LEFT,
		MOVE_RIGHT
	}
	[CCode (cheader_filename = "gnome-builder.h", instance_pos = 2.9)]
	public delegate bool TreeFilterFunc (Gb.Tree tree, Gb.TreeNode node);
	[CCode (cheader_filename = "gnome-builder.h", instance_pos = 3.9)]
	public delegate bool TreeFindFunc (Gb.Tree tree, Gb.TreeNode node, Gb.TreeNode child);
	[CCode (cheader_filename = "gnome-builder.h", instance_pos = 2.9)]
	public delegate int TreeNodeCompareFunc (Gb.TreeNode a, Gb.TreeNode b);
}
