/* shumate-0.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Shumate", gir_namespace = "Shumate", gir_version = "0.0", lower_case_cprefix = "shumate_")]
namespace Shumate {
	[CCode (cheader_filename = "shumate/shumate.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "shumate_bounding_box_get_type ()")]
	[Compact]
	public class BoundingBox {
		public double bottom;
		public double left;
		public double right;
		public double top;
		[CCode (has_construct_function = false)]
		public BoundingBox ();
		public void compose (Shumate.BoundingBox other);
		public Shumate.BoundingBox copy ();
		public bool covers (double latitude, double longitude);
		public void extend (double latitude, double longitude);
		public void free ();
		public void get_center (out double latitude, out double longitude);
		public bool is_valid ();
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_coordinate_get_type ()")]
	public class Coordinate : GLib.InitiallyUnowned, Shumate.Location {
		[CCode (has_construct_function = false)]
		public Coordinate ();
		[CCode (has_construct_function = false)]
		public Coordinate.full (double latitude, double longitude);
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_error_tile_source_get_type ()")]
	public class ErrorTileSource : Shumate.TileSource {
		[CCode (has_construct_function = false)]
		protected ErrorTileSource ();
		[CCode (has_construct_function = false)]
		public ErrorTileSource.full ();
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_file_cache_get_type ()")]
	public class FileCache : Shumate.TileCache {
		[CCode (has_construct_function = false)]
		protected FileCache ();
		[CCode (has_construct_function = false)]
		public FileCache.full (uint size_limit, string? cache_dir);
		public unowned string get_cache_dir ();
		public uint get_size_limit ();
		public void purge ();
		public void purge_on_idle ();
		public void set_size_limit (uint size_limit);
		public string cache_dir { get; construct; }
		public uint size_limit { get; set construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_layer_get_type ()")]
	public abstract class Layer : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		protected Layer ();
		public unowned Shumate.Viewport get_viewport ();
		public Shumate.Viewport viewport { get; construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_license_get_type ()")]
	public class License : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public License ();
		public void append_map_source (Shumate.MapSource map_source);
		public unowned string get_extra_text ();
		public float get_xalign ();
		public void prepend_map_source (Shumate.MapSource map_source);
		public void remove_map_source (Shumate.MapSource map_source);
		public void set_extra_text (string text);
		public void set_xalign (float xalign);
		public string extra_text { get; set; }
		public float xalign { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_map_layer_get_type ()")]
	public class MapLayer : Shumate.Layer, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public MapLayer (Shumate.MapSource map_source, Shumate.Viewport viewport);
		[NoAccessorMethod]
		public Shumate.MapSource map_source { owned get; construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_map_source_get_type ()")]
	public abstract class MapSource : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected MapSource ();
		public virtual void fill_tile (Shumate.Tile tile, GLib.Cancellable? cancellable = null);
		public uint get_column_count (uint zoom_level);
		public virtual unowned string get_id ();
		public double get_latitude (uint zoom_level, double y);
		public virtual unowned string get_license ();
		public virtual unowned string get_license_uri ();
		public double get_longitude (uint zoom_level, double x);
		public virtual uint get_max_zoom_level ();
		public double get_meters_per_pixel (uint zoom_level, double latitude, double longitude);
		public virtual uint get_min_zoom_level ();
		public virtual unowned string get_name ();
		public unowned Shumate.MapSource get_next_source ();
		public virtual Shumate.MapProjection get_projection ();
		public uint get_row_count (uint zoom_level);
		public virtual uint get_tile_size ();
		public double get_x (uint zoom_level, double longitude);
		public double get_y (uint zoom_level, double latitude);
		public void set_next_source (Shumate.MapSource next_source);
		public Shumate.MapSource next_source { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_map_source_chain_get_type ()")]
	public class MapSourceChain : Shumate.MapSource {
		[CCode (has_construct_function = false)]
		public MapSourceChain ();
		public void pop ();
		public void push (Shumate.MapSource map_source);
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_map_source_desc_get_type ()")]
	public class MapSourceDesc : GLib.Object {
		[CCode (has_construct_function = false)]
		protected MapSourceDesc ();
		public void* get_data ();
		public unowned string get_id ();
		public unowned string get_license ();
		public unowned string get_license_uri ();
		public uint get_max_zoom_level ();
		public uint get_min_zoom_level ();
		public unowned string get_name ();
		public Shumate.MapProjection get_projection ();
		public uint get_tile_size ();
		public unowned string get_uri_format ();
		[NoAccessorMethod]
		public void* constructor { get; construct; }
		public void* data { get; construct; }
		public string id { get; construct; }
		public string license { get; construct; }
		public string license_uri { get; construct; }
		public uint max_zoom_level { get; construct; }
		public uint min_zoom_level { get; construct; }
		public string name { get; construct; }
		public Shumate.MapProjection projection { get; construct; }
		public uint tile_size { get; construct; }
		public string uri_format { get; construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_map_source_factory_get_type ()")]
	public class MapSourceFactory : GLib.Object {
		[CCode (has_construct_function = false)]
		protected MapSourceFactory ();
		public unowned Shumate.MapSource create (string id);
		public unowned Shumate.MapSource create_cached_source (string id);
		public unowned Shumate.MapSource create_error_source (uint tile_size);
		public unowned Shumate.MapSource create_memcached_source (string id);
		public static Shumate.MapSourceFactory dup_default ();
		public GLib.SList<weak Shumate.MapSourceDesc> get_registered ();
		public bool register (Shumate.MapSourceDesc desc);
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_marker_get_type ()")]
	public class Marker : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Shumate.Location {
		[CCode (has_construct_function = false)]
		public Marker ();
		public void animate_in ();
		public void animate_in_with_delay (uint delay);
		public void animate_out ();
		public void animate_out_with_delay (uint delay);
		public bool get_draggable ();
		public bool get_selectable ();
		public static unowned Gdk.RGBA? get_selection_color ();
		public static unowned Gdk.RGBA? get_selection_text_color ();
		public bool is_selected ();
		public void set_draggable (bool value);
		public void set_selectable (bool value);
		public static void set_selection_color (Gdk.RGBA color);
		public static void set_selection_text_color (Gdk.RGBA color);
		public bool draggable { get; set; }
		public bool selectable { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_marker_layer_get_type ()")]
	public class MarkerLayer : Shumate.Layer, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public MarkerLayer (Shumate.Viewport viewport);
		public void add_marker (Shumate.Marker marker);
		public void animate_in_all_markers ();
		public void animate_out_all_markers ();
		[CCode (has_construct_function = false)]
		public MarkerLayer.full (Shumate.Viewport viewport, Gtk.SelectionMode mode);
		public GLib.List<weak Shumate.Marker> get_markers ();
		public GLib.List<weak Shumate.Marker> get_selected ();
		public Gtk.SelectionMode get_selection_mode ();
		public void hide_all_markers ();
		public void remove_all ();
		public void remove_marker (Shumate.Marker marker);
		public void select_all_markers ();
		public void set_all_markers_draggable ();
		public void set_all_markers_undraggable ();
		public void set_selection_mode (Gtk.SelectionMode mode);
		public void show_all_markers ();
		public void unselect_all_markers ();
		public Gtk.SelectionMode selection_mode { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_memory_cache_get_type ()")]
	public class MemoryCache : Shumate.TileCache {
		[CCode (has_construct_function = false)]
		protected MemoryCache ();
		public void clean ();
		[CCode (has_construct_function = false)]
		public MemoryCache.full (uint size_limit);
		public uint get_size_limit ();
		public void set_size_limit (uint size_limit);
		public uint size_limit { get; set construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_network_tile_source_get_type ()")]
	public class NetworkTileSource : Shumate.TileSource {
		[CCode (has_construct_function = false)]
		protected NetworkTileSource ();
		[CCode (has_construct_function = false)]
		public NetworkTileSource.full (string id, string name, string license, string license_uri, uint min_zoom, uint max_zoom, uint tile_size, Shumate.MapProjection projection, string uri_format);
		public int get_max_conns ();
		public bool get_offline ();
		public unowned string get_proxy_uri ();
		public unowned string get_uri_format ();
		public void set_max_conns (int max_conns);
		public void set_offline (bool offline);
		public void set_proxy_uri (string proxy_uri);
		public void set_uri_format (string uri_format);
		public void set_user_agent (string user_agent);
		public int max_conns { get; set; }
		public bool offline { get; set; }
		public string proxy_uri { get; set; }
		public string uri_format { get; set construct; }
		public string user_agent { set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_path_layer_get_type ()")]
	public class PathLayer : Shumate.Layer, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public PathLayer (Shumate.Viewport viewport);
		public void add_node (Shumate.Location location);
		public bool get_closed ();
		public GLib.List<uint> get_dash ();
		public bool get_fill ();
		public Gdk.RGBA? get_fill_color ();
		public GLib.List<weak Shumate.Location> get_nodes ();
		public bool get_stroke ();
		public Gdk.RGBA? get_stroke_color ();
		public double get_stroke_width ();
		public void insert_node (Shumate.Location location, uint position);
		public void remove_all ();
		public void remove_node (Shumate.Location location);
		public void set_closed (bool value);
		public void set_dash (GLib.List<uint> dash_pattern);
		public void set_fill (bool value);
		public void set_fill_color (Gdk.RGBA? color);
		public void set_stroke (bool value);
		public void set_stroke_color (Gdk.RGBA? color);
		public void set_stroke_width (double value);
		public bool closed { get; set; }
		public bool fill { get; set; }
		public Gdk.RGBA fill_color { owned get; set; }
		public bool stroke { get; set; }
		public Gdk.RGBA stroke_color { owned get; set; }
		public double stroke_width { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_point_get_type ()")]
	public class Point : Shumate.Marker, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget, Shumate.Location {
		[CCode (has_construct_function = false, type = "ShumateMarker*")]
		public Point ();
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_scale_get_type ()")]
	public class Scale : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public Scale (Shumate.Viewport viewport);
		public uint get_max_width ();
		public Shumate.Unit get_unit ();
		public void set_max_width (uint value);
		public void set_unit (Shumate.Unit unit);
		public uint max_width { get; set; }
		public Shumate.Unit unit { get; set; }
		[NoAccessorMethod]
		public Shumate.Viewport viewport { owned get; construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_tile_get_type ()")]
	public class Tile : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public Tile ();
		[CCode (has_construct_function = false)]
		public Tile.full (uint x, uint y, uint size, uint zoom_level);
		public unowned string get_etag ();
		public bool get_fade_in ();
		public unowned GLib.DateTime get_modified_time ();
		public uint get_size ();
		public Shumate.State get_state ();
		public unowned Gdk.Texture? get_texture ();
		public uint get_x ();
		public uint get_y ();
		public uint get_zoom_level ();
		public void set_etag (string etag);
		public void set_fade_in (bool fade_in);
		public void set_modified_time (GLib.DateTime modified_time);
		public void set_size (uint size);
		public void set_state (Shumate.State state);
		public void set_texture (Gdk.Texture texture);
		public void set_x (uint x);
		public void set_y (uint y);
		public void set_zoom_level (uint zoom_level);
		public string etag { get; set; }
		public bool fade_in { get; set; }
		public GLib.DateTime modified_time { get; set; }
		public uint size { get; set; }
		public Shumate.State state { get; set; }
		public Gdk.Texture texture { get; set; }
		public uint x { get; set; }
		public uint y { get; set; }
		public uint zoom_level { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_tile_cache_get_type ()")]
	public abstract class TileCache : Shumate.MapSource {
		[CCode (has_construct_function = false)]
		protected TileCache ();
		public virtual void on_tile_filled (Shumate.Tile tile);
		public virtual void refresh_tile_time (Shumate.Tile tile);
		public virtual void store_tile (Shumate.Tile tile, string contents, size_t size);
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_tile_source_get_type ()")]
	public abstract class TileSource : Shumate.MapSource {
		[CCode (has_construct_function = false)]
		protected TileSource ();
		public unowned Shumate.TileCache get_cache ();
		public void set_cache (Shumate.TileCache cache);
		public void set_id (string id);
		public void set_license (string license);
		public void set_license_uri (string license_uri);
		public void set_max_zoom_level (uint zoom_level);
		public void set_min_zoom_level (uint zoom_level);
		public void set_name (string name);
		public void set_projection (Shumate.MapProjection projection);
		public void set_tile_size (uint tile_size);
		public Shumate.TileCache cache { get; set; }
		[NoAccessorMethod]
		public string id { owned get; set construct; }
		[NoAccessorMethod]
		public string license { owned get; set construct; }
		[NoAccessorMethod]
		public string license_uri { owned get; set construct; }
		[NoAccessorMethod]
		public uint max_zoom_level { get; set construct; }
		[NoAccessorMethod]
		public uint min_zoom_level { get; set construct; }
		[NoAccessorMethod]
		public string name { owned get; set construct; }
		[NoAccessorMethod]
		public Shumate.MapProjection projection { get; set construct; }
		[NoAccessorMethod]
		public uint tile_size { get; set construct; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_view_get_type ()")]
	public class View : Gtk.Widget, Gtk.Accessible, Gtk.Buildable, Gtk.ConstraintTarget {
		[CCode (has_construct_function = false)]
		public View ();
		public void add_layer (Shumate.Layer layer);
		public void add_overlay_source (Shumate.MapSource map_source);
		public void center_on (double latitude, double longitude);
		public bool get_animate_zoom ();
		public double get_deceleration ();
		public bool get_kinetic_mode ();
		public GLib.List<weak Shumate.MapSource> get_overlay_sources ();
		public Shumate.State get_state ();
		public unowned Shumate.Viewport get_viewport ();
		public Shumate.BoundingBox get_world ();
		public bool get_zoom_on_double_click ();
		public void go_to (double latitude, double longitude);
		public void remove_layer (Shumate.Layer layer);
		public void remove_overlay_source (Shumate.MapSource map_source);
		public void set_animate_zoom (bool value);
		public void set_deceleration (double rate);
		public void set_kinetic_mode (bool kinetic);
		public void set_map_source (Shumate.MapSource map_source);
		public void set_world (Shumate.BoundingBox bbox);
		public void set_zoom_on_double_click (bool value);
		[CCode (has_construct_function = false)]
		public View.simple ();
		public void stop_go_to ();
		public bool animate_zoom { get; set; }
		public double deceleration { get; set; }
		[NoAccessorMethod]
		public uint goto_animation_duration { get; set; }
		public bool kinetic_mode { get; set; }
		public Shumate.State state { get; }
		public bool zoom_on_double_click { get; set; }
		public signal void animation_completed ();
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_id = "shumate_viewport_get_type ()")]
	public class Viewport : GLib.Object, Shumate.Location {
		[CCode (has_construct_function = false)]
		public Viewport ();
		public uint get_max_zoom_level ();
		public uint get_min_zoom_level ();
		public unowned Shumate.MapSource? get_reference_map_source ();
		public uint get_zoom_level ();
		public double latitude_to_widget_y (Gtk.Widget widget, double latitude);
		public double longitude_to_widget_x (Gtk.Widget widget, double longitude);
		public void set_max_zoom_level (uint max_zoom_level);
		public void set_min_zoom_level (uint min_zoom_level);
		public void set_reference_map_source (Shumate.MapSource? map_source);
		public void set_zoom_level (uint zoom_level);
		public double widget_x_to_longitude (Gtk.Widget widget, double x);
		public double widget_y_to_latitude (Gtk.Widget widget, double y);
		public void zoom_in ();
		public void zoom_out ();
		public uint max_zoom_level { get; set; }
		public uint min_zoom_level { get; set; }
		public Shumate.MapSource reference_map_source { get; set; }
		public uint zoom_level { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", type_cname = "ShumateLocationInterface", type_id = "shumate_location_get_type ()")]
	public interface Location : GLib.Object {
		public abstract double get_latitude ();
		public abstract double get_longitude ();
		public abstract void set_location (double latitude, double longitude);
		[NoAccessorMethod]
		public abstract double latitude { get; set; }
		[NoAccessorMethod]
		public abstract double longitude { get; set; }
	}
	[CCode (cheader_filename = "shumate/shumate.h", cprefix = "SHUMATE_MAP_PROJECTION_", type_id = "shumate_map_projection_get_type ()")]
	public enum MapProjection {
		MERCATOR
	}
	[CCode (cheader_filename = "shumate/shumate.h", cprefix = "SHUMATE_STATE_", type_id = "shumate_state_get_type ()")]
	public enum State {
		NONE,
		LOADING,
		LOADED,
		DONE
	}
	[CCode (cheader_filename = "shumate/shumate.h", cprefix = "SHUMATE_UNIT_", type_id = "shumate_unit_get_type ()")]
	public enum Unit {
		BOTH,
		METRIC,
		IMPERIAL
	}
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_MFF_RELIEF")]
	public const string MAP_SOURCE_MFF_RELIEF;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OSM_CYCLE_MAP")]
	public const string MAP_SOURCE_OSM_CYCLE_MAP;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OSM_MAPNIK")]
	public const string MAP_SOURCE_OSM_MAPNIK;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OSM_TRANSPORT_MAP")]
	public const string MAP_SOURCE_OSM_TRANSPORT_MAP;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OWM_CLOUDS")]
	public const string MAP_SOURCE_OWM_CLOUDS;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OWM_PRECIPITATION")]
	public const string MAP_SOURCE_OWM_PRECIPITATION;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OWM_PRESSURE")]
	public const string MAP_SOURCE_OWM_PRESSURE;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OWM_TEMPERATURE")]
	public const string MAP_SOURCE_OWM_TEMPERATURE;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAP_SOURCE_OWM_WIND")]
	public const string MAP_SOURCE_OWM_WIND;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAX_LATITUDE")]
	public const double MAX_LATITUDE;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MAX_LONGITUDE")]
	public const double MAX_LONGITUDE;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MIN_LATITUDE")]
	public const double MIN_LATITUDE;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_MIN_LONGITUDE")]
	public const double MIN_LONGITUDE;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_VERSION")]
	public const double VERSION;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_VERSION_HEX")]
	public const int VERSION_HEX;
	[CCode (cheader_filename = "shumate/shumate.h", cname = "SHUMATE_VERSION_S")]
	public const string VERSION_S;
}
