/* gtef-2.vapi generated by vapigen-0.36, do not modify. */

[CCode (cprefix = "Gtef", gir_namespace = "Gtef", gir_version = "2", lower_case_cprefix = "gtef_")]
namespace Gtef {
	[CCode (cheader_filename = "gtef/gtef.h", ref_function = "gtef_action_info_ref", type_id = "gtef_action_info_get_type ()", unref_function = "gtef_action_info_unref")]
	[Compact]
	public class ActionInfo {
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public ActionInfo ();
		[Version (since = "2.0")]
		public Gtef.ActionInfo copy ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public ActionInfo.from_entry (Gtef.ActionInfoEntry info_entry, string? translation_domain);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.0")]
		public unowned string[] get_accels ();
		[Version (since = "2.0")]
		public unowned string? get_action_name ();
		[Version (since = "2.0")]
		public unowned string? get_icon_name ();
		[Version (since = "2.0")]
		public unowned string? get_label ();
		[Version (since = "2.0")]
		public unowned string? get_tooltip ();
		[Version (since = "2.0")]
		public Gtef.ActionInfo @ref ();
		[Version (since = "2.0")]
		public void set_accels ([CCode (array_length = false, array_null_terminated = true)] string[] accels);
		[Version (since = "2.0")]
		public void set_action_name (string action_name);
		[Version (since = "2.0")]
		public void set_icon_name (string? icon_name);
		[Version (since = "2.0")]
		public void set_label (string? label);
		[Version (since = "2.0")]
		public void set_tooltip (string? tooltip);
		[Version (since = "2.0")]
		public void unref ();
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_action_info_central_store_get_type ()")]
	public class ActionInfoCentralStore : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ActionInfoCentralStore ();
		[Version (since = "2.0")]
		public static unowned Gtef.ActionInfoCentralStore get_instance ();
		[Version (since = "2.0")]
		public unowned Gtef.ActionInfo lookup (string action_name);
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_action_info_store_get_type ()")]
	public class ActionInfoStore : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public ActionInfoStore (Gtk.Application? application);
		[Version (since = "2.0")]
		public void add (Gtef.ActionInfo info);
		[Version (since = "2.0")]
		public void add_entries ([CCode (array_length_cname = "n_entries", array_length_pos = 1.5)] Gtef.ActionInfoEntry[] entries, string? translation_domain);
		[Version (since = "2.0")]
		public void check_all_used ();
		[Version (since = "2.0")]
		public unowned Gtk.Widget create_menu_item (string action_name);
		public unowned Gtk.Application? get_application ();
		[Version (since = "2.0")]
		public unowned Gtef.ActionInfo lookup (string action_name);
		[Version (since = "2.0")]
		public Gtk.Application application { get; construct; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_application_get_type ()")]
	public class Application : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Application ();
		[Version (since = "2.0")]
		public unowned Gtef.ActionInfoStore get_app_action_info_store ();
		[Version (since = "2.0")]
		public unowned Gtk.Application get_application ();
		[Version (since = "2.0")]
		public static unowned Gtef.Application get_default ();
		[Version (since = "2.0")]
		public static unowned Gtef.Application get_from_gtk_application (Gtk.Application gtk_app);
		[Version (since = "2.0")]
		public void open_simple (GLib.File file);
		[Version (since = "2.0")]
		public Gtk.Application application { get; construct; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_application_window_get_type ()")]
	public class ApplicationWindow : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ApplicationWindow ();
		[Version (since = "2.0")]
		public void connect_menu_to_statusbar (Gtef.MenuShell gtef_menu_shell);
		[Version (since = "2.0")]
		public void connect_recent_chooser_menu_to_statusbar (Gtk.RecentChooserMenu menu);
		[Version (since = "2.0")]
		public unowned Gtk.Widget create_open_recent_menu_item ();
		[Version (since = "2.0")]
		public unowned Gtk.ApplicationWindow get_application_window ();
		[Version (since = "2.0")]
		public static unowned Gtef.ApplicationWindow get_from_gtk_application_window (Gtk.ApplicationWindow gtk_window);
		[Version (since = "2.0")]
		public unowned Gtk.Statusbar? get_statusbar ();
		[Version (since = "2.0")]
		public void set_statusbar (Gtk.Statusbar? statusbar);
		[Version (since = "2.0")]
		public Gtk.ApplicationWindow application_window { get; construct; }
		[Version (since = "2.0")]
		public Gtk.Statusbar statusbar { get; set; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_buffer_get_type ()")]
	public class Buffer : Gtk.SourceBuffer {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public Buffer ();
		[Version (since = "1.0")]
		public unowned Gtef.File get_file ();
		[Version (since = "1.0")]
		public Gtef.SelectionType get_selection_type ();
		[Version (since = "2.0")]
		public string get_style_scheme_id ();
		[Version (since = "1.0")]
		public string get_title ();
		[Version (since = "1.0")]
		public bool is_untouched ();
		[Version (since = "2.0")]
		public void set_style_scheme_id (string style_scheme_id);
		[NoAccessorMethod]
		[Version (since = "2.0")]
		public string gtef_style_scheme_id { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.0")]
		public string gtef_title { owned get; }
		[Version (since = "2.0")]
		public virtual signal void gtef_cursor_moved ();
	}
	[CCode (cheader_filename = "gtef/gtef.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gtef_encoding_get_type ()")]
	[Compact]
	public class Encoding {
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public Encoding (string charset);
		[Version (since = "2.0")]
		public Gtef.Encoding copy ();
		[Version (since = "2.0")]
		public bool equals (Gtef.Encoding? enc2);
		[Version (since = "2.0")]
		public void free ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public Encoding.from_locale ();
		[Version (since = "2.0")]
		public static GLib.SList<Gtef.Encoding> get_all ();
		[Version (since = "2.0")]
		public unowned string get_charset ();
		[Version (since = "2.0")]
		public static GLib.SList<Gtef.Encoding> get_default_candidates ();
		[Version (since = "2.0")]
		public unowned string get_name ();
		[Version (since = "2.0")]
		public bool is_utf8 ();
		[Version (since = "2.0")]
		public string to_string ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public Encoding.utf8 ();
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_file_get_type ()")]
	public class File : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public File ();
		[Version (since = "1.0")]
		public void check_file_on_disk ();
		[Version (since = "1.0")]
		public Gtef.CompressionType get_compression_type ();
		[Version (since = "1.0")]
		public unowned Gtef.Encoding get_encoding ();
		[Version (since = "1.0")]
		public unowned Gtef.FileMetadata get_file_metadata ();
		[Version (since = "1.0")]
		public unowned GLib.File get_location ();
		[Version (since = "1.0")]
		public Gtef.NewlineType get_newline_type ();
		[Version (since = "1.0")]
		public unowned string get_short_name ();
		[Version (since = "1.0")]
		public bool is_deleted ();
		[Version (since = "1.0")]
		public bool is_externally_modified ();
		[Version (since = "1.0")]
		public bool is_local ();
		[Version (since = "1.0")]
		public bool is_readonly ();
		[Version (since = "1.0")]
		public void set_location (GLib.File? location);
		[Version (since = "1.0")]
		public Gtef.CompressionType compression_type { get; }
		[Version (since = "1.0")]
		public Gtef.Encoding encoding { get; }
		[Version (since = "1.0")]
		public GLib.File location { get; set construct; }
		[Version (since = "1.0")]
		public Gtef.NewlineType newline_type { get; }
		[NoAccessorMethod]
		[Version (since = "1.0")]
		public bool read_only { get; }
		[Version (since = "1.0")]
		public string short_name { get; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_file_loader_get_type ()")]
	public class FileLoader : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public FileLoader (Gtef.Buffer buffer, Gtef.File file);
		[Version (since = "1.0")]
		public unowned Gtef.Buffer? get_buffer ();
		[Version (since = "1.0")]
		public int64 get_chunk_size ();
		[Version (since = "2.0")]
		public unowned Gtef.Encoding? get_encoding ();
		[Version (since = "1.0")]
		public unowned Gtef.File? get_file ();
		[Version (since = "1.0")]
		public unowned GLib.File? get_location ();
		[Version (since = "1.0")]
		public int64 get_max_size ();
		[Version (since = "2.0")]
		public Gtef.NewlineType get_newline_type ();
		[Version (since = "1.0")]
		public async bool load_async (int io_priority, GLib.Cancellable? cancellable, owned GLib.FileProgressCallback? progress_callback) throws GLib.Error;
		[Version (since = "1.0")]
		public void set_chunk_size (int64 chunk_size);
		[Version (since = "1.0")]
		public void set_max_size (int64 max_size);
		[Version (since = "1.0")]
		public Gtef.Buffer buffer { get; construct; }
		[Version (since = "1.0")]
		public int64 chunk_size { get; set construct; }
		[Version (since = "1.0")]
		public Gtef.File file { get; construct; }
		[Version (since = "1.0")]
		public GLib.File location { get; construct; }
		[Version (since = "1.0")]
		public int64 max_size { get; set construct; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_file_metadata_get_type ()")]
	public class FileMetadata : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public FileMetadata (Gtef.File file);
		[Version (since = "1.0")]
		public string? @get (string key);
		[Version (since = "1.0")]
		public unowned Gtef.File get_file ();
		[Version (since = "1.0")]
		public bool load (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool load_async (int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public bool save (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "1.0")]
		public async bool save_async (int io_priority, GLib.Cancellable? cancellable) throws GLib.Error;
		[Version (since = "1.0")]
		public void @set (string key, string? value);
		[Version (since = "1.0")]
		public Gtef.File file { get; construct; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_file_saver_get_type ()")]
	public class FileSaver : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public FileSaver (Gtef.Buffer buffer, Gtef.File file);
		[Version (since = "1.0")]
		public unowned Gtef.Buffer get_buffer ();
		[Version (since = "1.0")]
		public Gtef.CompressionType get_compression_type ();
		[Version (since = "1.0")]
		public unowned Gtef.Encoding get_encoding ();
		[Version (since = "1.0")]
		public unowned Gtef.File get_file ();
		[Version (since = "1.0")]
		public Gtef.FileSaverFlags get_flags ();
		[Version (since = "1.0")]
		public unowned GLib.File get_location ();
		[Version (since = "1.0")]
		public Gtef.NewlineType get_newline_type ();
		[Version (since = "1.0")]
		public async bool save_async (int io_priority, GLib.Cancellable? cancellable, owned GLib.FileProgressCallback? progress_callback) throws GLib.Error;
		[Version (since = "1.0")]
		public void set_compression_type (Gtef.CompressionType compression_type);
		[Version (since = "1.0")]
		public void set_encoding (Gtef.Encoding? encoding);
		[Version (since = "1.0")]
		public void set_flags (Gtef.FileSaverFlags flags);
		[Version (since = "1.0")]
		public void set_newline_type (Gtef.NewlineType newline_type);
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public FileSaver.with_target (Gtef.Buffer buffer, Gtef.File file, GLib.File target_location);
		[Version (since = "1.0")]
		public Gtk.SourceBuffer buffer { get; construct; }
		[Version (since = "1.0")]
		public Gtk.SourceCompressionType compression_type { get; set construct; }
		[Version (since = "1.0")]
		public Gtef.Encoding encoding { get; set construct; }
		[Version (since = "1.0")]
		public Gtef.File file { get; construct; }
		[Version (since = "1.0")]
		public Gtef.FileSaverFlags flags { get; set construct; }
		[Version (since = "1.0")]
		public GLib.File location { get; construct; }
		[Version (since = "1.0")]
		public Gtk.SourceNewlineType newline_type { get; set construct; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_fold_region_get_type ()")]
	public class FoldRegion : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public FoldRegion (Gtk.TextBuffer buffer, Gtk.TextIter start, Gtk.TextIter end);
		[Version (since = "1.0")]
		public bool get_bounds (out Gtk.TextIter start, out Gtk.TextIter end);
		[Version (since = "1.0")]
		public unowned Gtk.TextBuffer? get_buffer ();
		[Version (since = "1.0")]
		public bool get_folded ();
		[Version (since = "1.0")]
		public void set_bounds (Gtk.TextIter start, Gtk.TextIter end);
		[Version (since = "1.0")]
		public void set_folded (bool folded);
		[Version (since = "1.0")]
		public Gtk.TextBuffer buffer { get; construct; }
		[Version (since = "1.0")]
		public bool folded { get; set; }
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_gutter_renderer_folds_get_type ()")]
	public class GutterRendererFolds : Gtk.SourceGutterRenderer {
		[CCode (has_construct_function = false, type = "GtkSourceGutterRenderer*")]
		[Version (since = "1.0")]
		public GutterRendererFolds ();
		[Version (since = "1.0")]
		public void set_state (Gtef.GutterRendererFoldsState state);
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_info_bar_get_type ()")]
	public class InfoBar : Gtk.InfoBar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public InfoBar ();
		[Version (since = "2.0")]
		public void add_close_button ();
		[Version (since = "2.0")]
		public void add_content_widget (Gtk.Widget content);
		[Version (since = "2.0")]
		public void add_icon ();
		[Version (since = "2.0")]
		public void add_primary_message (string primary_msg);
		[Version (since = "2.0")]
		public void add_secondary_message (string secondary_msg);
		[Version (since = "1.0")]
		public static unowned Gtk.Label create_label ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.0")]
		public InfoBar.simple (Gtk.MessageType msg_type, string primary_msg, string? secondary_msg);
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_menu_shell_get_type ()")]
	public class MenuShell : GLib.Object {
		[CCode (has_construct_function = false)]
		protected MenuShell ();
		[Version (since = "2.0")]
		public static unowned Gtef.MenuShell get_from_gtk_menu_shell (Gtk.MenuShell gtk_menu_shell);
		[Version (since = "2.0")]
		public unowned Gtk.MenuShell get_menu_shell ();
		[Version (since = "2.0")]
		public Gtk.MenuShell menu_shell { get; construct; }
		[Version (since = "2.0")]
		public virtual signal void menu_item_deselected (Gtk.MenuItem menu_item);
		[Version (since = "2.0")]
		public virtual signal void menu_item_selected (Gtk.MenuItem menu_item);
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_tab_get_type ()")]
	public class Tab : Gtk.Grid, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public Tab (Gtk.Widget main_widget);
		[Version (since = "1.0")]
		public void add_info_bar (Gtk.InfoBar info_bar);
	}
	[CCode (cheader_filename = "gtef/gtef.h", type_id = "gtef_view_get_type ()")]
	public class View : Gtk.SourceView, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public View ();
		[Version (since = "1.0")]
		public void copy_clipboard ();
		[Version (since = "1.0")]
		public void cut_clipboard ();
		[Version (since = "1.0")]
		public void delete_selection ();
		[Version (since = "2.0")]
		public bool goto_line (int line);
		[Version (since = "2.0")]
		public bool goto_line_offset (int line, int line_offset);
		[Version (since = "1.0")]
		public void paste_clipboard ();
		[Version (since = "1.0")]
		public void scroll_to_cursor ();
		[Version (since = "1.0")]
		public void select_all ();
		[Version (since = "2.0")]
		public void select_lines (int start_line, int end_line);
	}
	[CCode (cheader_filename = "gtef/gtef.h", has_type_id = false)]
	[Version (since = "2.0")]
	public struct ActionInfoEntry {
		public weak string action_name;
		public weak string icon_name;
		public weak string label;
		public weak string accel;
		public weak string tooltip;
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_COMPRESSION_TYPE_", type_id = "gtef_compression_type_get_type ()")]
	[Version (since = "1.0")]
	public enum CompressionType {
		NONE,
		GZIP
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_FILE_SAVER_FLAGS_", type_id = "gtef_file_saver_flags_get_type ()")]
	[Flags]
	[Version (since = "1.0")]
	public enum FileSaverFlags {
		NONE,
		IGNORE_INVALID_CHARS,
		IGNORE_MODIFICATION_TIME,
		CREATE_BACKUP
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_GUTTER_RENDERER_FOLDS_STATE_", type_id = "gtef_gutter_renderer_folds_state_get_type ()")]
	[Flags]
	[Version (since = "1.0")]
	public enum GutterRendererFoldsState {
		NONE,
		START_FOLDED,
		START_OPENED,
		CONTINUE,
		END
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_NEWLINE_TYPE_", type_id = "gtef_newline_type_get_type ()")]
	[Version (since = "1.0")]
	public enum NewlineType {
		LF,
		CR,
		CR_LF
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_SELECTION_TYPE_", type_id = "gtef_selection_type_get_type ()")]
	[Version (since = "1.0")]
	public enum SelectionType {
		NO_SELECTION,
		ON_SAME_LINE,
		MULTIPLE_LINES
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_FILE_LOADER_ERROR_")]
	[Version (since = "1.0")]
	public errordomain FileLoaderError {
		TOO_BIG,
		ENCODING_AUTO_DETECTION_FAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtef/gtef.h", cprefix = "GTEF_FILE_SAVER_ERROR_")]
	[Version (since = "1.0")]
	public errordomain FileSaverError {
		INVALID_CHARS,
		EXTERNALLY_MODIFIED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "2.0")]
	public static void action_map_add_action_entries_check_dups (GLib.ActionMap action_map, [CCode (array_length_cname = "n_entries", array_length_pos = 2.5)] GLib.ActionEntry[] entries, void* user_data);
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "2.0")]
	public static string iter_get_line_indentation (Gtk.TextIter iter);
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "2.0")]
	public static unowned string? menu_item_get_long_description (Gtk.MenuItem menu_item);
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "2.0")]
	public static void menu_item_set_icon_name (Gtk.MenuItem item, string icon_name);
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "2.0")]
	public static void menu_item_set_long_description (Gtk.MenuItem menu_item, string? long_description);
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "1.0")]
	public static void metadata_manager_init (string metadata_path);
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "1.0")]
	public static void metadata_manager_shutdown ();
	[CCode (cheader_filename = "gtef/gtef.h")]
	[Version (since = "2.0")]
	public static string utils_recent_chooser_menu_get_item_uri (Gtk.RecentChooserMenu menu, Gtk.MenuItem item);
}
