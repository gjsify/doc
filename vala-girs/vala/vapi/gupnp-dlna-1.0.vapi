/* gupnp-dlna-1.0.vapi generated by vapigen, do not modify. */

[CCode (lower_case_cprefix = "gupnp_")]
namespace GUPnP {
	[CCode (cheader_filename = "libgupnp-dlna/gupnp-dlna-discoverer.h")]
	public class DLNADiscoverer : Gst.Discoverer {
		[CCode (has_construct_function = false)]
		public DLNADiscoverer (Gst.ClockTime timeout, bool relaxed_mode, bool extended_mode);
		public bool discover_uri (string uri);
		public GUPnP.DLNAInformation discover_uri_sync (string uri) throws GLib.Error;
		public bool get_extended_mode ();
		public GUPnP.DLNAProfile get_profile (string name);
		public bool get_relaxed_mode ();
		public unowned GLib.List<weak GUPnP.DLNAProfile> list_profiles ();
		public bool extended_mode { get; construct; }
		public bool relaxed_mode { get; construct; }
		public virtual signal void done (GUPnP.DLNAInformation dlna, GLib.Error err);
	}
	[CCode (cheader_filename = "libgupnp-dlna/gupnp-dlna-information.h")]
	public class DLNAInformation : GLib.Object {
		[CCode (has_construct_function = false)]
		public DLNAInformation (string name, string mime, Gst.DiscovererInfo info);
		public unowned Gst.DiscovererInfo get_info ();
		public unowned string get_mime ();
		public unowned string get_name ();
		public Gst.DiscovererInfo info { get; construct; }
		public string mime { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "libgupnp-dlna/gupnp-dlna-profile.h")]
	public class DLNAProfile : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DLNAProfile ();
		public unowned Gst.EncodingProfile get_encoding_profile ();
		public bool get_extended ();
		public unowned string get_mime ();
		public unowned string get_name ();
		public Gst.EncodingProfile encoding_profile { get; }
		public bool extended { get; construct; }
		public string mime { get; construct; }
		public string name { get; construct; }
	}
}
