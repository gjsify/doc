<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <c:include name="tmpl-glib.h"/>
  <namespace name="Template"
             version="1.0"
             shared-library="libtemplate_glib-1.0.so.0"
             c:identifier-prefixes="Tmpl"
             c:symbol-prefixes="tmpl">
    <function-macro name="CHECK_VERSION"
                    c:identifier="TMPL_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../src/tmpl-version.h"
           line="81">Compile-time version checking. Evaluates to %TRUE if the version
of dazzle is greater than the required one.</doc>
      <source-position filename="../src/tmpl-version.h" line="89"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="../src/tmpl-version.h"
               line="83">required major version</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="../src/tmpl-version.h"
               line="84">required minor version</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="../src/tmpl-version.h"
               line="85">required micro version</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="TMPL_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="../src/tmpl-version-macros.h" line="36"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_28_FOR"
                    c:identifier="TMPL_DEPRECATED_IN_3_28_FOR"
                    introspectable="0">
      <source-position filename="../src/tmpl-version-macros.h" line="119"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ENABLE_TRACE" value="0" c:type="TMPL_ENABLE_TRACE">
      <source-position filename="../src/tmpl-debug.h" line="27"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="TMPL_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="../src/tmpl-version.h" line="69"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="Error"
                 glib:type-name="TmplError"
                 glib:get-type="tmpl_error_get_type"
                 c:type="TmplError"
                 glib:error-domain="tmpl-error">
      <member name="invalid_state"
              value="1"
              c:identifier="TMPL_ERROR_INVALID_STATE"
              glib:nick="invalid-state">
      </member>
      <member name="template_not_found"
              value="2"
              c:identifier="TMPL_ERROR_TEMPLATE_NOT_FOUND"
              glib:nick="template-not-found">
      </member>
      <member name="circular_include"
              value="3"
              c:identifier="TMPL_ERROR_CIRCULAR_INCLUDE"
              glib:nick="circular-include">
      </member>
      <member name="syntax_error"
              value="4"
              c:identifier="TMPL_ERROR_SYNTAX_ERROR"
              glib:nick="syntax-error">
      </member>
      <member name="lexer_failure"
              value="5"
              c:identifier="TMPL_ERROR_LEXER_FAILURE"
              glib:nick="lexer-failure">
      </member>
      <member name="type_mismatch"
              value="6"
              c:identifier="TMPL_ERROR_TYPE_MISMATCH"
              glib:nick="type-mismatch">
      </member>
      <member name="invalid_op_code"
              value="7"
              c:identifier="TMPL_ERROR_INVALID_OP_CODE"
              glib:nick="invalid-op-code">
      </member>
      <member name="divide_by_zero"
              value="8"
              c:identifier="TMPL_ERROR_DIVIDE_BY_ZERO"
              glib:nick="divide-by-zero">
      </member>
      <member name="missing_symbol"
              value="9"
              c:identifier="TMPL_ERROR_MISSING_SYMBOL"
              glib:nick="missing-symbol">
      </member>
      <member name="symbol_redefined"
              value="10"
              c:identifier="TMPL_ERROR_SYMBOL_REDEFINED"
              glib:nick="symbol-redefined">
      </member>
      <member name="not_an_object"
              value="11"
              c:identifier="TMPL_ERROR_NOT_AN_OBJECT"
              glib:nick="not-an-object">
      </member>
      <member name="null_pointer"
              value="12"
              c:identifier="TMPL_ERROR_NULL_POINTER"
              glib:nick="null-pointer">
      </member>
      <member name="no_such_property"
              value="13"
              c:identifier="TMPL_ERROR_NO_SUCH_PROPERTY"
              glib:nick="no-such-property">
      </member>
      <member name="gi_failure"
              value="14"
              c:identifier="TMPL_ERROR_GI_FAILURE"
              glib:nick="gi-failure">
      </member>
      <member name="runtime_error"
              value="15"
              c:identifier="TMPL_ERROR_RUNTIME_ERROR"
              glib:nick="runtime-error">
      </member>
      <member name="not_implemented"
              value="16"
              c:identifier="TMPL_ERROR_NOT_IMPLEMENTED"
              glib:nick="not-implemented">
      </member>
      <member name="not_a_value"
              value="17"
              c:identifier="TMPL_ERROR_NOT_A_VALUE"
              glib:nick="not-a-value">
      </member>
      <member name="not_a_function"
              value="18"
              c:identifier="TMPL_ERROR_NOT_A_FUNCTION"
              glib:nick="not-a-function">
      </member>
      <function name="quark" c:identifier="tmpl_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <union name="Expr"
           c:type="TmplExpr"
           glib:type-name="TmplExpr"
           glib:get-type="tmpl_expr_get_type"
           c:symbol-prefix="expr">
      <source-position filename="../src/tmpl-expr-types.h" line="38"/>
      <constructor name="new_boolean" c:identifier="tmpl_expr_new_boolean">
        <source-position filename="../src/tmpl-expr.h" line="45"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_flow" c:identifier="tmpl_expr_new_flow">
        <source-position filename="../src/tmpl-expr.h" line="78"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="ExprType" c:type="TmplExprType"/>
          </parameter>
          <parameter name="condition" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
          <parameter name="primary" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
          <parameter name="secondary" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_fn_call" c:identifier="tmpl_expr_new_fn_call">
        <source-position filename="../src/tmpl-expr.h" line="72"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="builtin" transfer-ownership="none">
            <type name="ExprBuiltin" c:type="TmplExprBuiltin"/>
          </parameter>
          <parameter name="param" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_number" c:identifier="tmpl_expr_new_number">
        <source-position filename="../src/tmpl-expr.h" line="66"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_require" c:identifier="tmpl_expr_new_require">
        <source-position filename="../src/tmpl-expr.h" line="56"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="typelib" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_simple" c:identifier="tmpl_expr_new_simple">
        <source-position filename="../src/tmpl-expr.h" line="59"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="ExprType" c:type="TmplExprType"/>
          </parameter>
          <parameter name="left" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string" c:identifier="tmpl_expr_new_string">
        <source-position filename="../src/tmpl-expr.h" line="63"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_symbol_assign"
                   c:identifier="tmpl_expr_new_symbol_assign">
        <source-position filename="../src/tmpl-expr.h" line="85"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="symbol" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_symbol_ref"
                   c:identifier="tmpl_expr_new_symbol_ref">
        <source-position filename="../src/tmpl-expr.h" line="83"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="symbol" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_user_fn_call"
                   c:identifier="tmpl_expr_new_user_fn_call">
        <source-position filename="../src/tmpl-expr.h" line="75"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="param" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="eval" c:identifier="tmpl_expr_eval" throws="1">
        <source-position filename="../src/tmpl-expr.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="expr" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_getattr" c:identifier="tmpl_expr_new_getattr">
        <source-position filename="../src/tmpl-expr.h" line="49"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_gi_call" c:identifier="tmpl_expr_new_gi_call">
        <source-position filename="../src/tmpl-expr.h" line="68"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_invert_boolean"
              c:identifier="tmpl_expr_new_invert_boolean">
        <source-position filename="../src/tmpl-expr.h" line="47"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="new_setattr" c:identifier="tmpl_expr_new_setattr">
        <source-position filename="../src/tmpl-expr.h" line="52"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
          <parameter name="attr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="tmpl_expr_ref">
        <source-position filename="../src/tmpl-expr.h" line="36"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="expr" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="tmpl_expr_unref">
        <source-position filename="../src/tmpl-expr.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="expr" transfer-ownership="none">
            <type name="Expr" c:type="TmplExpr*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_string"
                c:identifier="tmpl_expr_from_string"
                throws="1">
        <source-position filename="../src/tmpl-expr.h" line="33"/>
        <return-value transfer-ownership="full">
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </union>
    <enumeration name="ExprBuiltin"
                 glib:type-name="TmplExprBuiltin"
                 glib:get-type="tmpl_expr_builtin_get_type"
                 c:type="TmplExprBuiltin">
      <member name="abs"
              value="0"
              c:identifier="TMPL_EXPR_BUILTIN_ABS"
              glib:nick="abs">
      </member>
      <member name="ceil"
              value="1"
              c:identifier="TMPL_EXPR_BUILTIN_CEIL"
              glib:nick="ceil">
      </member>
      <member name="floor"
              value="2"
              c:identifier="TMPL_EXPR_BUILTIN_FLOOR"
              glib:nick="floor">
      </member>
      <member name="hex"
              value="3"
              c:identifier="TMPL_EXPR_BUILTIN_HEX"
              glib:nick="hex">
      </member>
      <member name="log"
              value="4"
              c:identifier="TMPL_EXPR_BUILTIN_LOG"
              glib:nick="log">
      </member>
      <member name="print"
              value="5"
              c:identifier="TMPL_EXPR_BUILTIN_PRINT"
              glib:nick="print">
      </member>
      <member name="repr"
              value="6"
              c:identifier="TMPL_EXPR_BUILTIN_REPR"
              glib:nick="repr">
      </member>
      <member name="sqrt"
              value="7"
              c:identifier="TMPL_EXPR_BUILTIN_SQRT"
              glib:nick="sqrt">
      </member>
      <member name="typeof"
              value="8"
              c:identifier="TMPL_EXPR_BUILTIN_TYPEOF"
              glib:nick="typeof">
      </member>
    </enumeration>
    <enumeration name="ExprType"
                 glib:type-name="TmplExprType"
                 glib:get-type="tmpl_expr_type_get_type"
                 c:type="TmplExprType">
      <member name="add"
              value="1"
              c:identifier="TMPL_EXPR_ADD"
              glib:nick="add">
      </member>
      <member name="sub"
              value="2"
              c:identifier="TMPL_EXPR_SUB"
              glib:nick="sub">
      </member>
      <member name="mul"
              value="3"
              c:identifier="TMPL_EXPR_MUL"
              glib:nick="mul">
      </member>
      <member name="div"
              value="4"
              c:identifier="TMPL_EXPR_DIV"
              glib:nick="div">
      </member>
      <member name="boolean"
              value="5"
              c:identifier="TMPL_EXPR_BOOLEAN"
              glib:nick="boolean">
      </member>
      <member name="number"
              value="6"
              c:identifier="TMPL_EXPR_NUMBER"
              glib:nick="number">
      </member>
      <member name="string"
              value="7"
              c:identifier="TMPL_EXPR_STRING"
              glib:nick="string">
      </member>
      <member name="gt" value="8" c:identifier="TMPL_EXPR_GT" glib:nick="gt">
      </member>
      <member name="lt" value="9" c:identifier="TMPL_EXPR_LT" glib:nick="lt">
      </member>
      <member name="ne" value="10" c:identifier="TMPL_EXPR_NE" glib:nick="ne">
      </member>
      <member name="eq" value="11" c:identifier="TMPL_EXPR_EQ" glib:nick="eq">
      </member>
      <member name="gte"
              value="12"
              c:identifier="TMPL_EXPR_GTE"
              glib:nick="gte">
      </member>
      <member name="lte"
              value="13"
              c:identifier="TMPL_EXPR_LTE"
              glib:nick="lte">
      </member>
      <member name="unary_minus"
              value="14"
              c:identifier="TMPL_EXPR_UNARY_MINUS"
              glib:nick="unary-minus">
      </member>
      <member name="stmt_list"
              value="15"
              c:identifier="TMPL_EXPR_STMT_LIST"
              glib:nick="stmt-list">
      </member>
      <member name="if" value="16" c:identifier="TMPL_EXPR_IF" glib:nick="if">
      </member>
      <member name="while"
              value="17"
              c:identifier="TMPL_EXPR_WHILE"
              glib:nick="while">
      </member>
      <member name="symbol_ref"
              value="18"
              c:identifier="TMPL_EXPR_SYMBOL_REF"
              glib:nick="symbol-ref">
      </member>
      <member name="symbol_assign"
              value="19"
              c:identifier="TMPL_EXPR_SYMBOL_ASSIGN"
              glib:nick="symbol-assign">
      </member>
      <member name="fn_call"
              value="20"
              c:identifier="TMPL_EXPR_FN_CALL"
              glib:nick="fn-call">
      </member>
      <member name="user_fn_call"
              value="21"
              c:identifier="TMPL_EXPR_USER_FN_CALL"
              glib:nick="user-fn-call">
      </member>
      <member name="getattr"
              value="22"
              c:identifier="TMPL_EXPR_GETATTR"
              glib:nick="getattr">
      </member>
      <member name="setattr"
              value="23"
              c:identifier="TMPL_EXPR_SETATTR"
              glib:nick="setattr">
      </member>
      <member name="gi_call"
              value="24"
              c:identifier="TMPL_EXPR_GI_CALL"
              glib:nick="gi-call">
      </member>
      <member name="require"
              value="25"
              c:identifier="TMPL_EXPR_REQUIRE"
              glib:nick="require">
      </member>
      <member name="and"
              value="26"
              c:identifier="TMPL_EXPR_AND"
              glib:nick="and">
      </member>
      <member name="or" value="27" c:identifier="TMPL_EXPR_OR" glib:nick="or">
      </member>
      <member name="invert_boolean"
              value="28"
              c:identifier="TMPL_EXPR_INVERT_BOOLEAN"
              glib:nick="invert-boolean">
      </member>
    </enumeration>
    <function-macro name="GOTO" c:identifier="TMPL_GOTO" introspectable="0">
      <source-position filename="../src/tmpl-debug.h" line="45"/>
      <parameters>
        <parameter name="_l">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="LOG_LEVEL_TRACE" value="1" c:type="TMPL_LOG_LEVEL_TRACE">
      <source-position filename="../src/tmpl-debug.h" line="33"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MAJOR_VERSION" value="3" c:type="TMPL_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="../src/tmpl-version.h"
           line="33">Template-GLibl major version component (e.g. 1 if %TMPL_VERSION is 1.2.3)</doc>
      <source-position filename="../src/tmpl-version.h" line="38"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="0" c:type="TMPL_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="../src/tmpl-version.h"
           line="47">Template-GLibl micro version component (e.g. 3 if %TMPL_VERSION is 1.2.3)</doc>
      <source-position filename="../src/tmpl-version.h" line="52"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="34" c:type="TMPL_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="../src/tmpl-version.h"
           line="40">Template-GLibl minor version component (e.g. 2 if %TMPL_VERSION is 1.2.3)</doc>
      <source-position filename="../src/tmpl-version.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="RETURN"
                    c:identifier="TMPL_RETURN"
                    introspectable="0">
      <source-position filename="../src/tmpl-debug.h" line="51"/>
      <parameters>
        <parameter name="_r">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Scope"
            c:type="TmplScope"
            glib:type-name="TmplScope"
            glib:get-type="tmpl_scope_get_type"
            c:symbol-prefix="scope">
      <source-position filename="../src/tmpl-expr-types.h" line="39"/>
      <constructor name="new" c:identifier="tmpl_scope_new">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="63">Creates a new scope to contain variables and custom expressions,</doc>
        <source-position filename="../src/tmpl-scope.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-scope.c"
               line="68">A newly created #TmplScope.</doc>
          <type name="Scope" c:type="TmplScope*"/>
        </return-value>
      </constructor>
      <method name="get" c:identifier="tmpl_scope_get">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="154">If the symbol could not be found, it will be allocated.</doc>
        <source-position filename="../src/tmpl-scope.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/tmpl-scope.c"
               line="159">A #TmplSymbol.</doc>
          <type name="Symbol" c:type="TmplSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_with_parent" c:identifier="tmpl_scope_new_with_parent">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="82">Creates a new scope to contain variables and custom expressions,
If @parent is set, the parent scope will be inherited.</doc>
        <source-position filename="../src/tmpl-scope.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-scope.c"
               line="89">A newly created #TmplScope.</doc>
          <type name="Scope" c:type="TmplScope*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parent"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="84">An optional parent scope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="tmpl_scope_peek">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="364">If the symbol could not be found, %NULL is returned.</doc>
        <source-position filename="../src/tmpl-scope.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../src/tmpl-scope.c"
               line="369">A #TmplSymbol or %NULL.</doc>
          <type name="Symbol" c:type="TmplSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="tmpl_scope_ref">
        <source-position filename="../src/tmpl-scope.h" line="42"/>
        <return-value transfer-ownership="full">
          <type name="Scope" c:type="TmplScope*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="tmpl_scope_set">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="203">If the symbol already exists, it will be overwritten.

If @symbol is %NULL, the symbol will be removed from scope.</doc>
        <source-position filename="../src/tmpl-scope.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="205">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="206">the name of the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="symbol"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="207">An #TmplSymbol or %NULL.</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="tmpl_scope_set_boolean">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="245">Sets the value of the symbol named @name to a gboolean value of @value.</doc>
        <source-position filename="../src/tmpl-scope.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="247">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="248">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="249">a #gboolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double" c:identifier="tmpl_scope_set_double">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="264">Sets the value of the symbol named @name to a gdouble value of @value.</doc>
        <source-position filename="../src/tmpl-scope.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="266">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="267">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="268">a #gdouble</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object" c:identifier="tmpl_scope_set_object">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="283">Sets the value of the symbol named @name to the object @value.</doc>
        <source-position filename="../src/tmpl-scope.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="285">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="286">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="287">a #GObject or %NULL.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resolver" c:identifier="tmpl_scope_set_resolver">
        <source-position filename="../src/tmpl-scope.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="resolver"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="ScopeResolver" c:type="TmplScopeResolver"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="tmpl_scope_set_string">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="345">Sets the value of the symbol named @name to a string matching @value.</doc>
        <source-position filename="../src/tmpl-scope.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="347">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="348">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="349">A string or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_strv" c:identifier="tmpl_scope_set_strv">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="325">Sets the value of the symbol named @name to the strv @value.</doc>
        <source-position filename="../src/tmpl-scope.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="327">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="328">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="329">the value to set it to, or %NULL</doc>
            <array c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="tmpl_scope_set_value">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="226">Sets the contents of the symbol named @name to the value @value.</doc>
        <source-position filename="../src/tmpl-scope.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="228">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="229">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="230">A #GValue or %NULL</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variant" c:identifier="tmpl_scope_set_variant">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="303">Sets the value of the symbol named @name to the variant @value.

If @value has a floating reference, it is consumed.</doc>
        <source-position filename="../src/tmpl-scope.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="305">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="306">a name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="307">the variant to set it to, or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take" c:identifier="tmpl_scope_take">
        <doc xml:space="preserve"
             filename="../src/tmpl-scope.c"
             line="168">Sets the symbol named @name to @symbol in @scope.

This differs from tmpl_scope_set() in that it takes ownership
of @symbol.</doc>
        <source-position filename="../src/tmpl-scope.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="170">A #TmplScope</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="171">The name of the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="symbol"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-scope.c"
                 line="172">A #TmplSymbol or %NULL</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="tmpl_scope_unref">
        <source-position filename="../src/tmpl-scope.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Scope" c:type="TmplScope*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="ScopeResolver" c:type="TmplScopeResolver">
      <source-position filename="../src/tmpl-scope.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="scope" transfer-ownership="none">
          <type name="Scope" c:type="TmplScope*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="symbol" transfer-ownership="none">
          <type name="Symbol" c:type="TmplSymbol**"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Symbol"
            c:type="TmplSymbol"
            glib:type-name="TmplSymbol"
            glib:get-type="tmpl_symbol_get_type"
            c:symbol-prefix="symbol">
      <source-position filename="../src/tmpl-expr-types.h" line="40"/>
      <constructor name="new" c:identifier="tmpl_symbol_new">
        <source-position filename="../src/tmpl-symbol.h" line="33"/>
        <return-value transfer-ownership="full">
          <type name="Symbol" c:type="TmplSymbol*"/>
        </return-value>
      </constructor>
      <method name="assign_boolean" c:identifier="tmpl_symbol_assign_boolean">
        <source-position filename="../src/tmpl-symbol.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="v_bool" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="assign_double" c:identifier="tmpl_symbol_assign_double">
        <source-position filename="../src/tmpl-symbol.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="v_double" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="assign_expr"
              c:identifier="tmpl_symbol_assign_expr"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../src/tmpl-symbol.c"
             line="103">Sets the symbol as a %TMPL_SYMBOL_EXPR with the given ordered and
named parameters.</doc>
        <source-position filename="../src/tmpl-symbol.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="105">A #TmplSymbol.</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="expr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="106">An expression to assign, or %NULL.</doc>
            <type name="Expr" c:type="TmplExpr*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="107">A #GPtrArray of strings.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="assign_object" c:identifier="tmpl_symbol_assign_object">
        <doc xml:space="preserve"
             filename="../src/tmpl-symbol.c"
             line="225">Sets the value to the object @v_object.</doc>
        <source-position filename="../src/tmpl-symbol.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="227">A #TmplSymbol</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="v_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="228">a #GObject or %NULL.</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="assign_string" c:identifier="tmpl_symbol_assign_string">
        <source-position filename="../src/tmpl-symbol.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="v_string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="assign_strv" c:identifier="tmpl_symbol_assign_strv">
        <doc xml:space="preserve"
             filename="../src/tmpl-symbol.c"
             line="269">Sets the value to the strv @strv.</doc>
        <source-position filename="../src/tmpl-symbol.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="271">A #TmplSymbol</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="strv"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="272">the value to set, or %NULL</doc>
            <array c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="assign_value" c:identifier="tmpl_symbol_assign_value">
        <source-position filename="../src/tmpl-symbol.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="assign_variant" c:identifier="tmpl_symbol_assign_variant">
        <doc xml:space="preserve"
             filename="../src/tmpl-symbol.c"
             line="246">Sets the value to the #GVariant @v_variant.

If @v_variant has a floating reference, it is consumed.</doc>
        <source-position filename="../src/tmpl-symbol.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="248">A #TmplSymbol</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="v_variant"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="249">a #GVariant or %NULL.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_expr" c:identifier="tmpl_symbol_get_expr">
        <source-position filename="../src/tmpl-symbol.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/tmpl-symbol.c"
               line="143">A #TmplExpr.</doc>
          <type name="Expr" c:type="TmplExpr*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="140">A #TmplSymbol</doc>
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="params"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-symbol.c"
                 line="141">A list of parameters</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_type"
              c:identifier="tmpl_symbol_get_symbol_type">
        <source-position filename="../src/tmpl-symbol.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="SymbolType" c:type="TmplSymbolType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="tmpl_symbol_get_value">
        <source-position filename="../src/tmpl-symbol.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="tmpl_symbol_ref">
        <source-position filename="../src/tmpl-symbol.h" line="35"/>
        <return-value transfer-ownership="full">
          <type name="Symbol" c:type="TmplSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="tmpl_symbol_unref">
        <source-position filename="../src/tmpl-symbol.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="TmplSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="SymbolType"
                 glib:type-name="TmplSymbolType"
                 glib:get-type="tmpl_symbol_type_get_type"
                 c:type="TmplSymbolType">
      <member name="expr"
              value="0"
              c:identifier="TMPL_SYMBOL_EXPR"
              glib:nick="expr">
      </member>
      <member name="value"
              value="1"
              c:identifier="TMPL_SYMBOL_VALUE"
              glib:nick="value">
      </member>
    </enumeration>
    <function-macro name="TODO" c:identifier="TMPL_TODO" introspectable="0">
      <source-position filename="../src/tmpl-debug.h" line="40"/>
      <parameters>
        <parameter name="_msg">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Template"
           c:symbol-prefix="template"
           c:type="TmplTemplate"
           parent="GObject.Object"
           glib:type-name="TmplTemplate"
           glib:get-type="tmpl_template_get_type"
           glib:type-struct="TemplateClass">
      <source-position filename="../src/tmpl-template.h" line="42"/>
      <constructor name="new" c:identifier="tmpl_template_new">
        <doc xml:space="preserve"
             filename="../src/tmpl-template.c"
             line="139">Creates a new #TmplTemplate.

If @locator is specified, @locator will be used to resolve include
directives when parsing the template.</doc>
        <source-position filename="../src/tmpl-template.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-template.c"
               line="148">A #TmplTemplate.</doc>
          <type name="Template" c:type="TmplTemplate*"/>
        </return-value>
        <parameters>
          <parameter name="locator"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="141">A #TmplTemplateLocator or %NULL.</doc>
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="expand" c:identifier="tmpl_template_expand" throws="1">
        <doc xml:space="preserve"
             filename="../src/tmpl-template.c"
             line="415">Expands a template into @stream using the @scope provided.

@scope should have all of the variables set that are required to expand
the template, or you will get a symbol reference error and %FALSE will
be returned.

To set a symbol value, get the symbol with tmpl_scope_get() and assign
a value using tmpl_scope_assign_value() or similar methods.</doc>
        <source-position filename="../src/tmpl-template.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/tmpl-template.c"
               line="432">%TRUE if successful, otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="417">A TmplTemplate.</doc>
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="418">a #GOutputStream to write the results to</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="scope"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="419">A #TmplScope containing state for the template, or %NULL.</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="420">An optional cancellable for the operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_string"
              c:identifier="tmpl_template_expand_string"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/tmpl-template.c"
             line="488">Expands the template and returns the result as a string.</doc>
        <source-position filename="../src/tmpl-template.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-template.c"
               line="496">A newly allocated string, or %NULL upon failure.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="490">A #TmplTemplate.</doc>
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="scope"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="491">A #TmplScope or %NULL.</doc>
            <type name="Scope" c:type="TmplScope*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_locator" c:identifier="tmpl_template_get_locator">
        <doc xml:space="preserve"
             filename="../src/tmpl-template.c"
             line="534">Gets the template locator used when resolving template includes.</doc>
        <source-position filename="../src/tmpl-template.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/tmpl-template.c"
               line="540">a #TmplTemplateLocator or %NULL.</doc>
          <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template.c"
                 line="536">A #TmplTemplate</doc>
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse" c:identifier="tmpl_template_parse" throws="1">
        <source-position filename="../src/tmpl-template.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_file"
              c:identifier="tmpl_template_parse_file"
              throws="1">
        <source-position filename="../src/tmpl-template.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_path"
              c:identifier="tmpl_template_parse_path"
              throws="1">
        <source-position filename="../src/tmpl-template.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_resource"
              c:identifier="tmpl_template_parse_resource"
              throws="1">
        <source-position filename="../src/tmpl-template.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="parse_string"
              c:identifier="tmpl_template_parse_string"
              throws="1">
        <source-position filename="../src/tmpl-template.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locator" c:identifier="tmpl_template_set_locator">
        <source-position filename="../src/tmpl-template.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Template" c:type="TmplTemplate*"/>
          </instance-parameter>
          <parameter name="locator" transfer-ownership="none">
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </parameter>
        </parameters>
      </method>
      <property name="locator"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="TemplateLocator"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TemplateClass"
            c:type="TmplTemplateClass"
            glib:is-gtype-struct-for="Template">
      <source-position filename="../src/tmpl-template.h" line="42"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="TemplateLocator"
           c:symbol-prefix="template_locator"
           c:type="TmplTemplateLocator"
           parent="GObject.Object"
           glib:type-name="TmplTemplateLocator"
           glib:get-type="tmpl_template_locator_get_type"
           glib:type-struct="TemplateLocatorClass">
      <doc xml:space="preserve"
           filename="../src/tmpl-template-locator.c"
           line="24">The #TmplTemplateLoader class is used to specify how templates
should be loaded. This can be used directly by your code that
will compile the data streams into #TmplTemplate instances, or
by a #TmplTemplate that is resolving includes from the
`{{include "path.tmpl"}}` directive.

See #TmplTemplate:locator for more information.</doc>
      <source-position filename="../src/tmpl-template-locator.h" line="45"/>
      <constructor name="new" c:identifier="tmpl_template_locator_new">
        <source-position filename="../src/tmpl-template-locator.h" line="48"/>
        <return-value transfer-ownership="full">
          <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
        </return-value>
      </constructor>
      <virtual-method name="locate" invoker="locate" throws="1">
        <doc xml:space="preserve"
             filename="../src/tmpl-template-locator.c"
             line="216">This will resolve the relative path using the search paths found within
the template loader.</doc>
        <source-position filename="../src/tmpl-template-locator.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-template-locator.c"
               line="224">A #GInputStream or %NULL and @error is set.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template-locator.c"
                 line="218">A #TmplTemplateLocator.</doc>
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template-locator.c"
                 line="219">a relative path to the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_search_path"
              c:identifier="tmpl_template_locator_append_search_path">
        <source-position filename="../src/tmpl-template-locator.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_search_path"
              c:identifier="tmpl_template_locator_get_search_path">
        <doc xml:space="preserve"
             filename="../src/tmpl-template-locator.c"
             line="179">Gets the current search path used by the template locator.</doc>
        <source-position filename="../src/tmpl-template-locator.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-template-locator.c"
               line="185">A %NULL-terminated array of strings.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template-locator.c"
                 line="181">A #TmplTemplateLocator</doc>
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="locate"
              c:identifier="tmpl_template_locator_locate"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/tmpl-template-locator.c"
             line="216">This will resolve the relative path using the search paths found within
the template loader.</doc>
        <source-position filename="../src/tmpl-template-locator.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/tmpl-template-locator.c"
               line="224">A #GInputStream or %NULL and @error is set.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template-locator.c"
                 line="218">A #TmplTemplateLocator.</doc>
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template-locator.c"
                 line="219">a relative path to the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_search_path"
              c:identifier="tmpl_template_locator_prepend_search_path">
        <source-position filename="../src/tmpl-template-locator.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TemplateLocatorClass"
            c:type="TmplTemplateLocatorClass"
            glib:is-gtype-struct-for="TemplateLocator">
      <source-position filename="../src/tmpl-template-locator.h" line="45"/>
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="locate">
        <callback name="locate" throws="1">
          <source-position filename="../src/tmpl-template-locator.h"
                           line="42"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/tmpl-template-locator.c"
                 line="224">A #GInputStream or %NULL and @error is set.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/tmpl-template-locator.c"
                   line="218">A #TmplTemplateLocator.</doc>
              <type name="TemplateLocator" c:type="TmplTemplateLocator*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/tmpl-template-locator.c"
                   line="219">a relative path to the file</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function-macro name="UNAVAILABLE"
                    c:identifier="TMPL_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="../src/tmpl-version-macros.h" line="37"/>
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_S" value="3.34.0" c:type="TMPL_VERSION_S">
      <doc xml:space="preserve"
           filename="../src/tmpl-version.h"
           line="61">Dazzle version, encoded as a string, useful for printing and
concatenation.</doc>
      <source-position filename="../src/tmpl-version.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="error_quark"
              c:identifier="tmpl_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="expr_from_string"
              c:identifier="tmpl_expr_from_string"
              moved-to="Expr.from_string"
              throws="1">
      <source-position filename="../src/tmpl-expr.h" line="33"/>
      <return-value transfer-ownership="full">
        <type name="Expr" c:type="TmplExpr*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="tmplversion">
      <doc xml:space="preserve"
           filename="../src/tmpl-version.h"
           line="26">Dazzle provides macros to check the version of the library at compile-time</doc>
    </docsection>
  </namespace>
</repository>
