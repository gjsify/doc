<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="gweather-3.0"/>
  <c:include name="libgweather/gweather.h"/>
  <namespace name="GWeather"
             version="3.0"
             shared-library="libgweather-3.so.16"
             c:identifier-prefixes="GWeather"
             c:symbol-prefixes="gweather">
    <alias name="MoonLatitude" c:type="GWeatherMoonLatitude">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="350">The moon declension, in degrees.</doc>
      <source-position filename="../libgweather/gweather-weather.h"
                       line="355"/>
      <type name="gdouble" c:type="gdouble"/>
    </alias>
    <alias name="MoonPhase" c:type="GWeatherMoonPhase">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="342">The current phase of the moon, represented as degrees,
where 0 is the new moon, 90 is the first quarter, etc.</doc>
      <source-position filename="../libgweather/gweather-weather.h"
                       line="348"/>
      <type name="gdouble" c:type="gdouble"/>
    </alias>
    <enumeration name="ConditionPhenomenon"
                 glib:type-name="GWeatherConditionPhenomenon"
                 glib:get-type="gweather_phenomenon_get_type"
                 c:type="GWeatherConditionPhenomenon">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="245">The current or forecasted significant phenomenon.</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_PHENOMENON_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="247">value not available</doc>
      </member>
      <member name="none"
              value="0"
              c:identifier="GWEATHER_PHENOMENON_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="248">no significant phenomenon</doc>
      </member>
      <member name="drizzle"
              value="1"
              c:identifier="GWEATHER_PHENOMENON_DRIZZLE"
              glib:nick="drizzle">
      </member>
      <member name="rain"
              value="2"
              c:identifier="GWEATHER_PHENOMENON_RAIN"
              glib:nick="rain">
      </member>
      <member name="snow"
              value="3"
              c:identifier="GWEATHER_PHENOMENON_SNOW"
              glib:nick="snow">
      </member>
      <member name="snow_grains"
              value="4"
              c:identifier="GWEATHER_PHENOMENON_SNOW_GRAINS"
              glib:nick="snow-grains">
      </member>
      <member name="ice_crystals"
              value="5"
              c:identifier="GWEATHER_PHENOMENON_ICE_CRYSTALS"
              glib:nick="ice-crystals">
      </member>
      <member name="ice_pellets"
              value="6"
              c:identifier="GWEATHER_PHENOMENON_ICE_PELLETS"
              glib:nick="ice-pellets">
      </member>
      <member name="hail"
              value="7"
              c:identifier="GWEATHER_PHENOMENON_HAIL"
              glib:nick="hail">
      </member>
      <member name="small_hail"
              value="8"
              c:identifier="GWEATHER_PHENOMENON_SMALL_HAIL"
              glib:nick="small-hail">
      </member>
      <member name="unknown_precipitation"
              value="9"
              c:identifier="GWEATHER_PHENOMENON_UNKNOWN_PRECIPITATION"
              glib:nick="unknown-precipitation">
      </member>
      <member name="mist"
              value="10"
              c:identifier="GWEATHER_PHENOMENON_MIST"
              glib:nick="mist">
      </member>
      <member name="fog"
              value="11"
              c:identifier="GWEATHER_PHENOMENON_FOG"
              glib:nick="fog">
      </member>
      <member name="smoke"
              value="12"
              c:identifier="GWEATHER_PHENOMENON_SMOKE"
              glib:nick="smoke">
      </member>
      <member name="volcanic_ash"
              value="13"
              c:identifier="GWEATHER_PHENOMENON_VOLCANIC_ASH"
              glib:nick="volcanic-ash">
      </member>
      <member name="sand"
              value="14"
              c:identifier="GWEATHER_PHENOMENON_SAND"
              glib:nick="sand">
      </member>
      <member name="haze"
              value="15"
              c:identifier="GWEATHER_PHENOMENON_HAZE"
              glib:nick="haze">
      </member>
      <member name="spray"
              value="16"
              c:identifier="GWEATHER_PHENOMENON_SPRAY"
              glib:nick="spray">
      </member>
      <member name="dust"
              value="17"
              c:identifier="GWEATHER_PHENOMENON_DUST"
              glib:nick="dust">
      </member>
      <member name="squall"
              value="18"
              c:identifier="GWEATHER_PHENOMENON_SQUALL"
              glib:nick="squall">
      </member>
      <member name="sandstorm"
              value="19"
              c:identifier="GWEATHER_PHENOMENON_SANDSTORM"
              glib:nick="sandstorm">
      </member>
      <member name="duststorm"
              value="20"
              c:identifier="GWEATHER_PHENOMENON_DUSTSTORM"
              glib:nick="duststorm">
      </member>
      <member name="funnel_cloud"
              value="21"
              c:identifier="GWEATHER_PHENOMENON_FUNNEL_CLOUD"
              glib:nick="funnel-cloud">
      </member>
      <member name="tornado"
              value="22"
              c:identifier="GWEATHER_PHENOMENON_TORNADO"
              glib:nick="tornado">
      </member>
      <member name="dust_whirls"
              value="23"
              c:identifier="GWEATHER_PHENOMENON_DUST_WHIRLS"
              glib:nick="dust-whirls">
      </member>
      <member name="last"
              value="24"
              c:identifier="GWEATHER_PHENOMENON_LAST"
              glib:nick="last">
      </member>
    </enumeration>
    <enumeration name="ConditionQualifier"
                 glib:type-name="GWeatherConditionQualifier"
                 glib:get-type="gweather_qualifier_get_type"
                 c:type="GWeatherConditionQualifier">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="286">An additional modifier applied to a #GWeatherConditionPhenomenon to
describe the current or forecasted weather conditions.
The exact meaning of each qualifier is described at
http://www.weather.com/glossary/ and
http://www.crh.noaa.gov/arx/wx.tbl.php</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_QUALIFIER_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="288">value not available</doc>
      </member>
      <member name="none"
              value="0"
              c:identifier="GWEATHER_QUALIFIER_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="289">no qualifier for the phenomenon</doc>
      </member>
      <member name="vicinity"
              value="1"
              c:identifier="GWEATHER_QUALIFIER_VICINITY"
              glib:nick="vicinity">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="290">phenomenon happening in the proximity
                              of the location, not in the actual location</doc>
      </member>
      <member name="light"
              value="2"
              c:identifier="GWEATHER_QUALIFIER_LIGHT"
              glib:nick="light">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="292">phenomenon is light or predicted to be light</doc>
      </member>
      <member name="moderate"
              value="3"
              c:identifier="GWEATHER_QUALIFIER_MODERATE"
              glib:nick="moderate">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="293">phenomenon is moderate or predicted to be
                              moderate</doc>
      </member>
      <member name="heavy"
              value="4"
              c:identifier="GWEATHER_QUALIFIER_HEAVY"
              glib:nick="heavy">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="295">phenomenon is heavy or predicted to be heavy</doc>
      </member>
      <member name="shallow"
              value="5"
              c:identifier="GWEATHER_QUALIFIER_SHALLOW"
              glib:nick="shallow">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="296">shallow fog (only valid with
                             %GWEATHER_PHENOMENON_FOG)</doc>
      </member>
      <member name="patches"
              value="6"
              c:identifier="GWEATHER_QUALIFIER_PATCHES"
              glib:nick="patches">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="298">patches of fog (only valid with
                             %GWEATHER_PHENOMENON_FOG)</doc>
      </member>
      <member name="partial"
              value="7"
              c:identifier="GWEATHER_QUALIFIER_PARTIAL"
              glib:nick="partial">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="300">partial fog (only valid with
                            %GWEATHER_PHENOMENON_FOG)</doc>
      </member>
      <member name="thunderstorm"
              value="8"
              c:identifier="GWEATHER_QUALIFIER_THUNDERSTORM"
              glib:nick="thunderstorm">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="302">phenomenon will be a thunderstorm
                                  and/or will include lightning</doc>
      </member>
      <member name="blowing"
              value="9"
              c:identifier="GWEATHER_QUALIFIER_BLOWING"
              glib:nick="blowing">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="304">phenomenon is blowing (valid with
                             %GWEATHER_PHENOMENON_SNOW, %GWEATHER_PHENOMENON_SAND,
                             %GWEATHER_PHENOMENON_SPRAY, %GWEATHER_PHENOMENON_DUST)</doc>
      </member>
      <member name="showers"
              value="10"
              c:identifier="GWEATHER_QUALIFIER_SHOWERS"
              glib:nick="showers">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="307">phenomenon is heavy and involves showers</doc>
      </member>
      <member name="drifting"
              value="11"
              c:identifier="GWEATHER_QUALIFIER_DRIFTING"
              glib:nick="drifting">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="308">phenomenon is moving across (valid
                              with %GWEATHER_PHENOMENON_SAND and
                              %GWEATHER_PHENOMENON_DUST)</doc>
      </member>
      <member name="freezing"
              value="12"
              c:identifier="GWEATHER_QUALIFIER_FREEZING"
              glib:nick="freezing">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="311">phenomenon is freezing and involves ice</doc>
      </member>
      <member name="last"
              value="13"
              c:identifier="GWEATHER_QUALIFIER_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="312">maximum value of the enumeration.</doc>
      </member>
    </enumeration>
    <record name="Conditions" c:type="GWeatherConditions">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="390">A convenient way to describe the current or forecast
weather phenomenon, if significant, and its associated
modifier. If the value is not significant, the weather conditions
are described by gweather_info_get_sky() instead.

In general it is discouraged to use this value directly to compute
the forecast icon: applications should instead use
gweather_info_get_icon_name() or
gweather_info_get_symbolic_icon_name().</doc>
      <source-position filename="../libgweather/gweather-weather.h"
                       line="410"/>
      <field name="significant" writable="1">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="392">%TRUE if the struct contains usable data, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="phenomenon" writable="1">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="393">the main weather phenomenon</doc>
        <type name="ConditionPhenomenon" c:type="GWeatherConditionPhenomenon"/>
      </field>
      <field name="qualifier" writable="1">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="394">a modifier for @phenomenon</doc>
        <type name="ConditionQualifier" c:type="GWeatherConditionQualifier"/>
      </field>
      <method name="to_string" c:identifier="gweather_conditions_to_string">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="413"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conditions" transfer-ownership="none">
            <type name="Conditions" c:type="GWeatherConditions*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string_full"
              c:identifier="gweather_conditions_to_string_full">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="415"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conditions" transfer-ownership="none">
            <type name="Conditions" c:type="GWeatherConditions*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="DistanceUnit"
                 glib:type-name="GWeatherDistanceUnit"
                 glib:get-type="gweather_distance_unit_get_type"
                 c:type="GWeatherDistanceUnit">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-enums.h"
           line="96">The measure unit to use for sky visibility values, when retrieved
by gweather_info_get_value_visibility().</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_DISTANCE_UNIT_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="98">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_DISTANCE_UNIT_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="99">the user preferred distance unit</doc>
      </member>
      <member name="meters"
              value="2"
              c:identifier="GWEATHER_DISTANCE_UNIT_METERS"
              glib:nick="meters">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="100">meters</doc>
      </member>
      <member name="km"
              value="3"
              c:identifier="GWEATHER_DISTANCE_UNIT_KM"
              glib:nick="km">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="101">kilometers (= 1000 meters)</doc>
      </member>
      <member name="miles"
              value="4"
              c:identifier="GWEATHER_DISTANCE_UNIT_MILES"
              glib:nick="miles">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="102">miles</doc>
      </member>
    </enumeration>
    <callback name="FilterFunc" c:type="GWeatherFilterFunc">
      <source-position filename="../libgweather/gweather-location.h"
                       line="35"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <type name="Location" c:type="GWeatherLocation*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="FormatOptions"
              glib:type-name="GWeatherFormatOptions"
              glib:get-type="gweather_format_options_get_type"
              c:type="GWeatherFormatOptions">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-enums.h"
           line="115">Format options to influence the returned string of the
gweather_*_to_string_full() functions.</doc>
      <member name="default"
              value="0"
              c:identifier="GWEATHER_FORMAT_OPTION_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="117">The default string format</doc>
      </member>
      <member name="sentence_capitalization"
              value="1"
              c:identifier="GWEATHER_FORMAT_OPTION_SENTENCE_CAPITALIZATION"
              glib:nick="sentence-capitalization">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="118">Capitalize as if the string
                                                 was starting a sentence</doc>
      </member>
      <member name="no_capitalization"
              value="2"
              c:identifier="GWEATHER_FORMAT_OPTION_NO_CAPITALIZATION"
              glib:nick="no-capitalization">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="120">Capitalize as if the string was
                                           appearing within a sentence</doc>
      </member>
    </bitfield>
    <function-macro name="INFO"
                    c:identifier="GWEATHER_INFO"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-weather.h" line="57"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INFO_CLASS"
                    c:identifier="GWEATHER_INFO_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-weather.h" line="59"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INFO_GET_CLASS"
                    c:identifier="GWEATHER_INFO_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-weather.h" line="61"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INFO"
                    c:identifier="GWEATHER_IS_INFO"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-weather.h" line="58"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INFO_CLASS"
                    c:identifier="GWEATHER_IS_INFO_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-weather.h" line="60"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOCATION_ENTRY"
                    c:identifier="GWEATHER_IS_LOCATION_ENTRY"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="38"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOCATION_ENTRY_CLASS"
                    c:identifier="GWEATHER_IS_LOCATION_ENTRY_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TIMEZONE_MENU"
                    c:identifier="GWEATHER_IS_TIMEZONE_MENU"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="37"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TIMEZONE_MENU_CLASS"
                    c:identifier="GWEATHER_IS_TIMEZONE_MENU_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Info"
           c:symbol-prefix="info"
           c:type="GWeatherInfo"
           parent="GObject.Object"
           glib:type-name="GWeatherInfo"
           glib:get-type="gweather_info_get_type"
           glib:type-struct="InfoClass">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.c"
           line="45">#GWeatherInfo provides a handy way to access weather conditions
and forecasts from a #GWeatherLocation, aggregating multiple
different web services.

It includes also astronomical data such as sunrise times and
moon phases.</doc>
      <source-position filename="../libgweather/gweather-weather.h" line="76"/>
      <constructor name="new" c:identifier="gweather_info_new">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="2327">Builds a new #GWeatherInfo that will provide weather information about
@location.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="2334">a new #GWeatherInfo</doc>
          <type name="Info" c:type="GWeatherInfo*"/>
        </return-value>
        <parameters>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2329">the desidered #GWeatherLocation (%NULL for default)</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="store_cache" c:identifier="gweather_info_store_cache">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="668">Ensures that any data cached from the network is stored to disk.
Calling this is not necessary, as the cache will be saved when
the last reference to a #GWeatherInfo will be dropped.
On the other hand, it must be called if there is any chance that
the application will be closed without unreffing all objects, such
as when using a language binding that employs a GC.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <virtual-method name="updated">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="abort" c:identifier="gweather_info_abort">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apparent" c:identifier="gweather_info_get_apparent">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="131"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attribution"
              c:identifier="gweather_info_get_attribution">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="1357">Some weather services require the application showing the
data to include an attribution text, possibly including links
to the service website.
This must be shown prominently toghether with the data.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1366">the required attribution text, in Pango
         markup form, or %NULL if not required</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1359">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_conditions"
              c:identifier="gweather_info_get_conditions">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="112"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dew" c:identifier="gweather_info_get_dew">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="121"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled_providers"
              c:identifier="gweather_info_get_enabled_providers">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="Provider" c:type="GWeatherProvider"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forecast_list"
              c:identifier="gweather_info_get_forecast_list">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1327">list
of GWeatherInfo* objects for the forecast.
The list is owned by the 'info' object thus is alive as long
as the 'info'. The 'update' property is the date/time when the
forecast info is used for.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Info"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1325">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_humidity" c:identifier="gweather_info_get_humidity">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="123"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name" c:identifier="gweather_info_get_icon_name">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="gweather_info_get_location">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="Location" c:type="const GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location_name"
              c:identifier="gweather_info_get_location_name">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pressure" c:identifier="gweather_info_get_pressure">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="127"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_radar" c:identifier="gweather_info_get_radar">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1348">what?</doc>
          <type name="GdkPixbuf.PixbufAnimation" c:type="GdkPixbufAnimation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1346">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sky" c:identifier="gweather_info_get_sky">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="110"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sunrise" c:identifier="gweather_info_get_sunrise">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="133"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sunset" c:identifier="gweather_info_get_sunset">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="135"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbolic_icon_name"
              c:identifier="gweather_info_get_symbolic_icon_name">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp" c:identifier="gweather_info_get_temp">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="115"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_max" c:identifier="gweather_info_get_temp_max">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="119"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_min" c:identifier="gweather_info_get_temp_min">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="117"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_summary"
              c:identifier="gweather_info_get_temp_summary">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="144"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_upcoming_moonphases"
              c:identifier="gweather_info_get_upcoming_moonphases">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="386"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/weather-moon.c"
               line="220">gboolean indicating success or failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/weather-moon.c"
                 line="214">a #GWeatherInfo containing the time_t of interest</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="phases"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/weather-moon.c"
                 line="215">An array of four
   time_t values that will hold the returned values.
   The values are estimates of the time of the next new, quarter, full and
   three-quarter moons.</doc>
            <array zero-terminated="0" c:type="time_t*" fixed-size="4">
              <type name="gulong"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_update" c:identifier="gweather_info_get_update">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="108"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_apparent"
              c:identifier="gweather_info_get_value_apparent">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="372"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1944">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1940">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1941">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1942">the apparent temperature</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_conditions"
              c:identifier="gweather_info_get_value_conditions">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="1805">Fills out @phenomenon and @qualifier with current weather conditions.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="362"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1812">TRUE is out arguments are valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1807">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="phenomenon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1808">a location for a #GWeatherConditionPhenomenon.</doc>
            <type name="ConditionPhenomenon"
                  c:type="GWeatherConditionPhenomenon*"/>
          </parameter>
          <parameter name="qualifier"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1809">a location for a #GWeatherConditionQualifier.</doc>
            <type name="ConditionQualifier"
                  c:type="GWeatherConditionQualifier*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_dew" c:identifier="gweather_info_get_value_dew">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="370"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1917">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1913">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1914">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1915">the dew point</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_moonphase"
              c:identifier="gweather_info_get_value_moonphase">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="384"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="2033">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2029">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2030">the current moon phase</doc>
            <type name="MoonPhase" c:type="GWeatherMoonPhase*"/>
          </parameter>
          <parameter name="lat"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2031">the moon declension</doc>
            <type name="MoonLatitude" c:type="GWeatherMoonLatitude*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_pressure"
              c:identifier="gweather_info_get_value_pressure">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="376"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="2097">TRUE if @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2093">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2094">the desired unit, as a #GWeatherPressureUnit</doc>
            <type name="PressureUnit" c:type="GWeatherPressureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2095">forecasted pressure, expressed in @unit</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_sky" c:identifier="gweather_info_get_value_sky">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="1780">Fills out @sky with current sky conditions.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="360"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1786">TRUE is @sky is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1782">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="sky"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1783">a location for a #GWeatherSky.</doc>
            <type name="Sky" c:type="GWeatherSky*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_sunrise"
              c:identifier="gweather_info_get_value_sunrise">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="380"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1986">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1983">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1984">the time of sunrise</doc>
            <type name="gulong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_sunset"
              c:identifier="gweather_info_get_value_sunset">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="382"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="2009">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2006">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2007">the time of sunset</doc>
            <type name="gulong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_temp"
              c:identifier="gweather_info_get_value_temp">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="364"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1849">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1845">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1846">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1847">the temperature value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_temp_max"
              c:identifier="gweather_info_get_value_temp_max">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="368"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1893">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1889">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1890">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1891">the maximum temperature value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_temp_min"
              c:identifier="gweather_info_get_value_temp_min">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="366"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1869">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1865">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1866">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1867">the minimum temperature value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_update"
              c:identifier="gweather_info_get_value_update">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="1958">Note that @value may be 0 if @info has not yet been updated.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="358"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1965">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1960">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1961">the time @info was last updated</doc>
            <type name="glong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_visibility"
              c:identifier="gweather_info_get_value_visibility">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="378"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="2119">TRUE if @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2115">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2116">the desired unit, as a #GWeatherDistanceUnit</doc>
            <type name="DistanceUnit" c:type="GWeatherDistanceUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2117">forecasted visibility, expressed in @unit</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_wind"
              c:identifier="gweather_info_get_value_wind">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="374"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="2062">TRUE if @speed and @direction are valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2057">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2058">the desired unit, as a #GWeatherSpeedUnit</doc>
            <type name="SpeedUnit" c:type="GWeatherSpeedUnit"/>
          </parameter>
          <parameter name="speed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2059">forecasted wind speed</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="direction"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2060">forecasted wind direction</doc>
            <type name="WindDirection" c:type="GWeatherWindDirection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visibility"
              c:identifier="gweather_info_get_visibility">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="129"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_weather_summary"
              c:identifier="gweather_info_get_weather_summary">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1396">a summary for current weather conditions.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1394">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wind" c:identifier="gweather_info_get_wind">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="125"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_daytime" c:identifier="gweather_info_is_daytime">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="1424">Whether it is daytime (that is, if the sun is visible)
  or not at the location and the point of time referred by @info.
  This is mostly equivalent to comparing the return value
  of gweather_info_get_value_sunrise() and
  gweather_info_get_value_sunset(), but it accounts also
  for midnight sun and polar night, for locations within
  the Artic and Antartic circles.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="1422">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gweather_info_is_valid">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="network_error" c:identifier="gweather_info_network_error">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_sun_event"
              c:identifier="gweather_info_next_sun_event">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled_providers"
              c:identifier="gweather_info_set_enabled_providers">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="providers" transfer-ownership="none">
            <type name="Provider" c:type="GWeatherProvider"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location" c:identifier="gweather_info_set_location">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="2193">Changes @info to report weather for @location.
Note that this will clear any forecast or current conditions from
@info, you must call gweather_info_update() to obtain the new data.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2195">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="2196">a location for which weather is desired</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gweather_info_update">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="690">Requests a reload of weather conditions and forecast data from
enabled network services.
This call does no synchronous IO: rather, the result is delivered
by emitting the #GWeatherInfo::updated signal.
Note that if no network services are enabled, the signal will not
be emitted. See #GWeatherInfo:enabled-providers for details.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="692">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="enabled-providers"
                writable="1"
                transfer-ownership="none">
        <type name="Provider"/>
      </property>
      <property name="location"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Location"/>
      </property>
      <field name="parent_instance" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="InfoPrivate" c:type="GWeatherInfoPrivate*"/>
      </field>
      <glib:signal name="updated" when="first">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="2307">This signal is emitted after the initial fetch of the weather
data from upstream services, and after every successful call
to @gweather_info_update().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="InfoClass"
            c:type="GWeatherInfoClass"
            glib:is-gtype-struct-for="Info">
      <source-position filename="../libgweather/gweather-weather.h" line="76"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="updated">
        <callback name="updated">
          <source-position filename="../libgweather/gweather-weather.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="info" transfer-ownership="none">
              <type name="Info" c:type="GWeatherInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="InfoPrivate" c:type="GWeatherInfoPrivate" disguised="1">
      <source-position filename="../libgweather/gweather-weather.h" line="54"/>
    </record>
    <function-macro name="LOCATION_ENTRY"
                    c:identifier="GWEATHER_LOCATION_ENTRY"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="36"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOCATION_ENTRY_CLASS"
                    c:identifier="GWEATHER_LOCATION_ENTRY_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="37"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOCATION_ENTRY_GET_CLASS"
                    c:identifier="GWEATHER_LOCATION_ENTRY_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="LOCATION_ENTRY_H"
              value="1"
              c:type="GWEATHER_LOCATION_ENTRY_H">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="22"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="Location"
            c:type="GWeatherLocation"
            glib:type-name="GWeatherLocation"
            glib:get-type="gweather_location_get_type"
            c:symbol-prefix="location">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-location.c"
           line="45">A #GWeatherLocation represents a "location" of some type known to
libgweather; anything from a single weather station to the entire
world. See #GWeatherLocationLevel for information about how the
hierarchy of locations works.</doc>
      <source-position filename="../libgweather/gweather-location.h"
                       line="34"/>
      <constructor name="new_detached"
                   c:identifier="gweather_location_new_detached">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1774">Construct a new location from the given data, supplementing
any missing information from the static database.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="147"/>
        <return-value transfer-ownership="full">
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1776">the user visible location name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icao"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1777">the ICAO code of the location</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1778">the latitude of the location</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1779">the longitude of the location</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="deserialize" c:identifier="gweather_location_deserialize">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1732">This call undoes the effect of gweather_location_serialize(), that
is, it turns a #GVariant into a #GWeatherLocation. The conversion
happens in the context of @world (i.e, for a city or weather station,
the resulting location will be attached to a administrative division,
country and region as appropriate).</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1743">the deserialized location.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="world" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1734">a world-level #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="serialized" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1735">the #GVariant representing the #GWeatherLocation</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detect_nearest_city"
              c:identifier="gweather_location_detect_nearest_city"
              version="3.12">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="950">Initializes geocode reversing to find place for (@lat, @lon) coordinates. Calls the callback
function passed by user when the result is ready.

@loc must be at most a %GWEATHER_LOCATION_ADM1 location.
This restriction may be lifted in a future version.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="952">The parent location, which will be searched recursively</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="lat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="953">Latitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="lon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="954">Longitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="955">optional, NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="956">callback function for GAsyncReadyCallback argument for GAsyncResult</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="957">user data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gweather_location_equal">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1394">Compares two #GWeatherLocation and sees if they represent the same
place.
It is only legal to call this for cities, weather stations or
detached locations.
Note that this function only checks for geographical characteristics,
such as coordinates and METAR code. It is still possible that the two
locations belong to different worlds (in which case care must be
taken when passing them GWeatherLocationEntry and GWeatherInfo), or
if one is them is detached it could have a custom name.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1409">%TRUE if the two locations represent the same place as
         far as libgweather can tell, and %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="one" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1396">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="two" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1397">another #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_country_code"
              c:identifier="gweather_location_find_by_country_code">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1377">Retrieves the country identified by the specified ISO 3166 code,
if present in the database.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1385">a country level #GWeatherLocation, or %NULL.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="world" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1379">a #GWeatherLocation at the world</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="country_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1380">a country code</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_station_code"
              c:identifier="gweather_location_find_by_station_code">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1352">Retrieves the weather station identifier by @station_code.
Note that multiple instances of the same weather station can exist
in the database, and this function will return any of them, so this
not usually what you want.

See gweather_location_deserialize() to recover a stored #GWeatherLocation.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1364">a weather station level #GWeatherLocation for @station_code,
         or %NULL if none exists in the database.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="world" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1354">a #GWeatherLocation at the world level</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="station_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1355">a 4 letter METAR code</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_nearest_city"
              c:identifier="gweather_location_find_nearest_city"
              version="3.12">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="802">Finds the nearest city to the passed latitude and
longitude, among the descendants of @loc.

@loc must be at most a %GWEATHER_LOCATION_ADM1 location.
This restriction may be lifted in a future version.

Note that this function does not check if (@lat, @lon) fall inside
@loc, or are in the same region and timezone as the return value.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="817">the city closest to (@lat, @lon), in the
         region or administrative district of @loc.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="804">The parent location, which will be searched recursively</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="lat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="805">Latitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="lon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="806">Longitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_nearest_city_full"
              c:identifier="gweather_location_find_nearest_city_full"
              version="3.12">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="850">Finds the nearest city to the passed latitude and
longitude, among the descendants of @loc.

Supports the use of own filter function to filter out locations.
Geocoding should be done on the application side if needed.

@loc must be at most a %GWEATHER_LOCATION_ADM1 location.
This restriction may be lifted in a future version.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="869">the city closest to (@lat, @lon), in the
         region or administrative district of @loc with validation of filter function.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="852">The parent location, which will be searched recursively</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="lat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="853">Latitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="lon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="854">Longitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="855">returns true to continue check for
                                      the location and false to filter the location out</doc>
            <type name="FilterFunc" c:type="GWeatherFilterFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="857">for customization</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="858">to destroy user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_timezones"
              c:identifier="gweather_location_free_timezones">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1212">Frees the array of timezones returned by
gweather_location_get_timezones().</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1214">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="zones" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1215">an array returned from gweather_location_get_timezones()</doc>
            <type name="Timezone" c:type="GWeatherTimezone**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children"
              c:identifier="gweather_location_get_children">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="707">Gets an array of @loc's children; this is owned by @loc and will
not remain valid if @loc is freed.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="714">@loc's
children. (May be empty, but will not be %NULL.)</doc>
          <array c:type="GWeatherLocation**">
            <type name="Location" c:type="GWeatherLocation*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="709">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_city_name"
              c:identifier="gweather_location_get_city_name">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1250">For a %GWEATHER_LOCATION_CITY or %GWEATHER_LOCATION_DETACHED location,
this is equivalent to gweather_location_get_name().
For a %GWEATHER_LOCATION_WEATHER_STATION location, it is equivalent to
calling gweather_location_get_name() on the location's parent. For
other locations it will return %NULL.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1260">@loc's city name, or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1252">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_code" c:identifier="gweather_location_get_code">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1234">Gets the METAR station code associated with a
%GWEATHER_LOCATION_WEATHER_STATION location.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="123"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1241">@loc's METAR station code, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1236">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_coords" c:identifier="gweather_location_get_coords">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1040">Gets @loc's coordinates; you must check
gweather_location_has_coords() before calling this.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1042">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="latitude"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1043">on return will contain @loc's latitude</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="longitude"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1044">on return will contain @loc's longitude</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_country" c:identifier="gweather_location_get_country">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1084">Gets the ISO 3166 country code of @loc (or %NULL if @loc is a
region- or world-level location)</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1091">@loc's country code (or %NULL if @loc
is a region- or world-level location)</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1086">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_country_name"
              c:identifier="gweather_location_get_country_name">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1278">Gets the country name of loc.
For a %GWEATHER_LOCATION_COUNTRY location, this is equivalent to
gweather_location_get_name().
For a %GWEATHER_LOCATION_REGION and GWEATHER_LOCATION_WORLD location it
will return %NULL.
For other locations it will find the parent %GWEATHER_LOCATION_COUNTRY
and return its name.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="127"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1290">@loc's country name, or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1280">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distance"
              c:identifier="gweather_location_get_distance">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1062">Determines the distance in kilometers between @loc and @loc2.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1069">the distance between @loc and @loc2.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1064">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="loc2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1065">a second #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_english_name"
              c:identifier="gweather_location_get_english_name"
              version="3.36">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="602">Gets @loc's English name.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="608">@loc's English name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="604">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_english_sort_name"
              c:identifier="gweather_location_get_english_sort_name"
              version="3.38">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="619">Gets @loc's english "sort name", which is the english name after having
g_utf8_normalize() (with %G_NORMALIZE_ALL) and g_utf8_casefold()
called on it. You can use this to sort locations, or to comparing
user input against a location name.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="628">@loc's English name for sorting</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="621">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level" c:identifier="gweather_location_get_level">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="639">Gets @loc's level, from %GWEATHER_LOCATION_WORLD, to
%GWEATHER_LOCATION_WEATHER_STATION.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="646">@loc's level</doc>
          <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="641">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gweather_location_get_name">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="568">Gets @loc's name, localized into the current language.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="574">@loc's name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="570">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gweather_location_get_parent">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="691">Gets @loc's parent location.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="72"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="697">@loc's parent, or %NULL
if @loc is a %GWEATHER_LOCATION_WORLD node.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="693">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_name"
              c:identifier="gweather_location_get_sort_name">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="584">Gets @loc's "sort name", which is the name after having
g_utf8_normalize() (with %G_NORMALIZE_ALL) and g_utf8_casefold()
called on it. You can use this to sort locations, or to comparing
user input against a location name.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="593">@loc's sort name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="586">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezone"
              c:identifier="gweather_location_get_timezone">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1104">Gets the timezone associated with @loc, if known.

The timezone is owned either by @loc or by one of its parents.
FIXME.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="113"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1113">@loc's timezone, or
%NULL</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1106">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezone_str"
              c:identifier="gweather_location_get_timezone_str">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1145">Gets the timezone associated with @loc, if known, as a string.

The timezone string is owned either by @loc or by one of its
parents, do not free it.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="115"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1154">@loc's timezone as
a string, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1147">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezones"
              c:identifier="gweather_location_get_timezones">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1188">Gets an array of all timezones associated with any location under
@loc. You can use gweather_location_free_timezones() to free this
array.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1196">an array
of timezones. May be empty but will not be %NULL.</doc>
          <array c:type="GWeatherTimezone**">
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1190">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_coords" c:identifier="gweather_location_has_coords">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1025">Checks if @loc has valid latitude and longitude.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1031">%TRUE if @loc has valid latitude and longitude.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1027">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gweather_location_ref">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="477">Adds 1 to @loc's reference count.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="483">@loc</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="479">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="serialize" c:identifier="gweather_location_serialize">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="1706">Transforms a #GWeatherLocation into a #GVariant, in a way that
calling gweather_location_deserialize() will hold an equivalent
#GWeatherLocation.
The resulting variant can then be stored into GSettings or on disk.
This call is only valid for cities, weather stations and detached
locations.
The format of the resulting #GVariant is private to libgweather,
and it is subject to change. You should use the "v" format in GSettings,
to ensure maximum compatibility with future versions of the library.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="1720">the serialization of @location.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="1708">a city, weather station or detached #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gweather_location_unref">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="537">Subtracts 1 from @loc's reference count, and frees it if the
reference count reaches 0.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="539">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="detect_nearest_city_finish"
                c:identifier="gweather_location_detect_nearest_city_finish"
                throws="1">
        <source-position filename="../libgweather/gweather-location.h"
                         line="107"/>
        <return-value transfer-ownership="full">
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_world" c:identifier="gweather_location_get_world">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="435">Obtains the shared #GWeatherLocation of type %GWEATHER_LOCATION_WORLD,
representing a hierarchy containing all of the locations from
Locations.xml.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="442">a %GWEATHER_LOCATION_WORLD
location, or %NULL if Locations.xml could not be found or could not be parsed.
The return value is owned by libgweather and should not be modified or freed.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
      </function>
    </record>
    <class name="LocationEntry"
           c:symbol-prefix="location_entry"
           c:type="GWeatherLocationEntry"
           parent="Gtk.SearchEntry"
           glib:type-name="GWeatherLocationEntry"
           glib:get-type="gweather_location_entry_get_type"
           glib:type-struct="LocationEntryClass">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-location-entry.c"
           line="32">A subclass of #GtkSearchEntry that provides autocompletion on
#GWeatherLocation&lt;!-- --&gt;s</doc>
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="51"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="gweather_location_entry_new">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location-entry.c"
             line="831">Creates a new #GWeatherLocationEntry.

@top will normally be the location returned from
gweather_location_get_world(), but you can create an entry that
only accepts a smaller set of locations if you want.</doc>
        <source-position filename="../libgweather/gweather-location-entry.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location-entry.c"
               line="841">the new #GWeatherLocationEntry</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="top" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="833">the top-level location for the entry.</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_location"
              c:identifier="gweather_location_entry_get_location">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location-entry.c"
             line="381">Gets the location that was set by a previous call to
gweather_location_entry_set_location() or was selected by the user.</doc>
        <source-position filename="../libgweather/gweather-location-entry.h"
                         line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location-entry.c"
               line="388">the selected location
(which you must unref when you are done with it), or %NULL if no
location is selected.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="383">a #GWeatherLocationEntry</doc>
            <type name="LocationEntry" c:type="GWeatherLocationEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_custom_text"
              c:identifier="gweather_location_entry_has_custom_text">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location-entry.c"
             line="403">Checks whether or not @entry's text has been modified by the user.
Note that this does not mean that no location is associated with @entry.
gweather_location_entry_get_location() should be used for this.</doc>
        <source-position filename="../libgweather/gweather-location-entry.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location-entry.c"
               line="411">%TRUE if @entry's text was modified by the user, or %FALSE if
it's set to the default text of a location.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="405">a #GWeatherLocationEntry</doc>
            <type name="LocationEntry" c:type="GWeatherLocationEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_city" c:identifier="gweather_location_entry_set_city">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location-entry.c"
             line="422">Sets @entry's location to a city with the given @code, and given
@city_name, if non-%NULL. If there is no matching city, sets
@entry's location to %NULL.</doc>
        <source-position filename="../libgweather/gweather-location-entry.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location-entry.c"
               line="432">%TRUE if @entry's location could be set to a matching city,
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="424">a #GWeatherLocationEntry</doc>
            <type name="LocationEntry" c:type="GWeatherLocationEntry*"/>
          </instance-parameter>
          <parameter name="city_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="425">the city name, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="426">the METAR station code</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="gweather_location_entry_set_location">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location-entry.c"
             line="334">Sets @entry's location to @loc, and updates the text of the
entry accordingly.
Note that if the database contains a location that compares
equal to @loc, that will be chosen in place of @loc.</doc>
        <source-position filename="../libgweather/gweather-location-entry.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="336">a #GWeatherLocationEntry</doc>
            <type name="LocationEntry" c:type="GWeatherLocationEntry*"/>
          </instance-parameter>
          <parameter name="loc"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location-entry.c"
                 line="337">a #GWeatherLocation in @entry, or %NULL to
clear @entry</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <property name="location" writable="1" transfer-ownership="none">
        <type name="Location"/>
      </property>
      <property name="show-named-timezones"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="top"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Location"/>
      </property>
      <field name="parent">
        <type name="Gtk.SearchEntry" c:type="GtkSearchEntry"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LocationEntryPrivate"
              c:type="GWeatherLocationEntryPrivate*"/>
      </field>
    </class>
    <record name="LocationEntryClass"
            c:type="GWeatherLocationEntryClass"
            glib:is-gtype-struct-for="LocationEntry">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="51"/>
      <field name="parent_class">
        <type name="Gtk.SearchEntryClass" c:type="GtkSearchEntryClass"/>
      </field>
    </record>
    <record name="LocationEntryPrivate"
            c:type="GWeatherLocationEntryPrivate"
            disguised="1">
      <source-position filename="../libgweather/gweather-location-entry.h"
                       line="33"/>
    </record>
    <enumeration name="LocationLevel"
                 glib:type-name="GWeatherLocationLevel"
                 glib:get-type="gweather_location_level_get_type"
                 c:type="GWeatherLocationLevel">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-location.c"
           line="55">The size/scope of a particular #GWeatherLocation.

Locations form a hierarchy, with a %GWEATHER_LOCATION_WORLD
location at the top, divided into regions or countries, and so on.
Countries may or may not be divided into "adm1"s, and "adm1"s may
or may not be divided into "adm2"s. A city will have at least one,
and possibly several, weather stations inside it. Weather stations
will never appear outside of cities.

Building a database with gweather_location_get_world() will never
create detached instances, but deserializing might.</doc>
      <member name="world"
              value="0"
              c:identifier="GWEATHER_LOCATION_WORLD"
              glib:nick="world">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="57">A location representing the entire world.</doc>
      </member>
      <member name="region"
              value="1"
              c:identifier="GWEATHER_LOCATION_REGION"
              glib:nick="region">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="58">A location representing a continent or
other top-level region.</doc>
      </member>
      <member name="country"
              value="2"
              c:identifier="GWEATHER_LOCATION_COUNTRY"
              glib:nick="country">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="60">A location representing a "country" (or
other geographic unit that has an ISO-3166 country code)</doc>
      </member>
      <member name="adm1"
              value="3"
              c:identifier="GWEATHER_LOCATION_ADM1"
              glib:nick="adm1">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="62">A location representing a "first-level
administrative division"; ie, a state, province, or similar
division.</doc>
      </member>
      <member name="city"
              value="4"
              c:identifier="GWEATHER_LOCATION_CITY"
              glib:nick="city">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="65">A location representing a city</doc>
      </member>
      <member name="weather_station"
              value="5"
              c:identifier="GWEATHER_LOCATION_WEATHER_STATION"
              glib:nick="weather-station">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="66">A location representing a
weather station.</doc>
      </member>
      <member name="detached"
              value="6"
              c:identifier="GWEATHER_LOCATION_DETACHED"
              glib:nick="detached">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="68">A location that is detached from the
database, for example because it was loaded from external storage
and could not be fully recovered. The parent of this location is
the nearest weather station.</doc>
      </member>
      <member name="named_timezone"
              value="7"
              c:identifier="GWEATHER_LOCATION_NAMED_TIMEZONE"
              glib:nick="named-timezone">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="72">A location representing a named
or special timezone in the world, such as UTC</doc>
      </member>
      <function name="to_string"
                c:identifier="gweather_location_level_to_string">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="655">Returns the location level as a string, useful for debugging
purposes.</doc>
        <source-position filename="../libgweather/gweather-location.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="662">a string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-location.c"
                 line="657">a #GWeatherLocationLevel</doc>
            <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="PressureUnit"
                 glib:type-name="GWeatherPressureUnit"
                 glib:get-type="gweather_pressure_unit_get_type"
                 c:type="GWeatherPressureUnit">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-enums.h"
           line="70">The measure unit to use for atmospheric pressure values, when
retrieved by gweather_info_get_value_pressure().</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_PRESSURE_UNIT_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="72">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_PRESSURE_UNIT_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="73">the user preferred pressure unit</doc>
      </member>
      <member name="kpa"
              value="2"
              c:identifier="GWEATHER_PRESSURE_UNIT_KPA"
              glib:nick="kpa">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="74">kiloPascal (* 10^3 Pa)</doc>
      </member>
      <member name="hpa"
              value="3"
              c:identifier="GWEATHER_PRESSURE_UNIT_HPA"
              glib:nick="hpa">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="75">hectoPascal (* 10^2 Pa); also known
                             as millibars, but formatted differently</doc>
      </member>
      <member name="mb"
              value="4"
              c:identifier="GWEATHER_PRESSURE_UNIT_MB"
              glib:nick="mb">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="77">millibars; same as %GWEATHER_PRESSURE_UNIT_HPA</doc>
      </member>
      <member name="mm_hg"
              value="5"
              c:identifier="GWEATHER_PRESSURE_UNIT_MM_HG"
              glib:nick="mm-hg">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="78">millimeters of mercury</doc>
      </member>
      <member name="inch_hg"
              value="6"
              c:identifier="GWEATHER_PRESSURE_UNIT_INCH_HG"
              glib:nick="inch-hg">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="79">inches of mercury</doc>
      </member>
      <member name="atm"
              value="7"
              c:identifier="GWEATHER_PRESSURE_UNIT_ATM"
              glib:nick="atm">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="80">atmospheres</doc>
      </member>
    </enumeration>
    <bitfield name="Provider"
              glib:type-name="GWeatherProvider"
              glib:get-type="gweather_provider_get_type"
              c:type="GWeatherProvider">
      <member name="none"
              value="0"
              c:identifier="GWEATHER_PROVIDER_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="34">no provider, no weather information available</doc>
      </member>
      <member name="metar"
              value="1"
              c:identifier="GWEATHER_PROVIDER_METAR"
              glib:nick="metar">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="35">METAR office, providing current conditions worldwide</doc>
      </member>
      <member name="iwin"
              value="4"
              c:identifier="GWEATHER_PROVIDER_IWIN"
              glib:nick="iwin">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="36">US weather office, providing 7 days of forecast</doc>
      </member>
      <member name="yahoo"
              value="8"
              c:identifier="GWEATHER_PROVIDER_YAHOO"
              glib:nick="yahoo">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="37">Yahoo Weather Service, removed in 3.27.1</doc>
      </member>
      <member name="yr_no"
              value="16"
              c:identifier="GWEATHER_PROVIDER_YR_NO"
              glib:nick="yr-no">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="38">Yr.no service, worldwide but requires attribution</doc>
      </member>
      <member name="owm"
              value="32"
              c:identifier="GWEATHER_PROVIDER_OWM"
              glib:nick="owm">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="39">OpenWeatherMap, worldwide and possibly more reliable, but requires attribution and is limited in the number of queries</doc>
      </member>
      <member name="all"
              value="31"
              c:identifier="GWEATHER_PROVIDER_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="40">enable all available providers</doc>
      </member>
    </bitfield>
    <enumeration name="Sky"
                 glib:type-name="GWeatherSky"
                 glib:get-type="gweather_sky_get_type"
                 c:type="GWeatherSky">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="214">The sky and cloud visibility. In general it is discouraged to
use this value directly to compute the forecast icon: applications
should instead use gweather_info_get_icon_name() or
gweather_info_get_symbolic_icon_name().</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_SKY_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="216">value not available</doc>
      </member>
      <member name="clear"
              value="0"
              c:identifier="GWEATHER_SKY_CLEAR"
              glib:nick="clear">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="217">sky completely clear, no clouds visible</doc>
      </member>
      <member name="broken"
              value="1"
              c:identifier="GWEATHER_SKY_BROKEN"
              glib:nick="broken">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="218">sky mostly clear, few clouds</doc>
      </member>
      <member name="scattered"
              value="2"
              c:identifier="GWEATHER_SKY_SCATTERED"
              glib:nick="scattered">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="219">sky mostly clear, patches of clouds</doc>
      </member>
      <member name="few"
              value="3"
              c:identifier="GWEATHER_SKY_FEW"
              glib:nick="few">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="220">few clouds, sky cloudy but patches of sky visible</doc>
      </member>
      <member name="overcast"
              value="4"
              c:identifier="GWEATHER_SKY_OVERCAST"
              glib:nick="overcast">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="221">sky completely clouded, sun not visible</doc>
      </member>
      <member name="last"
              value="5"
              c:identifier="GWEATHER_SKY_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="222">the maximum value for the enumeration</doc>
      </member>
      <function name="to_string" c:identifier="gweather_sky_to_string">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="240"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sky" transfer-ownership="none">
            <type name="Sky" c:type="GWeatherSky"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string_full"
                c:identifier="gweather_sky_to_string_full">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="242"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="sky" transfer-ownership="none">
            <type name="Sky" c:type="GWeatherSky"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="SpeedUnit"
                 glib:type-name="GWeatherSpeedUnit"
                 glib:get-type="gweather_speed_unit_get_type"
                 c:type="GWeatherSpeedUnit">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-enums.h"
           line="47">The measure unit to use for wind speed values, when retrieved by
gweather_info_get_value_wind().</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_SPEED_UNIT_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="49">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_SPEED_UNIT_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="50">the user preferred speed unit</doc>
      </member>
      <member name="ms"
              value="2"
              c:identifier="GWEATHER_SPEED_UNIT_MS"
              glib:nick="ms">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="51">meters per second</doc>
      </member>
      <member name="kph"
              value="3"
              c:identifier="GWEATHER_SPEED_UNIT_KPH"
              glib:nick="kph">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="52">kilometers per hour</doc>
      </member>
      <member name="mph"
              value="4"
              c:identifier="GWEATHER_SPEED_UNIT_MPH"
              glib:nick="mph">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="53">miles per hour</doc>
      </member>
      <member name="knots"
              value="5"
              c:identifier="GWEATHER_SPEED_UNIT_KNOTS"
              glib:nick="knots">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="54">knots</doc>
      </member>
      <member name="bft"
              value="6"
              c:identifier="GWEATHER_SPEED_UNIT_BFT"
              glib:nick="bft">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="55">Beaufort scale</doc>
      </member>
    </enumeration>
    <function-macro name="TIMEZONE_MENU"
                    c:identifier="GWEATHER_TIMEZONE_MENU"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="35"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TIMEZONE_MENU_CLASS"
                    c:identifier="GWEATHER_TIMEZONE_MENU_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TIMEZONE_MENU_GET_CLASS"
                    c:identifier="GWEATHER_TIMEZONE_MENU_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="TIMEZONE_MENU_H"
              value="1"
              c:type="GWEATHER_TIMEZONE_MENU_H">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="22"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="TemperatureUnit"
                 glib:type-name="GWeatherTemperatureUnit"
                 glib:get-type="gweather_temperature_unit_get_type"
                 c:type="GWeatherTemperatureUnit">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-enums.h"
           line="28">The measure unit to use for temperature values, when retrieved by
the gweather_info_get_value_temp() family of functions.</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_TEMP_UNIT_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="30">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_TEMP_UNIT_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="31">the user preferred temperature unit</doc>
      </member>
      <member name="kelvin"
              value="2"
              c:identifier="GWEATHER_TEMP_UNIT_KELVIN"
              glib:nick="kelvin">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="32">Kelvin (absolute) temperature scale</doc>
      </member>
      <member name="centigrade"
              value="3"
              c:identifier="GWEATHER_TEMP_UNIT_CENTIGRADE"
              glib:nick="centigrade">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="33">Celsius temperature scale</doc>
      </member>
      <member name="fahrenheit"
              value="4"
              c:identifier="GWEATHER_TEMP_UNIT_FAHRENHEIT"
              glib:nick="fahrenheit">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-enums.h"
             line="34">Fahrenheit temperature scale</doc>
      </member>
      <function name="to_real"
                c:identifier="gweather_temperature_unit_to_real">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.c"
             line="905">Resolve @unit into a real temperature unit, potentially considering
locale defaults.</doc>
        <source-position filename="../libgweather/gweather-weather.h"
                         line="419"/>
        <return-value transfer-ownership="none">
          <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-weather.c"
                 line="907">a tempeature unit, or %GWEATHER_TEMP_UNIT_DEFAULT</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <record name="Timezone"
            c:type="GWeatherTimezone"
            glib:type-name="GWeatherTimezone"
            glib:get-type="gweather_timezone_get_type"
            c:symbol-prefix="timezone">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-timezone.c"
           line="31">A timezone.

Timezones are global to the GWeather world (as obtained by
gweather_location_get_world()); they can be gotten by passing
gweather_timezone_get_by_tzid() with a tzid like "America/New_York"
or "Europe/London".</doc>
      <source-position filename="../libgweather/gweather-timezone.h"
                       line="32"/>
      <method name="get_dst_offset"
              c:identifier="gweather_timezone_get_dst_offset">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="417">Gets @zone's daylight/summer time offset from UTC, in minutes. Eg,
a value of 120 would indicate "GMT+2". This is only meaningful if
gweather_timezone_has_dst() returns %TRUE.</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="425">@zone's daylight/summer time offset, in minutes</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="419">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gweather_timezone_get_name">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="351">Gets @zone's name; a translated, user-presentable string.

Note that the returned name might not be unique among timezones,
and may not make sense to the user unless it is presented along
with the timezone's country's name (or in some context where the
country is obvious).</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="362">@zone's name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="353">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset" c:identifier="gweather_timezone_get_offset">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="386">Gets @zone's standard offset from UTC, in minutes. Eg, a value of
120 would indicate "GMT+2".</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="393">@zone's standard offset, in minutes</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="388">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tzid" c:identifier="gweather_timezone_get_tzid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="371">Gets @zone's tzdata identifier, eg "America/New_York".</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="377">@zone's tzid</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="373">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_dst" c:identifier="gweather_timezone_has_dst">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="402">Checks if @zone observes daylight/summer time for part of the year.</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="408">%TRUE if @zone observes daylight/summer time.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="404">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gweather_timezone_ref">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="278">Adds 1 to @zone's reference count.</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="284">@zone</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="280">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gweather_timezone_unref">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="295">Subtracts 1 from @zone's reference count and frees it if it reaches 0.</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="zone" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="297">a #GWeatherTimezone</doc>
            <type name="Timezone" c:type="GWeatherTimezone*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="get_by_tzid"
                c:identifier="gweather_timezone_get_by_tzid"
                version="3.12">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="152">Get the #GWeatherTimezone for @tzid.</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="158">A #GWeatherTimezone. This object
belongs to GWeather, do not unref it.</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
        <parameters>
          <parameter name="tzid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone.c"
                 line="154">A timezone identifier, like "America/New_York" or "Europe/London"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_utc" c:identifier="gweather_timezone_get_utc">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="328">Gets the UTC timezone.</doc>
        <source-position filename="../libgweather/gweather-timezone.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="333">a #GWeatherTimezone for UTC, or %NULL on error.</doc>
          <type name="Timezone" c:type="GWeatherTimezone*"/>
        </return-value>
      </function>
    </record>
    <class name="TimezoneMenu"
           c:symbol-prefix="timezone_menu"
           c:type="GWeatherTimezoneMenu"
           parent="Gtk.ComboBox"
           glib:type-name="GWeatherTimezoneMenu"
           glib:get-type="gweather_timezone_menu_get_type"
           glib:type-struct="TimezoneMenuClass">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-timezone-menu.c"
           line="30">A #GtkComboBox subclass for choosing a #GWeatherTimezone</doc>
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="51"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.CellLayout"/>
      <constructor name="new" c:identifier="gweather_timezone_menu_new">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone-menu.c"
             line="325">Creates a new #GWeatherTimezoneMenu.

@top will normally be the location returned from
gweather_location_get_world(), but you can create a menu that
contains the timezones from a smaller set of locations if you want.</doc>
        <source-position filename="../libgweather/gweather-timezone-menu.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone-menu.c"
               line="335">the new #GWeatherTimezoneMenu</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="top" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone-menu.c"
                 line="327">the top-level location for the menu.</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_tzid" c:identifier="gweather_timezone_menu_get_tzid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone-menu.c"
             line="401">Gets @menu's timezone id.</doc>
        <source-position filename="../libgweather/gweather-timezone-menu.h"
                         line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone-menu.c"
               line="407">@menu's tzid, or %NULL if no timezone
is selected.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="menu" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone-menu.c"
                 line="403">a #GWeatherTimezoneMenu</doc>
            <type name="TimezoneMenu" c:type="GWeatherTimezoneMenu*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_tzid" c:identifier="gweather_timezone_menu_set_tzid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone-menu.c"
             line="374">Sets @menu to the given @tzid. If @tzid is %NULL, sets @menu to
"Unknown".</doc>
        <source-position filename="../libgweather/gweather-timezone-menu.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="menu" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone-menu.c"
                 line="376">a #GWeatherTimezoneMenu</doc>
            <type name="TimezoneMenu" c:type="GWeatherTimezoneMenu*"/>
          </instance-parameter>
          <parameter name="tzid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgweather/gweather-timezone-menu.c"
                 line="377">a tzdata id (eg, "America/New_York")</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="top"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Location"/>
      </property>
      <property name="tzid" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Gtk.ComboBox" c:type="GtkComboBox"/>
      </field>
      <field name="zone" readable="0" private="1">
        <type name="Timezone" c:type="GWeatherTimezone*"/>
      </field>
    </class>
    <record name="TimezoneMenuClass"
            c:type="GWeatherTimezoneMenuClass"
            glib:is-gtype-struct-for="TimezoneMenu">
      <source-position filename="../libgweather/gweather-timezone-menu.h"
                       line="51"/>
      <field name="parent_class">
        <type name="Gtk.ComboBoxClass" c:type="GtkComboBoxClass"/>
      </field>
    </record>
    <enumeration name="WindDirection"
                 glib:type-name="GWeatherWindDirection"
                 glib:get-type="gweather_wind_direction_get_type"
                 c:type="GWeatherWindDirection">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.h"
           line="160">The direction of the prevailing wind. Composite values
such as north-north-east indicate a direction between the
two component value (north and north-east).</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_WIND_INVALID"
              glib:nick="invalid">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="162">value not available</doc>
      </member>
      <member name="variable"
              value="0"
              c:identifier="GWEATHER_WIND_VARIABLE"
              glib:nick="variable">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="163">variable throughout the day</doc>
      </member>
      <member name="n" value="1" c:identifier="GWEATHER_WIND_N" glib:nick="n">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="164">north</doc>
      </member>
      <member name="nne"
              value="2"
              c:identifier="GWEATHER_WIND_NNE"
              glib:nick="nne">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="165">north-north-east</doc>
      </member>
      <member name="ne"
              value="3"
              c:identifier="GWEATHER_WIND_NE"
              glib:nick="ne">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="166">north-east</doc>
      </member>
      <member name="ene"
              value="4"
              c:identifier="GWEATHER_WIND_ENE"
              glib:nick="ene">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="167">east-north-east</doc>
      </member>
      <member name="e" value="5" c:identifier="GWEATHER_WIND_E" glib:nick="e">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="168">east</doc>
      </member>
      <member name="ese"
              value="6"
              c:identifier="GWEATHER_WIND_ESE"
              glib:nick="ese">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="169">east-south-east</doc>
      </member>
      <member name="se"
              value="7"
              c:identifier="GWEATHER_WIND_SE"
              glib:nick="se">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="170">south-east</doc>
      </member>
      <member name="sse"
              value="8"
              c:identifier="GWEATHER_WIND_SSE"
              glib:nick="sse">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="171">south-south-east</doc>
      </member>
      <member name="s" value="9" c:identifier="GWEATHER_WIND_S" glib:nick="s">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="172">south</doc>
      </member>
      <member name="ssw"
              value="10"
              c:identifier="GWEATHER_WIND_SSW"
              glib:nick="ssw">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="173">south-south-west</doc>
      </member>
      <member name="sw"
              value="11"
              c:identifier="GWEATHER_WIND_SW"
              glib:nick="sw">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="174">south-west</doc>
      </member>
      <member name="wsw"
              value="12"
              c:identifier="GWEATHER_WIND_WSW"
              glib:nick="wsw">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="175">west-south-west</doc>
      </member>
      <member name="w" value="13" c:identifier="GWEATHER_WIND_W" glib:nick="w">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="176">west</doc>
      </member>
      <member name="wnw"
              value="14"
              c:identifier="GWEATHER_WIND_WNW"
              glib:nick="wnw">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="177">west-north-west</doc>
      </member>
      <member name="nw"
              value="15"
              c:identifier="GWEATHER_WIND_NW"
              glib:nick="nw">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="178">north-west</doc>
      </member>
      <member name="nnw"
              value="16"
              c:identifier="GWEATHER_WIND_NNW"
              glib:nick="nnw">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="179">north-north-west</doc>
      </member>
      <member name="last"
              value="17"
              c:identifier="GWEATHER_WIND_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-weather.h"
             line="180">maximum value for the enumeration</doc>
      </member>
      <function name="to_string"
                c:identifier="gweather_wind_direction_to_string">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="209"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="wind" transfer-ownership="none">
            <type name="WindDirection" c:type="GWeatherWindDirection"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string_full"
                c:identifier="gweather_wind_direction_to_string_full">
        <source-position filename="../libgweather/gweather-weather.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="wind" transfer-ownership="none">
            <type name="WindDirection" c:type="GWeatherWindDirection"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function name="location_detect_nearest_city_finish"
              c:identifier="gweather_location_detect_nearest_city_finish"
              moved-to="Location.detect_nearest_city_finish"
              throws="1">
      <source-position filename="../libgweather/gweather-location.h"
                       line="107"/>
      <return-value transfer-ownership="full">
        <type name="Location" c:type="GWeatherLocation*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="location_get_world"
              c:identifier="gweather_location_get_world"
              moved-to="Location.get_world">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-location.c"
           line="435">Obtains the shared #GWeatherLocation of type %GWEATHER_LOCATION_WORLD,
representing a hierarchy containing all of the locations from
Locations.xml.</doc>
      <source-position filename="../libgweather/gweather-location.h"
                       line="54"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="442">a %GWEATHER_LOCATION_WORLD
location, or %NULL if Locations.xml could not be found or could not be parsed.
The return value is owned by libgweather and should not be modified or freed.</doc>
        <type name="Location" c:type="GWeatherLocation*"/>
      </return-value>
    </function>
    <function name="location_level_to_string"
              c:identifier="gweather_location_level_to_string"
              moved-to="LocationLevel.to_string">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-location.c"
           line="655">Returns the location level as a string, useful for debugging
purposes.</doc>
      <source-position filename="../libgweather/gweather-location.h"
                       line="153"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-location.c"
             line="662">a string</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-location.c"
               line="657">a #GWeatherLocationLevel</doc>
          <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
        </parameter>
      </parameters>
    </function>
    <function name="sky_to_string"
              c:identifier="gweather_sky_to_string"
              moved-to="Sky.to_string">
      <source-position filename="../libgweather/gweather-weather.h"
                       line="240"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="sky" transfer-ownership="none">
          <type name="Sky" c:type="GWeatherSky"/>
        </parameter>
      </parameters>
    </function>
    <function name="sky_to_string_full"
              c:identifier="gweather_sky_to_string_full"
              moved-to="Sky.to_string_full">
      <source-position filename="../libgweather/gweather-weather.h"
                       line="242"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="sky" transfer-ownership="none">
          <type name="Sky" c:type="GWeatherSky"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="temperature_unit_to_real"
              c:identifier="gweather_temperature_unit_to_real"
              moved-to="TemperatureUnit.to_real">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-weather.c"
           line="905">Resolve @unit into a real temperature unit, potentially considering
locale defaults.</doc>
      <source-position filename="../libgweather/gweather-weather.h"
                       line="419"/>
      <return-value transfer-ownership="none">
        <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
      </return-value>
      <parameters>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-weather.c"
               line="907">a tempeature unit, or %GWEATHER_TEMP_UNIT_DEFAULT</doc>
          <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
        </parameter>
      </parameters>
    </function>
    <function name="timezone_get_by_tzid"
              c:identifier="gweather_timezone_get_by_tzid"
              moved-to="Timezone.get_by_tzid"
              version="3.12">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-timezone.c"
           line="152">Get the #GWeatherTimezone for @tzid.</doc>
      <source-position filename="../libgweather/gweather-timezone.h"
                       line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="158">A #GWeatherTimezone. This object
belongs to GWeather, do not unref it.</doc>
        <type name="Timezone" c:type="GWeatherTimezone*"/>
      </return-value>
      <parameters>
        <parameter name="tzid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgweather/gweather-timezone.c"
               line="154">A timezone identifier, like "America/New_York" or "Europe/London"</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="timezone_get_utc"
              c:identifier="gweather_timezone_get_utc"
              moved-to="Timezone.get_utc">
      <doc xml:space="preserve"
           filename="../libgweather/gweather-timezone.c"
           line="328">Gets the UTC timezone.</doc>
      <source-position filename="../libgweather/gweather-timezone.h"
                       line="55"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libgweather/gweather-timezone.c"
             line="333">a #GWeatherTimezone for UTC, or %NULL on error.</doc>
        <type name="Timezone" c:type="GWeatherTimezone*"/>
      </return-value>
    </function>
    <function name="wind_direction_to_string"
              c:identifier="gweather_wind_direction_to_string"
              moved-to="WindDirection.to_string">
      <source-position filename="../libgweather/gweather-weather.h"
                       line="209"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="wind" transfer-ownership="none">
          <type name="WindDirection" c:type="GWeatherWindDirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="wind_direction_to_string_full"
              c:identifier="gweather_wind_direction_to_string_full"
              moved-to="WindDirection.to_string_full">
      <source-position filename="../libgweather/gweather-weather.h"
                       line="211"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="wind" transfer-ownership="none">
          <type name="WindDirection" c:type="GWeatherWindDirection"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
