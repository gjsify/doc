<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Tracker" version="0.16"/>
  <c:include name="libtracker-extract/tracker-extract.h"/>
  <namespace name="TrackerExtract"
             version="0.16"
             shared-library="libtracker-extract-0.16.so.0"
             c:identifier-prefixes="TrackerExtract"
             c:symbol-prefixes="tracker_extract">
    <record name="Info"
            c:type="TrackerExtractInfo"
            glib:type-name="TrackerExtractInfo"
            glib:get-type="tracker_extract_info_get_type"
            c:symbol-prefix="info">
      <constructor name="new"
                   c:identifier="tracker_extract_info_new"
                   version="0.12">
        <doc xml:space="preserve">Returns a newly created #TrackerExtractInfo</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">(boxed): A newly allocated #TrackerExtractInfo</doc>
          <type name="Info" c:type="TrackerExtractInfo*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="mimetype" transfer-ownership="none">
            <doc xml:space="preserve">mimetype for @file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="graph" transfer-ownership="none">
            <doc xml:space="preserve">SPARQL graph used for inserting data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_file"
              c:identifier="tracker_extract_info_get_file"
              version="0.12">
        <doc xml:space="preserve">Returns a #GFile pointing to the file being affected
by the metadata extraction represented by @info</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The file being inspected</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_graph"
              c:identifier="tracker_extract_info_get_graph"
              version="0.12">
        <doc xml:space="preserve">Returns the SPARQL graph that will be used when
inserting metadata.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The SPARQL graph the extract operation belongs to.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_builder"
              c:identifier="tracker_extract_info_get_metadata_builder"
              version="0.12">
        <doc xml:space="preserve">Returns a #TrackerSparqlBuilder containing the
file metadata.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the file metadata</doc>
          <type name="Tracker.SparqlBuilder" c:type="TrackerSparqlBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mimetype"
              c:identifier="tracker_extract_info_get_mimetype"
              version="0.12">
        <doc xml:space="preserve">Returns the mimetype being used for the file
metadata extraction.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the mimetype being used for extraction.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_postupdate_builder"
              c:identifier="tracker_extract_info_get_postupdate_builder"
              version="0.12.4">
        <doc xml:space="preserve">Returns a #TrackerSparqlBuilder containing separate
updates for resources that are contained within the file
and need to refer to it.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#TrackerSparqlBuilder for resources that need inserting after the file resource.</doc>
          <type name="Tracker.SparqlBuilder" c:type="TrackerSparqlBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preupdate_builder"
              c:identifier="tracker_extract_info_get_preupdate_builder"
              version="0.12">
        <doc xml:space="preserve">Returns a #TrackerSparqlBuilder containing any
separate updates that could apply to the file,
such as author/band information in audio files,
and so on.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">miscellaneous metadata</doc>
          <type name="Tracker.SparqlBuilder" c:type="TrackerSparqlBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_where_clause"
              c:identifier="tracker_extract_info_get_where_clause"
              version="0.12">
        <doc xml:space="preserve">Returns the where clause that will apply to the
other metadata contained in @info.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The where clause</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="tracker_extract_info_ref"
              version="0.12">
        <doc xml:space="preserve">Increases the reference count of @info</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new reference to @info</doc>
          <type name="Info" c:type="TrackerExtractInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_where_clause"
              c:identifier="tracker_extract_info_set_where_clause"
              version="0.12">
        <doc xml:space="preserve">Sets the where clause for the returned metadata.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
          <parameter name="where" transfer-ownership="none">
            <doc xml:space="preserve">Where clause for the file update.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="tracker_extract_info_unref"
              version="0.12">
        <doc xml:space="preserve">Decreases the reference count of @info, freeing all its associated resources
if it reaches 0.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve">a #TrackerExtractInfo</doc>
            <type name="Info" c:type="TrackerExtractInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="InitFunc"
              c:type="TrackerExtractInitFunc"
              introspectable="0"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="thread_awareness_ret" transfer-ownership="none">
          <type c:type="TrackerModuleThreadAwareness*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="MetadataFunc" c:type="TrackerExtractMetadataFunc">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="Info" c:type="TrackerExtractInfo*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ShutdownFunc" c:type="TrackerExtractShutdownFunc">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </callback>
    <function name="client_cancel_for_prefix"
              c:identifier="tracker_extract_client_cancel_for_prefix"
              version="0.12">
      <doc xml:space="preserve">Cancels any ongoing extraction task for (or within) @prefix.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="prefix" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="client_get_metadata"
              c:identifier="tracker_extract_client_get_metadata"
              version="0.12">
      <doc xml:space="preserve">Asynchronously requests metadata for @file, this request is sent to the
tracker-extract daemon.

When the request is finished, @callback will be executed. You can then
call tracker_extract_client_get_metadata_finish() to get the result of
the operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="mime_type" transfer-ownership="none">
          <doc xml:space="preserve">mimetype of @file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="graph" transfer-ownership="none">
          <doc xml:space="preserve">graph that should be used for the generated insert clauses, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable" transfer-ownership="none" allow-none="1">
          <doc xml:space="preserve">cancellable for the async operation, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve">callback to call when the request is satisfied.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:space="preserve">data for the callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="client_get_metadata_finish"
              c:identifier="tracker_extract_client_get_metadata_finish"
              version="0.12"
              throws="1">
      <doc xml:space="preserve">Finishes an asynchronous metadata request.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the #TrackerExtractInfo holding the result.</doc>
        <type name="Info" c:type="TrackerExtractInfo*"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">a #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_metadata"
              c:identifier="tracker_extract_get_metadata"
              version="0.12">
      <doc xml:space="preserve">This function must be provided by ALL extractors. This is merely
the declaration of the function which must be written by each
extractor.

This is checked by tracker-extract by looking up the symbols for
each started plugin and making sure this function exists.

The @info parameter contains required information for the
extraction and a location to store the results. The
tracker_extract_info_get_metadata_builder() function returns a
#TrackerSparqlBuilder constructed through
tracker_sparql_builder_new_embedded_insert(). The subject
is already set to be the file URN, so implementations of this
function should just provide predicate/object(s) pairs. The
triples contained in this object at the end of the function will be
merged with further file information from miners.

Whenever any of the inserted triples rely on entities that
should also be provided by this extractor (for example, album
or artist information from a song), such insertions should be
added to the preupdate object returned by
tracker_extract_info_get_preupdate_builder(). This is a
#TrackerSparqlBuilder created through
tracker_sparql_builder_new_update().

NOTE: If upgrading from 0.10, this function replaces the old
function named tracker_extract_get_data() and has a few subtle
differences. First, there is a return value for success and the
parameters are contained in @info instead of being passed
individually. Second, the extractor is passed the detected
MIME type of the file being extracted.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the extraction succeeded, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve">a #TrackerExtractInfo object</doc>
          <type name="Info" c:type="TrackerExtractInfo*"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_init"
              c:identifier="tracker_extract_module_init"
              introspectable="0"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="thread_awareness_ret" transfer-ownership="none">
          <type c:type="TrackerModuleThreadAwareness*"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_manager_get_fallback_rdf_types"
              c:identifier="tracker_extract_module_manager_get_fallback_rdf_types"
              introspectable="0">
      <return-value>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="mimetype" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_manager_get_for_mimetype"
              c:identifier="tracker_extract_module_manager_get_for_mimetype"
              introspectable="0">
      <return-value>
        <type name="GModule.Module" c:type="GModule*"/>
      </return-value>
      <parameters>
        <parameter name="mimetype" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="init_func" transfer-ownership="none">
          <type name="InitFunc" c:type="TrackerExtractInitFunc*"/>
        </parameter>
        <parameter name="shutdown_func" transfer-ownership="none">
          <type name="ShutdownFunc" c:type="TrackerExtractShutdownFunc*"/>
        </parameter>
        <parameter name="extract_func" transfer-ownership="none">
          <type name="MetadataFunc" c:type="TrackerExtractMetadataFunc*"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_manager_get_mimetype_handlers"
              c:identifier="tracker_extract_module_manager_get_mimetype_handlers"
              version="0.12"
              introspectable="0">
      <doc xml:space="preserve">Returns a #TrackerMimetypeInfo struct containing information about
the modules that handle @mimetype, or %NULL if no modules handle
@mimetype.

The modules are ordered from most to least specific, and the
returned #TrackerMimetypeInfo already points to the first
module.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">(free-function: tracker_mimetype_info_free): (allow-none): A #TrackerMimetypeInfo holding the information about the different modules handling @mimetype, or %NULL if no modules handle @mimetype.</doc>
        <type c:type="TrackerMimetypeInfo*"/>
      </return-value>
      <parameters>
        <parameter name="mimetype" transfer-ownership="none">
          <doc xml:space="preserve">a mimetype string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_manager_init"
              c:identifier="tracker_extract_module_manager_init">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="module_manager_mimetype_is_handled"
              c:identifier="tracker_extract_module_manager_mimetype_is_handled">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mimetype" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="module_shutdown"
              c:identifier="tracker_extract_module_shutdown">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
  </namespace>
</repository>
