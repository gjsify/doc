<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <package name="libnotify"/>
  <c:include name="libnotify/notify.h"/>
  <namespace name="Notify"
             version="0.7"
             shared-library="libnotify.so.4"
             c:identifier-prefixes="Notify"
             c:symbol-prefixes="notify">
    <function-macro name="ACTION_CALLBACK"
                    c:identifier="NOTIFY_ACTION_CALLBACK"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="../libnotify/notification.h"
           line="103">A convenience macro for casting a function to a #NotifyActionCallback. This
is much like G_CALLBACK().</doc>
      <source-position filename="../libnotify/notification.h" line="110"/>
      <parameters>
        <parameter name="func">
          <doc xml:space="preserve"
               filename="../libnotify/notification.h"
               line="105">The function to cast.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <callback name="ActionCallback" c:type="NotifyActionCallback">
      <doc xml:space="preserve"
           filename="../libnotify/notification.h"
           line="91">An action callback function.</doc>
      <source-position filename="../libnotify/notification.h" line="99"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="notification" transfer-ownership="none">
          <type name="Notification" c:type="NotifyNotification*"/>
        </parameter>
        <parameter name="action" transfer-ownership="none">
          <type name="utf8" c:type="char*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="CHECK_VERSION"
                    c:identifier="NOTIFY_CHECK_VERSION"
                    introspectable="0">
      <source-position filename="../libnotify/notify-features.h" line="33"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="EXPIRES_DEFAULT"
              value="-1"
              c:type="NOTIFY_EXPIRES_DEFAULT">
      <doc xml:space="preserve"
           filename="../libnotify/notification.h"
           line="32">The default expiration time on a notification.</doc>
      <source-position filename="../libnotify/notification.h" line="37"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EXPIRES_NEVER" value="0" c:type="NOTIFY_EXPIRES_NEVER">
      <doc xml:space="preserve"
           filename="../libnotify/notification.h"
           line="39">The notification never expires. It stays open until closed by the calling API
or the user.</doc>
      <source-position filename="../libnotify/notification.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="IS_NOTIFICATION"
                    c:identifier="NOTIFY_IS_NOTIFICATION"
                    introspectable="0">
      <source-position filename="../libnotify/notification.h" line="50"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NOTIFICATION_CLASS"
                    c:identifier="NOTIFY_IS_NOTIFICATION_CLASS"
                    introspectable="0">
      <source-position filename="../libnotify/notification.h" line="51"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFICATION"
                    c:identifier="NOTIFY_NOTIFICATION"
                    introspectable="0">
      <source-position filename="../libnotify/notification.h" line="48"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFICATION_CLASS"
                    c:identifier="NOTIFY_NOTIFICATION_CLASS"
                    introspectable="0">
      <source-position filename="../libnotify/notification.h" line="49"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NOTIFICATION_GET_CLASS"
                    c:identifier="NOTIFY_NOTIFICATION_GET_CLASS"
                    introspectable="0">
      <source-position filename="../libnotify/notification.h" line="52"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Notification"
           c:symbol-prefix="notification"
           c:type="NotifyNotification"
           parent="GObject.Object"
           glib:type-name="NotifyNotification"
           glib:get-type="notify_notification_get_type"
           glib:type-struct="NotificationClass">
      <source-position filename="../libnotify/notification.h" line="72"/>
      <constructor name="new" c:identifier="notify_notification_new">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="405">Creates a new #NotifyNotification. The summary text is required, but
all other parameters are optional.</doc>
        <source-position filename="../libnotify/notification.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libnotify/notification.c"
               line="414">The new #NotifyNotification.</doc>
          <type name="Notification" c:type="NotifyNotification*"/>
        </return-value>
        <parameters>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="407">The required summary text.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="408">The optional body text.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="409">The optional icon theme icon name or filename.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="closed">
        <source-position filename="../libnotify/notification.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_action" c:identifier="notify_notification_add_action">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1123">Adds an action to a notification. When the action is invoked, the
specified callback function will be called, along with the value passed
to @user_data.</doc>
        <source-position filename="../libnotify/notification.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1125">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1126">The action ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1127">The human-readable action label.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1128">The action's callback function.</doc>
            <type name="ActionCallback" c:type="NotifyActionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1129">Optional custom data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="free_func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1130">An optional function to free @user_data when the notification
            is destroyed.</doc>
            <type name="GLib.DestroyNotify" c:type="GFreeFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_actions"
              c:identifier="notify_notification_clear_actions">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1096">Clears all actions from the notification.</doc>
        <source-position filename="../libnotify/notification.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1098">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear_hints"
              c:identifier="notify_notification_clear_hints">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1079">Clears all hints from the notification.</doc>
        <source-position filename="../libnotify/notification.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1081">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="notify_notification_close" throws="1">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1179">Synchronously tells the notification server to hide the notification on the screen.</doc>
        <source-position filename="../libnotify/notification.h" line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libnotify/notification.c"
               line="1186">%TRUE on success, or %FALSE on error with @error filled in</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1181">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_closed_reason"
              c:identifier="notify_notification_get_closed_reason">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1223">Returns the closed reason code for the notification. This is valid only
after the "closed" signal is emitted.</doc>
        <source-position filename="../libnotify/notification.h" line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libnotify/notification.c"
               line="1230">The closed reason code.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1225">The notification.</doc>
            <type name="Notification" c:type="const NotifyNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_app_name"
              c:identifier="notify_notification_set_app_name"
              version="0.7.3">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="918">Sets the application name for the notification. If this function is
not called or if @app_name is %NULL, the application name will be
set from the value used in notify_init() or overridden with
notify_set_app_name().</doc>
        <source-position filename="../libnotify/notification.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="920">a #NotifyNotification</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="app_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="921">the localised application name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_category"
              c:identifier="notify_notification_set_category">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="733">Sets the category of this notification. This can be used by the
notification server to filter or display the data in a certain way.</doc>
        <source-position filename="../libnotify/notification.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="735">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="736">The category.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint"
              c:identifier="notify_notification_set_hint"
              version="0.6">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="887">Sets a hint for @key with value @value. If @value is %NULL,
a previously set hint for @key is unset.

If @value is floating, it is consumed.</doc>
        <source-position filename="../libnotify/notification.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="889">a #NotifyNotification</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="890">the hint key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="891">the hint value, or %NULL to unset the hint</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_byte"
              c:identifier="notify_notification_set_hint_byte"
              deprecated="1"
              deprecated-version="0.6.">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1000">Sets a hint with a byte value.</doc>
        <doc-deprecated xml:space="preserve">Use notify_notification_set_hint() instead</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1002">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1003">The hint.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1004">The hint's value.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_byte_array"
              c:identifier="notify_notification_set_hint_byte_array"
              deprecated="1"
              deprecated-version="0.6.">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1019">Sets a hint with a byte array value. The length of @value must be passed
as @len.</doc>
        <doc-deprecated xml:space="preserve">Use notify_notification_set_hint() instead</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1021">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1022">The hint.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1023">The hint's value.</doc>
            <array length="2" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1024">The length of the byte array.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_double"
              c:identifier="notify_notification_set_hint_double"
              deprecated="1"
              deprecated-version="0.6.">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="981">Sets a hint with a double value.</doc>
        <doc-deprecated xml:space="preserve">Use notify_notification_set_hint() instead</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="983">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="984">The hint.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="985">The hint's value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_int32"
              c:identifier="notify_notification_set_hint_int32"
              deprecated="1"
              deprecated-version="0.6.">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="942">Sets a hint with a 32-bit integer value.</doc>
        <doc-deprecated xml:space="preserve">Use notify_notification_set_hint() instead</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="944">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="945">The hint.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="946">The hint's value.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_string"
              c:identifier="notify_notification_set_hint_string"
              deprecated="1"
              deprecated-version="0.6.">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="1051">Sets a hint with a string value.</doc>
        <doc-deprecated xml:space="preserve">Use notify_notification_set_hint() instead</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1053">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1054">The hint.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="1055">The hint's value.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_uint32"
              c:identifier="notify_notification_set_hint_uint32"
              deprecated="1"
              deprecated-version="0.6.">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="962">Sets a hint with an unsigned 32-bit integer value.</doc>
        <doc-deprecated xml:space="preserve">Use notify_notification_set_hint() instead</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="964">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="965">The hint.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="966">The hint's value.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_from_pixbuf"
              c:identifier="notify_notification_set_icon_from_pixbuf"
              deprecated="1">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="776">Sets the icon in the notification from a #GdkPixbuf.</doc>
        <doc-deprecated xml:space="preserve">use notify_notification_set_image_from_pixbuf() instead.</doc-deprecated>
        <source-position filename="../libnotify/notification.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="778">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="779">The icon.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_image_from_pixbuf"
              c:identifier="notify_notification_set_image_from_pixbuf">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="792">Sets the image in the notification from a #GdkPixbuf.</doc>
        <source-position filename="../libnotify/notification.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="794">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="pixbuf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="795">The image.</doc>
            <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout"
              c:identifier="notify_notification_set_timeout">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="703">Sets the timeout of the notification. To set the default time, pass
%NOTIFY_EXPIRES_DEFAULT as @timeout. To set the notification to never
expire, pass %NOTIFY_EXPIRES_NEVER.

Note that the timeout may be ignored by the server.</doc>
        <source-position filename="../libnotify/notification.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="705">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="706">The timeout in milliseconds.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgency"
              c:identifier="notify_notification_set_urgency">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="755">Sets the urgency level of this notification.

See: #NotifyUrgency</doc>
        <source-position filename="../libnotify/notification.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="757">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="urgency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="758">The urgency level.</doc>
            <type name="Urgency" c:type="NotifyUrgency"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="notify_notification_show" throws="1">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="616">Tells the notification server to display the notification on the screen.</doc>
        <source-position filename="../libnotify/notification.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libnotify/notification.c"
               line="623">%TRUE if successful. On error, this will return %FALSE and set
         @error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="618">The notification.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="notify_notification_update">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="540">Updates the notification text and icon. This won't send the update out
and display it on the screen. For that, you will need to call
notify_notification_show().</doc>
        <source-position filename="../libnotify/notification.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libnotify/notification.c"
               line="551">%TRUE, unless an invalid parameter was passed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="542">The notification to update.</doc>
            <type name="Notification" c:type="NotifyNotification*"/>
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="543">The new required summary text.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="544">The optional body text.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libnotify/notification.c"
                 line="545">The optional icon theme icon name or filename.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-name" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="body"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="closed-reason" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="icon-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id" writable="1" construct="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="summary"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_object" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotificationPrivate" c:type="NotifyNotificationPrivate*"/>
      </field>
      <glib:signal name="closed" when="first">
        <doc xml:space="preserve"
             filename="../libnotify/notification.c"
             line="153">Emitted when the notification is closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="NotificationClass"
            c:type="NotifyNotificationClass"
            glib:is-gtype-struct-for="Notification">
      <source-position filename="../libnotify/notification.h" line="72"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="../libnotify/notification.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notification" transfer-ownership="none">
              <type name="Notification" c:type="NotifyNotification*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="NotificationPrivate"
            c:type="NotifyNotificationPrivate"
            disguised="1">
      <source-position filename="../libnotify/notification.h" line="56"/>
    </record>
    <enumeration name="Urgency"
                 glib:type-name="NotifyUrgency"
                 glib:get-type="notify_urgency_get_type"
                 c:type="NotifyUrgency">
      <doc xml:space="preserve"
           filename="../libnotify/notification.h"
           line="75">The urgency level of the notification.</doc>
      <member name="low"
              value="0"
              c:identifier="NOTIFY_URGENCY_LOW"
              glib:nick="low">
        <doc xml:space="preserve"
             filename="../libnotify/notification.h"
             line="77">Low urgency. Used for unimportant notifications.</doc>
      </member>
      <member name="normal"
              value="1"
              c:identifier="NOTIFY_URGENCY_NORMAL"
              glib:nick="normal">
        <doc xml:space="preserve"
             filename="../libnotify/notification.h"
             line="78">Normal urgency. Used for most standard notifications.</doc>
      </member>
      <member name="critical"
              value="2"
              c:identifier="NOTIFY_URGENCY_CRITICAL"
              glib:nick="critical">
        <doc xml:space="preserve"
             filename="../libnotify/notification.h"
             line="79">Critical urgency. Used for very important notifications.</doc>
      </member>
    </enumeration>
    <constant name="VERSION_MAJOR" value="0" c:type="NOTIFY_VERSION_MAJOR">
      <source-position filename="../libnotify/notify-features.h" line="26"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_MICRO" value="9" c:type="NOTIFY_VERSION_MICRO">
      <source-position filename="../libnotify/notify-features.h" line="28"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="VERSION_MINOR" value="7" c:type="NOTIFY_VERSION_MINOR">
      <source-position filename="../libnotify/notify-features.h" line="27"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function name="get_app_name" c:identifier="notify_get_app_name">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="165">Gets the application name registered.</doc>
      <source-position filename="../libnotify/notify.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libnotify/notify.c"
             line="170">The registered application name, passed to notify_init().</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="get_server_caps" c:identifier="notify_get_server_caps">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="268">Synchronously queries the server for its capabilities and returns them in a #GList.</doc>
      <source-position filename="../libnotify/notify.h" line="40"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libnotify/notify.c"
             line="273">a #GList of server capability strings. Free
  the list elements with g_free() and the list itself with g_list_free().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="get_server_info" c:identifier="notify_get_server_info">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="317">Synchronously queries the server for its information, specifically, the name, vendor,
server version, and the version of the notifications specification that it
is compliant with.</doc>
      <source-position filename="../libnotify/notify.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libnotify/notify.c"
             line="328">%TRUE if successful, and the variables passed will be set, %FALSE
         on error. The returned strings must be freed with g_free</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="ret_name"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libnotify/notify.c"
               line="319">a location to store the server name, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="ret_vendor"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libnotify/notify.c"
               line="320">a location to store the server vendor, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="ret_version"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libnotify/notify.c"
               line="321">a location to store the server version, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="ret_spec_version"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libnotify/notify.c"
               line="322">a location to store the version the service is compliant with, or %NULL</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="init" c:identifier="notify_init">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="137">Initialized libnotify. This must be called before any other functions.</doc>
      <source-position filename="../libnotify/notify.h" line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libnotify/notify.c"
             line="143">%TRUE if successful, or %FALSE on error.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="app_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libnotify/notify.c"
               line="139">The name of the application initializing libnotify.</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="is_initted" c:identifier="notify_is_initted">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="217">Gets whether or not libnotify is initialized.</doc>
      <source-position filename="../libnotify/notify.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libnotify/notify.c"
             line="222">%TRUE if libnotify is initialized, or %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <docsection name="notification">
      <doc xml:space="preserve"
           filename="../libnotify/notification.c"
           line="32">#NotifyNotification represents a passive pop-up notification. It can
contain summary text, body text, and an icon, as well as hints specifying
how the notification should be presented. The notification is rendered
by a notification daemon, and may present the notification in any number
of ways. As such, there is a clear separation of content and presentation,
and this API enforces that.</doc>
    </docsection>
    <function name="set_app_name" c:identifier="notify_set_app_name">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="123">Sets the application name.</doc>
      <source-position filename="../libnotify/notify.h" line="38"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="app_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libnotify/notify.c"
               line="125">The name of the application</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="uninit" c:identifier="notify_uninit">
      <doc xml:space="preserve"
           filename="../libnotify/notify.c"
           line="178">Uninitialized libnotify.

This should be called when the program no longer needs libnotify for
the rest of its lifecycle, typically just before exitting.</doc>
      <source-position filename="../libnotify/notify.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
