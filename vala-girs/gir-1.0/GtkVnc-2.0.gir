<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="GVnc" version="1.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="gtk-vnc-2.0"/>
  <c:include name="gtk-vnc.h"/>
  <namespace name="GtkVnc"
             version="2.0"
             shared-library="libgtk-vnc-2.0.so.0"
             c:identifier-prefixes="Vnc"
             c:symbol-prefixes="vnc">
    <function-macro name="CAIRO_FRAMEBUFFER"
                    c:identifier="VNC_CAIRO_FRAMEBUFFER"
                    introspectable="0">
      <source-position filename="../src/vnccairoframebuffer.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAIRO_FRAMEBUFFER_CLASS"
                    c:identifier="VNC_CAIRO_FRAMEBUFFER_CLASS"
                    introspectable="0">
      <source-position filename="../src/vnccairoframebuffer.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAIRO_FRAMEBUFFER_GET_CLASS"
                    c:identifier="VNC_CAIRO_FRAMEBUFFER_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/vnccairoframebuffer.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="CairoFramebuffer"
           c:symbol-prefix="cairo_framebuffer"
           c:type="VncCairoFramebuffer"
           parent="GVnc.BaseFramebuffer"
           glib:type-name="VncCairoFramebuffer"
           glib:get-type="vnc_cairo_framebuffer_get_type"
           glib:type-struct="CairoFramebufferClass">
      <source-position filename="../src/vnccairoframebuffer.h" line="62"/>
      <implements name="GVnc.Framebuffer"/>
      <constructor name="new" c:identifier="vnc_cairo_framebuffer_new">
        <doc xml:space="preserve"
             filename="../src/vnccairoframebuffer.c"
             line="121">Allocate a new framebuffer object which will render the
remote desktop into a cairo image surface (@width * @height)
in size.</doc>
        <source-position filename="../src/vnccairoframebuffer.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vnccairoframebuffer.c"
               line="131">the new frame buffer object</doc>
          <type name="CairoFramebuffer" c:type="VncCairoFramebuffer*"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vnccairoframebuffer.c"
                 line="123">the remote desktop width</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vnccairoframebuffer.c"
                 line="124">the remote desktop height</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="remoteFormat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vnccairoframebuffer.c"
                 line="125">the remote pixel format</doc>
            <type name="GVnc.PixelFormat" c:type="const VncPixelFormat*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_surface"
              c:identifier="vnc_cairo_framebuffer_get_surface">
        <doc xml:space="preserve"
             filename="../src/vnccairoframebuffer.c"
             line="168">Get the cairo surface in which the remote desktop is
being rendered.</doc>
        <source-position filename="../src/vnccairoframebuffer.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vnccairoframebuffer.c"
               line="175">the cairo surface</doc>
          <type name="cairo.Surface" c:type="cairo_surface_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fb" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vnccairoframebuffer.c"
                 line="170">the framebuffer object</doc>
            <type name="CairoFramebuffer" c:type="VncCairoFramebuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="surface"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="GVnc.BaseFramebuffer" c:type="VncBaseFramebuffer"/>
      </field>
      <field name="priv">
        <type name="CairoFramebufferPrivate"
              c:type="VncCairoFramebufferPrivate*"/>
      </field>
    </class>
    <record name="CairoFramebufferClass"
            c:type="VncCairoFramebufferClass"
            glib:is-gtype-struct-for="CairoFramebuffer">
      <source-position filename="../src/vnccairoframebuffer.h" line="62"/>
      <field name="parent_class">
        <type name="GVnc.BaseFramebufferClass"
              c:type="VncBaseFramebufferClass"/>
      </field>
      <field name="_vnc_reserved">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="CairoFramebufferPrivate"
            c:type="VncCairoFramebufferPrivate"
            disguised="1">
      <source-position filename="../src/vnccairoframebuffer.h" line="41"/>
    </record>
    <function-macro name="DISPLAY"
                    c:identifier="VNC_DISPLAY"
                    introspectable="0">
      <source-position filename="../src/vncdisplay.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISPLAY_CLASS"
                    c:identifier="VNC_DISPLAY_CLASS"
                    introspectable="0">
      <source-position filename="../src/vncdisplay.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISPLAY_GET_CLASS"
                    c:identifier="VNC_DISPLAY_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/vncdisplay.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Display"
           c:symbol-prefix="display"
           c:type="VncDisplay"
           parent="Gtk.DrawingArea"
           glib:type-name="VncDisplay"
           glib:get-type="vnc_display_get_type"
           glib:type-struct="DisplayClass">
      <source-position filename="../src/vncdisplay.h" line="64"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="vnc_display_new">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="280">Create a new widget capable of connecting to a VNC server
and displaying its contents

The widget will initially be in a disconnected state</doc>
        <source-position filename="../src/vncdisplay.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="288">the new VNC display widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="get_option_entries"
                c:identifier="vnc_display_get_option_entries">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3168">Get the array of command line option entries containing
VNC specific otions</doc>
        <source-position filename="../src/vncdisplay.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3174">the option entries</doc>
          <array c:type="const GOptionEntry*">
            <type name="GLib.OptionEntry" c:type="GOptionEntry"/>
          </array>
        </return-value>
      </function>
      <function name="get_option_group"
                c:identifier="vnc_display_get_option_group">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3146">Get a command line option group containing VNC specific
options.</doc>
        <source-position filename="../src/vncdisplay.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3152">the option group</doc>
          <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
        </return-value>
      </function>
      <virtual-method name="vnc_auth_credential">
        <source-position filename="../src/vncdisplay.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="credList" transfer-ownership="none">
            <type name="GObject.ValueArray" c:type="GValueArray*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="vnc_connected">
        <source-position filename="../src/vncdisplay.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="vnc_disconnected">
        <source-position filename="../src/vncdisplay.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="vnc_initialized">
        <source-position filename="../src/vncdisplay.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="client_cut_text"
              c:identifier="vnc_display_client_cut_text">
        <source-position filename="../src/vncdisplay.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close" c:identifier="vnc_display_close">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1861">Request that the connection to the remote display
is closed. The actual close will complete asynchronously
and the "vnc-disconnected" signal will be emitted once
complete.</doc>
        <source-position filename="../src/vncdisplay.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1863">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="force_grab" c:identifier="vnc_display_force_grab">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="610">If @enable is TRUE, immediately grab the pointer.
If @enable is FALSE, immediately ungrab the pointer.
This overrides any automatic grabs that may have
been done.</doc>
        <source-position filename="../src/vncdisplay.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="612">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="613">TRUE to force pointer grabbing, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection" c:identifier="vnc_display_get_connection">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1893">Get the VNC connection object associated with the
display</doc>
        <source-position filename="../src/vncdisplay.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="1900">the connection object</doc>
          <type name="GVnc.Connection" c:type="VncConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1895">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_depth" c:identifier="vnc_display_get_depth">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2961">Get the desired colour depth</doc>
        <source-position filename="../src/vncdisplay.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2967">the color depth</doc>
          <type name="DisplayDepthColor" c:type="VncDisplayDepthColor"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2963">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_force_size" c:identifier="vnc_display_get_force_size">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2977">Determine whether the widget size is being forced
to match the desktop size</doc>
        <source-position filename="../src/vncdisplay.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2984">TRUE if force size is enabled, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2979">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_grab_keys" c:identifier="vnc_display_get_grab_keys">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2639">Get the current grab key sequence</doc>
        <source-position filename="../src/vncdisplay.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2645">the current grab keys</doc>
          <type name="GrabSequence" c:type="VncGrabSequence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2641">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height" c:identifier="vnc_display_get_height">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2770">Get the height of the remote desktop. This is only
valid after the "vnc-initialized" signal has been
emitted</doc>
        <source-position filename="../src/vncdisplay.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2778">the remote desktop height</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2772">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keyboard_grab"
              c:identifier="vnc_display_get_keyboard_grab">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3096">Determine if the keyboard will be grabbed when the
widget has input focus.</doc>
        <source-position filename="../src/vncdisplay.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3103">TRUE if the keyboard will be grabbed, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3098">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lossy_encoding"
              c:identifier="vnc_display_get_lossy_encoding">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3029">Determine whether lossy framebuffer update encodings
are permitted</doc>
        <source-position filename="../src/vncdisplay.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3036">TRUE if lossy encodings are permitted, FALSE otherwie</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3031">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="vnc_display_get_name">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2788">Get the name of the remote desktop. This is only
valid after the "vnc-initialized" signal has been
emitted</doc>
        <source-position filename="../src/vncdisplay.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2796">the remote desktop name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2790">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="vnc_display_get_pixbuf">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2712">Take a screenshot of the display.</doc>
        <source-position filename="../src/vncdisplay.h" line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2718">a #GdkPixbuf with the screenshot image buffer</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2714">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer_grab"
              c:identifier="vnc_display_get_pointer_grab">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3079">Determine if the mouse pointer will be grabbed
on first click</doc>
        <source-position filename="../src/vncdisplay.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3086">TRUE if the pointer will be grabbed, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3081">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pointer_local"
              c:identifier="vnc_display_get_pointer_local">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3063">Determine if a local pointer will be shown</doc>
        <source-position filename="../src/vncdisplay.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3069">TRUE if a local pointer is shown, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3065">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_only" c:identifier="vnc_display_get_read_only">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3113">Determine if the widget will operate in read-only
mode, denying keyboard/mouse inputs</doc>
        <source-position filename="../src/vncdisplay.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3120">TRUE if in read-only mode, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3115">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scaling" c:identifier="vnc_display_get_scaling">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3011">Determine whether the widget is permitted to
scale the remote desktop to fit the current
widget size.</doc>
        <source-position filename="../src/vncdisplay.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3019">TRUE if scaling is permitted, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3013">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shared_flag"
              c:identifier="vnc_display_get_shared_flag">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3046">Determine if other clients are permitted to
share the VNC connection</doc>
        <source-position filename="../src/vncdisplay.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3053">TRUE if sharing is permittted, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3048">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smoothing" c:identifier="vnc_display_get_smoothing">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2994">Determine whether pixels are smoothly interpolated when
scaling.</doc>
        <source-position filename="../src/vncdisplay.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3001">TRUE if smoothing is enabled, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2996">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width" c:identifier="vnc_display_get_width">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2752">Get the width of the remote desktop. This is only
valid after the "vnc-initialized" signal has been
emitted</doc>
        <source-position filename="../src/vncdisplay.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2760">the remote desktop width</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2754">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_open" c:identifier="vnc_display_is_open">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1845">Check if the connection for the display is currently open</doc>
        <source-position filename="../src/vncdisplay.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="1851">TRUE if open, FALSE if closing/closed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1847">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_pointer_absolute"
              c:identifier="vnc_display_is_pointer_absolute">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="3130">Determine if the pointer is operating in absolute
mode. This is only valid after the "vnc-initialized"
signal has been emitted</doc>
        <source-position filename="../src/vncdisplay.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="3138">TRUE if in absolute mode, FALSE for relative mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="3132">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_addr" c:identifier="vnc_display_open_addr">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1768">Open a socket connection to server identified by @addr.
@addr may refer to either a TCP address (IPv4/6) or
a UNIX socket address. The @hostname provided should
reflect the name of the host that the @addr provides a
connection to, if it is not already available in @addr.
For example, if @addr points to a proxy server, then
@hostname can be used to provide the name of the final
endpoint. This will be used by some authentication
schemes, for example x509 certificate validation
against @hostname.</doc>
        <source-position filename="../src/vncdisplay.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="1785">TRUE if a connection was opened, FALSE if already open</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1770">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1771">the socket address</doc>
            <type name="Gio.SocketAddress" c:type="GSocketAddress*"/>
          </parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1772">the hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_fd" c:identifier="vnc_display_open_fd">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1696">Open a connection using @fd as the transport. If @fd
refers to a TCP connection, it is recommended to use
vnc_display_open_fd_with_hostname instead, to
provide the remote hostname. This allows use of
x509 based authentication which requires a hostname
to be available.</doc>
        <source-position filename="../src/vncdisplay.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="1708">TRUE if a connection was opened, FALSE if already open</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1698">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1699">file descriptor to use for the connection</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_fd_with_hostname"
              c:identifier="vnc_display_open_fd_with_hostname">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1732">Open a connection using @fd as the transport. The
@hostname provided should reflect the name of the
host that the @fd provides a connection to. This
will be used by some authentication schemes, for
example x509 certificate validation against @hostname.</doc>
        <source-position filename="../src/vncdisplay.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="1744">TRUE if a connection was opened, FALSE if already open</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1734">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1735">file descriptor to use for the connection</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1736">the host associated with the connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_host" c:identifier="vnc_display_open_host">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1810">Open a TCP connection to the remote desktop at @host
listening on @port.</doc>
        <source-position filename="../src/vncdisplay.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="1819">TRUE if a connection was opened, FALSE if already open</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1812">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1813">the host name or IP address</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1814">the service name or port number</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_update" c:identifier="vnc_display_request_update">
        <source-position filename="../src/vncdisplay.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_keys" c:identifier="vnc_display_send_keys">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1910">Send keyval click events to the display. Al the
key press events will be sent first and then all
the key release events.

@keyvals should contain the X11 key value constants</doc>
        <source-position filename="../src/vncdisplay.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1912">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="keyvals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1913">Keyval array</doc>
            <array length="1" zero-terminated="0" c:type="const guint*">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
          <parameter name="nkeyvals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1914">Length of keyvals</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_keys_ex" c:identifier="vnc_display_send_keys_ex">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1948">Sends key events to the remote server. @keyvals
should contain X11 key code values. These will
be automatically converted to XT scancodes if
needed

If @kind is VNC_DISPLAY_KEY_EVENT_CLICK then all
the key press events will be sent first, followed
by all the key release events.</doc>
        <source-position filename="../src/vncdisplay.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1950">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="keyvals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1951">Keyval array</doc>
            <array length="1" zero-terminated="0" c:type="const guint*">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
          <parameter name="nkeyvals" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1952">Length of keyvals</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1953">the type of event to send</doc>
            <type name="DisplayKeyEvent" c:type="VncDisplayKeyEvent"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_pointer" c:identifier="vnc_display_send_pointer">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="1988">Move the remote pointer to position (@x, @y) and set the
button state to @button_mask.  This method will only
work if the desktop is using absolute pointer mode. It
will be a no-op if in relative pointer mode.</doc>
        <source-position filename="../src/vncdisplay.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1990">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1991">the desired horizontal position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1992">the desired vertical position</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="button_mask" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="1993">the state of the buttons</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_credential" c:identifier="vnc_display_set_credential">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2553">Sets the value of the authentication credential
@type to the string @data.

@type is one of the VncConnectionCredential enum vlaues</doc>
        <source-position filename="../src/vncdisplay.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2564">TRUE if an error occurs, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2555">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2556">the authentication credential type</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2557">the value associated with the credential</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_depth" c:identifier="vnc_display_set_depth">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2936">Set the desired colour depth. Higher quality colour
depths will require greater network bandwidth. The
colour depth must be set prior to connecting to the
remote server</doc>
        <source-position filename="../src/vncdisplay.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2938">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2939">the desired colour depth</doc>
            <type name="DisplayDepthColor" c:type="VncDisplayDepthColor"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_force_size" c:identifier="vnc_display_set_force_size">
        <source-position filename="../src/vncdisplay.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_grab_keys" c:identifier="vnc_display_set_grab_keys">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2611">Set the sequence of keys that must be pressed to
activate keyborad and pointer grab</doc>
        <source-position filename="../src/vncdisplay.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2613">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="seq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2614">the new grab sequence</doc>
            <type name="GrabSequence" c:type="VncGrabSequence*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keyboard_grab"
              c:identifier="vnc_display_set_keyboard_grab">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2653">Set whether the widget will grab the keyboard when it
has focus. Grabbing the keyboard allows it to intercept
special key sequences, ensuring they get sent to the
remote desktop, rather than intepreted locally.</doc>
        <source-position filename="../src/vncdisplay.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2655">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2656">TRUE to enable keyboard grab, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lossy_encoding"
              c:identifier="vnc_display_set_lossy_encoding">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2824">Set whether the client is willing to accept lossy
framebuffer update encodings. Lossy encodings can
improve performance by lowering network bandwidth
requirements, with a cost that the display received
by the client will not be pixel perfect</doc>
        <source-position filename="../src/vncdisplay.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2826">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2827">TRUE to permit lossy encodings, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pointer_grab"
              c:identifier="vnc_display_set_pointer_grab">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2593">Set whether the widget will automatically grab the mouse
pointer upon a button click</doc>
        <source-position filename="../src/vncdisplay.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2595">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2596">TRUE to enable automatic pointer grab, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pointer_local"
              c:identifier="vnc_display_set_pointer_local">
        <source-position filename="../src/vncdisplay.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_only" c:identifier="vnc_display_set_read_only">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2673">Set whether the widget is running in read-only mode. In
read-only mode, keyboard and mouse events will not be
sent to the remote desktop server. The widget will merely
display activity from the server.</doc>
        <source-position filename="../src/vncdisplay.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2675">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2676">TRUE to enable read-only mode, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scaling" c:identifier="vnc_display_set_scaling">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2859">Set whether the remote desktop contents is automatically
scaled to fit the available widget size, or whether it
will be rendered at 1:1 size</doc>
        <source-position filename="../src/vncdisplay.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncdisplay.c"
               line="2868">TRUE always</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2861">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2862">TRUE to allow scaling the desktop to fit, FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shared_flag"
              c:identifier="vnc_display_set_shared_flag">
        <doc xml:space="preserve"
             filename="../src/vncdisplay.c"
             line="2842">Set the shared state for the connection. A TRUE value
allow allow this client to co-exist with other existing
clients. A FALSE value will cause other clients to be
dropped</doc>
        <source-position filename="../src/vncdisplay.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2844">the VNC display widget</doc>
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="shared" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncdisplay.c"
                 line="2845">the new sharing state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smoothing" c:identifier="vnc_display_set_smoothing">
        <source-position filename="../src/vncdisplay.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="obj" transfer-ownership="none">
            <type name="Display" c:type="VncDisplay*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection" transfer-ownership="none">
        <type name="GVnc.Connection"/>
      </property>
      <property name="depth"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="DisplayDepthColor"/>
      </property>
      <property name="force-size"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="grab-keyboard"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="grab-keys"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="GrabSequence"/>
      </property>
      <property name="grab-pointer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="height" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="local-pointer"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lossy-encoding"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-only"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="scaling"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="shared-flag"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smoothing"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="width" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="Gtk.DrawingArea" c:type="GtkDrawingArea"/>
      </field>
      <field name="priv">
        <type name="DisplayPrivate" c:type="VncDisplayPrivate*"/>
      </field>
      <glib:signal name="vnc-auth-credential" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.ValueArray"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="vnc-auth-failure" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="vnc-auth-unsupported" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="vnc-bell" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-connected" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-desktop-resize" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="vnc-disconnected" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-error" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="vnc-initialized" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-keyboard-grab" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-keyboard-ungrab" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-pointer-grab" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-pointer-ungrab" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="vnc-server-cut-text" when="last" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DisplayClass"
            c:type="VncDisplayClass"
            glib:is-gtype-struct-for="Display">
      <source-position filename="../src/vncdisplay.h" line="64"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
      <field name="vnc_connected">
        <callback name="vnc_connected">
          <source-position filename="../src/vncdisplay.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="VncDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="vnc_initialized">
        <callback name="vnc_initialized">
          <source-position filename="../src/vncdisplay.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="VncDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="vnc_disconnected">
        <callback name="vnc_disconnected">
          <source-position filename="../src/vncdisplay.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="VncDisplay*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="vnc_auth_credential">
        <callback name="vnc_auth_credential">
          <source-position filename="../src/vncdisplay.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="display" transfer-ownership="none">
              <type name="Display" c:type="VncDisplay*"/>
            </parameter>
            <parameter name="credList" transfer-ownership="none">
              <type name="GObject.ValueArray" c:type="GValueArray*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DisplayCredential"
                 glib:type-name="VncDisplayCredential"
                 glib:get-type="vnc_display_credential_get_type"
                 c:type="VncDisplayCredential">
      <member name="password"
              value="0"
              c:identifier="VNC_DISPLAY_CREDENTIAL_PASSWORD"
              glib:nick="password">
      </member>
      <member name="username"
              value="1"
              c:identifier="VNC_DISPLAY_CREDENTIAL_USERNAME"
              glib:nick="username">
      </member>
      <member name="clientname"
              value="2"
              c:identifier="VNC_DISPLAY_CREDENTIAL_CLIENTNAME"
              glib:nick="clientname">
      </member>
    </enumeration>
    <enumeration name="DisplayDepthColor"
                 glib:type-name="VncDisplayDepthColor"
                 glib:get-type="vnc_display_depth_color_get_type"
                 c:type="VncDisplayDepthColor">
      <member name="default"
              value="0"
              c:identifier="VNC_DISPLAY_DEPTH_COLOR_DEFAULT"
              glib:nick="default">
      </member>
      <member name="full"
              value="1"
              c:identifier="VNC_DISPLAY_DEPTH_COLOR_FULL"
              glib:nick="full">
      </member>
      <member name="medium"
              value="2"
              c:identifier="VNC_DISPLAY_DEPTH_COLOR_MEDIUM"
              glib:nick="medium">
      </member>
      <member name="low"
              value="3"
              c:identifier="VNC_DISPLAY_DEPTH_COLOR_LOW"
              glib:nick="low">
      </member>
      <member name="ultra_low"
              value="4"
              c:identifier="VNC_DISPLAY_DEPTH_COLOR_ULTRA_LOW"
              glib:nick="ultra-low">
      </member>
    </enumeration>
    <enumeration name="DisplayKeyEvent"
                 glib:type-name="VncDisplayKeyEvent"
                 glib:get-type="vnc_display_key_event_get_type"
                 c:type="VncDisplayKeyEvent">
      <member name="press"
              value="1"
              c:identifier="VNC_DISPLAY_KEY_EVENT_PRESS"
              glib:nick="press">
      </member>
      <member name="release"
              value="2"
              c:identifier="VNC_DISPLAY_KEY_EVENT_RELEASE"
              glib:nick="release">
      </member>
      <member name="click"
              value="3"
              c:identifier="VNC_DISPLAY_KEY_EVENT_CLICK"
              glib:nick="click">
      </member>
    </enumeration>
    <record name="DisplayPrivate" c:type="VncDisplayPrivate" disguised="1">
      <source-position filename="../src/vncdisplay.h" line="42"/>
    </record>
    <record name="GrabSequence"
            c:type="VncGrabSequence"
            glib:type-name="VncGrabSequence"
            glib:get-type="vnc_grab_sequence_get_type"
            c:symbol-prefix="grab_sequence">
      <source-position filename="../src/vncgrabsequence.h" line="39"/>
      <field name="nkeysyms" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="keysyms" writable="1">
        <type name="guint" c:type="guint*"/>
      </field>
      <constructor name="new" c:identifier="vnc_grab_sequence_new">
        <doc xml:space="preserve"
             filename="../src/vncgrabsequence.c"
             line="44">Creates a new grab sequence from a list of keysym values</doc>
        <source-position filename="../src/vncgrabsequence.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncgrabsequence.c"
               line="51">a new grab sequence object</doc>
          <type name="GrabSequence" c:type="VncGrabSequence*"/>
        </return-value>
        <parameters>
          <parameter name="nkeysyms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="46">length of @keysyms</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="keysyms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="47">the keysym values</doc>
            <array length="0" zero-terminated="0" c:type="guint*">
              <type name="guint" c:type="guint"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_string"
                   c:identifier="vnc_grab_sequence_new_from_string">
        <doc xml:space="preserve"
             filename="../src/vncgrabsequence.c"
             line="66">Creates a new grab sequence from a list of keysym names

The returned struct must be freed by calling
vnc_grab_sequence_free when no longer required</doc>
        <source-position filename="../src/vncgrabsequence.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncgrabsequence.c"
               line="75">a new grab sequence object</doc>
          <type name="GrabSequence" c:type="VncGrabSequence*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="68">string of keysym names</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="as_string" c:identifier="vnc_grab_sequence_as_string">
        <doc xml:space="preserve"
             filename="../src/vncgrabsequence.c"
             line="142">Convert the grab sequence to a string of keysym names</doc>
        <source-position filename="../src/vncgrabsequence.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncgrabsequence.c"
               line="148">the grab sequence as a string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="144">the grab sequence</doc>
            <type name="GrabSequence" c:type="VncGrabSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="vnc_grab_sequence_copy">
        <doc xml:space="preserve"
             filename="../src/vncgrabsequence.c"
             line="103">Allocate a new grab sequence struct, initalizing it
with a copy of data  from @sequence

The returned struct must be freed by calling
vnc_grab_sequence_free when no longer required</doc>
        <source-position filename="../src/vncgrabsequence.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/vncgrabsequence.c"
               line="113">the grab sequence</doc>
          <type name="GrabSequence" c:type="VncGrabSequence*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="105">the grab sequence</doc>
            <type name="GrabSequence" c:type="VncGrabSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="vnc_grab_sequence_free">
        <doc xml:space="preserve"
             filename="../src/vncgrabsequence.c"
             line="128">Release memory associated with the grab sequence
@sequence.</doc>
        <source-position filename="../src/vncgrabsequence.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="130">the grab sequence</doc>
            <type name="GrabSequence" c:type="VncGrabSequence*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth" c:identifier="vnc_grab_sequence_get_nth">
        <doc xml:space="preserve"
             filename="../src/vncgrabsequence.c"
             line="165">Obtain the nth key symbol in the sequence</doc>
        <source-position filename="../src/vncgrabsequence.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/vncgrabsequence.c"
               line="172">the nth key symbol</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="sequence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="167">the grab sequence</doc>
            <type name="GrabSequence" c:type="VncGrabSequence*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/vncgrabsequence.c"
                 line="168">the index of the key symbol to obtain</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="IS_CAIRO_FRAMEBUFFER"
                    c:identifier="VNC_IS_CAIRO_FRAMEBUFFER"
                    introspectable="0">
      <source-position filename="../src/vnccairoframebuffer.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CAIRO_FRAMEBUFFER_CLASS"
                    c:identifier="VNC_IS_CAIRO_FRAMEBUFFER_CLASS"
                    introspectable="0">
      <source-position filename="../src/vnccairoframebuffer.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DISPLAY"
                    c:identifier="VNC_IS_DISPLAY"
                    introspectable="0">
      <source-position filename="../src/vncdisplay.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DISPLAY_CLASS"
                    c:identifier="VNC_IS_DISPLAY_CLASS"
                    introspectable="0">
      <source-position filename="../src/vncdisplay.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
  </namespace>
</repository>
